{
  CollectClassData cd=collect(Two.class);
  assertEquals(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC,cd.getAccess() & ~Opcodes.ACC_SUPER);
  assertEquals(ClassType.Nested,cd.getClassType());
  List<CollectFieldData> fields=cd.getFields();
  assertEquals(2,fields.size());
  CollectFieldData field=fields.get(0);
  assertEquals("field",field.getName());
  assertEquals("Ljava/lang/String;",field.getDesc());
  List<CollectAnnotationData> annotations=field.getAnnotations();
  assertEquals(0,annotations.size());
  field=fields.get(1);
  assertEquals("annotatedField",field.getName());
  assertEquals("Ljava/lang/String;",field.getDesc());
  annotations=field.getAnnotations();
  assertEquals(1,annotations.size());
  AnnotationData annotation=annotations.get(0).getAnnotation();
  assertEquals("Lcom/google/gwt/dev/javac/typemodel/test/TestAnnotation;",annotation.getDesc());
  assertEquals("field",annotation.getValues().get("value"));
  assertEquals(0,cd.getInterfaceInternalNames().length);
  annotations=cd.getAnnotations();
  assertEquals(1,annotations.size());
  annotation=annotations.get(0).getAnnotation();
  assertEquals("Lcom/google/gwt/dev/javac/typemodel/test/PrimitiveValuesAnnotation;",annotation.getDesc());
  assertEquals(Byte.valueOf((byte)42),annotation.getValues().get("b"));
  assertEquals(42,annotation.getValues().get("i"));
  assertEquals("java/lang/Object",cd.getSuperInternalName());
  assertEquals("CollectClassDataTest.Two",cd.getNestedSourceName());
  List<CollectMethodData> methods=cd.getMethods();
  assertEquals(3,methods.size());
  CollectMethodData method=methods.get(0);
  Type[] argTypes=method.getArgTypes();
  String[] argNames=method.getArgNames();
  assertEquals("<init>",method.getName());
  assertEquals(1,argTypes.length);
  assertEquals(1,argNames.length);
  assertEquals(1,method.getArgAnnotations().length);
  assertEquals(0,method.getAnnotations().size());
  assertEquals(0,method.getExceptions().length);
  method=methods.get(1);
  argTypes=method.getArgTypes();
  argNames=method.getArgNames();
  assertEquals("foo",method.getName());
  assertEquals(1,argTypes.length);
  assertEquals("int",argTypes[0].getClassName());
  assertEquals(1,argNames.length);
  assertEquals("a",argNames[0]);
  assertEquals(1,method.getArgAnnotations().length);
  assertEquals(0,method.getArgAnnotations()[0].size());
  assertEquals(1,method.getAnnotations().size());
  assertEquals(1,method.getExceptions().length);
  method=methods.get(2);
  argTypes=method.getArgTypes();
  argNames=method.getArgNames();
  assertEquals("<init>",method.getName());
  assertEquals(2,argTypes.length);
  assertEquals("int",argTypes[0].getClassName());
  assertEquals("java.lang.String",argTypes[1].getClassName());
  assertEquals(2,argNames.length);
  assertEquals("a",argNames[0]);
  assertEquals("b",argNames[1]);
  assertEquals(2,method.getArgAnnotations().length);
  assertEquals(0,method.getArgAnnotations()[0].size());
  assertEquals(0,method.getArgAnnotations()[1].size());
  assertEquals(0,method.getAnnotations().size());
  assertEquals(0,method.getExceptions().length);
}
