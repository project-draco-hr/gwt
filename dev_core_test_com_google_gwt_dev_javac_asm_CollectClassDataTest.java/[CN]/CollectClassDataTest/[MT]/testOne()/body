{
  CollectClassData cd=collect(One.class);
  assertEquals(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC,cd.getAccess() & ~Opcodes.ACC_SUPER);
  assertEquals(ClassType.Nested,cd.getClassType());
  assertEquals(0,cd.getFields().size());
  assertEquals(0,cd.getInterfaces().length);
  assertEquals(0,cd.getAnnotations().size());
  assertEquals("com/google/gwt/dev/asm/commons/EmptyVisitor",cd.getSuperName());
  List<CollectMethodData> methods=cd.getMethods();
  assertEquals(2,methods.size());
  CollectMethodData method=methods.get(0);
  Type[] argTypes=method.getArgTypes();
  String[] argNames=method.getArgNames();
  assertEquals("<init>",method.getName());
  assertEquals(0,argTypes.length);
  assertEquals(0,argNames.length);
  assertEquals(0,method.getArgAnnotations().length);
  assertEquals(0,method.getAnnotations().size());
  assertEquals(0,method.getExceptions().length);
  method=methods.get(1);
  argTypes=method.getArgTypes();
  argNames=method.getArgNames();
  assertEquals("visitAnnotation",method.getName());
  assertEquals(2,argTypes.length);
  assertEquals("java.lang.String",argTypes[0].getClassName());
  assertEquals("boolean",argTypes[1].getClassName());
  assertEquals(2,argNames.length);
  assertEquals("desc",argNames[0]);
  assertEquals("visible",argNames[1]);
  assertEquals(2,method.getArgAnnotations().length);
  assertEquals(0,method.getArgAnnotations()[0].size());
  assertEquals(0,method.getArgAnnotations()[1].size());
  assertEquals(0,method.getAnnotations().size());
  assertEquals(0,method.getExceptions().length);
}
