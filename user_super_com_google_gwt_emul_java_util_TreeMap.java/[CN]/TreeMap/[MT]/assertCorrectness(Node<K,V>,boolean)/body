{
  if (tree == null) {
    return 0;
  }
  if (isRed && tree.isRed) {
    throw new RuntimeException("Two red nodes adjacent");
  }
  Node<K,V> leftNode=tree.child[LEFT];
  if (leftNode != null && cmp.compare(leftNode.getKey(),tree.getKey()) > 0) {
    throw new RuntimeException("Left child " + leftNode + " larger than "+ tree);
  }
  Node<K,V> rightNode=tree.child[RIGHT];
  if (rightNode != null && cmp.compare(rightNode.getKey(),tree.getKey()) < 0) {
    throw new RuntimeException("Right child " + rightNode + " smaller than "+ tree);
  }
  int leftHeight=assertCorrectness(leftNode,tree.isRed);
  int rightHeight=assertCorrectness(rightNode,tree.isRed);
  if (leftHeight != 0 && rightHeight != 0 && leftHeight != rightHeight) {
    throw new RuntimeException("Black heights don't match");
  }
  return tree.isRed ? leftHeight : leftHeight + 1;
}
