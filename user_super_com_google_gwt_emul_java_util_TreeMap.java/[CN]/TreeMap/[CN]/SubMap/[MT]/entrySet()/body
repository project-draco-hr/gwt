{
  return new AbstractSet<Entry<K,V>>(){
    @SuppressWarnings("unchecked") @Override public boolean contains(    Object o){
      if (!(o instanceof Map.Entry)) {
        return false;
      }
      Map.Entry<K,V> entry=(Entry<K,V>)o;
      K key=entry.getKey();
      if (!inRange(key)) {
        return false;
      }
      Entry<K,V> lookupEntry=getEntry(key);
      return lookupEntry != null && Utility.equalsWithNullCheck(lookupEntry.getValue(),entry.getValue());
    }
    @Override public Iterator<Entry<K,V>> iterator(){
      return new EntryIterator(type,fromKey,toKey);
    }
    @SuppressWarnings("unchecked") @Override public boolean remove(    Object o){
      if (!(o instanceof Map.Entry)) {
        return false;
      }
      Map.Entry<K,V> entry=(Map.Entry<K,V>)o;
      if (!inRange(entry.getKey())) {
        return false;
      }
      State<V> state=new State<V>();
      state.matchValue=true;
      state.value=entry.getValue();
      return removeWithState(entry.getKey(),state);
    }
    @Override public int size(){
      int n=0;
      Iterator<Entry<K,V>> it=iterator();
      while (it.hasNext()) {
        it.next();
        n++;
      }
      return n;
    }
  }
;
}
