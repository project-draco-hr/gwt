{
  List<OperationMessage> operations=req.getOperations();
  if (operations == null) {
    return;
  }
  for (  final OperationMessage operation : operations) {
    String payloadId=operation.getOperation().equals(WriteOperation.PERSIST) ? IdUtil.ephemeralId(operation.getClientId(),operation.getTypeToken()) : IdUtil.persistedId(operation.getServerId(),operation.getTypeToken());
    AutoBean<? extends EntityProxy> bean=state.getBeanForPayload(payloadId);
    bean.setTag(Constants.ENCODED_VERSION_PROPERTY,operation.getVersion());
    final Object domain=bean.getTag(Constants.DOMAIN_OBJECT);
    if (domain != null) {
      final Map<String,Splittable> flatValueMap=operation.getPropertyMap();
      if (flatValueMap != null) {
        bean.accept(new AutoBeanVisitor(){
          @Override public boolean visitReferenceProperty(          String propertyName,          AutoBean<?> value,          PropertyContext ctx){
            if (flatValueMap.containsKey(propertyName)) {
              Class<?> elementType=ctx instanceof CollectionPropertyContext ? ((CollectionPropertyContext)ctx).getElementType() : null;
              Object newValue=EntityCodex.decode(state,ctx.getType(),elementType,flatValueMap.get(propertyName));
              Object resolved=state.getResolver().resolveDomainValue(newValue,false);
              service.setProperty(domain,propertyName,service.getDomainClass(ctx.getType()),resolved);
            }
            return false;
          }
          @Override public boolean visitValueProperty(          String propertyName,          Object value,          PropertyContext ctx){
            if (flatValueMap.containsKey(propertyName)) {
              Splittable split=flatValueMap.get(propertyName);
              Object newValue=ValueCodex.decode(ctx.getType(),split);
              Object resolved=state.getResolver().resolveDomainValue(newValue,false);
              service.setProperty(domain,propertyName,ctx.getType(),resolved);
            }
            return false;
          }
        }
);
      }
    }
  }
}
