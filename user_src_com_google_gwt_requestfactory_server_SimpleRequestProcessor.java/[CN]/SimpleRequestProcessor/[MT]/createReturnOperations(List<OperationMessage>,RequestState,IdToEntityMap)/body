{
  for (  Map.Entry<SimpleProxyId<?>,AutoBean<? extends BaseProxy>> entry : toProcess.entrySet()) {
    SimpleProxyId<?> id=entry.getKey();
    AutoBean<? extends BaseProxy> bean=entry.getValue();
    Object domainObject=bean.getTag(Constants.DOMAIN_OBJECT);
    WriteOperation writeOperation;
    if (id.isEphemeral()) {
      returnState.getResolver().resolveClientValue(domainObject,id.getProxyClass(),Collections.<String>emptySet());
    }
    if (id.isEphemeral() || id.isSynthetic() || domainObject == null) {
      writeOperation=null;
    }
 else     if (!service.isLive(domainObject)) {
      writeOperation=WriteOperation.DELETE;
    }
 else     if (id.wasEphemeral()) {
      writeOperation=WriteOperation.PERSIST;
    }
 else {
      writeOperation=WriteOperation.UPDATE;
    }
    Splittable version=null;
    if (writeOperation == WriteOperation.PERSIST || writeOperation == WriteOperation.UPDATE) {
      Object domainVersion=service.getVersion(domainObject);
      if (domainVersion == null) {
        throw new UnexpectedException("The persisted entity with id " + service.getId(domainObject) + " has a null version",null);
      }
      version=returnState.flatten(domainVersion);
    }
    boolean inResponse=bean.getTag(Constants.IN_RESPONSE) != null;
    if (WriteOperation.UPDATE.equals(writeOperation) && !inResponse) {
      String previousVersion=bean.<String>getTag(Constants.VERSION_PROPERTY_B64);
      if (version != null && previousVersion != null && version.equals(fromBase64(previousVersion))) {
        continue;
      }
    }
    OperationMessage op=FACTORY.operation().as();
    if (id.wasEphemeral()) {
      op.setClientId(id.getClientId());
    }
    op.setOperation(writeOperation);
    if (inResponse) {
      Map<String,Splittable> propertyMap=new LinkedHashMap<String,Splittable>();
      Map<String,Object> diff=AutoBeanUtils.getAllProperties(bean);
      for (      Map.Entry<String,Object> d : diff.entrySet()) {
        Object value=d.getValue();
        if (value != null) {
          propertyMap.put(d.getKey(),EntityCodex.encode(returnState,value));
        }
      }
      op.setPropertyMap(propertyMap);
    }
    if (!id.isEphemeral() && !id.isSynthetic()) {
      op.setServerId(toBase64(id.getServerId()));
    }
    if (id.isSynthetic()) {
      op.setStrength(Strength.SYNTHETIC);
      op.setSyntheticId(id.getSyntheticId());
    }
 else     if (id.isEphemeral()) {
      op.setStrength(Strength.EPHEMERAL);
    }
    op.setTypeToken(service.resolveTypeToken(id.getProxyClass()));
    if (version != null) {
      op.setVersion(toBase64(version.getPayload()));
    }
    operations.add(op);
  }
}
