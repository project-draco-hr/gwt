{
  if (domainEntity == null) {
    return null;
  }
  String flatId=toBase64(service.getFlatId(state,domainEntity));
  Class<? extends EntityProxy> proxyType=service.getClientType(domainEntity.getClass()).asSubclass(EntityProxy.class);
  SimpleEntityProxyId<? extends EntityProxy> id=state.idFactory.getId(proxyType,flatId,state.getClientId(domainEntity));
  AutoBean<? extends EntityProxy> bean=state.getBeanForPayload(id);
  bean.setTag(IN_RESPONSE,true);
  bean.accept(new AutoBeanVisitor(){
    @Override public boolean visitReferenceProperty(    String propertyName,    AutoBean<?> value,    PropertyContext ctx){
      String newPrefix=(prefix.length() > 0 ? (prefix + ".") : "") + propertyName;
      Class<?> elementType=ctx instanceof CollectionPropertyContext ? ((CollectionPropertyContext)ctx).getElementType() : null;
      boolean shouldSend=propertyRefs.contains(newPrefix) || elementType != null && !state.isEntityType(elementType);
      if (!shouldSend) {
        return false;
      }
      Object domainValue=service.getProperty(domainEntity,propertyName);
      if (domainValue == null) {
        return false;
      }
      Object resolved=resolveClientValue(state,domainValue,propertyRefs,newPrefix);
      ctx.set(ctx.getType().cast(resolved));
      return false;
    }
    @Override public boolean visitValueProperty(    String propertyName,    Object value,    PropertyContext ctx){
      value=service.getProperty(domainEntity,propertyName);
      ctx.set(ctx.getType().cast(value));
      return false;
    }
  }
);
  bean.setTag(Constants.ENCODED_VERSION_PROPERTY,service.getVersion(domainEntity));
  return proxyType.cast(bean.as());
}
