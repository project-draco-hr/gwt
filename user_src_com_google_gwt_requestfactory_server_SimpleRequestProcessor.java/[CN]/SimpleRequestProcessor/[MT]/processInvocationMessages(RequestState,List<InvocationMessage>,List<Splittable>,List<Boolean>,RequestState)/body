{
  for (  InvocationMessage invocation : invlist) {
    try {
      String[] operation=invocation.getOperation().split("::");
      Method contextMethod=service.resolveRequestContextMethod(operation[0],operation[1]);
      if (contextMethod == null) {
        throw new UnexpectedException("Cannot resolve operation " + invocation.getOperation(),null);
      }
      Method domainMethod=service.resolveDomainMethod(contextMethod);
      if (domainMethod == null) {
        throw new UnexpectedException("Cannot resolve domain method " + invocation.getOperation(),null);
      }
      List<Object> args=decodeInvocationArguments(state,invocation,contextMethod,domainMethod);
      if (service.requiresServiceLocator(contextMethod,domainMethod)) {
        Object serviceInstance=service.createServiceInstance(contextMethod,domainMethod);
        args.add(0,serviceInstance);
      }
      Object returnValue=service.invoke(domainMethod,args.toArray());
      Type requestReturnType=service.getRequestReturnType(contextMethod);
      returnValue=state.getResolver().resolveClientValue(returnValue,requestReturnType,invocation.getPropertyRefs());
      results.add(EntityCodex.encode(returnState,returnValue));
      success.add(true);
    }
 catch (    ReportableException e) {
      results.add(AutoBeanCodex.encode(createFailureMessage(e)));
      success.add(false);
    }
  }
}
