{
  for (  JMethod method : ownerClass.getUiHandlers()) {
    String boundMethod=method.getName();
    if (method.isPrivate()) {
      logger.die("Method '%s' cannot be private.",boundMethod);
    }
    JParameter[] parameters=method.getParameters();
    if (parameters.length != 1) {
      logger.die("Method '%s' must have a single event parameter defined.",boundMethod);
    }
    JClassType eventType=parameters[0].getType().isClass();
    if (eventType == null) {
      logger.die("Parameter type is not a class.");
    }
    JClassType handlerType=getHandlerForEvent(eventType);
    if (handlerType == null) {
      logger.die("Parameter '%s' is not an event (subclass of GwtEvent).",eventType.getName());
    }
    String handlerVarName=HANDLER_BASE_NAME + (++varCounter);
    writeHandler(writer,uiOwner,handlerVarName,handlerType,eventType,boundMethod);
    UiHandler annotation=method.getAnnotation(UiHandler.class);
    for (    String objectName : annotation.value()) {
      FieldWriter fieldWriter=fieldManager.lookup(objectName);
      if (fieldWriter == null) {
        logger.die(("Method '%s' can not be bound. You probably missed ui:field='%s' " + "in the template."),boundMethod,objectName);
      }
      JClassType objectType=fieldWriter.getInstantiableType();
      if (objectType.isGenericType() != null) {
        objectType=tryEnhancingTypeInfo(objectName,objectType);
      }
      JMethod addHandlerMethodType=getAddHandlerMethodForObject(objectType,handlerType);
      if (addHandlerMethodType == null) {
        logger.die("Field '%s' does not have an 'add%s' method associated.",objectName,handlerType.getName());
      }
      writeAddHandler(writer,fieldManager,handlerVarName,addHandlerMethodType.getName(),objectName);
    }
  }
}
