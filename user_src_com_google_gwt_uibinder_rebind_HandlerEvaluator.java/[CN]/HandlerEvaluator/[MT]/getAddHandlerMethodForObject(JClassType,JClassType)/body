{
  JMethod handlerMethod=null;
  JMethod alternativeHandlerMethod=null;
  JMethod alternativeHandlerMethod2=null;
  for (  JMethod method : objectType.getInheritableMethods()) {
    JClassType returnClassType=method.getReturnType().isClassOrInterface();
    if (returnClassType != null && handlerRegistrationJClass.isAssignableFrom(returnClassType)) {
      JParameter[] parameters=method.getParameters();
      if (parameters.length != 1) {
        continue;
      }
      JClassType methodParam=parameters[0].getType().isClassOrInterface();
      if (methodParam == null) {
        continue;
      }
      if (handlerType.equals(methodParam)) {
        if (handlerMethod != null) {
          logger.die(("This handler cannot be generated. Methods '%s' and '%s' are " + "ambiguous. Which one to pick?"),method,handlerMethod);
        }
        handlerMethod=method;
        continue;
      }
      if (handlerType.isAssignableFrom(methodParam)) {
        alternativeHandlerMethod=method;
      }
 else       if (handlerType.isParameterized() != null && objectType.isGenericType() != null) {
        if (methodParam.getErasedType().equals(handlerType.isParameterized().getErasedType())) {
          alternativeHandlerMethod2=method;
        }
      }
    }
  }
  return (handlerMethod != null) ? handlerMethod : (alternativeHandlerMethod != null) ? alternativeHandlerMethod : alternativeHandlerMethod2;
}
