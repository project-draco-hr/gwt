{
  if (!shouldContinue()) {
    return;
  }
  long offset=rand.nextInt(60 * 60 * 24* 90) * 1000L;
  long millis=new Date().getTime() - offset;
  Date created=new Date(millis);
  boolean travel=rand.nextInt(10) == 0;
  int days=1;
  String purpose, notes;
  if (travel) {
    days=rand.nextInt(10) + 1;
    if (rand.nextInt(5) == 0) {
      int index1=rand.nextInt(FULLCITIES.length);
      int index2=index1;
      while (index2 == index1) {
        index2=rand.nextInt(FULLCITIES.length);
      }
      purpose="Travel from " + FULLCITIES[index1] + " to "+ FULLCITIES[index2];
    }
 else {
      int index1=rand.nextInt(CITIES.length);
      int index2=index1;
      while (index2 == index1) {
        index2=rand.nextInt(CITIES.length);
      }
      purpose="Travel from " + CITIES[index1] + " to "+ CITIES[index2];
    }
switch (rand.nextInt(10)) {
case 0:
      notes="Travel for " + days + " days";
    break;
case 1:
  notes=days + " nights";
break;
case 2:
notes=days + " day trip";
break;
default :
notes="";
break;
}
}
 else {
purpose=getPurpose();
notes=NOTES[rand.nextInt(NOTES.length)];
}
ReportDTO report=new ReportDTO();
report.approvedSupervisorKey=supervisorId;
report.created=created;
report.department=DEPARTMENTS[department];
report.notes=notes;
report.purpose=purpose;
report.reporterKey=employeeId;
long id=storeReport(report);
if (travel) {
days=rand.nextInt(4) + 1;
int index1=rand.nextInt(CITIES.length);
int index2=index1;
while (index2 == index1) {
index2=rand.nextInt(CITIES.length);
}
makeExpenseDetail(id,new Date(millis - days * MILLIS_PER_DAY),"Air Travel","Outbound flight",amount(COST_AIRFARE));
makeExpenseDetail(id,new Date(millis - MILLIS_PER_DAY / 2),"Air Travel","Return flight",amount(COST_AIRFARE));
for (int i=0; i < days; i++) {
makeExpenseDetail(id,new Date(millis - (days - i) * MILLIS_PER_DAY - 10 * MILLIS_PER_HOUR),"Dining","Breakfast",amount(COST_BREAKFAST));
makeExpenseDetail(id,new Date(millis - (days - i) * MILLIS_PER_DAY - 6 * MILLIS_PER_HOUR),"Dining","Lunch",amount(COST_LUNCH));
makeExpenseDetail(id,new Date(millis - (days - i) * MILLIS_PER_DAY - 2 * MILLIS_PER_HOUR),"Dining","Dinner",amount(COST_DINNER));
makeExpenseDetail(id,new Date(millis - (days - i) * MILLIS_PER_DAY),"Lodging","Hotel",amount(COST_HOTEL));
}
}
 else {
int numExpenses=rand.nextInt(3) + 1;
for (int i=0; i < numExpenses; i++) {
int index=rand.nextInt(CATEGORIES.length);
long detailOffset=rand.nextInt(60 * 60 * 24* days) * 1000L;
Date date=new Date(created.getTime() - detailOffset);
makeExpenseDetail(id,date,CATEGORIES[index],DESCRIPTIONS[index],amount(COST_SUNDRY));
}
}
++numReports;
if ((numReports % 10000) == 0) {
System.out.println("Emitted " + numReports + " reports");
}
}
