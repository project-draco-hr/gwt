{
  JMethod proxyMethod=requestMethod.getDeclarationMethod();
  Class<?> domainType=entityBuilder.peek().getProxyFor();
  Method domainMethod=validateExistsAndNotOverriden(proxyMethod,domainType,true);
  if (domainMethod == null) {
    return false;
  }
  boolean isGetter=proxyMethod.getName().startsWith("get");
  if (isGetter) {
    String returnTypeName=domainMethod.getReturnType().getName();
    String propertyTypeName=requestMethod.isCollectionType() || requestMethod.isValueType() ? requestMethod.getDataType().getQualifiedBinaryName() : requestMethod.getEntityType().getProxyFor().getName();
    if (!returnTypeName.equals(propertyTypeName)) {
      poison("Method %s.%s return type %s does not match return type %s " + " of method %s.%s",domainType.getName(),domainMethod.getName(),returnTypeName,propertyTypeName,proxyMethod.getEnclosingType().getName(),proxyMethod.getName());
      return false;
    }
  }
  JParameter[] proxyParams=proxyMethod.getParameters();
  Class<?>[] domainParams=domainMethod.getParameterTypes();
  if (proxyParams.length != domainParams.length) {
    poison("Method %s.%s parameter mismatch with %s.%s",proxyMethod.getEnclosingType().getName(),proxyMethod.getName(),domainType.getName(),domainMethod.getName());
    return false;
  }
  for (int i=0; i < proxyParams.length; i++) {
    JType proxyParam=proxyParams[i].getType();
    Class<?> domainParam=domainParams[i];
    if (!validateProxyAndDomainTypeEquals(proxyParam,domainParam,i,methodLocation(proxyMethod),methodLocation(domainMethod))) {
      poison("Parameter %d of %s.%s doesn't match method %s.%s",i,proxyMethod.getEnclosingType().getName(),proxyMethod.getName(),domainType.getName(),domainMethod.getName());
      return false;
    }
  }
  return true;
}
