{
  skipSpace(text,pos);
  int start=pos[0];
  char ch=part.text.charAt(0);
  int value=-1;
  if (isNumeric(part)) {
    if (digitCount > 0) {
      if ((start + digitCount) > text.length()) {
        return false;
      }
      value=parseInt(text.substring(0,start + digitCount),pos);
    }
 else {
      value=parseInt(text,pos);
    }
  }
switch (ch) {
case 'G':
    value=matchString(text,start,dateTimeConstants.eras(),pos);
  cal.setEra(value);
return true;
case 'M':
return subParseMonth(text,pos,cal,value,start);
case 'L':
return subParseStandaloneMonth(text,pos,cal,value,start);
case 'E':
return subParseDayOfWeek(text,pos,start,cal);
case 'c':
return subParseStandaloneDay(text,pos,start,cal);
case 'a':
value=matchString(text,start,dateTimeConstants.ampms(),pos);
cal.setAmpm(value);
return true;
case 'y':
return subParseYear(text,pos,start,value,part,cal);
case 'd':
if (value <= 0) {
return false;
}
cal.setDayOfMonth(value);
return true;
case 'S':
if (value < 0) {
return false;
}
return subParseFractionalSeconds(value,start,pos[0],cal);
case 'h':
if (value == 12) {
value=0;
}
case 'K':
case 'H':
if (value < 0) {
return false;
}
cal.setHours(value);
return true;
case 'k':
if (value < 0) {
return false;
}
cal.setHours(value);
return true;
case 'm':
if (value < 0) {
return false;
}
cal.setMinutes(value);
return true;
case 's':
if (value < 0) {
return false;
}
cal.setSeconds(value);
return true;
case 'z':
case 'Z':
case 'v':
return subParseTimeZoneInGMT(text,start,pos,cal);
default :
return false;
}
}
