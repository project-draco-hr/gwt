{
  JClassType firstClassType=null;
  JClassType secondClassType=null;
  if (firstApiElement instanceof ApiField) {
    firstClassType=((ApiField)firstApiElement).getApiClass().getClassObject();
    secondClassType=((ApiField)secondApiElement).getApiClass().getClassObject();
  }
  if (firstApiElement instanceof ApiAbstractMethod) {
    firstClassType=((ApiAbstractMethod)firstApiElement).getApiClass().getClassObject();
    secondClassType=((ApiAbstractMethod)secondApiElement).getApiClass().getClassObject();
  }
  if (firstClassType != null && secondClassType != null) {
    if (secondClassType.isAssignableTo(firstClassType)) {
      return Relation.SUPERCLASS;
    }
    if (firstClassType.isAssignableTo(secondClassType)) {
      return Relation.SUBCLASS;
    }
    return Relation.NONE;
  }
  throw new RuntimeException("Inconsistent types for ApiElements: newApiElement " + firstApiElement + ", oldApiElement : "+ secondApiElement);
}
