{
  if (domainEntity == null) {
    return null;
  }
  SimpleProxyId<? extends BaseProxy> id=state.getStableId(domainEntity);
  boolean isEntityProxy=state.isEntityType(proxyType);
  final boolean isOwnerValueProxy=state.isValueType(proxyType);
  Object domainVersion;
  if (id == null || id.isEphemeral()) {
    Object domainId;
    if (isEntityProxy) {
      domainId=service.getId(domainEntity);
      domainVersion=service.getVersion(domainEntity);
    }
 else {
      domainId=null;
      domainVersion=null;
    }
    if (id == null) {
      if (domainId == null) {
        id=state.getIdFactory().allocateSyntheticId(proxyType,++syntheticId);
      }
 else {
        Splittable flatValue=state.flatten(domainId);
        id=state.getIdFactory().getId(proxyType,flatValue.getPayload(),0);
      }
    }
 else     if (domainId != null) {
      Splittable flatValue=state.flatten(domainId);
      id.setServerId(flatValue.getPayload());
    }
  }
 else   if (isEntityProxy) {
    domainVersion=service.getVersion(domainEntity);
  }
 else {
    domainVersion=null;
  }
  @SuppressWarnings("unchecked") AutoBean<T> bean=(AutoBean<T>)state.getBeanForPayload(id,domainEntity);
  resolved.put(key,bean.as());
  bean.setTag(Constants.IN_RESPONSE,true);
  if (domainVersion != null) {
    Splittable flatVersion=state.flatten(domainVersion);
    bean.setTag(Constants.VERSION_PROPERTY_B64,SimpleRequestProcessor.toBase64(flatVersion.getPayload()));
  }
  bean.accept(new AutoBeanVisitor(){
    @Override public boolean visitReferenceProperty(    String propertyName,    AutoBean<?> value,    PropertyContext ctx){
      String newPrefix=(prefix.length() > 0 ? (prefix + ".") : "") + propertyName;
      Class<?> elementType=ctx instanceof CollectionPropertyContext ? ((CollectionPropertyContext)ctx).getElementType() : null;
      boolean shouldSend=isOwnerValueProxy || matchesPropertyRef(propertyRefs,newPrefix) || elementType != null && ValueCodex.canDecode(elementType);
      if (!shouldSend) {
        return false;
      }
      Object domainValue=service.getProperty(domainEntity,propertyName);
      if (domainValue == null) {
        return false;
      }
      Type type;
      if (elementType == null) {
        type=ctx.getType();
      }
 else {
        type=new CollectionType(ctx.getType(),elementType);
      }
      Object clientValue=resolveClientValue(domainValue,type,propertyRefs,newPrefix);
      ctx.set(clientValue);
      return false;
    }
    @Override public boolean visitValueProperty(    String propertyName,    Object value,    PropertyContext ctx){
      value=service.getProperty(domainEntity,propertyName);
      ctx.set(value);
      return false;
    }
  }
);
  return bean.as();
}
