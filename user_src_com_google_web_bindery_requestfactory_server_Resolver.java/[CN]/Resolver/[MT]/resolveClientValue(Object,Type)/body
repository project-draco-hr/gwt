{
  if (domainValue == null) {
    return new Resolution(null);
  }
  boolean anyType=clientType == null;
  if (anyType) {
    clientType=Object.class;
  }
  Class<?> assignableTo=TypeUtils.ensureBaseType(clientType);
  ResolutionKey key=new ResolutionKey(domainValue,clientType);
  Resolution previous=resolved.get(key);
  if (previous != null && assignableTo.isInstance(previous.getClientObject())) {
    return previous;
  }
  Class<?> returnClass=service.resolveClientType(domainValue.getClass(),assignableTo,true);
  if (anyType) {
    assignableTo=returnClass;
  }
  if (ValueCodex.canDecode(returnClass)) {
    return makeResolution(domainValue);
  }
  boolean isProxy=BaseProxy.class.isAssignableFrom(returnClass);
  boolean isId=EntityProxyId.class.isAssignableFrom(returnClass);
  if (isProxy || isId) {
    Class<? extends BaseProxy> proxyClass=returnClass.asSubclass(BaseProxy.class);
    return resolveClientProxy(domainValue,proxyClass,key);
  }
  if (Collection.class.isAssignableFrom(returnClass)) {
    Collection<Object> accumulator;
    if (List.class.isAssignableFrom(returnClass)) {
      accumulator=new ArrayList<Object>();
    }
 else     if (Set.class.isAssignableFrom(returnClass)) {
      accumulator=new HashSet<Object>();
    }
 else {
      throw new ReportableException("Unsupported collection type" + returnClass.getName());
    }
    Type elementType=TypeUtils.getSingleParameterization(Collection.class,clientType);
    for (    Object o : (Collection<?>)domainValue) {
      accumulator.add(resolveClientValue(o,elementType).getClientObject());
    }
    return makeResolution(accumulator);
  }
  throw new ReportableException("Unsupported domain type " + returnClass.getCanonicalName());
}
