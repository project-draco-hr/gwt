{
  Class<?> owner=method.getDeclaringClass();
  if (Object.class.equals(owner) || RequestContext.class.equals(owner) || AbstractRequestContext.class.equals(owner)) {
    try {
      return method.invoke(InProcessRequestContext.this,args);
    }
 catch (    InvocationTargetException e) {
      throw e.getCause();
    }
  }
  final Object[] actualArgs;
  Type returnGenericType;
  boolean isInstance=InstanceRequest.class.isAssignableFrom(method.getReturnType());
  if (isInstance) {
    returnGenericType=TypeUtils.getParameterization(InstanceRequest.class,method.getGenericReturnType(),method.getReturnType())[1];
    if (args == null) {
      actualArgs=new Object[1];
    }
 else {
      actualArgs=new Object[args.length + 1];
      System.arraycopy(args,0,actualArgs,1,args.length);
    }
  }
 else {
    returnGenericType=TypeUtils.getSingleParameterization(Request.class,method.getGenericReturnType(),method.getReturnType());
    if (args == null) {
      actualArgs=NO_ARGS;
    }
 else {
      actualArgs=args;
    }
  }
  Class<?> returnType=TypeUtils.ensureBaseType(returnGenericType);
  Class<?> elementType=Collection.class.isAssignableFrom(returnType) ? TypeUtils.ensureBaseType(TypeUtils.getSingleParameterization(Collection.class,returnGenericType)) : null;
  final RequestData data;
  if (dialect.equals(Dialect.STANDARD)) {
    StringBuilder descriptor=new StringBuilder("(");
    for (    Class<?> param : method.getParameterTypes()) {
      descriptor.append(com.google.gwt.dev.asm.Type.getDescriptor(param));
    }
    descriptor.append(")V");
    OperationKey operation=new OperationKey(context.getName(),method.getName(),descriptor.toString());
    data=new RequestData(operation.get(),actualArgs,returnType,elementType);
  }
 else {
    JsonRpcWireName wireInfo=method.getReturnType().getAnnotation(JsonRpcWireName.class);
    String apiVersion=wireInfo.version();
    String operation=wireInfo.value();
    int foundContent=-1;
    final String[] parameterNames=args == null ? new String[0] : new String[args.length];
    Annotation[][] parameterAnnotations=method.getParameterAnnotations();
    parameter:     for (int i=0, j=parameterAnnotations.length; i < j; i++) {
      for (      Annotation annotation : parameterAnnotations[i]) {
        if (PropertyName.class.equals(annotation.annotationType())) {
          parameterNames[i]=((PropertyName)annotation).value();
          continue parameter;
        }
 else         if (JsonRpcContent.class.equals(annotation.annotationType())) {
          foundContent=i;
          continue parameter;
        }
      }
      throw new UnsupportedOperationException("No " + PropertyName.class.getCanonicalName() + " annotation on parameter "+ i+ " of method "+ method.toString());
    }
    final int contentIdx=foundContent;
    data=new RequestData(operation,actualArgs,returnType,elementType);
    for (int i=0, j=args.length; i < j; i++) {
      if (i != contentIdx) {
        data.setNamedParameter(parameterNames[i],args[i]);
      }
 else {
        data.setRequestContent(args[i]);
      }
      data.setApiVersion(apiVersion);
    }
  }
  final AbstractRequest<Object> req=new AbstractRequest<Object>(InProcessRequestContext.this){
    @Override protected RequestData makeRequestData(){
      data.setPropertyRefs(propertyRefs);
      return data;
    }
  }
;
  if (!isInstance) {
    addInvocation(req);
  }
  if (dialect.equals(Dialect.STANDARD)) {
    return req;
  }
 else   if (dialect.equals(Dialect.JSON_RPC)) {
    Class<?> requestType=method.getReturnType().asSubclass(Request.class);
    return Proxy.newProxyInstance(requestType.getClassLoader(),new Class<?>[]{requestType},new InvocationHandler(){
      public Object invoke(      Object proxy,      Method method,      Object[] args) throws Throwable {
        if (Object.class.equals(method.getDeclaringClass()) || Request.class.equals(method.getDeclaringClass())) {
          return method.invoke(req,args);
        }
 else         if (BeanMethod.SET.matches(method) || BeanMethod.SET_BUILDER.matches(method)) {
          req.getRequestData().setNamedParameter(BeanMethod.SET.inferName(method),args[0]);
          return Void.TYPE.equals(method.getReturnType()) ? null : proxy;
        }
        throw new UnsupportedOperationException(method.toString());
      }
    }
);
  }
 else {
    throw new RuntimeException("Should not reach here");
  }
}
