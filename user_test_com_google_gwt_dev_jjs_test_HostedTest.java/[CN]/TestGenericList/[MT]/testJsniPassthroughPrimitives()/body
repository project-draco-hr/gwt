{
class Inner {
    native boolean nativeBoolean(    boolean param);
    native byte nativeByte(    byte param);
    native char nativeCharacter(    char param);
    native double nativeDouble(    double param);
    native float nativeFloat(    float param);
    native int nativeInteger(    int param);
    @UnsafeNativeLong native long nativeLong(    long param);
    native short nativeShort(    short param);
  }
  Inner inner=new Inner();
  assertEquals("nativeBoolean",inner.nativeBoolean(true),true);
  assertEquals("nativeBoolean",inner.nativeBoolean(false),false);
  assertEquals("nativeByte",inner.nativeByte((byte)0),(byte)0);
  assertEquals("nativeByte",inner.nativeByte((byte)1),(byte)1);
  assertEquals("nativeByte",inner.nativeByte((byte)-1),(byte)-1);
  assertEquals("nativeByte",inner.nativeByte((byte)127),(byte)127);
  assertEquals("nativeByte",inner.nativeByte((byte)-127),(byte)-127);
  assertEquals("nativeByte",inner.nativeByte(Byte.MAX_VALUE),Byte.MAX_VALUE);
  assertEquals("nativeByte",inner.nativeByte(Byte.MIN_VALUE),Byte.MIN_VALUE);
  assertEquals("nativeCharacter",inner.nativeCharacter((char)0),(char)0);
  assertEquals("nativeCharacter",inner.nativeCharacter((char)1),(char)1);
  assertEquals("nativeCharacter",inner.nativeCharacter((char)-1),(char)-1);
  assertEquals("nativeCharacter",inner.nativeCharacter((char)32767),(char)32767);
  assertEquals("nativeCharacter",inner.nativeCharacter((char)-32767),(char)-32767);
  assertEquals("nativeCharacter",inner.nativeCharacter(Character.MAX_VALUE),Character.MAX_VALUE);
  assertEquals("nativeCharacter",inner.nativeCharacter(Character.MIN_VALUE),Character.MIN_VALUE);
  assertEquals("nativeDouble",inner.nativeDouble(0.0),0.0);
  assertEquals("nativeDouble",inner.nativeDouble(1.0),1.0);
  assertEquals("nativeDouble",inner.nativeDouble(-1.0),-1.0);
  assertEquals("nativeDouble",inner.nativeDouble(100000000000.0),100000000000.0);
  assertEquals("nativeDouble",inner.nativeDouble(-100000000000.0),-100000000000.0);
  assertEquals("nativeDouble MAX",inner.nativeDouble(Double.MAX_VALUE),Double.MAX_VALUE);
  assertEquals("nativeDouble MIN",inner.nativeDouble(Double.MIN_VALUE),Double.MIN_VALUE);
  assertEquals("nativeFloat",inner.nativeFloat((float)0.0),(float)0.0);
  assertEquals("nativeFloat",inner.nativeFloat((float)1.0),(float)1.0);
  assertEquals("nativeFloat",inner.nativeFloat((float)-1.0),(float)-1.0);
  assertEquals("nativeFloat",inner.nativeFloat((float)1000000.0),(float)1000000.0);
  assertEquals("nativeFloat",inner.nativeFloat((float)-1000000.0),(float)-1000000.0);
  assertEquals("nativeFloat",inner.nativeFloat(Float.MAX_VALUE),Float.MAX_VALUE);
  assertEquals("nativeFloat",inner.nativeFloat(Float.MIN_VALUE),Float.MIN_VALUE);
  assertEquals("nativeInteger",inner.nativeInteger(0),0);
  assertEquals("nativeInteger",inner.nativeInteger(1),1);
  assertEquals("nativeInteger",inner.nativeInteger(-1),-1);
  assertEquals("nativeInteger",inner.nativeInteger(2147483647),2147483647);
  assertEquals("nativeInteger",inner.nativeInteger(-2147483647),-2147483647);
  assertEquals("nativeInteger MAX",inner.nativeInteger(Integer.MAX_VALUE),Integer.MAX_VALUE);
  assertEquals("nativeInteger MIN",inner.nativeInteger(Integer.MIN_VALUE),Integer.MIN_VALUE);
  assertEquals("nativeLong",inner.nativeLong(0L),0L);
  assertEquals("nativeLong",inner.nativeLong(1L),1L);
  assertEquals("nativeLong",inner.nativeLong(-1L),-1L);
  assertEquals("nativeLong",inner.nativeLong(9223372036854775807L),9223372036854775807L);
  assertEquals("nativeLong",inner.nativeLong(-9223372036854775807L),-9223372036854775807L);
  assertEquals("nativeLong",inner.nativeLong(Long.MAX_VALUE),Long.MAX_VALUE);
  assertEquals("nativeLong",inner.nativeLong(Long.MIN_VALUE),Long.MIN_VALUE);
  assertEquals("nativeShort",inner.nativeShort((short)0),(short)0);
  assertEquals("nativeShort",inner.nativeShort((short)1),(short)1);
  assertEquals("nativeShort",inner.nativeShort((short)-1),(short)-1);
  assertEquals("nativeShort",inner.nativeShort((short)32767),(short)32767);
  assertEquals("nativeShort",inner.nativeShort((short)-32767),(short)-32767);
  assertEquals("nativeShort MAX",inner.nativeShort(Short.MAX_VALUE),Short.MAX_VALUE);
  assertEquals("nativeShort MIN",inner.nativeLong(Short.MIN_VALUE),Short.MIN_VALUE);
}
