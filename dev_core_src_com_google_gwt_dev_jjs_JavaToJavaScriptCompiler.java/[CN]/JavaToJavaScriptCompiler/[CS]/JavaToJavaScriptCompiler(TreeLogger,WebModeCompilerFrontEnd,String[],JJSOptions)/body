{
  if (declEntryPts.length == 0) {
    throw new IllegalArgumentException("entry point(s) required");
  }
  this.options=new JJSOptions(compilerOptions);
  this.declEntryPoints=declEntryPts;
  RebindPermutationOracle rpo=compiler.getRebindPermutationOracle();
  if (!options.isValidateOnly()) {
    Set<String> allEntryPoints=new TreeSet<String>();
    for (    String element : declEntryPts) {
      String[] all=rpo.getAllPossibleRebindAnswers(logger,element);
      Util.addAll(allEntryPoints,all);
    }
    allEntryPoints.addAll(JProgram.CODEGEN_TYPES_SET);
    allEntryPoints.addAll(JProgram.INDEX_TYPES_SET);
    declEntryPts=allEntryPoints.toArray(new String[0]);
  }
  CompilationUnitDeclaration[] goldenCuds=compiler.getCompilationUnitDeclarations(logger,declEntryPts);
  checkForErrors(logger,goldenCuds,false);
  PerfLogger.start("Build AST");
  boolean enableDescendants=compilerOptions.getSoycOutputDir() != null;
  JProgram jprogram=savedJProgram=new JProgram();
  jprogram.setEnableSourceInfoDescendants(enableDescendants);
  JsProgram jsProgram=savedJsProgram=new JsProgram();
  jsProgram.setEnableSourceInfoDescendants(enableDescendants);
  long memoryDelta;
  try {
    System.gc();
    long usedMemoryBefore=getUsedMemory();
    TypeMap typeMap=new TypeMap(jprogram);
    TypeDeclaration[] allTypeDeclarations=BuildTypeMap.exec(typeMap,goldenCuds,jsProgram);
    checkForErrors(logger,goldenCuds,true);
    jprogram.typeOracle.computeBeforeAST();
    GenerateJavaAST.exec(allTypeDeclarations,typeMap,jprogram,jsProgram,options.isEnableAssertions());
    System.gc();
    long usedMemoryAfter=getUsedMemory();
    memoryDelta=usedMemoryAfter - usedMemoryBefore;
    long localAstMemoryUsage=(long)(memoryDelta * 1.5);
    checkForErrors(logger,goldenCuds,true);
    goldenCuds=null;
    typeMap=null;
    allTypeDeclarations=null;
    FixAssignmentToUnbox.exec(jprogram);
    if (options.isEnableAssertions()) {
      AssertionNormalizer.exec(jprogram);
    }
 else {
      AssertionRemover.exec(jprogram);
    }
    ReplaceRebinds.exec(logger,jprogram,rpo);
    findEntryPoints(logger,rpo,declEntryPoints,jprogram);
    JavaScriptObjectNormalizer.exec(jprogram);
    if (rpo.getPermuationCount() > 1) {
      optimize(jprogram);
      PerfLogger.start("serialize");
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      ObjectOutputStream os=new ObjectOutputStream(baos);
      os.writeObject(jprogram);
      os.writeObject(jsProgram);
      os.close();
      serializedAst=baos.toByteArray();
      PerfLogger.end();
      this.astMemoryUsage=Math.max(localAstMemoryUsage,serializedAst.length * 4);
      logger.log(TreeLogger.TRACE,"Estimated AST memory usage: " + astMemoryUsage + " = Math.max("+ memoryDelta+ " * 1.5, "+ serializedAst.length+ " * 4)");
    }
 else {
      this.astMemoryUsage=localAstMemoryUsage;
      this.serializedAst=null;
    }
  }
 catch (  IOException e) {
    throw new RuntimeException("Should be impossible to get an IOException reading an in-memory stream",e);
  }
catch (  Throwable e) {
    throw logAndTranslateException(logger,e);
  }
 finally {
    PerfLogger.end();
synchronized (myLockObject) {
    }
  }
}
