{
  Event jjsCompilePermutationEvent=SpeedTracerLogger.start(CompilerEventType.JJS_COMPILE_PERMUTATION,"name",permutation.prettyPrint());
  long permStartMs=System.currentTimeMillis();
  try {
    long startTimeMs=System.currentTimeMillis();
    PropertyOracle[] propertyOracles=permutation.getPropertyOracles();
    int permutationId=permutation.getId();
    AST ast=unifiedAst.getFreshAst();
    jprogram=ast.getJProgram();
    jsProgram=ast.getJsProgram();
    Map<StandardSymbolData,JsName> symbolTable=new TreeMap<StandardSymbolData,JsName>(new SymbolData.ClassIdentComparator());
    if (compilerContext.shouldCompileMonolithic() && logger.isLoggable(TreeLogger.INFO)) {
      logger.log(TreeLogger.INFO,"Compiling permutation " + permutationId + "...");
    }
    printPermutationTrace(permutation);
    ResolveRebinds.exec(jprogram,permutation.getGwtCreateAnswers());
    Multimap<String,Integer> instrumentableLines=null;
    if (System.getProperty("gwt.coverage") != null) {
      instrumentableLines=BaselineCoverageGatherer.exec(jprogram);
    }
    optimizeJava();
    Map<JType,JLiteral> typeIdLiteralsByType=normalizeSemantics();
    postNormalizationOptimizeJava();
    jprogram.typeOracle.recomputeAfterOptimizations();
    Pair<? extends JavaToJavaScriptMap,Set<JsNode>> jjsMapAndInlineableFunctions=GenerateJavaScriptAST.exec(jprogram,jsProgram,compilerContext,typeIdLiteralsByType,symbolTable,propertyOracles);
    JavaToJavaScriptMap jjsmap=jjsMapAndInlineableFunctions.getLeft();
    if (System.getProperty("gwt.coverage") != null) {
      CoverageInstrumentor.exec(jsProgram,instrumentableLines);
    }
    JsNormalizer.exec(jsProgram);
    JsSymbolResolver.exec(jsProgram);
    if (options.getNamespace() == JsNamespaceOption.BY_JAVA_PACKAGE) {
      JsNamespaceChooser.exec(jsProgram,jjsmap);
    }
    EvalFunctionsAtTopScope.exec(jsProgram,jjsmap);
    final Set<JsNode> inlinableJsFunctions=jjsMapAndInlineableFunctions.getRight();
    optimizeJs(inlinableJsFunctions);
    JsStackEmulator.exec(jprogram,jsProgram,propertyOracles,jjsmap);
    Pair<SyntheticArtifact,MultipleDependencyGraphRecorder> dependenciesAndRecorder=splitJsIntoFragments(propertyOracles,permutationId,jjsmap);
    Map<JsName,JsLiteral> internedLiteralByVariableName=renameJsSymbols(propertyOracles);
    JsBreakUpLargeVarStatements.exec(jsProgram,propertyOracles);
    List<JsSourceMap> sourceInfoMaps=new ArrayList<JsSourceMap>();
    boolean isSourceMapsEnabled=PropertyOracles.findBooleanProperty(logger,propertyOracles,"compiler.useSourceMaps","true",true,false,false);
    String[] jsFragments=new String[jsProgram.getFragmentCount()];
    StatementRanges[] ranges=new StatementRanges[jsFragments.length];
    SizeBreakdown[] sizeBreakdowns=options.isJsonSoycEnabled() || options.isSoycEnabled() || options.isCompilerMetricsEnabled() ? new SizeBreakdown[jsFragments.length] : null;
    generateJavaScriptCode(jjsmap,jsFragments,ranges,sizeBreakdowns,sourceInfoMaps,isSourceMapsEnabled || options.isJsonSoycEnabled());
    PermutationResult permutationResult=new PermutationResultImpl(jsFragments,permutation,makeSymbolMap(symbolTable),ranges);
    addSyntheticArtifacts(unifiedAst,permutation,startTimeMs,permutationId,jjsmap,dependenciesAndRecorder,internedLiteralByVariableName,isSourceMapsEnabled,jsFragments,sizeBreakdowns,sourceInfoMaps,permutationResult);
    return permutationResult;
  }
 catch (  Throwable e) {
    throw CompilationProblemReporter.logAndTranslateException(logger,e);
  }
 finally {
    jjsCompilePermutationEvent.end();
    logTrackingStats();
    if (logger.isLoggable(TreeLogger.TRACE)) {
      logger.log(TreeLogger.TRACE,"Permutation took " + (System.currentTimeMillis() - permStartMs) + " ms");
    }
  }
}
