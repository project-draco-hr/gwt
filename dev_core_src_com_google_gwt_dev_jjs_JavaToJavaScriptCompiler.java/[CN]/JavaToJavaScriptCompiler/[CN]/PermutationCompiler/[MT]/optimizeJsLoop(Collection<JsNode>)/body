{
  int optimizationLevel=options.getOptimizationLevel();
  List<OptimizerStats> allOptimizerStats=new ArrayList<OptimizerStats>();
  int counter=0;
  while (true) {
    counter++;
    if (Thread.interrupted()) {
      throw new InterruptedException();
    }
    Event optimizeJsEvent=SpeedTracerLogger.start(CompilerEventType.OPTIMIZE_JS);
    OptimizerStats stats=new OptimizerStats("Pass " + counter);
    stats.add(JsStaticEval.exec(jsProgram));
    stats.add(JsInliner.exec(jsProgram,toInline));
    stats.add(JsUnusedFunctionRemover.exec(jsProgram));
    allOptimizerStats.add(stats);
    optimizeJsEvent.end();
    if ((optimizationLevel < OptionOptimize.OPTIMIZE_LEVEL_MAX && counter > optimizationLevel) || !stats.didChange()) {
      break;
    }
  }
  if (optimizationLevel > OptionOptimize.OPTIMIZE_LEVEL_DRAFT) {
    DuplicateExecuteOnceRemover.exec(jsProgram);
  }
  printJsOptimizeTrace(allOptimizerStats);
}
