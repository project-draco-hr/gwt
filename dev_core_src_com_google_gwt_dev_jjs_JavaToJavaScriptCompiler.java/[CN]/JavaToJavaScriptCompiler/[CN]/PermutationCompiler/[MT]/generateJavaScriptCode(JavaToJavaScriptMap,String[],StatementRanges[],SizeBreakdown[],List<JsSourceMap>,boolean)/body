{
  Event generateJavascriptEvent=SpeedTracerLogger.start(CompilerEventType.GENERATE_JAVASCRIPT);
  boolean useClosureCompiler=options.isClosureCompilerEnabled();
  if (useClosureCompiler) {
    ClosureJsRunner runner=new ClosureJsRunner();
    runner.compile(jprogram,jsProgram,jsFragments,options.getOutput());
    generateJavascriptEvent.end();
    return;
  }
  for (int i=0; i < jsFragments.length; i++) {
    DefaultTextOutput out=new DefaultTextOutput(options.getOutput().shouldMinimize());
    JsReportGenerationVisitor v=new JsReportGenerationVisitor(out,jjsMap,options.isJsonSoycEnabled());
    v.accept(jsProgram.getFragment(i));
    StatementRanges statementRanges=v.getStatementRanges();
    String code=out.toString();
    JsSourceMap infoMap=(sourceInfoMaps != null) ? v.getSourceInfoMap() : null;
    JsAbstractTextTransformer transformer=new JsNoopTransformer(code,statementRanges,infoMap);
    if (options.isIncrementalCompileEnabled()) {
      transformer=new JsTypeLinker(logger,transformer,v.getClassRanges(),v.getProgramClassRange(),getMinimalRebuildCache(),jprogram.typeOracle);
      transformer.exec();
    }
    Event functionClusterEvent=SpeedTracerLogger.start(CompilerEventType.FUNCTION_CLUSTER);
    if (!sourceMapsEnabled && options.shouldClusterSimilarFunctions() && options.getNamespace() == JsNamespaceOption.NONE && options.getOutput() == JsOutputOption.OBFUSCATED) {
      transformer=new JsFunctionClusterer(transformer);
      transformer.exec();
    }
    functionClusterEvent.end();
    jsFragments[i]=transformer.getJs();
    ranges[i]=transformer.getStatementRanges();
    if (sizeBreakdowns != null) {
      sizeBreakdowns[i]=v.getSizeBreakdown();
    }
    if (sourceInfoMaps != null) {
      sourceInfoMaps.add(transformer.getSourceInfoMap());
    }
  }
  generateJavascriptEvent.end();
}
