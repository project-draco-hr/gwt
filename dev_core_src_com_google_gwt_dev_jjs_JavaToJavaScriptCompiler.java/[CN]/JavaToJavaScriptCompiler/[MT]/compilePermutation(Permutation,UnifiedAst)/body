{
  Event jjsCompilePermutationEvent=SpeedTracerLogger.start(CompilerEventType.JJS_COMPILE_PERMUTATION,"name",permutation.getProperties().prettyPrint());
  long permStartMs=System.currentTimeMillis();
  try {
    Event javaEvent=SpeedTracerLogger.start(CompilerEventType.PERMUTATION_JAVA);
    long startTimeMs=System.currentTimeMillis();
    PermutationProperties properties=permutation.getProperties();
    int permutationId=permutation.getId();
    AST ast=unifiedAst.getFreshAst();
    jprogram=ast.getJProgram();
    jsProgram=ast.getJsProgram();
    Map<StandardSymbolData,JsName> symbolTable=new TreeMap<StandardSymbolData,JsName>(new SymbolData.ClassIdentComparator());
    logger.log(TreeLogger.INFO,"Compiling permutation " + permutationId + "...");
    ResolvePermutationDependentValues.exec(jprogram,properties,permutation.getPropertyAndBindingInfos());
    Multimap<String,Integer> instrumentableLines=null;
    if (CoverageInstrumentor.isCoverageEnabled()) {
      instrumentableLines=BaselineCoverageGatherer.exec(jprogram);
    }
    maybeRecordReferencesAndControlFlow(false);
    RewriteConstructorCallsForUnboxedTypes.exec(jprogram);
    CompileTimeConstantsReplacer.exec(jprogram);
    optimizeJava();
    TypeMapper<?> typeMapper=normalizeSemantics();
    postNormalizationOptimizeJava();
    maybeRecordReferencesAndControlFlow(true);
    javaEvent.end();
    Event javaScriptEvent=SpeedTracerLogger.start(CompilerEventType.PERMUTATION_JAVASCRIPT);
    Pair<? extends JavaToJavaScriptMap,Set<JsNode>> jjsMapAndInlineableFunctions=GenerateJavaScriptAST.exec(logger,jprogram,jsProgram,compilerContext,typeMapper,symbolTable,properties);
    JavaToJavaScriptMap jjsmap=jjsMapAndInlineableFunctions.getLeft();
    if (CoverageInstrumentor.isCoverageEnabled()) {
      CoverageInstrumentor.exec(jprogram,jsProgram,jjsmap,instrumentableLines);
    }
    JsNormalizer.exec(jsProgram);
    JsSymbolResolver.exec(jsProgram);
    if (options.getNamespace() == JsNamespaceOption.PACKAGE) {
      if (!jprogram.getRunAsyncs().isEmpty()) {
        options.setNamespace(JsNamespaceOption.NONE);
        logger.log(TreeLogger.Type.WARN,"Namespace option is not compatible with CodeSplitter, turning it off.");
      }
 else {
        JsNamespaceChooser.exec(jprogram,jsProgram,jjsmap);
      }
    }
    Pair<SyntheticArtifact,MultipleDependencyGraphRecorder> dependenciesAndRecorder=splitJsIntoFragments(properties,permutationId,jjsmap);
    EvalFunctionsAtTopScope.exec(jsProgram,jjsmap);
    final Set<JsNode> inlinableJsFunctions=jjsMapAndInlineableFunctions.getRight();
    optimizeJs(inlinableJsFunctions);
    if (options.getOptimizationLevel() > OptionOptimize.OPTIMIZE_LEVEL_DRAFT) {
      JsForceInliningChecker.check(logger,jjsmap,jsProgram);
    }
    JsStackEmulator.exec(jprogram,jsProgram,properties,jjsmap);
    Map<JsName,JsLiteral> internedLiteralByVariableName=renameJsSymbols(properties,jjsmap);
    HandleCrossFragmentReferences.exec(jsProgram,properties);
    JsBreakUpLargeVarStatements.exec(jsProgram,properties.getConfigurationProperties());
    if (!options.isIncrementalCompileEnabled()) {
      JavaScriptVerifier.verify(jsProgram,jjsmap);
    }
    List<JsSourceMap> sourceInfoMaps=new ArrayList<JsSourceMap>();
    boolean isSourceMapsEnabled=properties.isTrueInAnyPermutation("compiler.useSourceMaps");
    String[] jsFragments=new String[jsProgram.getFragmentCount()];
    StatementRanges[] ranges=new StatementRanges[jsFragments.length];
    SizeBreakdown[] sizeBreakdowns=options.isJsonSoycEnabled() || options.isSoycEnabled() || options.isCompilerMetricsEnabled() ? new SizeBreakdown[jsFragments.length] : null;
    generateJavaScriptCode(jjsmap,jsFragments,ranges,sizeBreakdowns,sourceInfoMaps,isSourceMapsEnabled || options.isJsonSoycEnabled());
    javaScriptEvent.end();
    PermutationResult permutationResult=new PermutationResultImpl(jsFragments,permutation,makeSymbolMap(symbolTable),ranges);
    addSyntheticArtifacts(unifiedAst,permutation,startTimeMs,permutationId,jjsmap,dependenciesAndRecorder,internedLiteralByVariableName,isSourceMapsEnabled,jsFragments,sizeBreakdowns,sourceInfoMaps,permutationResult);
    return permutationResult;
  }
 catch (  Throwable e) {
    throw CompilationProblemReporter.logAndTranslateException(logger,e);
  }
 finally {
    jjsCompilePermutationEvent.end();
    if (logger.isLoggable(TreeLogger.TRACE)) {
      logger.log(TreeLogger.TRACE,"Permutation took " + (System.currentTimeMillis() - permStartMs) + " ms");
    }
  }
}
