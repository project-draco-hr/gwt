{
  try {
    if (precompilationContext.getEntryPoints().length + precompilationContext.getAdditionalRootTypes().length == 0) {
      throw new IllegalArgumentException("entry point(s) required");
    }
    boolean singlePermutation=precompilationContext.getPermutations().length == 1;
    PrecompilationMetricsArtifact precompilationMetrics=precompilationContext.getPrecompilationMetricsArtifact();
    jprogram=new JProgram(compilerContext.getMinimalRebuildCache());
    jprogram.typeOracle.setOptimize(options.getOptimizationLevel() > OptionOptimize.OPTIMIZE_LEVEL_DRAFT);
    jsProgram=new JsProgram();
    CompilationState compilationState=constructJavaAst(precompilationContext);
    JsniRestrictionChecker.exec(logger,jprogram);
    JsInteropRestrictionChecker.exec(logger,jprogram,getMinimalRebuildCache());
    logTypeOracleMetrics(precompilationMetrics,compilationState);
    Memory.maybeDumpMemory("AstOnly");
    AstDumper.maybeDumpAST(jprogram);
    ConfigurationProperties configurationProperties=new ConfigurationProperties(module);
    EnumNameObfuscator.exec(jprogram,logger,configurationProperties,options);
    ReplaceDefenderMethodReferences.exec(jprogram);
    FixAssignmentsToUnboxOrCast.exec(jprogram);
    if (options.isEnableAssertions()) {
      AssertionNormalizer.exec(jprogram);
    }
 else {
      AssertionRemover.exec(jprogram);
    }
    if (module != null && options.isRunAsyncEnabled()) {
      ReplaceRunAsyncs.exec(logger,jprogram);
      ConfigurationProperties config=new ConfigurationProperties(module);
      CodeSplitters.pickInitialLoadSequence(logger,jprogram,config);
    }
    ImplementClassLiteralsAsFields.exec(jprogram);
    logAstTypeMetrics(precompilationMetrics);
    Event createUnifiedAstEvent=SpeedTracerLogger.start(CompilerEventType.CREATE_UNIFIED_AST);
    UnifiedAst result=new UnifiedAst(options,new AST(jprogram,jsProgram),singlePermutation,RecordRebinds.exec(jprogram));
    createUnifiedAstEvent.end();
    return result;
  }
 catch (  Throwable e) {
    throw CompilationProblemReporter.logAndTranslateException(logger,e);
  }
}
