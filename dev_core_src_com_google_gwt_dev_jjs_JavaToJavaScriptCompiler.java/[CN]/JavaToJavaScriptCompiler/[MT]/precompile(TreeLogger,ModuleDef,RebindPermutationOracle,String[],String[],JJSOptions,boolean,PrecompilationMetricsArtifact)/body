{
  InternalCompilerException.preload();
  if (additionalRootTypes == null) {
    additionalRootTypes=Empty.STRINGS;
  }
  if (declEntryPts.length + additionalRootTypes.length == 0) {
    throw new IllegalArgumentException("entry point(s) required");
  }
  Set<String> allRootTypes=new TreeSet<String>();
  for (  String element : declEntryPts) {
    String[] all=rpo.getAllPossibleRebindAnswers(logger,element);
    Collections.addAll(allRootTypes,all);
  }
  rpo.getGeneratorContext().finish(logger);
  Collections.addAll(allRootTypes,additionalRootTypes);
  allRootTypes.addAll(JProgram.CODEGEN_TYPES_SET);
  allRootTypes.addAll(JProgram.INDEX_TYPES_SET);
  allRootTypes.add(FragmentLoaderCreator.ASYNC_FRAGMENT_LOADER);
  Memory.maybeDumpMemory("CompStateBuilt");
  CompilationUnitDeclaration[] goldenCuds=WebModeCompilerFrontEnd.getCompilationUnitDeclarations(logger,allRootTypes.toArray(new String[allRootTypes.size()]),rpo,TypeLinker.NULL_TYPE_LINKER).compiledUnits;
  List<String> finalTypeOracleTypes=Lists.create();
  if (precompilationMetrics != null) {
    for (    com.google.gwt.core.ext.typeinfo.JClassType type : rpo.getCompilationState().getTypeOracle().getTypes()) {
      finalTypeOracleTypes=Lists.add(finalTypeOracleTypes,type.getPackage().getName() + "." + type.getName());
    }
    precompilationMetrics.setFinalTypeOracleTypes(finalTypeOracleTypes);
  }
  rpo.clear();
  Memory.maybeDumpMemory("GoldenCudsBuilt");
  checkForErrors(logger,goldenCuds,false);
  CorrelationFactory correlator=options.isSoycExtra() ? RealCorrelationFactory.INSTANCE : DummyCorrelationFactory.INSTANCE;
  JProgram jprogram=new JProgram(correlator);
  JsProgram jsProgram=new JsProgram(correlator);
  try {
    TypeMap typeMap=new TypeMap(jprogram);
    TypeDeclaration[] allTypeDeclarations=BuildTypeMap.exec(typeMap,goldenCuds,jsProgram);
    checkForErrors(logger,goldenCuds,true);
    jprogram.typeOracle.computeBeforeAST();
    GenerateJavaAST.exec(allTypeDeclarations,typeMap,jprogram,options);
    checkForErrors(logger,goldenCuds,true);
    Memory.maybeDumpMemory("AstBuilt");
    goldenCuds=null;
    typeMap=null;
    allTypeDeclarations=null;
    Memory.maybeDumpMemory("AstOnly");
    AstDumper.maybeDumpAST(jprogram);
    if (module != null) {
      ConfigurationProperty enumNameObfuscationProp=(ConfigurationProperty)module.getProperties().find(ENUM_NAME_OBFUSCATION_PROPERTY);
      if (enumNameObfuscationProp != null && Boolean.parseBoolean(enumNameObfuscationProp.getValue())) {
        EnumNameObfuscator.exec(jprogram,logger);
      }
    }
    ArtificialRescueRecorder.exec(jprogram);
    FixAssignmentToUnbox.exec(jprogram);
    if (options.isEnableAssertions()) {
      AssertionNormalizer.exec(jprogram);
    }
 else {
      AssertionRemover.exec(jprogram);
    }
    ReplaceRebinds.exec(logger,jprogram,rpo);
    if (module != null && options.isRunAsyncEnabled()) {
      ReplaceRunAsyncs.exec(logger,jprogram);
      CodeSplitter.pickInitialLoadSequence(logger,jprogram,module.getProperties());
    }
    findEntryPoints(logger,rpo,declEntryPts,jprogram);
    ImplementClassLiteralsAsFields.exec(jprogram);
    if (options.getOptimizationLevel() > OptionOptimize.OPTIMIZE_LEVEL_DRAFT && !singlePermutation) {
      if (options.isOptimizePrecompile()) {
        optimize(options,jprogram);
      }
 else {
        optimizeLoop("Early Optimization",jprogram,false);
      }
    }
    Set<String> rebindRequests=new HashSet<String>();
    RecordRebinds.exec(jprogram,rebindRequests);
    if (options.isCompilerMetricsEnabled()) {
      precompilationMetrics.setAstTypes(getReferencedJavaClasses(jprogram));
    }
    Event createUnifiedAstEvent=SpeedTracerLogger.start(CompilerEventType.CREATE_UNIFIED_AST);
    UnifiedAst result=new UnifiedAst(options,new AST(jprogram,jsProgram),singlePermutation,rebindRequests);
    createUnifiedAstEvent.end();
    return result;
  }
 catch (  Throwable e) {
    throw logAndTranslateException(logger,e);
  }
 finally {
  }
}
