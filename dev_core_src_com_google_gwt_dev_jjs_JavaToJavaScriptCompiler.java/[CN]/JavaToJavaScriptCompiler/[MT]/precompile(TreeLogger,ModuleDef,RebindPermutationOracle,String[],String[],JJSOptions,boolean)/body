{
  if (additionalRootTypes == null) {
    additionalRootTypes=Empty.STRINGS;
  }
  if (declEntryPts.length + additionalRootTypes.length == 0) {
    throw new IllegalArgumentException("entry point(s) required");
  }
  Set<String> allRootTypes=new TreeSet<String>();
  for (  String element : declEntryPts) {
    String[] all=rpo.getAllPossibleRebindAnswers(logger,element);
    Collections.addAll(allRootTypes,all);
  }
  rpo.getGeneratorContext().finish(logger);
  Collections.addAll(allRootTypes,additionalRootTypes);
  allRootTypes.addAll(JProgram.CODEGEN_TYPES_SET);
  allRootTypes.addAll(JProgram.INDEX_TYPES_SET);
  allRootTypes.add(FragmentLoaderCreator.ASYNC_FRAGMENT_LOADER);
  Memory.maybeDumpMemory("CompStateBuilt");
  CompilationUnitDeclaration[] goldenCuds=WebModeCompilerFrontEnd.getCompilationUnitDeclarations(logger,allRootTypes.toArray(new String[allRootTypes.size()]),module.getCompilationState(logger),rpo);
  if (!options.isCompilationStateRetained()) {
    module.clear();
  }
  try {
    Class<?> clazz=Class.forName("com.google.gwt.i18n.rebind.ClearStaticData",false,Thread.currentThread().getContextClassLoader());
    clazz.getDeclaredMethod("clear").invoke(null);
  }
 catch (  Throwable e) {
  }
  checkForErrors(logger,goldenCuds,false);
  PerfLogger.start("Build AST");
  CorrelationFactory correlator=options.isSoycEnabled() ? new RealCorrelationFactory() : new DummyCorrelationFactory();
  JProgram jprogram=new JProgram(correlator);
  JsProgram jsProgram=new JsProgram(correlator);
  try {
    TypeMap typeMap=new TypeMap(jprogram);
    TypeDeclaration[] allTypeDeclarations=BuildTypeMap.exec(typeMap,goldenCuds,jsProgram);
    checkForErrors(logger,goldenCuds,true);
    jprogram.typeOracle.computeBeforeAST();
    GenerateJavaAST.exec(allTypeDeclarations,typeMap,jprogram,jsProgram,options);
    checkForErrors(logger,goldenCuds,true);
    Memory.maybeDumpMemory("AstBuilt");
    goldenCuds=null;
    typeMap=null;
    allTypeDeclarations=null;
    Memory.maybeDumpMemory("AstOnly");
    maybeDumpAST(jprogram);
    FixAssignmentToUnbox.exec(jprogram);
    if (options.isEnableAssertions()) {
      AssertionNormalizer.exec(jprogram);
    }
 else {
      AssertionRemover.exec(jprogram);
    }
    ReplaceRebinds.exec(logger,jprogram,rpo);
    if (options.isAggressivelyOptimize() && options.isRunAsyncEnabled()) {
      ReplaceRunAsyncs.exec(logger,jprogram);
    }
    findEntryPoints(logger,rpo,declEntryPts,jprogram);
    JavaScriptObjectNormalizer.exec(jprogram);
    if (!singlePermutation) {
      optimizeLoop(jprogram,false);
    }
    Set<String> rebindRequests=new HashSet<String>();
    RecordRebinds.exec(jprogram,rebindRequests);
    return new UnifiedAst(options,new AST(jprogram,jsProgram),singlePermutation,rebindRequests);
  }
 catch (  Throwable e) {
    throw logAndTranslateException(logger,e);
  }
 finally {
    PerfLogger.end();
  }
}
