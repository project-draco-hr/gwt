{
  Event optimizeEvent=SpeedTracerLogger.start(CompilerEventType.OPTIMIZE);
  List<OptimizerStats> allOptimizerStats=new ArrayList<OptimizerStats>();
  int passCount=0;
  int nodeCount=getNodeCount(jprogram);
  int lastNodeCount;
  boolean atMaxLevel=options.getOptimizationLevel() == OptionOptimize.OPTIMIZE_LEVEL_MAX;
  int passLimit=atMaxLevel ? MAX_PASSES : options.getOptimizationLevel();
  float minChangeRate=atMaxLevel ? FIXED_POINT_CHANGE_RATE : EFFICIENT_CHANGE_RATE;
  while (true) {
    passCount++;
    if (passCount > passLimit) {
      break;
    }
    if (Thread.interrupted()) {
      optimizeEvent.end();
      throw new InterruptedException();
    }
    AstDumper.maybeDumpAST(jprogram);
    OptimizerStats stats=optimizeLoop("Pass " + passCount,jprogram,options,nodeCount);
    allOptimizerStats.add(stats);
    lastNodeCount=nodeCount;
    nodeCount=getNodeCount(jprogram);
    float nodeChangeRate=stats.getNumMods() / (float)lastNodeCount;
    float sizeChangeRate=(lastNodeCount - nodeCount) / (float)lastNodeCount;
    if (nodeChangeRate <= minChangeRate && sizeChangeRate <= minChangeRate) {
      break;
    }
  }
  if (options.shouldOptimizeDataflow()) {
    allOptimizerStats.add(DataflowOptimizer.exec(jprogram));
  }
  if (JProgram.isTracingEnabled()) {
    System.out.println("");
    System.out.println("                Java Optimization Stats");
    System.out.println("");
    for (    OptimizerStats stats : allOptimizerStats) {
      System.out.println(stats.prettyPrint());
    }
  }
  optimizeEvent.end();
}
