{
  SpeedTracerLogger.start(CompilerEventType.OPTIMIZE,"phase","loop");
  jprogram.typeOracle.recomputeAfterOptimizations();
  boolean didChange=false;
  didChange=Pruner.exec(jprogram,true) || didChange;
  didChange=Finalizer.exec(jprogram) || didChange;
  didChange=MakeCallsStatic.exec(jprogram) || didChange;
  didChange=TypeTightener.exec(jprogram) || didChange;
  didChange=MethodCallTightener.exec(jprogram) || didChange;
  didChange=DeadCodeElimination.exec(jprogram) || didChange;
  didChange=MethodInliner.exec(jprogram) || didChange;
  if (isAggressivelyOptimize) {
    didChange=SameParameterValueOptimizer.exec(jprogram) || didChange;
  }
  SpeedTracerLogger.end(CompilerEventType.OPTIMIZE);
  return didChange;
}
