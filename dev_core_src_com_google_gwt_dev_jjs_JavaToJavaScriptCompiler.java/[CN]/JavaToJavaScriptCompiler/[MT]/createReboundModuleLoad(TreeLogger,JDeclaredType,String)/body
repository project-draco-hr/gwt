{
  if (!(reboundEntryType instanceof JClassType)) {
    logger.log(TreeLogger.ERROR,"Module entry point class '" + originalMainClassName + "' must be a class",null);
    throw new UnableToCompleteException();
  }
  JClassType entryClass=(JClassType)reboundEntryType;
  if (entryClass.isAbstract()) {
    logger.log(TreeLogger.ERROR,"Module entry point class '" + originalMainClassName + "' must not be abstract",null);
    throw new UnableToCompleteException();
  }
  JMethod entryMethod=findMainMethodRecurse(entryClass);
  if (entryMethod == null) {
    logger.log(TreeLogger.ERROR,"Could not find entry method 'onModuleLoad()' method in entry point class '" + originalMainClassName + "'",null);
    throw new UnableToCompleteException();
  }
  if (entryMethod.isAbstract()) {
    logger.log(TreeLogger.ERROR,"Entry method 'onModuleLoad' in entry point class '" + originalMainClassName + "' must not be abstract",null);
    throw new UnableToCompleteException();
  }
  SourceInfo sourceInfo=entryClass.getSourceInfo().makeChild(JavaToJavaScriptCompiler.class,"Rebound entry point");
  JExpression qualifier=null;
  if (!entryMethod.isStatic()) {
    qualifier=JGwtCreate.createInstantiationExpression(sourceInfo,entryClass);
    if (qualifier == null) {
      logger.log(TreeLogger.ERROR,"No default (zero argument) constructor could be found in entry point class '" + originalMainClassName + "' to qualify a call to non-static entry method 'onModuleLoad'",null);
      throw new UnableToCompleteException();
    }
  }
  return new JMethodCall(sourceInfo,qualifier,entryMethod);
}
