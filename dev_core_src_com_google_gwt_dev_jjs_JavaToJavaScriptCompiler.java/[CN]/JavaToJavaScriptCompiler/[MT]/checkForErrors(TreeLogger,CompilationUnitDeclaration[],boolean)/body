{
  Event checkForErrorsEvent=SpeedTracerLogger.start(CompilerEventType.CHECK_FOR_ERRORS);
  boolean compilationFailed=false;
  if (cuds.length == 0) {
    compilationFailed=true;
  }
  for (  CompilationUnitDeclaration cud : cuds) {
    final CompilationResult result=cud.compilationResult();
    if (result.hasErrors()) {
      compilationFailed=true;
      if (!itemizeErrors) {
        break;
      }
      String typeName=new String(cud.getMainTypeName());
      CompilationProblemReporter.reportErrors(logger,result.getErrors(),new String(cud.getFileName()),true,new SourceFetcher(){
        public String getSource(){
          return new String(result.getCompilationUnit().getContents());
        }
      }
,typeName,false);
    }
  }
  checkForErrorsEvent.end();
  if (compilationFailed) {
    logger.log(TreeLogger.ERROR,"Cannot proceed due to previous errors",null);
    throw new UnableToCompleteException();
  }
}
