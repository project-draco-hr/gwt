{
  JJSOptions options=unifiedAst.getOptions();
  long startTimeMilliseconds=System.currentTimeMillis();
  Event jjsCompilePermutationEvent=SpeedTracerLogger.start(CompilerEventType.JJS_COMPILE_PERMUTATION,"name",permutation.prettyPrint());
  InternalCompilerException.preload();
  PropertyOracle[] propertyOracles=permutation.getPropertyOracles();
  int permutationId=permutation.getId();
  if (logger.isLoggable(TreeLogger.INFO)) {
    logger.log(TreeLogger.INFO,"Compiling permutation " + permutationId + "...");
  }
  long permStart=System.currentTimeMillis();
  try {
    if (JProgram.isTracingEnabled()) {
      System.out.println("------------------------------------------------------------");
      System.out.println("|                     (new permuation)                     |");
      System.out.println("------------------------------------------------------------");
      System.out.println("Properties: " + permutation.prettyPrint());
    }
    AST ast=unifiedAst.getFreshAst();
    JProgram jprogram=ast.getJProgram();
    JsProgram jsProgram=ast.getJsProgram();
    Map<StandardSymbolData,JsName> symbolTable=new TreeMap<StandardSymbolData,JsName>(new SymbolData.ClassIdentComparator());
    ResolveRebinds.exec(jprogram,permutation.getOrderedRebindAnswers());
    int optimizationLevel=options.getOptimizationLevel();
    if (optimizationLevel == OptionOptimize.OPTIMIZE_LEVEL_DRAFT) {
      draftOptimize(jprogram);
    }
 else {
      optimize(options,jprogram);
    }
    RemoveEmptySuperCalls.exec(jprogram);
    JsoDevirtualizer.exec(jprogram);
    CatchBlockNormalizer.exec(jprogram);
    PostOptimizationCompoundAssignmentNormalizer.exec(jprogram);
    LongCastNormalizer.exec(jprogram);
    LongEmulationNormalizer.exec(jprogram);
    CastNormalizer.exec(jprogram,options.isCastCheckingDisabled());
    ArrayNormalizer.exec(jprogram);
    EqualityNormalizer.exec(jprogram);
    Pruner.exec(jprogram,false);
    ReplaceGetClassOverrides.exec(jprogram);
    jprogram.typeOracle.recomputeAfterOptimizations();
    JavaToJavaScriptMap jjsmap=GenerateJavaScriptAST.exec(jprogram,jsProgram,options.getOutput(),symbolTable,propertyOracles);
    JsNormalizer.exec(jsProgram);
    JsSymbolResolver.exec(jsProgram);
    EvalFunctionsAtTopScope.exec(jsProgram,jjsmap);
    if (optimizationLevel > OptionOptimize.OPTIMIZE_LEVEL_DRAFT) {
      optimizeJs(options,jsProgram);
      JsDuplicateCaseFolder.exec(jsProgram);
    }
    JsStackEmulator.exec(jprogram,jsProgram,propertyOracles,jjsmap);
    JsCoerceIntShift.exec(jsProgram,logger,propertyOracles);
    SyntheticArtifact dependencies=null;
    if (options.isRunAsyncEnabled()) {
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      int fragmentsMerge=0;
      int expectedFragmentCount=options.getFragmentCount();
      if (expectedFragmentCount > 0) {
        fragmentsMerge=jprogram.getRunAsyncs().size() + 2 - expectedFragmentCount;
      }
 else {
        fragmentsMerge=options.getFragmentsMerge();
      }
      if (fragmentsMerge > 0) {
        CodeSplitter2.exec(logger,jprogram,jsProgram,jjsmap,fragmentsMerge,chooseDependencyRecorder(options.isSoycEnabled(),baos));
      }
 else {
        CodeSplitter.exec(logger,jprogram,jsProgram,jjsmap,chooseDependencyRecorder(options.isSoycEnabled(),baos));
      }
      if (baos.size() == 0 && options.isSoycEnabled()) {
        recordNonSplitDependencies(jprogram,baos);
      }
      if (baos.size() > 0) {
        dependencies=new SyntheticArtifact(SoycReportLinker.class,"dependencies" + permutationId + ".xml.gz",baos.toByteArray());
      }
    }
    boolean isIE6orUnknown=findBooleanProperty(propertyOracles,logger,"user.agent","ie6",true,false,true);
    boolean isSourceMapsEnabled=findBooleanProperty(propertyOracles,logger,"compiler.useSourceMaps","true",true,false,false);
    Map<JsName,String> obfuscateMap=Maps.create();
switch (options.getOutput()) {
case OBFUSCATED:
      obfuscateMap=JsStringInterner.exec(jprogram,jsProgram,isIE6orUnknown);
    JsObfuscateNamer.exec(jsProgram);
  if (options.isAggressivelyOptimize()) {
    if (JsStackEmulator.getStackMode(propertyOracles) == JsStackEmulator.StackMode.STRIP) {
      boolean changed=false;
      for (int i=0; i < jsProgram.getFragmentCount(); i++) {
        JsBlock fragment=jsProgram.getFragmentBlock(i);
        changed=JsDuplicateFunctionRemover.exec(jsProgram,fragment) || changed;
      }
      if (changed) {
        JsUnusedFunctionRemover.exec(jsProgram);
        JsObfuscateNamer.exec(jsProgram);
      }
    }
  }
break;
case PRETTY:
JsPrettyNamer.exec(jsProgram);
break;
case DETAILED:
obfuscateMap=JsStringInterner.exec(jprogram,jsProgram,isIE6orUnknown);
JsVerboseNamer.exec(jsProgram);
break;
default :
throw new InternalCompilerException("Unknown output mode");
}
HandleCrossFragmentReferences.exec(logger,jsProgram,propertyOracles);
VerifySymbolMap.exec(jsProgram,jjsmap,symbolTable);
boolean splitBlocks=isIE6orUnknown;
if (splitBlocks) {
JsIEBlockSizeVisitor.exec(jsProgram);
}
JsBreakUpLargeVarStatements.exec(jsProgram,propertyOracles);
String[] js=new String[jsProgram.getFragmentCount()];
StatementRanges[] ranges=new StatementRanges[js.length];
SizeBreakdown[] sizeBreakdowns=options.isSoycEnabled() || options.isCompilerMetricsEnabled() ? new SizeBreakdown[js.length] : null;
List<Map<Range,SourceInfo>> sourceInfoMaps=new ArrayList<Map<Range,SourceInfo>>();
generateJavaScriptCode(options,jprogram,jsProgram,jjsmap,js,ranges,sizeBreakdowns,sourceInfoMaps,splitBlocks,isSourceMapsEnabled);
PermutationResult toReturn=new PermutationResultImpl(js,permutation,makeSymbolMap(symbolTable,jsProgram),ranges);
CompilationMetricsArtifact compilationMetrics=null;
if (!options.isClosureCompilerEnabled() && options.isCompilerMetricsEnabled()) {
compilationMetrics=new CompilationMetricsArtifact(permutation.getId());
compilationMetrics.setCompileElapsedMilliseconds(System.currentTimeMillis() - startTimeMilliseconds);
compilationMetrics.setElapsedMilliseconds(System.currentTimeMillis() - ManagementFactory.getRuntimeMXBean().getStartTime());
compilationMetrics.setJsSize(sizeBreakdowns);
compilationMetrics.setPermutationDescription(permutation.prettyPrint());
toReturn.addArtifacts(Lists.create(unifiedAst.getModuleMetrics(),unifiedAst.getPrecompilationMetrics(),compilationMetrics));
}
if (!options.isClosureCompilerEnabled()) {
toReturn.addArtifacts(makeSoycArtifacts(logger,permutationId,jprogram,js,sizeBreakdowns,options.isSoycExtra() ? sourceInfoMaps : null,dependencies,jjsmap,obfuscateMap,unifiedAst.getModuleMetrics(),unifiedAst.getPrecompilationMetrics(),compilationMetrics,options.isSoycHtmlDisabled()));
}
if (!options.isClosureCompilerEnabled() && isSourceMapsEnabled) {
logger.log(TreeLogger.INFO,"Source Maps Enabled");
toReturn.addArtifacts(SourceMapRecorder.makeSourceMapArtifacts(sourceInfoMaps,permutationId));
}
logTrackingStats(logger);
if (logger.isLoggable(TreeLogger.TRACE)) {
logger.log(TreeLogger.TRACE,"Permutation took " + (System.currentTimeMillis() - permStart) + " ms");
}
return toReturn;
}
 catch (Throwable e) {
throw CompilationProblemReporter.logAndTranslateException(logger,e);
}
 finally {
jjsCompilePermutationEvent.end();
}
}
