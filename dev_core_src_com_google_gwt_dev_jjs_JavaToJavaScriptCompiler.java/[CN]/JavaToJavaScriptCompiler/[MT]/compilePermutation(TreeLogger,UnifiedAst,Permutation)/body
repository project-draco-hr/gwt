{
  SpeedTracerLogger.start(CompilerEventType.JJS_COMPILE_PERMUTATION);
  InternalCompilerException.preload();
  PropertyOracle[] propertyOracles=permutation.getPropertyOracles();
  int permutationId=permutation.getId();
  logger.log(TreeLogger.INFO,"Compiling permutation " + permutationId + "...");
  long permStart=System.currentTimeMillis();
  try {
    if (JProgram.isTracingEnabled()) {
      System.out.println("------------------------------------------------------------");
      System.out.println("|                     (new permuation)                     |");
      System.out.println("------------------------------------------------------------");
    }
    AST ast=unifiedAst.getFreshAst();
    JProgram jprogram=ast.getJProgram();
    JsProgram jsProgram=ast.getJsProgram();
    JJSOptions options=unifiedAst.getOptions();
    Map<StandardSymbolData,JsName> symbolTable=new TreeMap<StandardSymbolData,JsName>(new SymbolData.ClassIdentComparator());
    ResolveRebinds.exec(jprogram,permutation.getOrderedRebindAnswers());
    if (options.isDraftCompile()) {
      draftOptimize(jprogram);
    }
 else {
      optimize(options,jprogram);
    }
    RemoveEmptySuperCalls.exec(jprogram);
    LongCastNormalizer.exec(jprogram);
    JsoDevirtualizer.exec(jprogram);
    CatchBlockNormalizer.exec(jprogram);
    PostOptimizationCompoundAssignmentNormalizer.exec(jprogram);
    LongEmulationNormalizer.exec(jprogram);
    CastNormalizer.exec(jprogram,options.isCastCheckingDisabled());
    ArrayNormalizer.exec(jprogram);
    EqualityNormalizer.exec(jprogram);
    Pruner.exec(jprogram,false);
    jprogram.typeOracle.recomputeAfterOptimizations();
    JavaToJavaScriptMap map=GenerateJavaScriptAST.exec(jprogram,jsProgram,options.getOutput(),symbolTable,propertyOracles);
    JsNormalizer.exec(jsProgram);
    JsSymbolResolver.exec(jsProgram);
    EvalFunctionsAtTopScope.exec(jsProgram,map);
    if (!options.isDraftCompile()) {
      boolean didChange;
      do {
        if (Thread.interrupted()) {
          throw new InterruptedException();
        }
        didChange=false;
        didChange=JsStaticEval.exec(jsProgram) || didChange;
        didChange=JsInliner.exec(jsProgram) || didChange;
        didChange=JsUnusedFunctionRemover.exec(jsProgram) || didChange;
      }
 while (didChange);
    }
    JsStackEmulator.exec(jsProgram,propertyOracles);
    JsCoerceIntShift.exec(jsProgram,logger,propertyOracles);
    SyntheticArtifact dependencies=null;
    if (options.isRunAsyncEnabled()) {
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      CodeSplitter.exec(logger,jprogram,jsProgram,map,chooseDependencyRecorder(options.isSoycEnabled(),baos));
      if (baos.size() == 0 && options.isSoycEnabled()) {
        recordNonSplitDependencies(jprogram,baos);
      }
      if (baos.size() > 0) {
        dependencies=new SyntheticArtifact(SoycReportLinker.class,"dependencies" + permutationId + ".xml.gz",baos.toByteArray());
      }
    }
    Map<JsName,String> obfuscateMap=Maps.create();
switch (options.getOutput()) {
case OBFUSCATED:
      obfuscateMap=JsStringInterner.exec(jprogram,jsProgram);
    JsObfuscateNamer.exec(jsProgram);
  if (options.isAggressivelyOptimize()) {
    if (JsStackEmulator.getStackMode(propertyOracles) == JsStackEmulator.StackMode.STRIP) {
      boolean changed=false;
      for (int i=0; i < jsProgram.getFragmentCount(); i++) {
        JsBlock fragment=jsProgram.getFragmentBlock(i);
        changed=JsDuplicateFunctionRemover.exec(jsProgram,fragment) || changed;
      }
      if (changed) {
        JsUnusedFunctionRemover.exec(jsProgram);
      }
    }
  }
break;
case PRETTY:
JsPrettyNamer.exec(jsProgram);
break;
case DETAILED:
obfuscateMap=JsStringInterner.exec(jprogram,jsProgram);
JsVerboseNamer.exec(jsProgram);
break;
default :
throw new InternalCompilerException("Unknown output mode");
}
HandleCrossFragmentReferences.exec(logger,jsProgram,propertyOracles);
boolean splitBlocks=false;
for (PropertyOracle oracle : propertyOracles) {
try {
SelectionProperty userAgentProperty=oracle.getSelectionProperty(logger,"user.agent");
if ("ie6".equals(userAgentProperty.getCurrentValue())) {
splitBlocks=true;
break;
}
}
 catch (BadPropertyValueException e) {
splitBlocks=true;
break;
}
}
if (splitBlocks) {
JsIEBlockSizeVisitor.exec(jsProgram);
}
JsBreakUpLargeVarStatements.exec(jsProgram,propertyOracles);
String[] js=new String[jsProgram.getFragmentCount()];
StatementRanges[] ranges=new StatementRanges[js.length];
SizeBreakdown[] sizeBreakdowns=options.isSoycEnabled() ? new SizeBreakdown[js.length] : null;
List<Map<Range,SourceInfo>> sourceInfoMaps=options.isSoycExtra() ? new ArrayList<Map<Range,SourceInfo>>() : null;
generateJavaScriptCode(options,jsProgram,map,js,ranges,sizeBreakdowns,sourceInfoMaps,splitBlocks);
PermutationResult toReturn=new PermutationResultImpl(js,permutation,makeSymbolMap(symbolTable),ranges);
toReturn.addArtifacts(makeSoycArtifacts(logger,permutationId,jprogram,js,sizeBreakdowns,sourceInfoMaps,dependencies,map,obfuscateMap));
logger.log(TreeLogger.TRACE,"Permutation took " + (System.currentTimeMillis() - permStart) + " ms");
return toReturn;
}
 catch (Throwable e) {
throw logAndTranslateException(logger,e);
}
 finally {
SpeedTracerLogger.end(CompilerEventType.JJS_COMPILE_PERMUTATION);
}
}
