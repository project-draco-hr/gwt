{
  JProgram jprogram=null;
  JsProgram jsProgram=null;
synchronized (myLockObject) {
    if (savedJProgram != null && savedJsProgram != null) {
      jprogram=savedJProgram;
      jsProgram=savedJsProgram;
      savedJProgram=null;
      savedJsProgram=null;
    }
  }
  if (jprogram == null || jsProgram == null) {
    if (serializedAst == null) {
      throw new IllegalStateException("No serialized AST was cached.");
    }
    try {
      PerfLogger.start("deserialize");
      ByteArrayInputStream bais=new ByteArrayInputStream(serializedAst);
      ObjectInputStream is;
      is=new ObjectInputStream(bais);
      jprogram=(JProgram)is.readObject();
      jsProgram=(JsProgram)is.readObject();
      PerfLogger.end();
    }
 catch (    IOException e) {
      throw new RuntimeException("Should be impossible for memory based streams",e);
    }
catch (    ClassNotFoundException e) {
      throw new RuntimeException("Should be impossible when deserializing in process",e);
    }
  }
  try {
    if (JProgram.isTracingEnabled()) {
      System.out.println("------------------------------------------------------------");
      System.out.println("|                     (new permuation)                     |");
      System.out.println("------------------------------------------------------------");
    }
    ResolveRebinds.exec(logger,jprogram,rebindOracle);
    optimize(jprogram);
    LongCastNormalizer.exec(jprogram);
    JsoDevirtualizer.exec(jprogram);
    CatchBlockNormalizer.exec(jprogram);
    PostOptimizationCompoundAssignmentNormalizer.exec(jprogram);
    LongEmulationNormalizer.exec(jprogram);
    CastNormalizer.exec(jprogram);
    ArrayNormalizer.exec(jprogram);
    EqualityNormalizer.exec(jprogram);
    Pruner.exec(jprogram,false);
    jprogram.typeOracle.recomputeClinits();
    GenerateJavaScriptAST.exec(jprogram,jsProgram,options.getOutput());
    jprogram=null;
    JsNormalizer.exec(jsProgram);
    JsSymbolResolver.exec(jsProgram);
    if (options.isAggressivelyOptimize()) {
      boolean didChange;
      do {
        didChange=false;
        didChange=JsStaticEval.exec(jsProgram) || didChange;
        didChange=JsInliner.exec(jsProgram) || didChange;
        didChange=JsUnusedFunctionRemover.exec(jsProgram) || didChange;
      }
 while (didChange);
    }
switch (options.getOutput()) {
case OBFUSCATED:
      JsStringInterner.exec(jsProgram);
    JsObfuscateNamer.exec(jsProgram);
  break;
case PRETTY:
JsPrettyNamer.exec(jsProgram);
break;
case DETAILED:
JsStringInterner.exec(jsProgram);
JsVerboseNamer.exec(jsProgram);
break;
default :
throw new InternalCompilerException("Unknown output mode");
}
JsIEBlockSizeVisitor.exec(jsProgram);
DefaultTextOutput out=new DefaultTextOutput(options.getOutput().shouldMinimize());
JsSourceGenerationVisitor v=new JsSourceGenerationVisitor(out);
v.accept(jsProgram);
return out.toString();
}
 catch (Throwable e) {
throw logAndTranslateException(logger,e);
}
}
