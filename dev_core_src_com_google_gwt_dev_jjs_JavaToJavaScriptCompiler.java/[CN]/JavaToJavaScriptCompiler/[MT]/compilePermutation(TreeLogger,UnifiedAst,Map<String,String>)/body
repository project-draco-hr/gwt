{
  try {
    if (JProgram.isTracingEnabled()) {
      System.out.println("------------------------------------------------------------");
      System.out.println("|                     (new permuation)                     |");
      System.out.println("------------------------------------------------------------");
    }
    AST ast=unifiedAst.getFreshAst();
    JProgram jprogram=ast.getJProgram();
    JsProgram jsProgram=ast.getJsProgram();
    JJSOptions options=unifiedAst.getOptions();
    ResolveRebinds.exec(jprogram,rebindAnswers);
    optimize(options,jprogram);
    LongCastNormalizer.exec(jprogram);
    JsoDevirtualizer.exec(jprogram);
    CatchBlockNormalizer.exec(jprogram);
    PostOptimizationCompoundAssignmentNormalizer.exec(jprogram);
    LongEmulationNormalizer.exec(jprogram);
    CastNormalizer.exec(jprogram);
    ArrayNormalizer.exec(jprogram);
    EqualityNormalizer.exec(jprogram);
    Pruner.exec(jprogram,false);
    jprogram.typeOracle.recomputeClinits();
    final JavaToJavaScriptMap map=GenerateJavaScriptAST.exec(jprogram,jsProgram,options.getOutput());
    JsNormalizer.exec(jsProgram);
    JsSymbolResolver.exec(jsProgram);
    if (options.isAggressivelyOptimize()) {
      boolean didChange;
      do {
        if (Thread.interrupted()) {
          throw new InterruptedException();
        }
        didChange=false;
        didChange=JsStaticEval.exec(jsProgram) || didChange;
        didChange=JsInliner.exec(jsProgram) || didChange;
        didChange=JsUnusedFunctionRemover.exec(jsProgram) || didChange;
      }
 while (didChange);
    }
    final Map<JsName,String> stringLiteralMap;
switch (options.getOutput()) {
case OBFUSCATED:
      stringLiteralMap=JsStringInterner.exec(jsProgram);
    JsObfuscateNamer.exec(jsProgram);
  break;
case PRETTY:
stringLiteralMap=new HashMap<JsName,String>();
JsPrettyNamer.exec(jsProgram);
break;
case DETAILED:
stringLiteralMap=JsStringInterner.exec(jsProgram);
JsVerboseNamer.exec(jsProgram);
break;
default :
throw new InternalCompilerException("Unknown output mode");
}
JavaToJavaScriptMap postStringInterningMap=addStringLiteralMap(map,stringLiteralMap);
if (options.isAggressivelyOptimize() && options.isRunAsyncEnabled()) {
CodeSplitter.exec(logger,jprogram,jsProgram,postStringInterningMap);
}
JsIEBlockSizeVisitor.exec(jsProgram);
String[] js=new String[jsProgram.getFragmentCount()];
List<Map<Range,SourceInfo>> sourceInfoMaps=options.isSoycEnabled() ? new ArrayList<Map<Range,SourceInfo>>(jsProgram.getFragmentCount()) : null;
for (int i=0; i < js.length; i++) {
if (sourceInfoMaps != null) {
CountingTextOutput out=new CountingTextOutput(options.getOutput().shouldMinimize());
JsReportGenerationVisitor v=new JsReportGenerationVisitor(out);
v.accept(jsProgram.getFragmentBlock(i));
js[i]=out.toString();
sourceInfoMaps.add(v.getSourceInfoMap());
}
 else {
DefaultTextOutput out=new DefaultTextOutput(options.getOutput().shouldMinimize());
JsSourceGenerationVisitor v=new JsSourceGenerationVisitor(out);
v.accept(jsProgram.getFragmentBlock(i));
js[i]=out.toString();
}
}
PermutationResult toReturn=new PermutationResultImpl(js);
if (sourceInfoMaps != null) {
toReturn.getArtifacts().add(new StandardCompilationAnalysis(logger,sourceInfoMaps,jprogram.getSplitPointMap()));
}
return toReturn;
}
 catch (Throwable e) {
throw logAndTranslateException(logger,e);
}
}
