{
  IterationTimeLimit limit=method.getAnnotation(IterationTimeLimit.class);
  if (limit == null) {
    bound.value=getDefaultTimeout();
  }
 else {
    bound.value=limit.value();
  }
  Map<String,String> paramMetaData=new HashMap<String,String>();
  JParameter[] params=method.getParameters();
  for (  JParameter param : params) {
    RangeField rangeField=param.getAnnotation(RangeField.class);
    if (rangeField != null) {
      String fieldName=rangeField.value();
      JClassType enclosingType=method.getEnclosingType();
      if (!fieldExists(enclosingType,fieldName)) {
        logger.log(TreeLogger.ERROR,"The RangeField annotation on " + enclosingType + " at "+ method+ " specifies a field, "+ fieldName+ ", which could not be found. Perhaps it is "+ "mis-spelled?",null);
        throw new UnableToCompleteException();
      }
      paramMetaData.put(param.getName(),fieldName);
      continue;
    }
    RangeEnum rangeEnum=param.getAnnotation(RangeEnum.class);
    if (rangeEnum != null) {
      Class<? extends Enum<?>> enumClass=rangeEnum.value();
      String className=enumClass.getName().replace('$','.');
      paramMetaData.put(param.getName(),className + ".values()");
      continue;
    }
    String msg="The parameter, " + param.getName() + ", on method, "+ method.getName()+ ", must have it's range specified"+ "by a RangeField or RangeEnum annotation.";
    logger.log(TreeLogger.ERROR,msg,null);
    throw new UnableToCompleteException();
  }
  return paramMetaData;
}
