{
  boolean wasFound=false;
  JClassType expectedType=oracle.getType(expectedTypeName);
  JClassType searchType=oracle.getType(searchTypeName);
  JType[] paramTypes=new JType[paramTypeNames.length];
  for (int i=0; i < paramTypeNames.length; i++) {
    String paramTypeName=paramTypeNames[i];
    paramTypes[i]=oracle.parse(paramTypeName);
  }
  JMethod[] leafMethods=searchType.getOverridableMethods();
  for (int i=0; i < leafMethods.length; i++) {
    JMethod method=leafMethods[i];
    if (method.getName().equals(methodName)) {
      if (method.hasParamTypes(paramTypes)) {
        String typeName=method.getEnclosingType().getQualifiedSourceName();
        assertEquals(expectedTypeName,typeName);
        wasFound=true;
        break;
      }
    }
  }
  if (shouldBeFound) {
    if (wasFound) {
    }
 else {
      fail("Did not find expected method '" + methodName + "' on type '"+ expectedTypeName+ "'");
    }
  }
 else {
    if (wasFound) {
      fail("Did not expect to find method '" + methodName + "' on type '"+ expectedTypeName+ "'");
    }
 else {
    }
  }
}
