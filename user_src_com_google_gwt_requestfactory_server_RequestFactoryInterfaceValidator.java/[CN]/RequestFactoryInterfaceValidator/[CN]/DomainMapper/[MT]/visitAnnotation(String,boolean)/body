{
  boolean expectClasses=false;
  boolean expectNames=false;
  if (desc.equals(Type.getDescriptor(ProxyFor.class))) {
    expectClasses=true;
    found.add(ProxyFor.class);
  }
 else   if (desc.equals(Type.getDescriptor(ProxyForName.class))) {
    expectNames=true;
    found.add(ProxyForName.class);
  }
 else   if (desc.equals(Type.getDescriptor(Service.class))) {
    expectClasses=true;
    found.add(Service.class);
  }
 else   if (desc.equals(Type.getDescriptor(ServiceName.class))) {
    expectNames=true;
    found.add(ServiceName.class);
  }
  if (expectClasses) {
    return new EmptyVisitor(){
      @Override public void visit(      String name,      Object value){
        if ("value".equals(name)) {
          domainInternalName=((Type)value).getInternalName();
        }
 else         if ("locator".equals(name)) {
          locatorInternalName=((Type)value).getInternalName();
        }
      }
    }
;
  }
  if (expectNames) {
    return new EmptyVisitor(){
      @Override public void visit(      String name,      Object value){
        String sourceName;
        if ("value".equals(name) || "locator".equals(name)) {
          sourceName=(String)value;
        }
 else {
          return;
        }
        StringBuffer desc=new StringBuffer(sourceName.replace('.','/'));
        while (!loader.exists(desc.toString() + ".class")) {
          logger.spam("Did not find " + desc.toString());
          int idx=desc.lastIndexOf("/");
          if (idx == -1) {
            return;
          }
          desc.setCharAt(idx,'$');
        }
        if ("locator".equals(name)) {
          locatorInternalName=desc.toString();
        }
 else {
          domainInternalName=desc.toString();
        }
        logger.spam(domainInternalName);
      }
    }
;
  }
  return null;
}
