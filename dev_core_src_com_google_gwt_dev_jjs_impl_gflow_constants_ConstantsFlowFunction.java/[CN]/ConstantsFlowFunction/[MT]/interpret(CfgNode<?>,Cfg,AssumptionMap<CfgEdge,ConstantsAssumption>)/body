{
  ConstantsAssumption in=AssumptionUtil.join(graph.getInEdges(node),assumptionMap);
  final int outSize=graph.getOutEdges(node).size();
  final ArrayList<ConstantsAssumption> result=new ArrayList<ConstantsAssumption>(outSize);
  final Updater assumption=new Updater(in);
  node.accept(new CfgVisitor(){
    @Override public void visitConditionalNode(    CfgConditionalNode<?> x){
      JExpression condition=x.getCondition();
      Updater thenAssumptions=assumption.copy();
      Updater elseAssumptions=assumption.copy();
      Preconditions.checkNotNull(condition,"Null condition in %s",x);
      AssumptionDeducer.deduceAssumption(condition,JBooleanLiteral.TRUE,thenAssumptions);
      AssumptionDeducer.deduceAssumption(condition,JBooleanLiteral.FALSE,elseAssumptions);
      for (      CfgEdge e : graph.getOutEdges(x)) {
        if (CfgConditionalNode.THEN.equals(e.getRole())) {
          result.add(thenAssumptions.unwrap());
        }
 else         if (CfgConditionalNode.ELSE.equals(e.getRole())) {
          result.add(elseAssumptions.unwrap());
        }
 else {
          result.add(assumption.unwrap());
        }
      }
    }
    @Override public void visitNode(    CfgNode<?> node){
      for (int i=0; i < graph.getOutEdges(node).size(); ++i) {
        result.add(assumption.unwrap());
      }
    }
    @Override public void visitReadWriteNode(    CfgReadWriteNode node){
      processWrite(assumption,node.getTargetVariable(),node.getValue());
      super.visitReadWriteNode(node);
    }
    @Override public void visitWriteNode(    CfgWriteNode node){
      processWrite(assumption,node.getTargetVariable(),node.getValue());
      super.visitWriteNode(node);
    }
    private void processWrite(    final Updater assumption,    JVariable var,    JExpression expression){
      if (var == null) {
        return;
      }
      if (var instanceof JParameter || var instanceof JLocal) {
        if (expression != null) {
          JValueLiteral valueLiteral=ExpressionEvaluator.evaluate(expression,assumption.unwrap());
          if (valueLiteral != null && (valueLiteral.getType() == var.getType() || valueLiteral instanceof JNullLiteral)) {
            assumption.set(var,valueLiteral);
          }
 else {
            assumption.set(var,null);
          }
        }
 else {
          assumption.set(var,null);
        }
      }
    }
  }
);
  AssumptionUtil.setAssumptions(graph.getOutEdges(node),result,assumptionMap);
}
