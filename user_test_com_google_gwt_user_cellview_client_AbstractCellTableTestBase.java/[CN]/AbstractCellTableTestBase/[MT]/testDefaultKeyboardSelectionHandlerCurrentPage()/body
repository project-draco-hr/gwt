{
  T table=createAbstractHasData();
  DefaultKeyboardSelectionHandler<String> keyHandler=new DefaultKeyboardSelectionHandler<String>(table);
  table.setKeyboardSelectionHandler(keyHandler);
  HasDataPresenter<String> presenter=table.getPresenter();
  table.setRowCount(100,true);
  table.setVisibleRange(new Range(50,10));
  populateData(table);
  presenter.flush();
  table.setKeyboardPagingPolicy(KeyboardPagingPolicy.CURRENT_PAGE);
  table.setKeyboardSelectedRow(1);
  presenter.flush();
  assertEquals(1,table.getKeyboardSelectedRow());
  keyHandler.prevRow();
  presenter.flush();
  assertEquals(0,table.getKeyboardSelectedRow());
  keyHandler.prevRow();
  presenter.flush();
  assertEquals(0,table.getKeyboardSelectedRow());
  assertEquals(new Range(50,10),table.getVisibleRange());
  table.setKeyboardSelectedRow(8);
  presenter.flush();
  assertEquals(8,table.getKeyboardSelectedRow());
  keyHandler.nextRow();
  presenter.flush();
  assertEquals(9,table.getKeyboardSelectedRow());
  keyHandler.nextRow();
  presenter.flush();
  assertEquals(9,table.getKeyboardSelectedRow());
  assertEquals(new Range(50,10),table.getVisibleRange());
  keyHandler.prevPage();
  presenter.flush();
  assertEquals(9,table.getKeyboardSelectedRow());
  assertEquals(new Range(50,10),table.getVisibleRange());
  keyHandler.nextPage();
  presenter.flush();
  assertEquals(9,table.getKeyboardSelectedRow());
  assertEquals(new Range(50,10),table.getVisibleRange());
  keyHandler.home();
  presenter.flush();
  assertEquals(0,table.getKeyboardSelectedRow());
  assertEquals(new Range(50,10),table.getVisibleRange());
  keyHandler.end();
  presenter.flush();
  assertEquals(9,table.getKeyboardSelectedRow());
  assertEquals(new Range(50,10),table.getVisibleRange());
}
