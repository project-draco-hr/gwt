{
  T table=createAbstractHasData(new TextCell());
  CellTableBuilder<String> builder=new AbstractCellTable.DefaultCellTableBuilder<String>(table){
    @Override public void buildRow(    String rowValue,    int absRowIndex,    CellTableBuilder.Utility<String> utility){
      super.buildRow(rowValue,absRowIndex,utility);
      if (absRowIndex == 5) {
        for (int i=0; i < 4; i++) {
          TableRowBuilder tr=utility.startRow();
          tr.startTD().colSpan(2).text("child " + i).endTD();
          tr.endTR();
        }
      }
    }
  }
;
  table.setTableBuilder(builder);
  table.setVisibleRange(0,10);
  populateData(table);
  table.getPresenter().flush();
  TableSectionElement tbody=table.getTableBodyElement();
  assertEquals(14,tbody.getChildCount());
  assertEquals("child 0",getBodyElement(table,6,0).getInnerText());
  assertEquals("child 1",getBodyElement(table,7,0).getInnerText());
  assertEquals("child 2",getBodyElement(table,8,0).getInnerText());
  assertEquals("child 3",getBodyElement(table,9,0).getInnerText());
  assertEquals("test 5",table.getVisibleItem(5));
  assertEquals("test 9",table.getVisibleItem(9));
  assertEquals(4,table.getChildElement(4).getSectionRowIndex());
  assertEquals(5,table.getChildElement(5).getSectionRowIndex());
  assertEquals(10,table.getChildElement(6).getSectionRowIndex());
}
