{
  T table=createAbstractHasData(new TextCell());
  table.getColumn(0).setSortable(true);
  table.getPresenter().flush();
  RootPanel.get().add(table);
  final List<Column<?,?>> lastSorted=new ArrayList<Column<?,?>>();
  table.addColumnSortHandler(new ColumnSortEvent.Handler(){
    @Override public void onColumnSort(    ColumnSortEvent event){
      lastSorted.clear();
      lastSorted.add(event.getColumn());
    }
  }
);
  ColumnSortList sortList=table.getColumnSortList();
  assertEquals(0,sortList.size());
  NativeEvent click=Document.get().createClickEvent(0,0,0,0,0,false,false,false,false);
  getHeaderElement(table,0).dispatchEvent(click);
  assertEquals(1,sortList.size());
  assertEquals(table.getColumn(0),sortList.get(0).getColumn());
  assertTrue(sortList.get(0).isAscending());
  assertEquals(1,lastSorted.size());
  lastSorted.clear();
  getHeaderElement(table,0).dispatchEvent(click);
  assertEquals(1,sortList.size());
  assertEquals(table.getColumn(0),sortList.get(0).getColumn());
  assertFalse(sortList.get(0).isAscending());
  assertEquals(1,lastSorted.size());
  lastSorted.clear();
  getHeaderElement(table,1).dispatchEvent(click);
  assertEquals(1,sortList.size());
  assertEquals(table.getColumn(0),sortList.get(0).getColumn());
  assertFalse(sortList.get(0).isAscending());
  assertEquals(0,lastSorted.size());
  RootPanel.get().remove(table);
}
