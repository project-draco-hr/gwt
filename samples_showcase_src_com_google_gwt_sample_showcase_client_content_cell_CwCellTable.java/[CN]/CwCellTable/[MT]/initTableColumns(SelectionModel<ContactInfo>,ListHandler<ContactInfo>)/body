{
  Column<ContactInfo,Boolean> checkColumn=new Column<ContactInfo,Boolean>(new CheckboxCell(true,false)){
    @Override public Boolean getValue(    ContactInfo object){
      return selectionModel.isSelected(object);
    }
  }
;
  cellTable.addColumn(checkColumn,SafeHtmlUtils.fromSafeConstant("<br/>"));
  cellTable.setColumnWidth(checkColumn,40,Unit.PX);
  Column<ContactInfo,String> firstNameColumn=new Column<ContactInfo,String>(new EditTextCell()){
    @Override public String getValue(    ContactInfo object){
      return object.getFirstName();
    }
  }
;
  firstNameColumn.setSortable(true);
  sortHandler.setComparator(firstNameColumn,new Comparator<ContactInfo>(){
    @Override public int compare(    ContactInfo o1,    ContactInfo o2){
      return o1.getFirstName().compareTo(o2.getFirstName());
    }
  }
);
  cellTable.addColumn(firstNameColumn,constants.cwCellTableColumnFirstName());
  firstNameColumn.setFieldUpdater(new FieldUpdater<ContactInfo,String>(){
    @Override public void update(    int index,    ContactInfo object,    String value){
      object.setFirstName(value);
      ContactDatabase.get().refreshDisplays();
    }
  }
);
  cellTable.setColumnWidth(firstNameColumn,20,Unit.PCT);
  Column<ContactInfo,String> lastNameColumn=new Column<ContactInfo,String>(new EditTextCell()){
    @Override public String getValue(    ContactInfo object){
      return object.getLastName();
    }
  }
;
  lastNameColumn.setSortable(true);
  sortHandler.setComparator(lastNameColumn,new Comparator<ContactInfo>(){
    @Override public int compare(    ContactInfo o1,    ContactInfo o2){
      return o1.getLastName().compareTo(o2.getLastName());
    }
  }
);
  cellTable.addColumn(lastNameColumn,constants.cwCellTableColumnLastName());
  lastNameColumn.setFieldUpdater(new FieldUpdater<ContactInfo,String>(){
    @Override public void update(    int index,    ContactInfo object,    String value){
      object.setLastName(value);
      ContactDatabase.get().refreshDisplays();
    }
  }
);
  cellTable.setColumnWidth(lastNameColumn,20,Unit.PCT);
  final Category[] categories=ContactDatabase.get().queryCategories();
  List<String> categoryNames=new ArrayList<String>();
  for (  Category category : categories) {
    categoryNames.add(category.getDisplayName());
  }
  SelectionCell categoryCell=new SelectionCell(categoryNames);
  Column<ContactInfo,String> categoryColumn=new Column<ContactInfo,String>(categoryCell){
    @Override public String getValue(    ContactInfo object){
      return object.getCategory().getDisplayName();
    }
  }
;
  cellTable.addColumn(categoryColumn,constants.cwCellTableColumnCategory());
  categoryColumn.setFieldUpdater(new FieldUpdater<ContactInfo,String>(){
    @Override public void update(    int index,    ContactInfo object,    String value){
      for (      Category category : categories) {
        if (category.getDisplayName().equals(value)) {
          object.setCategory(category);
        }
      }
      ContactDatabase.get().refreshDisplays();
    }
  }
);
  cellTable.setColumnWidth(categoryColumn,130,Unit.PX);
  Column<ContactInfo,String> addressColumn=new Column<ContactInfo,String>(new TextCell()){
    @Override public String getValue(    ContactInfo object){
      return object.getAddress();
    }
  }
;
  addressColumn.setSortable(true);
  addressColumn.setDefaultSortAscending(false);
  sortHandler.setComparator(addressColumn,new Comparator<ContactInfo>(){
    @Override public int compare(    ContactInfo o1,    ContactInfo o2){
      return o1.getAddress().compareTo(o2.getAddress());
    }
  }
);
  cellTable.addColumn(addressColumn,constants.cwCellTableColumnAddress());
  cellTable.setColumnWidth(addressColumn,60,Unit.PCT);
}
