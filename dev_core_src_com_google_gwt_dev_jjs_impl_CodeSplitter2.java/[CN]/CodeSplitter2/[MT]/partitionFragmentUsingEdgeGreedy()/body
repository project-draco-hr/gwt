{
  int[][] matrix=new int[splitPointToFragmentMap.length][splitPointToFragmentMap.length];
  countShardedAtomsOfType(liveness.fields,matrix);
  countShardedAtomsOfType(liveness.methods,matrix);
  countShardedAtomsOfType(liveness.strings,matrix);
  countShardedAtomsOfType(liveness.types,matrix);
  for (int c=0; c < splitPointsMerge; c++) {
    int bestI=0, bestJ=0, max=0;
    for (int i=1; i < splitPointToFragmentMap.length; i++) {
      if (initialLoadSequence.contains(i)) {
        continue;
      }
      for (int j=1; j < splitPointToFragmentMap.length; j++) {
        if (initialLoadSequence.contains(j)) {
          continue;
        }
        if (matrix[i][j] > max && splitPointToFragmentMap[i] == i && splitPointToFragmentMap[j] == j) {
          bestI=i;
          bestJ=j;
          max=matrix[i][j];
        }
      }
    }
    if (max == 0) {
      break;
    }
    splitPointToFragmentMap[bestJ]=bestI;
    splitPointToFragmentMap[bestI]=-1;
    matrix[bestI][bestJ]=0;
    System.out.println("merging: " + bestI + " "+ bestJ);
  }
  for (int i=0; i < splitPointToFragmentMap.length; i++) {
    if (splitPointToFragmentMap[i] < 0) {
      splitPointToFragmentMap[i]=i;
    }
  }
}
