{
  int sizeInBytes=0;
  TextOutput out=new TextOutput(){
    int count=0;
    @Override public int getColumn(){
      return 0;
    }
    @Override public int getLine(){
      return 0;
    }
    @Override public int getPosition(){
      return count;
    }
    @Override public void indentIn(){
    }
    @Override public void indentOut(){
    }
    @Override public void newline(){
      inc(1);
    }
    @Override public void newlineOpt(){
    }
    @Override public void print(    char c){
      inc(1);
    }
    @Override public void print(    char[] s){
      inc(s.length);
    }
    @Override public void print(    String s){
      inc(s.length());
    }
    private void inc(    int length){
      count+=length;
      if (count >= leftOverMergeLimit) {
        throw new MergeLimitExceededException();
      }
    }
    @Override public void printOpt(    char c){
    }
    @Override public void printOpt(    char[] s){
    }
    @Override public void printOpt(    String s){
    }
  }
;
  try {
    JsToStringGenerationVisitor v=new JsToStringGenerationVisitor(out);
    for (    JsStatement stat : stats) {
      v.accept(stat);
    }
    sizeInBytes+=out.getPosition();
  }
 catch (  InternalCompilerException me) {
    if (me.getCause().getClass() == MergeLimitExceededException.class) {
      return false;
    }
 else {
      throw me;
    }
  }
  return sizeInBytes < leftOverMergeLimit;
}
