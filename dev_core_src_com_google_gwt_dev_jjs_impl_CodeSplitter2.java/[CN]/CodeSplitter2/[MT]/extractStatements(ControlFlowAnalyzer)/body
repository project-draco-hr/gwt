{
  Map<Integer,List<JsStatement>> fragmentStats=new LinkedHashMap<Integer,List<JsStatement>>();
{
    LivenessPredicate alreadyLoaded=new NothingAlivePredicate();
    LivenessPredicate liveNow=new CfaLivenessPredicate(initiallyLive);
    List<JsStatement> noStats=new ArrayList<JsStatement>();
    addFragment(0,alreadyLoaded,liveNow,noStats,fragmentStats);
  }
  ControlFlowAnalyzer liveAfterInitialSequence=new ControlFlowAnalyzer(initiallyLive);
  int cacheIndex=1;
{
    for (    final int sp : initialLoadSequence) {
      splitPointToCodeIndexMap[sp]=cacheIndex;
      LivenessPredicate alreadyLoaded=new CfaLivenessPredicate(liveAfterInitialSequence);
      ControlFlowAnalyzer liveAfterSp=new ControlFlowAnalyzer(liveAfterInitialSequence);
      JRunAsync runAsync=jprogram.getRunAsyncs().get(sp - 1);
      liveAfterSp.traverseFromRunAsync(runAsync);
      LivenessPredicate liveNow=new CfaLivenessPredicate(liveAfterSp);
      List<JsStatement> statsToAppend=fragmentExtractor.createOnLoadedCall(cacheIndex);
      addFragment(sp,alreadyLoaded,liveNow,statsToAppend,fragmentStats);
      liveAfterInitialSequence=liveAfterSp;
      cacheIndex++;
    }
  }
  ControlFlowAnalyzer everything=computeCompleteCfa();
  Set<JField> allFields=new HashSet<JField>();
  Set<JMethod> allMethods=new HashSet<JMethod>();
  for (  JNode node : everything.getLiveFieldsAndMethods()) {
    if (node instanceof JField) {
      allFields.add((JField)node);
    }
    if (node instanceof JMethod) {
      allMethods.add((JMethod)node);
    }
  }
  allFields.addAll(everything.getFieldsWritten());
  for (int i=1; i < splitPointToFragmentMap.length; i++) {
    ArrayList<Integer> splitPoints=new ArrayList<Integer>();
    if (splitPointToFragmentMap[i] != i) {
      continue;
    }
    if (initialLoadSequence.contains(i)) {
      continue;
    }
    splitPoints.add(i);
    splitPointToCodeIndexMap[i]=cacheIndex;
    for (int j=i + 1; j < splitPointToFragmentMap.length; j++) {
      if (initialLoadSequence.contains(j)) {
        continue;
      }
      if (splitPointToFragmentMap[j] == i) {
        splitPointToCodeIndexMap[j]=cacheIndex;
        splitPoints.add(j);
      }
    }
    ControlFlowAnalyzer allButOne=computeAllButNCfas(liveAfterInitialSequence,splitPoints);
    ControlFlowAnalyzer allFromSplitPoints=computeAllLiveFromSplitPoints(liveAfterInitialSequence,splitPoints);
    Set<JNode> allLiveNodes=union(allButOne.getLiveFieldsAndMethods(),allButOne.getFieldsWritten());
    Set<JNode> allLiveFromSplitPoints=union(allFromSplitPoints.getLiveFieldsAndMethods(),allFromSplitPoints.getFieldsWritten());
    updateReverseMap(i,fragmentMap.fields,allLiveNodes,allFields,allLiveFromSplitPoints);
    updateReverseMap(i,fragmentMap.methods,allButOne.getLiveFieldsAndMethods(),allMethods,allFromSplitPoints.getLiveFieldsAndMethods());
    updateReverseMap(i,fragmentMap.strings,allButOne.getLiveStrings(),everything.getLiveStrings(),allFromSplitPoints.getLiveStrings());
    updateReverseMap(i,fragmentMap.types,declaredTypesIn(allButOne.getInstantiatedTypes()),declaredTypesIn(everything.getInstantiatedTypes()),declaredTypesIn(allFromSplitPoints.getInstantiatedTypes()));
    if (splitPointToFragmentMap[i] != i) {
      continue;
    }
    if (initialLoadSequence.contains(i)) {
      continue;
    }
    LivenessPredicate alreadyLoaded=new ExclusivityMapLivenessPredicate(fragmentMap,0);
    LivenessPredicate liveNow=new ExclusivityMapLivenessPredicate(fragmentMap,i);
    List<JsStatement> statsToAppend=fragmentExtractor.createOnLoadedCall(cacheIndex);
    addFragment(i,alreadyLoaded,liveNow,statsToAppend,fragmentStats);
    cacheIndex++;
  }
{
    LivenessPredicate alreadyLoaded=new CfaLivenessPredicate(liveAfterInitialSequence);
    LivenessPredicate liveNow=new ExclusivityMapLivenessPredicate(fragmentMap,0);
    List<JsStatement> statsToAppend=fragmentExtractor.createOnLoadedCall(cacheIndex);
    addFragment(splitPointToFragmentMap.length,alreadyLoaded,liveNow,statsToAppend,fragmentStats);
  }
  jsprogram.setFragmentCount(fragmentStats.size());
  int count=0;
  for (  int i : fragmentStats.keySet()) {
    JsBlock fragBlock=jsprogram.getFragmentBlock(count++);
    fragBlock.getStatements().clear();
    fragBlock.getStatements().addAll(fragmentStats.get(i));
  }
  jprogram.setFragmentPartitioningResult(new FragmentPartitioningResult(splitPointToCodeIndexMap,fragmentStats.size()));
}
