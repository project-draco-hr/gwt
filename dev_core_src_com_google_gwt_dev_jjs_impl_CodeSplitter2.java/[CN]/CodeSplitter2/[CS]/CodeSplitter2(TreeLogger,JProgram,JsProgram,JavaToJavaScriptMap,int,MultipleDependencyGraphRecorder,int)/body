{
  this.jprogram=jprogram;
  this.jsprogram=jsprogram;
  this.splitPointsMerge=splitPointsMerge;
  this.leftOverMergeLimit=leftOverMergeLimit;
  this.dependencyRecorder=dependencyRecorder;
  this.fragmentExtractor=new FragmentExtractor(jprogram,jsprogram,map);
  this.initialLoadSequence=new LinkedHashSet<Integer>(jprogram.getSplitPointInitialSequence());
  this.splitPointToFragmentMap=new int[jprogram.getRunAsyncs().size() + 1];
  for (int i=0; i < splitPointToFragmentMap.length; i++) {
    splitPointToFragmentMap[i]=i;
  }
  this.splitPointToCodeIndexMap=new int[jprogram.getRunAsyncs().size() + 1];
  for (int i=0; i < splitPointToCodeIndexMap.length; i++) {
    splitPointToCodeIndexMap[i]=0;
  }
  fieldToLiteralOfClass=buildFieldToClassLiteralMap(jprogram);
  fragmentExtractor=new FragmentExtractor(jprogram,jsprogram,map);
  methodsInJavaScript=fragmentExtractor.findAllMethodsInJavaScript();
}
