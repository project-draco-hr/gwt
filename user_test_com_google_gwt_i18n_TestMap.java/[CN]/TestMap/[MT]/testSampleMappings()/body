{
  Object[] keys=getSampleKeys();
  Object[] values=getSampleValues();
  Object[] newValues=getNewSampleValues();
  assertTrue("failure in test: Must have keys returned from " + "getSampleKeys.",keys != null);
  assertTrue("failure in test: Must have values returned from " + "getSampleValues.",values != null);
  assertEquals("failure in test: not the same number of sample " + "keys and values.",keys.length,values.length);
  assertEquals("failure in test: not the same number of values and new values.",values.length,newValues.length);
  for (int i=0; i < keys.length - 1; i++) {
    for (int j=i + 1; j < keys.length; j++) {
      assertTrue("failure in test: duplicate null keys.",(keys[i] != null || keys[j] != null));
      assertTrue("failure in test: duplicate non-null key.",(keys[i] == null || keys[j] == null || (!keys[i].equals(keys[j]) && !keys[j].equals(keys[i]))));
    }
    assertTrue("failure in test: found null key, but useNullKey " + "is false.",keys[i] != null || useNullKey());
    assertTrue("failure in test: found null value, but useNullValue " + "is false.",values[i] != null || useNullValue());
    assertTrue("failure in test: found null new value, but useNullValue " + "is false.",newValues[i] != null || useNullValue());
    assertTrue("failure in test: values should not be the same as new value",values[i] != newValues[i] && (values[i] == null || !values[i].equals(newValues[i])));
  }
}
