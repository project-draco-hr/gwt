{
  TypeOracle typeOracle=ctx.getTypeOracle();
  assert(typeOracle != null);
  JClassType remoteService=typeOracle.findType(requestedClass);
  if (remoteService == null) {
    logger.log(TreeLogger.ERROR,"Unable to find metadata for type '" + requestedClass + "'",null);
    throw new UnableToCompleteException();
  }
  if (remoteService.isInterface() == null) {
    logger.log(TreeLogger.ERROR,remoteService.getQualifiedSourceName() + " is not an interface",null);
    throw new UnableToCompleteException();
  }
  logger=logger.branch(TreeLogger.DEBUG,"Generating client proxy for remote service interface '" + remoteService.getQualifiedSourceName() + "'",null);
  SerializableTypeOracleBuilder stob=new SerializableTypeOracleBuilder(logger,typeOracle);
  SerializableTypeOracle sto=stob.build(ctx.getPropertyOracle(),remoteService);
  generateTypeSerializer(logger,ctx,remoteService,sto);
  return generateProxy(logger,ctx,remoteService,sto);
}
