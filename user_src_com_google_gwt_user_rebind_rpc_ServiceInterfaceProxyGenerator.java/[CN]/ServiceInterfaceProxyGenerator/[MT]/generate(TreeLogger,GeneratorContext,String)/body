{
  TypeOracle typeOracle=ctx.getTypeOracle();
  assert(typeOracle != null);
  JType requestedType=typeOracle.findType(requestedClass);
  if (requestedType == null) {
    logger.log(TreeLogger.ERROR,"Unable to find metadata for type '" + requestedClass + "'",null);
    throw new UnableToCompleteException();
  }
  JClassType serviceIntf=requestedType.isInterface();
  if (serviceIntf == null) {
    logger.log(TreeLogger.ERROR,requestedType.getQualifiedSourceName() + " is not an interface",null);
    throw new UnableToCompleteException();
  }
  JType[] reachableTypes=getReachableTypes(logger,serviceIntf);
  SerializableTypeOracle serializableTypeOracle;
  try {
    JClassType stringType=typeOracle.getType("java.lang.String");
    if (!contains(reachableTypes,stringType)) {
      reachableTypes=add(reachableTypes,stringType);
    }
    serializableTypeOracle=getSerializableTypeOracle(logger,typeOracle,reachableTypes);
    if (!isValidServiceInterface(logger,ctx,serializableTypeOracle,serviceIntf)) {
      return null;
    }
    generateTypeSerializer(logger,ctx,serviceIntf,serializableTypeOracle);
  }
 catch (  NotFoundException e) {
    logger.log(TreeLogger.ERROR,e.getMessage(),null);
    throw new UnableToCompleteException();
  }
catch (  TypeOracleException e) {
    logger.log(TreeLogger.ERROR,"Unexpected TypeOracleException",e);
    throw new UnableToCompleteException();
  }
  String proxyClassName=generateProxy(logger,ctx,serviceIntf,serializableTypeOracle);
  return proxyClassName;
}
