{
  int sum=0;
  try {
    for (    Method method : annotationClass.getDeclaredMethods()) {
      Object myVal=method.invoke(proxy);
      int memberHash;
      if (myVal instanceof Object[]) {
        memberHash=Arrays.hashCode((Object[])myVal);
      }
 else       if (myVal instanceof boolean[]) {
        memberHash=Arrays.hashCode((boolean[])myVal);
      }
 else       if (myVal instanceof byte[]) {
        memberHash=Arrays.hashCode((byte[])myVal);
      }
 else       if (myVal instanceof char[]) {
        memberHash=Arrays.hashCode((char[])myVal);
      }
 else       if (myVal instanceof short[]) {
        memberHash=Arrays.hashCode((short[])myVal);
      }
 else       if (myVal instanceof int[]) {
        memberHash=Arrays.hashCode((int[])myVal);
      }
 else       if (myVal instanceof long[]) {
        memberHash=Arrays.hashCode((long[])myVal);
      }
 else       if (myVal instanceof float[]) {
        memberHash=Arrays.hashCode((float[])myVal);
      }
 else       if (myVal instanceof double[]) {
        memberHash=Arrays.hashCode((double[])myVal);
      }
 else {
        memberHash=myVal.hashCode();
      }
      memberHash^=127 * method.getName().hashCode();
      sum+=memberHash;
    }
  }
 catch (  IllegalArgumentException e) {
    throw new RuntimeException(e);
  }
catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
catch (  InvocationTargetException e) {
    throw new RuntimeException(e.getTargetException());
  }
  return sum;
}
