def RenameTypes(self, database, conversion_table, rename_javascript_binding_names):
    'Renames interfaces using the given conversion table.\n\n    References through all interfaces will be renamed as well.\n\n    Args:\n      database: the database to apply the renames to.\n      conversion_table: maps old names to new names.\n    '
    if (conversion_table is None):
        conversion_table = {}
    for (old_name, new_name) in conversion_table.items():
        if database.HasInterface(old_name):
            _logger.info(('renaming interface %s to %s' % (old_name, new_name)))
            interface = database.GetInterface(old_name)
            database.DeleteInterface(old_name)
            if (not database.HasInterface(new_name)):
                interface.id = new_name
                database.AddInterface(interface)
            else:
                new_interface = database.GetInterface(new_name)
                MergeNodes(new_interface, interface)
            if rename_javascript_binding_names:
                interface.javascript_binding_name = new_name
                interface.doc_js_name = new_name
                for member in ((interface.operations + interface.constants) + interface.attributes):
                    member.doc_js_interface_name = new_name
    for interface in database.GetInterfaces():
        for idl_type in interface.all(idlnode.IDLType):
            type_name = self._StripModules(idl_type.id)
            if (type_name in conversion_table):
                idl_type.id = conversion_table[type_name]
