def _ProcessInterface(self, interface, super_interface_name, source_filter, common_prefix):
    '.'
    _logger.info(('Generating %s' % interface.id))
    generators = [system.InterfaceGenerator(interface, common_prefix, super_interface_name, source_filter) for system in self._systems]
    generators = filter(None, generators)
    mixinbase = self._database.GetInterface('ElementalMixinBase')
    parentops = []
    parentattrs = []
    directParents = []
    mixinOps = []
    self.getParents(interface, directParents)
    if (interface.id != 'ElementalMixinBase'):
        self.getParents(mixinbase, directParents)
        directParents.insert(0, mixinbase)
    for pint in directParents:
        for op in pint.operations:
            op_name = op.ext_attrs.get('DartName', op.id)
            sig = ('%s %s(' % (op.type.id, op_name))
            for arg in op.arguments:
                sig += arg.type.id
                parentops.append(sig)
        for attr in pint.attributes:
            if attr.is_fc_getter:
                parentattrs.append(('getter_' + DartDomNameOfAttribute(attr)))
            if attr.is_fc_setter:
                parentattrs.append(('setter_' + DartDomNameOfAttribute(attr)))
    for generator in generators:
        generator.StartInterface()
    for const in sorted(interface.constants, ConstantOutputOrder):
        for generator in generators:
            generator.AddConstant(const)
    attributes = [attr for attr in interface.attributes]
    for (getter, setter) in _PairUpAttributes(attributes):
        for generator in generators:
            inheritedGetter = (('getter_' + DartDomNameOfAttribute(getter)) in parentattrs)
            inheritedSetter = (setter and (('setter_' + DartDomNameOfAttribute(setter)) in parentattrs))
            generator.AddAttribute(getter, setter, inheritedGetter, inheritedSetter)
    element_type = MaybeListElementType(interface)
    if element_type:
        for generator in generators:
            generator.AddIndexer(element_type)
    alreadyGenerated = []
    for operation in interface.operations:
        op_name = operation.ext_attrs.get('DartName', operation.id)
        sig = ('%s %s(' % (operation.type.id, op_name))
        for arg in operation.arguments:
            sig += arg.type.id
        if (sig in alreadyGenerated):
            continue
        alreadyGenerated.append(sig)
        if (operation.id == 'toString'):
            continue
        operations = []
        operations.append(operation)
        info = AnalyzeOperation(interface, operations)
        for generator in generators:
            inherited = (sig in parentops)
            if info.IsStatic():
                generator.AddStaticOperation(info, inherited)
            else:
                generator.AddOperation(info, inherited)
    for parent_interface in self._TransitiveSecondaryParents(interface):
        if isinstance(parent_interface, str):
            continue
        attributes = [attr for attr in parent_interface.attributes if (not FindMatchingAttribute(interface, attr))]
        for (getter, setter) in _PairUpAttributes(attributes):
            for generator in generators:
                generator.AddSecondaryAttribute(parent_interface, getter, setter)
        operationsById = {}
        for operation in parent_interface.operations:
            if (operation.id not in operationsById):
                operationsById[operation.id] = []
            operationsById[operation.id].append(operation)
        for id in sorted(operationsById.keys()):
            if (not any(((op.id == id) for op in interface.operations))):
                operations = operationsById[id]
                info = AnalyzeOperation(interface, operations)
                for generator in generators:
                    generator.AddSecondaryOperation(parent_interface, info)
    for generator in generators:
        generator.FinishInterface()
    return
