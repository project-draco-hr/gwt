def Generate(self, database, output_dir, module_source_preference=[], source_filter=None, super_database=None, common_prefix=None, super_map={}, html_map={}, lib_dir=None, systems=[]):
    'Generates Dart and JS files for the loaded interfaces.\n\n    Args:\n      database -- database containing interfaces to generate code for.\n      output_dir -- directory to write generated files to.\n      module_source_preference -- priority order list of source annotations to\n        use when choosing a module name, if none specified uses the module name\n        from the database.\n      source_filter -- if specified, only outputs interfaces that have one of\n        these source annotation and rewrites the names of superclasses not\n        marked with this source to use the common prefix.\n      super_database -- database containing super interfaces that the generated\n        interfaces should extend.\n      common_prefix -- prefix for the common library, if any.\n      lib_file_path -- filename for generated .lib file, None if not required.\n      lib_template -- template file in this directory for generated lib file.\n    '
    self._emitters = multiemitter.MultiEmitter()
    self._database = database
    self._output_dir = output_dir
    self._FixEventTargets()
    self._ComputeInheritanceClosure()
    self._systems = []
    if ('gwtjso' in systems):
        jso_system = ElementalJsoSystem(TemplateLoader(self._template_dir, ['dom/jso', 'dom', '']), self._database, self._emitters, self._output_dir)
        self._systems.append(jso_system)
    if ('gwt' in systems):
        interface_system = ElementalInterfacesSystem(TemplateLoader(self._template_dir, ['dom/interface', 'dom', '']), self._database, self._emitters, self._output_dir)
        self._systems.append(interface_system)
    interfaces = []
    for interface in database.GetInterfaces():
        if (not MatchSourceFilter(source_filter, interface)):
            _logger.info(('Omitting interface - %s' % interface.id))
            continue
        interfaces.append(interface)
    exceptions = self._CollectExceptions(interfaces)
    mixins = self._ComputeMixins(self._PreOrderInterfaces(interfaces))
    for system in self._systems:
        system.ProcessMixins(mixins)
    self.PopulateMixinBase(self._database.GetInterface('ElementalMixinBase'), mixins)
    for interface in self._PreOrderInterfaces(interfaces):
        super_interface = None
        super_name = interface.id
        if (super_name in super_map):
            super_name = super_map[super_name]
        if ((super_database is not None) and super_database.HasInterface(super_name)):
            super_interface = super_name
        interface_name = interface.id
        auxiliary_file = self._auxiliary_files.get(interface_name)
        if (auxiliary_file is not None):
            _logger.info(('Skipping %s because %s exists' % (interface_name, auxiliary_file)))
            continue
        info = RecognizeCallback(interface)
        if info:
            for system in self._systems:
                system.ProcessCallback(interface, info)
        else:
            if ('Callback' in interface.ext_attrs):
                _logger.info(('Malformed callback: %s' % interface.id))
            self._ProcessInterface(interface, super_interface, source_filter, common_prefix)
    for system in self._systems:
        system.Finish()
