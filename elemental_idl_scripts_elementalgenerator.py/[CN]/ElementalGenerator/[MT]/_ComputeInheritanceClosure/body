def _ComputeInheritanceClosure(self):

    def Collect(interface, seen, collected):
        name = interface.id
        if ('<' in name):
            return
        if (not (name in seen)):
            seen.add(name)
            collected.append(name)
            for parent in interface.parents:
                if (not ('<' in parent.type.id)):
                    if self._database.HasInterface(parent.type.id):
                        Collect(self._database.GetInterface(parent.type.id), seen, collected)
    self._inheritance_closure = {}
    for interface in self._database.GetInterfaces():
        seen = set()
        collected = []
        Collect(interface, seen, collected)
        self._inheritance_closure[interface.id] = collected
