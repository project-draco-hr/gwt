{
  List<String> symbols=getSymbols(query);
  List<StockQuoteList> results=new ArrayList<StockQuoteList>();
  if (symbols.size() == 0) {
    return new StockResponse(0,results);
  }
  Set<String> symbolsInRange=new HashSet<String>();
  for (  Range range : ranges) {
    int start=range.getStart();
    int end=start + range.getLength();
    start=Math.max(start,0);
    end=Math.min(end,symbols.size());
    if (end > start) {
      symbolsInRange.addAll(symbols.subList(start,end));
    }
  }
  StringBuilder sb=new StringBuilder("http://www.google.com/finance/info?client=ig&q=");
  boolean first=true;
  for (  String symbol : symbolsInRange) {
    if (!first) {
      sb.append(',');
    }
    sb.append(symbol);
    first=false;
  }
  if (first) {
    return new StockResponse(0,results);
  }
  String content="";
  try {
    String urlString=sb.toString();
    URL url=new URL(urlString);
    InputStream urlInputStream=url.openStream();
    Scanner contentScanner=new Scanner(urlInputStream,"UTF-8");
    if (contentScanner.hasNextLine()) {
      content=contentScanner.useDelimiter("\\A").next();
    }
  }
 catch (  MalformedURLException mue) {
    System.err.println(mue);
  }
catch (  IOException ioe) {
    System.err.println(ioe);
  }
  Map<String,StockQuote> priceMap=new HashMap<String,StockQuote>();
  Pattern pattern=Pattern.compile("\\{[^\\}]*\\}");
  Matcher matcher=pattern.matcher(content);
  while (matcher.find()) {
    String group=matcher.group();
    String symbol=null;
    String price=null;
    Pattern dataPattern=Pattern.compile("\"([^\"]*)\"\\s*:\\s*\"([^\"]*)\"");
    Matcher dataMatcher=dataPattern.matcher(group);
    while (dataMatcher.find()) {
      String tag=dataMatcher.group(1);
      String data=dataMatcher.group(2);
      if (tag.equals("t")) {
        symbol=data;
      }
 else       if (tag.equals("l_cur")) {
        price=data;
      }
    }
    if (symbol != null && price != null) {
      int iprice=0;
      try {
        iprice=(int)(Double.parseDouble(price) * 100);
        priceMap.put(symbol,new StockQuote(symbol,companyNamesBySymbol.get(symbol),iprice));
      }
 catch (      NumberFormatException e) {
        System.out.println("Bad price " + price + " for symbol "+ symbol);
      }
    }
  }
  List<StockQuoteList> toRet=new ArrayList<StockQuoteList>();
  for (  Range range : ranges) {
    int start=range.getStart();
    int end=Math.min(start + range.getLength(),symbols.size());
    StockQuoteList curList=new StockQuoteList(start);
    toRet.add(curList);
    for (int i=start; i < end; i++) {
      String symbol=symbols.get(i);
      StockQuote quote=priceMap.get(symbol);
      if (quote == null) {
        quote=new StockQuote(symbol,"<NO SUCH TICKER SYMBOL>",0);
        System.out.println("Bad symbol " + symbol);
      }
      curList.add(quote);
    }
  }
  return new StockResponse(symbols.size(),toRet);
}
