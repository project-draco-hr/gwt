{
  EventQueue.invokeLater(new Runnable(){
    public void run(){
      SwingTreeLogger logger=logEvent.childLogger;
      DefaultMutableTreeNode node;
      DefaultMutableTreeNode parentNode;
      int idx;
      if (logEvent.isBranchCommit) {
        SwingTreeLogger parentLogger=(SwingTreeLogger)logger.getParentLogger();
        logger.treeNode.setUserObject(logEvent);
        parentNode=parentLogger.treeNode;
        idx=logger.getBranchedIndex();
        node=logger.treeNode;
      }
 else {
        parentNode=logger.treeNode;
        idx=logEvent.index;
        node=new DefaultMutableTreeNode(logEvent);
      }
      int insertIndex=findInsertionPoint(parentNode,idx);
      panel.treeModel.insertNodeInto(node,parentNode,insertIndex);
      if (parentNode == panel.treeModel.getRoot() && parentNode.getChildCount() == 1) {
        panel.treeModel.reload();
      }
      Type priority=logEvent.getInheritedPriority();
      while (parentNode != panel.treeModel.getRoot()) {
        LogEvent parentEvent=(LogEvent)parentNode.getUserObject();
        if (!parentEvent.updateInheritedPriority(priority)) {
          break;
        }
        parentNode=((DefaultMutableTreeNode)parentNode.getParent());
      }
    }
    private int findInsertionPoint(    DefaultMutableTreeNode parentNode,    int index){
      int high=parentNode.getChildCount() - 1;
      if (high < 0) {
        return 0;
      }
      int low=0;
      while (low <= high) {
        final int mid=low + ((high - low) >> 1);
        DefaultMutableTreeNode midChild=(DefaultMutableTreeNode)parentNode.getChildAt(mid);
        final Object userObject=midChild.getUserObject();
        int compIdx=-1;
        if (userObject instanceof LogEvent) {
          LogEvent event=(LogEvent)userObject;
          compIdx=event.index;
        }
        if (compIdx < index) {
          low=mid + 1;
        }
 else         if (compIdx > index) {
          high=mid - 1;
        }
 else {
          return mid;
        }
      }
      return low;
    }
  }
);
}
