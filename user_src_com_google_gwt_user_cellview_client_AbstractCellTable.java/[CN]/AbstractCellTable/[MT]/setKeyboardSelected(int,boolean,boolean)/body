{
  if (KeyboardSelectionPolicy.DISABLED == getKeyboardSelectionPolicy() || !isRowWithinBounds(index)) {
    return;
  }
  int subrow=lastKeyboardSelectedSubrow;
  if (selected) {
    subrow=keyboardSelectedSubrow;
    lastKeyboardSelectedSubrow=keyboardSelectedSubrow;
  }
  TableRowElement tr=getSubRowElement(index + getPageStart(),subrow);
  if (tr == null) {
    return;
  }
  String cellStyle=style.keyboardSelectedCell();
  boolean updatedSelection=!selected || isFocused || stealFocus;
  setRowStyleName(tr,style.keyboardSelectedRow(),style.keyboardSelectedRowCell(),selected);
  NodeList<TableCellElement> cells=tr.getCells();
  int keyboardColumn=Math.min(getKeyboardSelectedColumn(),cells.getLength() - 1);
  for (int i=0; i < cells.getLength(); i++) {
    TableCellElement td=cells.getItem(i);
    boolean isKeyboardSelected=(i == keyboardColumn);
    setStyleName(td,cellStyle,updatedSelection && selected && isKeyboardSelected);
    final Element focusable=getKeyboardSelectedElement(td);
    setFocusable(focusable,selected && isKeyboardSelected);
    if (selected && stealFocus && !cellIsEditing&& isKeyboardSelected) {
      CellBasedWidgetImpl.get().resetFocus(new Scheduler.ScheduledCommand(){
        @Override public void execute(){
          focusable.focus();
        }
      }
);
    }
  }
}
