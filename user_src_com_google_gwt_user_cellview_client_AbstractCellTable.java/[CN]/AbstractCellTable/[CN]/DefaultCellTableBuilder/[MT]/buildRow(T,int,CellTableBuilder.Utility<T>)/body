{
  SelectionModel<? super T> selectionModel=cellTable.getSelectionModel();
  boolean isSelected=(selectionModel == null || rowValue == null) ? false : selectionModel.isSelected(rowValue);
  boolean isEven=absRowIndex % 2 == 0;
  StringBuilder trClasses=new StringBuilder(isEven ? evenRowStyle : oddRowStyle);
  if (isSelected) {
    trClasses.append(selectedRowStyle);
  }
  RowStyles<T> rowStyles=cellTable.getRowStyles();
  if (rowStyles != null) {
    String extraRowStyles=rowStyles.getStyleNames(rowValue,absRowIndex);
    if (extraRowStyles != null) {
      trClasses.append(" ").append(extraRowStyles);
    }
  }
  TableRowBuilder tr=utility.startRow();
  tr.className(trClasses.toString());
  int columnCount=cellTable.getColumnCount();
  for (int curColumn=0; curColumn < columnCount; curColumn++) {
    Column<T,?> column=cellTable.getColumn(curColumn);
    StringBuilder tdClasses=new StringBuilder(cellStyle);
    tdClasses.append(isEven ? evenCellStyle : oddCellStyle);
    if (curColumn == 0) {
      tdClasses.append(firstColumnStyle);
    }
    if (isSelected) {
      tdClasses.append(selectedCellStyle);
    }
    if (curColumn == columnCount - 1) {
      tdClasses.append(lastColumnStyle);
    }
    Context context=new Context(absRowIndex,curColumn,cellTable.getValueKey(rowValue));
    String cellStyles=column.getCellStyleNames(context,rowValue);
    if (cellStyles != null) {
      tdClasses.append(" " + cellStyles);
    }
    HorizontalAlignmentConstant hAlign=column.getHorizontalAlignment();
    VerticalAlignmentConstant vAlign=column.getVerticalAlignment();
    TableCellBuilder td=tr.startTD();
    td.className(tdClasses.toString());
    if (hAlign != null) {
      td.align(hAlign.getTextAlignString());
    }
    if (vAlign != null) {
      td.vAlign(vAlign.getVerticalAlignString());
    }
    DivBuilder div=td.startDiv();
    div.style().outlineStyle(OutlineStyle.NONE).endStyle();
    utility.renderCell(div,context,column,rowValue);
    div.endDiv();
    td.endTD();
  }
  tr.endTR();
}
