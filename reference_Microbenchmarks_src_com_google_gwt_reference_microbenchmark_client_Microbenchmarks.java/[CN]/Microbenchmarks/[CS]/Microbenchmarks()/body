{
  List<NanoTest> widgetMakers=new ArrayList<NanoTest>();
  widgetMakers.add(new WidgetMaker("SimplePanel"){
    @Override public Widget make(){
      return new SimplePanel();
    }
  }
);
  widgetMakers.add(new WidgetMaker("FlowPanel"){
    @Override public Widget make(){
      return new FlowPanel();
    }
  }
);
  widgetMakers.add(new WidgetMaker("HTMLPanel"){
    @Override public Widget make(){
      return new HTMLPanel("");
    }
  }
);
  widgetMakers.add(new EmptyBinder.Maker());
  widgetMakers.add(new TestEmptyDomViaApi.Maker());
  widgetMakers.add(new TestEmptyDom.Maker());
  widgetMakers.add(new TestEmptyCursorDomCrawl.Maker());
  widgetMakers.add(new TestEmptyRealisticDomCrawl.Maker());
  widgetMakers.add(new TestDomViaApi.Maker());
  widgetMakers.add(new TestDomInnerHtmlById.Maker());
  if (Util.hasQSA) {
    widgetMakers.add(new TestDomInnerHtmlQuerySelectorAll.Maker());
  }
  widgetMakers.add(new TestCursorDomCrawl.Maker());
  widgetMakers.add(new TestRealisticDomCrawl.Maker());
  widgetMakers.add(new TestDomBinder.Maker());
  widgetMakers.add(new TestFlows.Maker());
  widgetMakers.add(new TestManualHTMLPanel.Maker());
  widgetMakers.add(new TestWidgetBinder.Maker());
  List<NanoTest> tableMakers=new ArrayList<NanoTest>();
  tableMakers.add(new TestCreateTableInnerHtml.Maker());
  tableMakers.add(new TestCreateTablePrecreatedInnerHtml.Maker());
  tableMakers.add(new TestCreateTableDom.Maker());
  tableMakers.add(new TestCreateTableDomWithEvents.Maker());
  List<NanoTest> tableUpdaters=new ArrayList<NanoTest>();
  tableUpdaters.add(new TestCreateTableInnerHtml.Updater());
  tableUpdaters.add(new TestCreateTablePrecreatedInnerHtml.Updater());
  tableUpdaters.add(new TestCreateTableDom.Updater());
  tableUpdaters.add(new TestCreateTableDomWithEvents.Updater());
  List<NanoTest> allTableTests=new ArrayList<MicrobenchmarkSurvey.NanoTest>();
  allTableTests.addAll(tableMakers);
  allTableTests.addAll(tableUpdaters);
  benchmarks=new Microbenchmark[4];
  benchmarks[0]=new MicrobenchmarkSurvey("Widget Creation Survey",widgetMakers);
  benchmarks[1]=new MicrobenchmarkSurvey("Table Creation and Update Survey",allTableTests);
  benchmarks[2]=new MicrobenchmarkSurvey("Table Creation Survey",tableMakers);
  benchmarks[3]=new MicrobenchmarkSurvey("Table Update Survey",tableUpdaters);
}
