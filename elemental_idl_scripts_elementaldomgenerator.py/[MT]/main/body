def main():
    parser = optparse.OptionParser()
    parser.add_option('--systems', dest='systems', action='store', type='string', default='gwt,gwtjso', help='Systems to generate (gwt)')
    parser.add_option('--output-dir', dest='output_dir', action='store', type='string', default=None, help='Directory to put the generated files')
    parser.add_option('--use-database-cache', dest='use_database_cache', action='store_true', default=False, help='Use the cached database from the previous run to\n                    improve startup performance')
    (options, args) = parser.parse_args()
    current_dir = os.path.dirname(__file__)
    systems = options.systems.split(',')
    html_system_names = ['htmlgwt']
    html_systems = [s for s in systems if (s in html_system_names)]
    dom_systems = [s for s in systems if (s not in html_system_names)]
    database_dir = os.path.join(current_dir, '..', 'database')
    use_database_cache = options.use_database_cache
    logging.config.fileConfig(os.path.join(current_dir, 'logging.conf'))
    if dom_systems:
        output_dir = (options.output_dir or os.path.join(current_dir, '../generated'))
        GenerateDOM(dom_systems, False, output_dir, database_dir, use_database_cache)
    if html_systems:
        output_dir = (options.output_dir or os.path.join(current_dir, '../generated'))
        GenerateDOM(html_systems, True, output_dir, database_dir, (use_database_cache or dom_systems))
