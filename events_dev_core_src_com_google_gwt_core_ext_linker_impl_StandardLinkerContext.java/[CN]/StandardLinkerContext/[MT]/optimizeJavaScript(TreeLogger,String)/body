{
  logger=logger.branch(TreeLogger.DEBUG,"Attempting to optimize JS",null);
  JsParser parser=new JsParser();
  Reader r=new StringReader(program);
  JsProgram jsProgram=new JsProgram();
  JsScope topScope=jsProgram.getScope();
  JsName funcName=topScope.declareName(getModuleFunctionName());
  funcName.setObfuscatable(false);
  try {
    parser.parseInto(topScope,jsProgram.getGlobalBlock(),r,1);
  }
 catch (  IOException e) {
    logger.log(TreeLogger.ERROR,"Unable to parse JavaScript",e);
    throw new UnableToCompleteException();
  }
catch (  JsParserException e) {
    logger.log(TreeLogger.ERROR,"Unable to parse JavaScript",e);
    throw new UnableToCompleteException();
  }
  JsSymbolResolver.exec(jsProgram);
  JsUnusedFunctionRemover.exec(jsProgram);
switch (jjsOptions.getOutput()) {
case OBFUSCATED:
    TopFunctionStringInterner.exec(jsProgram);
  JsObfuscateNamer.exec(jsProgram);
break;
case PRETTY:
JsPrettyNamer.exec(jsProgram);
break;
case DETAILED:
TopFunctionStringInterner.exec(jsProgram);
JsVerboseNamer.exec(jsProgram);
break;
default :
throw new InternalCompilerException("Unknown output mode");
}
DefaultTextOutput out=new DefaultTextOutput(jjsOptions.getOutput().shouldMinimize());
JsSourceGenerationVisitor v=new JsSourceGenerationVisitor(out);
v.accept(jsProgram);
return out.toString();
}
