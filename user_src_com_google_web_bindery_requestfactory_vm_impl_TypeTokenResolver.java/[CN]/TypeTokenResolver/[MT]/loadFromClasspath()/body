{
  Builder builder;
  boolean mustLoad=true;
  try {
    Class<?> maybeBuilderImpl=Class.forName(TypeTokenResolver.class.getName() + "BuilderImpl",false,Thread.currentThread().getContextClassLoader());
    builder=maybeBuilderImpl.asSubclass(Builder.class).newInstance();
    mustLoad=false;
  }
 catch (  ClassNotFoundException ignored) {
    builder=new Builder();
  }
catch (  InstantiationException e) {
    throw new RuntimeException("Could not instantiate TypeTokenResolverImpl",e);
  }
catch (  IllegalAccessException e) {
    throw new RuntimeException("Could not instantiate TypeTokenResolverImpl",e);
  }
  Enumeration<URL> locations=Thread.currentThread().getContextClassLoader().getResources(TOKEN_MANIFEST);
  if (mustLoad && !locations.hasMoreElements()) {
    throw new RuntimeException("No token manifest found.  Did the RequestFactory annotation" + " processor run? Check classpath for " + TOKEN_MANIFEST + " file and ensure that"+ " your proxy types are compiled with the requestfactory-apt.jar on javac's classpath.");
  }
  while (locations.hasMoreElements()) {
    builder.load(locations.nextElement().openStream());
  }
  return builder.build();
}
