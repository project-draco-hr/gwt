{
  Event event=SpeedTracerLogger.start(CompilerEventType.GENERATOR_RPC_FIELD_SERIALIZER);
  try {
    assert(type != null);
    assert(serializationOracle.isSerializable(type) || deserializationOracle.isSerializable(type));
    JParameterizedType parameterizedType=type.isParameterized();
    if (parameterizedType != null) {
      createFieldSerializer(logger,ctx,parameterizedType.getRawType());
      return;
    }
    assert(type.isClass() != null || type.isArray() != null);
    JClassType customFieldSerializer=SerializableTypeOracleBuilder.findCustomFieldSerializer(typeOracle,type);
    if (ctx.isGeneratorResultCachingEnabled()) {
      if (customFieldSerializer != null) {
        customFieldSerializersUsed.add(customFieldSerializer);
      }
 else {
        typesNotUsingCustomFieldSerializers.add(type);
      }
      if (findReusableCachedFieldSerializerIfAvailable(logger,ctx,type,customFieldSerializer)) {
        return;
      }
    }
    FieldSerializerCreator creator=new FieldSerializerCreator(logger,context,serializationOracle,deserializationOracle,(JClassType)type,customFieldSerializer);
    creator.realize(logger,ctx);
  }
  finally {
    event.end();
  }
}
