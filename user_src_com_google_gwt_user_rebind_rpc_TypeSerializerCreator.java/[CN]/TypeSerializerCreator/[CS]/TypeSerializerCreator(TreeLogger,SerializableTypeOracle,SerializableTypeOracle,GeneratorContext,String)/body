{
  this.context=context;
  this.typeSerializerClassName=typeSerializerClassName;
  this.serializationOracle=serializationOracle;
  this.deserializationOracle=deserializationOracle;
  this.typeOracle=context.getTypeOracle();
  Set<JType> typesSet=new HashSet<JType>();
  typesSet.addAll(Arrays.asList(serializationOracle.getSerializableTypes()));
  typesSet.addAll(Arrays.asList(deserializationOracle.getSerializableTypes()));
  serializableTypes=typesSet.toArray(new JType[0]);
  srcWriter=getSourceWriter(logger,context);
  if (shardSize < 0) {
    computeShardSize(logger);
  }
  logger.log(TreeLogger.TRACE,"Using a shard size of " + shardSize + " for TypeSerializerCreator createMethodMap");
}
