{
  boolean boolean_=boxedBoolean;
  assertTrue(boolean_ == boxedBoolean.booleanValue());
  byte byte_=boxedByte;
  assertTrue(byte_ == boxedByte.byteValue());
  char char_=boxedChar;
  assertTrue(char_ == boxedChar.charValue());
  short short_=boxedShort;
  assertTrue(short_ == boxedShort.shortValue());
  int int_=boxedInt;
  assertTrue(int_ == boxedInt.intValue());
  long long_=boxedLong;
  assertTrue(long_ == boxedLong.longValue());
  float float_=boxedFloat;
  assertTrue(float_ == boxedFloat.floatValue());
  double double_=boxedDouble;
  assertTrue(double_ == boxedDouble.doubleValue());
  assertTrue(unbox(boxedBoolean) == unboxedBoolean);
  assertTrue(unbox(boxedByte) == unboxedByte);
  assertTrue(unbox(boxedShort) == unboxedShort);
  assertTrue(unbox(boxedChar) == unboxedChar);
  assertTrue(unbox(boxedInt) == unboxedInt);
  assertTrue(unbox(boxedLong) == unboxedLong);
  assertTrue(unbox(boxedFloat) == unboxedFloat);
  assertTrue(unbox(boxedDouble) == unboxedDouble);
  assertTrue(box(boxedBoolean).booleanValue() == unboxedBoolean);
  assertTrue(box(boxedByte).byteValue() == unboxedByte);
  assertTrue(box(boxedShort).shortValue() == unboxedShort);
  assertTrue(box(boxedChar).charValue() == unboxedChar);
  assertTrue(box(boxedInt).intValue() == unboxedInt);
  assertTrue(box(boxedLong).longValue() == unboxedLong);
  assertTrue(box(boxedFloat).floatValue() == unboxedFloat);
  assertTrue(box(boxedDouble).doubleValue() == unboxedDouble);
}
