{
{
    Integer operand, original, result;
    original=operand=0;
    result=operand++;
    assertNotSame("[o++] original != operand, ",original,operand);
    assertSame("[o++] original == result, ",original,result);
    assertNotSame("[o++] result != operand, ",result,operand);
    assertSame("[o++] valueOf(n) == operand, ",1,operand);
    assertEquals("[o++] n == operand.value, ",1,operand.intValue());
  }
{
    Integer operand, original, result;
    original=operand=2;
    result=++operand;
    assertNotSame("[++o] original != operand, ",original,operand);
    assertNotSame("[++o] original != result, ",original,result);
    assertSame("[++o] result == operand, ",result,operand);
    assertSame("[++o] valueOf(n) == operand, ",3,operand);
    assertEquals("[++o] n == operand.value, ",3,operand.intValue());
  }
{
    Integer operand, original, result;
    original=operand=5;
    result=operand--;
    assertNotSame("[o--] original != operand, ",original,operand);
    assertSame("[o--] original == result, ",original,result);
    assertNotSame("[o--] result != operand, ",result,operand);
    assertSame("[o--] valueOf(n) == operand, ",4,operand);
    assertEquals("[o--] n == operand.value, ",4,operand.intValue());
  }
{
    Integer operand, original, result;
    original=operand=7;
    result=--operand;
    assertNotSame("[--o] original != operand, ",original,operand);
    assertNotSame("[--o] original != result, ",original,result);
    assertSame("[--o] result == operand, ",result,operand);
    assertSame("[--o] valueOf(n) == operand, ",6,operand);
    assertEquals("[--o] n == operand.value, ",6,operand.intValue());
  }
{
    Integer operand, original;
    original=operand=8;
    operand+=2;
    assertNotSame("[+=] original != operand, ",original,operand);
    assertSame("[+=] valueOf(n) == operand, ",10,operand);
    assertEquals("[+=] n == operand.value, ",10,operand.intValue());
  }
{
    Integer operand, original;
    original=operand=11;
    operand-=2;
    assertNotSame("[-=] original != operand, ",original,operand);
    assertSame("[-=] valueOf(n) == operand, ",9,operand);
    assertEquals("[-=] n == operand.value, ",9,operand.intValue());
  }
{
    Integer operand, original;
    original=operand=21;
    operand*=2;
    assertNotSame("[*=] original != operand, ",original,operand);
    assertSame("[*=] valueOf(n) == operand, ",42,operand);
    assertEquals("[*=] n == operand.value, ",42,operand.intValue());
  }
{
    Integer operand, original;
    original=operand=30;
    operand/=2;
    assertNotSame("[/=] original != operand, ",original,operand);
    assertSame("[/=] valueOf(n) == operand, ",15,operand);
    assertEquals("[/=] n == operand.value, ",15,operand.intValue());
  }
{
    Integer operand, original;
    original=operand=123;
    operand%=100;
    assertNotSame("[%=] original != operand, ",original,operand);
    assertSame("[%=] valueOf(n) == operand, ",23,operand);
    assertEquals("[%=] n == operand.value, ",23,operand.intValue());
  }
{
    Integer operand, original;
    original=operand=0x55;
    operand&=0xF;
    assertNotSame("[&=] original != operand, ",original,operand);
    assertSame("[&=] valueOf(n) == operand, ",0x5,operand);
    assertEquals("[&=] n == operand.value, ",0x5,operand.intValue());
  }
{
    Integer operand, original;
    original=operand=0x55;
    operand|=0xF;
    assertNotSame("[|=] original != operand, ",original,operand);
    assertSame("[|=] valueOf(n) == operand, ",0x5F,operand);
    assertEquals("[|=] n == operand.value, ",0x5F,operand.intValue());
  }
{
    Integer operand, original;
    original=operand=0x55;
    operand^=0xF;
    assertNotSame("[&=] original != operand, ",original,operand);
    assertSame("[&=] valueOf(n) == operand, ",0x5A,operand);
    assertEquals("[&=] n == operand.value, ",0x5A,operand.intValue());
  }
{
    Integer operand, original;
    original=operand=0x3F;
    operand<<=1;
    assertNotSame("[<<=] original != operand, ",original,operand);
    assertSame("[<<=] valueOf(n) == operand, ",0x7E,operand);
    assertEquals("[<<=] n == operand.value, ",0x7E,operand.intValue());
  }
{
    Integer operand, original;
    original=operand=-16;
    operand>>=1;
    assertNotSame("[>>=] original != operand, ",original,operand);
    assertSame("[>>=] valueOf(n) == operand, ",-8,operand);
    assertEquals("[>>=] n == operand.value, ",-8,operand.intValue());
  }
{
    Integer operand, original;
    original=operand=-1;
    operand>>>=1;
    assertNotSame("[>>>=] original != operand, ",original,operand);
    assertEquals("[>>>=] valueOf(n).equals(operand), ",Integer.valueOf(0x7FFFFFFF),operand);
    assertEquals("[>>>=] n == operand.value, ",0x7FFFFFFF,operand.intValue());
  }
}
