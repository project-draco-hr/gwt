{
{
    Byte originalBoxedByte=boxedByte;
    assertEquals(unboxedByte,(byte)boxedByte++);
    assertEquals(unboxedByte + 1,(byte)boxedByte);
    boxedByte=originalBoxedByte;
    Integer[] ary=new Integer[]{0,10,20,30,40,50};
    Integer idx=2;
    assertEquals(20,(int)ary[idx++]++);
    assertEquals(21,(int)ary[2]);
    assertEquals(3,(int)idx);
    assertEquals(40,(int)ary[idx+=1]);
    assertEquals(4,(int)idx);
  }
{
    Byte originalBoxedByte=boxedByte;
    boxedByte++;
    assertNotSame("Boxed byte modified in place",boxedByte,originalBoxedByte);
    assertEquals(unboxedByte + 1,(byte)boxedByte);
    boxedByte=originalBoxedByte;
    ++boxedByte;
    assertNotSame("Boxed byte modified in place",boxedByte,originalBoxedByte);
    assertEquals(unboxedByte + 1,(byte)boxedByte);
    boxedByte=originalBoxedByte;
    boxedByte--;
    assertNotSame("Boxed byte modified in place",boxedByte,originalBoxedByte);
    assertEquals(unboxedByte - 1,(byte)boxedByte);
    boxedByte=originalBoxedByte;
    --boxedByte;
    assertNotSame("Boxed byte modified in place",boxedByte,originalBoxedByte);
    assertEquals(unboxedByte - 1,(byte)boxedByte);
    boxedByte=originalBoxedByte;
  }
{
    Character originalBoxedChar=boxedChar;
    boxedChar++;
    assertNotSame("Boxed character modified in place",boxedChar,originalBoxedChar);
    assertEquals(unboxedChar + 1,(char)boxedChar);
    boxedChar=originalBoxedChar;
    ++boxedChar;
    assertNotSame("Boxed character modified in place",boxedChar,originalBoxedChar);
    assertEquals(unboxedChar + 1,(char)boxedChar);
    boxedChar=originalBoxedChar;
    boxedChar--;
    assertNotSame("Boxed character modified in place",boxedChar,originalBoxedChar);
    assertEquals(unboxedChar - 1,(char)boxedChar);
    boxedChar=originalBoxedChar;
    --boxedChar;
    assertNotSame("Boxed character modified in place",boxedChar,originalBoxedChar);
    assertEquals(unboxedChar - 1,(char)boxedChar);
    boxedChar=originalBoxedChar;
  }
{
    Short originalBoxedShort=boxedShort;
    boxedShort++;
    assertNotSame("Boxed short modified in place",boxedShort,originalBoxedShort);
    assertEquals(unboxedShort + 1,(short)boxedShort);
    boxedShort=originalBoxedShort;
    ++boxedShort;
    assertNotSame("Boxed short modified in place",boxedShort,originalBoxedShort);
    assertEquals(unboxedShort + 1,(short)boxedShort);
    boxedShort=originalBoxedShort;
    boxedShort--;
    assertNotSame("Boxed short modified in place",boxedShort,originalBoxedShort);
    assertEquals(unboxedShort - 1,(short)boxedShort);
    boxedShort=originalBoxedShort;
    --boxedShort;
    assertNotSame("Boxed short modified in place",boxedShort,originalBoxedShort);
    assertEquals(unboxedShort - 1,(short)boxedShort);
    boxedShort=originalBoxedShort;
  }
{
    Integer originalBoxedInt=boxedInt;
    boxedInt++;
    assertNotSame("Boxed int modified in place",boxedInt,originalBoxedInt);
    assertEquals(unboxedInt + 1,(int)boxedInt);
    boxedInt=originalBoxedInt;
    ++boxedInt;
    assertNotSame("Boxed int modified in place",boxedInt,originalBoxedInt);
    assertEquals(unboxedInt + 1,(int)boxedInt);
    boxedInt=originalBoxedInt;
    boxedInt--;
    assertNotSame("Boxed int modified in place",boxedInt,originalBoxedInt);
    assertEquals(unboxedInt - 1,(int)boxedInt);
    boxedInt=originalBoxedInt;
    --boxedInt;
    assertNotSame("Boxed int modified in place",boxedInt,originalBoxedInt);
    assertEquals(unboxedInt - 1,(int)boxedInt);
    boxedInt=originalBoxedInt;
  }
{
    Long originalBoxedLong=boxedLong;
    boxedLong++;
    assertNotSame("Boxed long modified in place",boxedLong,originalBoxedLong);
    assertEquals(unboxedLong + 1,(long)boxedLong);
    boxedLong=originalBoxedLong;
    ++boxedLong;
    assertNotSame("Boxed long modified in place",boxedLong,originalBoxedLong);
    assertEquals(unboxedLong + 1,(long)boxedLong);
    boxedLong=originalBoxedLong;
    boxedLong--;
    assertNotSame("Boxed long modified in place",boxedLong,originalBoxedLong);
    assertEquals(unboxedLong - 1,(long)boxedLong);
    boxedLong=originalBoxedLong;
    --boxedLong;
    assertNotSame("Boxed long modified in place",boxedLong,originalBoxedLong);
    assertEquals(unboxedLong - 1,(long)boxedLong);
    boxedLong=originalBoxedLong;
  }
{
    Float originalBoxedFloat=boxedFloat;
    boxedFloat++;
    assertNotSame("Boxed float modified in place",boxedFloat,originalBoxedFloat);
    assertEquals(unboxedFloat + 1,(float)boxedFloat);
    boxedFloat=originalBoxedFloat;
    ++boxedFloat;
    assertNotSame("Boxed float modified in place",boxedFloat,originalBoxedFloat);
    assertEquals(unboxedFloat + 1,(float)boxedFloat);
    boxedFloat=originalBoxedFloat;
    boxedFloat--;
    assertNotSame("Boxed float modified in place",boxedFloat,originalBoxedFloat);
    assertEquals(unboxedFloat - 1,(float)boxedFloat);
    boxedFloat=originalBoxedFloat;
    --boxedFloat;
    assertNotSame("Boxed float modified in place",boxedFloat,originalBoxedFloat);
    assertEquals(unboxedFloat - 1,(float)boxedFloat);
    boxedFloat=originalBoxedFloat;
  }
{
    Double originalBoxedDouble=boxedDouble;
    boxedDouble++;
    assertNotSame("Boxed double modified in place",boxedDouble,originalBoxedDouble);
    assertEquals(unboxedDouble + 1,(double)boxedDouble);
    boxedDouble=originalBoxedDouble;
    ++boxedDouble;
    assertNotSame("Boxed double modified in place",boxedDouble,originalBoxedDouble);
    assertEquals(unboxedDouble + 1,(double)boxedDouble);
    boxedDouble=originalBoxedDouble;
    boxedDouble--;
    assertNotSame("Boxed double modified in place",boxedDouble,originalBoxedDouble);
    assertEquals(unboxedDouble - 1,(double)boxedDouble);
    boxedDouble=originalBoxedDouble;
    --boxedDouble;
    assertNotSame("Boxed double modified in place",boxedDouble,originalBoxedDouble);
    assertEquals(unboxedDouble - 1,(double)boxedDouble);
    boxedDouble=originalBoxedDouble;
  }
}
