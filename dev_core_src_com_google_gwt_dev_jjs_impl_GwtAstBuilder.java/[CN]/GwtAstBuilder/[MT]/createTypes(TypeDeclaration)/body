{
  SourceInfo info=makeSourceInfo(x);
  try {
    SourceTypeBinding binding=x.binding;
    String name;
    if (binding instanceof LocalTypeBinding) {
      char[] localName=binding.constantPoolName();
      name=new String(localName).replace('/','.');
    }
 else {
      name=JdtUtil.asDottedString(binding.compoundName);
    }
    name=intern(name);
    JDeclaredType type;
    if (binding.isClass()) {
      type=new JClassType(info,name,binding.isAbstract(),binding.isFinal());
      ((JClassType)type).setJsPrototypeStub(JsInteropUtil.isJsPrototypeFlag(x));
    }
 else     if (binding.isInterface() || binding.isAnnotationType()) {
      type=new JInterfaceType(info,name);
    }
 else     if (binding.isEnum()) {
      if (binding.isAnonymousType()) {
        type=new JClassType(info,name,false,true);
      }
 else {
        type=new JEnumType(info,name,binding.isAbstract());
      }
    }
 else {
      throw new InternalCompilerException("ReferenceBinding is not a class, interface, or enum.");
    }
    type.setJsTypeInfo(JsInteropUtil.isJsType(x),JsInteropUtil.maybeGetJsTypePrototype(x),JsInteropUtil.maybeGetJsNamespace(x));
    type.setJsExportInfo(JsInteropUtil.isClassWideJsExport(x));
    type.setJsFunctionInfo(JsInteropUtil.isJsFunction(x));
    JdtUtil.setClassDispositionFromBinding(binding,type);
    typeMap.setSourceType(binding,type);
    newTypes.add(type);
    if (x.memberTypes != null) {
      for (      TypeDeclaration memberType : x.memberTypes) {
        createTypes(memberType);
      }
    }
  }
 catch (  Throwable e) {
    InternalCompilerException ice=translateException(null,e);
    StringBuffer sb=new StringBuffer();
    x.printHeader(0,sb);
    ice.addNode(x.getClass().getName(),sb.toString(),info);
    throw ice;
  }
}
