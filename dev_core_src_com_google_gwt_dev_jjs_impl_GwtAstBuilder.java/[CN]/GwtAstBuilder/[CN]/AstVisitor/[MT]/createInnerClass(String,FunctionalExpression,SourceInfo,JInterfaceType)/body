{
  JClassType innerLambdaClass=new JClassType(info,name + "$Type",false,true);
  innerLambdaClass.setEnclosingType((JDeclaredType)typeMap.get(x.binding.declaringClass));
  for (  JInterfaceType type : funcType) {
    innerLambdaClass.addImplements(type);
  }
  innerLambdaClass.setSuperClass(javaLangObject);
  createSyntheticMethod(info,CLINIT_NAME,innerLambdaClass,JPrimitiveType.VOID,false,true,true,AccessModifier.PRIVATE);
  createSyntheticMethod(info,INIT_NAME,innerLambdaClass,JPrimitiveType.VOID,false,false,true,AccessModifier.PRIVATE);
  createSyntheticMethod(info,"getClass",innerLambdaClass,javaLangClass,false,false,false,AccessModifier.PUBLIC,new JClassLiteral(info,innerLambdaClass).makeReturnStatement());
  innerLambdaClass.setClassDisposition(JDeclaredType.NestedClassDisposition.LAMBDA);
  return innerLambdaClass;
}
