{
  try {
    SourceInfo info=makeSourceInfo(x);
    JMethod method=typeMap.get(x.binding);
    List<JExpression> arguments=popCallArgs(info,x.arguments,x.binding);
    JExpression receiver=pop(x.receiver);
    if (x.receiver instanceof ThisReference) {
      if (method.isStatic()) {
        receiver=null;
      }
 else       if ((x.bits & ASTNode.DepthMASK) != 0) {
        ReferenceBinding targetType=scope.enclosingSourceType().enclosingTypeAt((x.bits & ASTNode.DepthMASK) >> ASTNode.DepthSHIFT);
        receiver=resolveThisReference(info,targetType,true,scope);
      }
 else       if (x.receiver.sourceStart == 0) {
        JThisRef oldRef=(JThisRef)receiver;
        receiver=new JThisRef(info,oldRef.getClassType());
      }
    }
    JMethodCall methodCall=new JMethodCall(info,receiver,method);
    boolean isSuperRef=x.receiver instanceof SuperReference || x.receiver instanceof QualifiedSuperReference;
    if (isSuperRef) {
      methodCall.setStaticDispatchOnly();
    }
    methodCall.addArgs(arguments);
    if (x.valueCast != null) {
      JType targetType=typeMap.get(x.valueCast);
      push(isUncheckedGenericMethodCall(x) ? maybeInsertUnsafeTypeCoersion(targetType,methodCall) : maybeCast(targetType,methodCall));
    }
 else {
      push(methodCall);
    }
  }
 catch (  Throwable e) {
    throw translateException(x,e);
  }
}
