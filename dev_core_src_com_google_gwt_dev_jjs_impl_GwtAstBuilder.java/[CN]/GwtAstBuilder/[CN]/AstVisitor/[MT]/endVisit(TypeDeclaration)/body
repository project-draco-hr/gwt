{
  JDeclaredType type=curClass.type;
  if (type.getSuperClass() != null) {
    JMethod myClinit=type.getClinitMethod();
    JMethod superClinit=type.getSuperClass().getClinitMethod();
    JMethodCall superClinitCall=new JMethodCall(myClinit.getSourceInfo(),null,superClinit);
    JMethodBody body=(JMethodBody)myClinit.getBody();
    body.getBlock().addStmt(0,superClinitCall.makeStatement());
  }
  if (isSyntheticGetClassNeeded(x,type)) {
    implementGetClass(type);
  }
  if (type instanceof JEnumType) {
    processEnumType((JEnumType)type);
  }
  if (type instanceof JClassType) {
    addBridgeMethods(x.binding);
  }
  if (JsInteropUtil.isClassWideJsExport(x)) {
    for (    JMethod m : type.getMethods()) {
      if (m.getExportName() != null) {
        continue;
      }
      if (m.getAccess() == AccessModifier.PUBLIC && (m.isStatic() || (m instanceof JConstructor))) {
        m.setExportName("");
      }
    }
    for (    JField f : type.getFields()) {
      if (f.getExportName() != null) {
        continue;
      }
      if (f.isStatic()) {
        f.setExportName("");
      }
    }
  }
  JsInteropUtil.maybeSetJsNamespace(type,x);
  curClass=classStack.pop();
}
