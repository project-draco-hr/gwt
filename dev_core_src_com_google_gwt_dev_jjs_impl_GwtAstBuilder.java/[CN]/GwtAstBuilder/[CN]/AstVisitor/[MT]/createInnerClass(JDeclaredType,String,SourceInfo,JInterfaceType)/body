{
  JClassType innerLambdaClass=new JClassType(info,Joiner.on('$').join(enclosingType.getName(),shortNname,"Type"),false,true);
  innerLambdaClass.setEnclosingType(enclosingType);
  for (  JInterfaceType type : superInterfaces) {
    innerLambdaClass.addImplements(type);
  }
  innerLambdaClass.setSuperClass(javaLangObject);
  createSyntheticMethod(info,CLINIT_METHOD_NAME,innerLambdaClass,JPrimitiveType.VOID,false,true,true,AccessModifier.PRIVATE);
  createSyntheticMethod(info,INIT_NAME_METHOD_NAME,innerLambdaClass,JPrimitiveType.VOID,false,false,true,AccessModifier.PRIVATE);
  createSyntheticMethod(info,GwtAstBuilder.GET_CLASS_METHOD_NAME,innerLambdaClass,javaLangClass,false,false,false,AccessModifier.PUBLIC,new JClassLiteral(info,innerLambdaClass).makeReturnStatement());
  innerLambdaClass.setClassDisposition(JDeclaredType.NestedClassDisposition.LAMBDA);
  return innerLambdaClass;
}
