{
  JBinaryOperator op;
switch (x.operator) {
case OperatorIds.PLUS:
    if (x.resolvedType instanceof ReferenceBinding) {
      op=JBinaryOperator.ASG_CONCAT;
    }
 else {
      op=JBinaryOperator.ASG_ADD;
    }
  break;
case OperatorIds.MINUS:
op=JBinaryOperator.ASG_SUB;
break;
case OperatorIds.MULTIPLY:
op=JBinaryOperator.ASG_MUL;
break;
case OperatorIds.DIVIDE:
op=JBinaryOperator.ASG_DIV;
break;
case OperatorIds.AND:
op=JBinaryOperator.ASG_BIT_AND;
break;
case OperatorIds.OR:
op=JBinaryOperator.ASG_BIT_OR;
break;
case OperatorIds.XOR:
op=JBinaryOperator.ASG_BIT_XOR;
break;
case OperatorIds.REMAINDER:
op=JBinaryOperator.ASG_MOD;
break;
case OperatorIds.LEFT_SHIFT:
op=JBinaryOperator.ASG_SHL;
break;
case OperatorIds.RIGHT_SHIFT:
op=JBinaryOperator.ASG_SHR;
break;
case OperatorIds.UNSIGNED_RIGHT_SHIFT:
op=JBinaryOperator.ASG_SHRU;
break;
default :
throw translateException(x,new InternalCompilerException("Unexpected operator for CompoundAssignment"));
}
pushBinaryOp(x,op);
}
