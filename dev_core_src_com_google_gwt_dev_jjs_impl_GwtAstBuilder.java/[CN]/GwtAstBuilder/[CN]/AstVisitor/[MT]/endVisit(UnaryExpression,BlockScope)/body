{
  try {
    SourceInfo info=makeSourceInfo(x);
    JUnaryOperator op;
    int operator=((x.bits & ASTNode.OperatorMASK) >> ASTNode.OperatorSHIFT);
switch (operator) {
case OperatorIds.MINUS:
      op=JUnaryOperator.NEG;
    break;
case OperatorIds.NOT:
  op=JUnaryOperator.NOT;
break;
case OperatorIds.PLUS:
return;
case OperatorIds.TWIDDLE:
op=JUnaryOperator.BIT_NOT;
break;
default :
throw new InternalCompilerException("Unexpected operator for unary expression");
}
JExpression expression=pop(x.expression);
push(new JPrefixOperation(info,op,expression));
}
 catch (Throwable e) {
throw translateException(x,e);
}
}
