{
  SourceInfo info=makeSourceInfo(x);
  JBlock body=popBlock(info,x.action);
  JExpression collection=pop(x.collection);
  JDeclarationStatement elementDecl=pop(x.elementVariable);
  assert(elementDecl.initializer == null);
  JLocal elementVar=(JLocal)curMethod.locals.get(x.elementVariable.binding);
  String elementVarName=elementVar.getName();
  JForStatement result;
  if (x.collectionVariable != null) {
    JLocal arrayVar=JProgram.createLocal(info,elementVarName + "$array",typeMap.get(x.collection.resolvedType),true,curMethod.body);
    JLocal indexVar=JProgram.createLocal(info,elementVarName + "$index",JPrimitiveType.INT,false,curMethod.body);
    JLocal maxVar=JProgram.createLocal(info,elementVarName + "$max",JPrimitiveType.INT,true,curMethod.body);
    List<JStatement> initializers=Lists.newArrayListWithCapacity(3);
    initializers.add(makeDeclaration(info,arrayVar,collection));
    initializers.add(makeDeclaration(info,indexVar,JIntLiteral.get(0)));
    initializers.add(makeDeclaration(info,maxVar,new JArrayLength(info,arrayVar.makeRef(info))));
    JExpression condition=new JBinaryOperation(info,JPrimitiveType.BOOLEAN,JBinaryOperator.LT,indexVar.makeRef(info),maxVar.makeRef(info));
    JExpression increments=new JPrefixOperation(info,JUnaryOperator.INC,indexVar.makeRef(info));
    elementDecl.initializer=new JArrayRef(info,arrayVar.makeRef(info),indexVar.makeRef(info));
    body.addStmt(0,elementDecl);
    result=new JForStatement(info,initializers,condition,increments,body);
  }
 else {
    CompilationUnitScope cudScope=scope.compilationUnitScope();
    ReferenceBinding javaUtilIterator=scope.getJavaUtilIterator();
    ReferenceBinding javaLangIterable=scope.getJavaLangIterable();
    MethodBinding iterator=javaLangIterable.getExactMethod(ITERATOR_,NO_TYPES,cudScope);
    MethodBinding hasNext=javaUtilIterator.getExactMethod(HAS_NEXT_,NO_TYPES,cudScope);
    MethodBinding next=javaUtilIterator.getExactMethod(NEXT_,NO_TYPES,cudScope);
    JLocal iteratorVar=JProgram.createLocal(info,(elementVarName + "$iterator"),typeMap.get(javaUtilIterator),false,curMethod.body);
    List<JStatement> initializers=Lists.newArrayListWithCapacity(1);
    initializers.add(makeDeclaration(info,iteratorVar,new JMethodCall(info,collection,typeMap.get(iterator))));
    JExpression condition=new JMethodCall(info,iteratorVar.makeRef(info),typeMap.get(hasNext));
    elementDecl.initializer=new JMethodCall(info,iteratorVar.makeRef(info),typeMap.get(next));
    if (elementVar.getType() != javaLangObject) {
      TypeBinding collectionElementType=getCollectionElementTypeBinding(x);
      JType toType=typeMap.get(collectionElementType);
      assert(toType instanceof JReferenceType);
      elementDecl.initializer=maybeCast(toType,elementDecl.initializer);
    }
    body.addStmt(0,elementDecl);
    result=new JForStatement(info,initializers,condition,null,body);
  }
  elementDecl.initializer=maybeBoxOrUnbox(elementDecl.initializer,x.elementVariableImplicitWidening);
  push(result);
}
