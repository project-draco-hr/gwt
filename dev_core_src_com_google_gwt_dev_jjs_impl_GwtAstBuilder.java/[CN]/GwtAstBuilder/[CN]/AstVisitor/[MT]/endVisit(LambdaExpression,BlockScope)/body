{
  TypeBinding binding=x.expectedType();
  MethodBinding samBinding=binding.getSingleAbstractMethod(blockScope,false);
  assert(samBinding != null && samBinding.isValidBinding());
  JMethod interfaceMethod=typeMap.get(samBinding);
  JInterfaceType[] funcType;
  if (binding instanceof IntersectionTypeBinding18) {
    funcType=processIntersectionTypeForLambda((IntersectionTypeBinding18)binding,blockScope,JdtUtil.signature(samBinding));
  }
 else {
    funcType=new JInterfaceType[]{(JInterfaceType)typeMap.get(binding)};
  }
  SourceInfo info=makeSourceInfo(x);
  String innerLambdaClassName=JdtUtil.getClassName(x.binding.declaringClass) + "$" + String.valueOf(x.binding.selector);
  JClassType innerLambdaClass=createInnerClass(innerLambdaClassName,x,info,funcType);
  JConstructor ctor=new JConstructor(info,innerLambdaClass,AccessModifier.PRIVATE);
  List<JField> locals=new ArrayList<JField>();
  SyntheticArgumentBinding[] synthArgs=x.outerLocalVariables;
  JField outerField=createLambdaConstructor(x,info,innerLambdaClass,ctor,locals,synthArgs);
  JMethod lambdaMethod=createLambdaMethod(x);
  JMethod samMethod=new JMethod(info,interfaceMethod.getName(),innerLambdaClass,interfaceMethod.getType(),false,false,true,interfaceMethod.getAccess());
  createLambdaSamMethod(x,interfaceMethod,info,innerLambdaClass,locals,outerField,lambdaMethod,samMethod);
  ctor.freezeParamTypes();
  samMethod.freezeParamTypes();
  createFunctionalExpressionBridges(innerLambdaClass,x,samMethod);
  replaceLambdaWithInnerClassAllocation(x,info,innerLambdaClass,ctor,synthArgs);
  popMethodInfo();
  newTypes.add(innerLambdaClass);
}
