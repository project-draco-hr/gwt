{
  pushNode(new CfgStatementNode<JStatement>(parent,x));
  accept(x.getExpr());
  JSwitchStatement oldSwitchStatement=switchStatement;
  List<Exit> oldCaseElseExits=removeExits(Exit.Reason.CASE_ELSE);
  List<Exit> oldCaseThenExits=removeExits(Exit.Reason.CASE_THEN);
  List<Exit> oldBreakExits=removeUnlabeledBreaks();
  switchStatement=x;
  CfgSwitchGotoNode gotoNode=addNode(new CfgSwitchGotoNode(parent,x));
  Exit gotoExit=Exit.createNormal(gotoNode,null);
  int defaultPos=-1;
  List<Exit> breakExits=new ArrayList<Exit>();
  List<Exit> fallThroughExits=new ArrayList<Exit>();
  List<JStatement> statements=x.getBody().getStatements();
  for (  JStatement s : statements) {
    if (s instanceof JCaseStatement) {
      if (((JCaseStatement)s).getExpr() != null) {
        fallThroughExits.addAll(removeExits(Exit.Reason.NORMAL));
        if (gotoExit != null) {
          addExit(gotoExit);
          gotoExit=null;
        }
        List<Exit> elseExits=removeExits(Exit.Reason.CASE_ELSE);
        for (        Exit e : elseExits) {
          addNormalExit(e.getNode(),e.role);
        }
      }
 else {
        defaultPos=nodes.size();
      }
    }
 else {
      List<Exit> thenExits=removeExits(Exit.Reason.CASE_THEN);
      for (      Exit e : thenExits) {
        addNormalExit(e.getNode(),e.role);
      }
      if (!fallThroughExits.isEmpty()) {
        for (        Exit e : fallThroughExits) {
          addExit(e);
        }
        fallThroughExits.clear();
      }
    }
    accept(s);
    breakExits.addAll(removeUnlabeledBreaks());
  }
  if (gotoExit != null) {
    if (defaultPos >= 0) {
      addEdge(gotoExit,nodes.get(defaultPos));
    }
 else {
      addExit(gotoExit);
    }
    gotoExit=null;
  }
  List<Exit> thenExits=removeExits(Exit.Reason.CASE_THEN);
  for (  Exit e : thenExits) {
    addNormalExit(e.getNode(),e.role);
  }
  List<Exit> elseExits=removeExits(Exit.Reason.CASE_ELSE);
  if (defaultPos >= 0) {
    for (    Exit e : elseExits) {
      addEdge(e,nodes.get(defaultPos));
    }
  }
 else {
    for (    Exit e : elseExits) {
      addExit(Exit.createNormal(e.getNode(),e.role));
    }
  }
  for (  Exit e : breakExits) {
    addNormalExit(e.getNode(),e.role);
  }
  switchStatement=oldSwitchStatement;
  addExits(oldCaseElseExits);
  addExits(oldCaseThenExits);
  addExits(oldBreakExits);
  popNode();
  return false;
}
