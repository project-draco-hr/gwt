{
  pushNode(new CfgTryNode(parent,x));
  accept(x.getTryBlock());
  List<Exit> tryBlockExits=removeCurrentExits();
  List<Integer> catchBlockPos=new ArrayList<Integer>();
  List<List<Exit>> catchExits=new ArrayList<List<Exit>>();
  for (  JTryStatement.CatchClause clause : x.getCatchClauses()) {
    JBlock b=clause.getBlock();
    catchBlockPos.add(nodes.size());
    accept(b);
    catchExits.add(removeCurrentExits());
  }
  int finallyPos=nodes.size();
  if (x.getFinallyBlock() != null) {
    accept(x.getFinallyBlock());
  }
  List<Exit> finallyExits=removeCurrentExits();
  if (x.getFinallyBlock() == null) {
    addExits(removeNormalExits(tryBlockExits));
    nextExit:     for (    Exit e : tryBlockExits) {
      if (e.isThrow()) {
        nextCatchBlock:         for (int i=0; i < x.getCatchClauses().size(); ++i) {
          JClassType catchType=(JClassType)x.getCatchClauses().get(i).getArg().getType();
          JType exceptionType=e.getExceptionType();
          boolean canCatch=false;
          boolean fullCatch=false;
          if (typeOracle.canTriviallyCast(exceptionType,catchType)) {
            canCatch=true;
            fullCatch=x.getCatchClauses().get(i).getTypes().size() == 1 && x.getCatchClauses().get(i).getTypes().get(0) == catchType;
          }
 else           if (typeOracle.canTriviallyCast(catchType,exceptionType)) {
            canCatch=true;
            fullCatch=false;
          }
          if (canCatch) {
            addEdge(e,nodes.get(catchBlockPos.get(i)));
            if (fullCatch) {
              continue nextExit;
            }
            continue nextCatchBlock;
          }
        }
        addExit(e);
      }
 else {
        addExit(e);
      }
    }
    for (    List<Exit> exits : catchExits) {
      addExits(exits);
    }
  }
 else {
    CfgNode<?> finallyNode=nodes.get(finallyPos);
    for (    Exit e : removeNormalExits(tryBlockExits)) {
      addEdge(e,finallyNode);
    }
    addExits(finallyExits);
    nextExit:     for (    Exit e : tryBlockExits) {
      if (e.isThrow()) {
        nextCatchBlock:         for (int i=0; i < x.getCatchClauses().size(); ++i) {
          JClassType catchType=(JClassType)x.getCatchClauses().get(i).getArg().getType();
          JType exceptionType=e.getExceptionType();
          boolean canCatch=false;
          boolean fullCatch=false;
          if (typeOracle.canTriviallyCast(exceptionType,catchType)) {
            canCatch=true;
            fullCatch=x.getCatchClauses().get(i).getTypes().size() == 1 && x.getCatchClauses().get(i).getTypes().get(0) == catchType;
          }
 else           if (typeOracle.canTriviallyCast(catchType,exceptionType)) {
            canCatch=true;
            fullCatch=false;
          }
          if (canCatch) {
            addEdge(e,nodes.get(catchBlockPos.get(i)));
            if (fullCatch) {
              continue nextExit;
            }
            continue nextCatchBlock;
          }
        }
        addEdge(e,finallyNode);
        for (        Exit finallyExit : finallyExits) {
          if (finallyExit.isNormal()) {
            addExit(new Exit(e.reason,finallyExit.node,e.exceptionType,e.label,e.role));
          }
 else {
          }
        }
      }
 else {
        addEdge(e,finallyNode);
        for (        Exit finallyExit : finallyExits) {
          if (finallyExit.isNormal()) {
            addExit(new Exit(e.reason,finallyExit.node,e.exceptionType,e.label,e.role));
          }
 else {
          }
        }
      }
    }
    for (    List<Exit> exits : catchExits) {
      for (      Exit e : exits) {
        addEdge(e,finallyNode);
        if (!e.isNormal()) {
          for (          Exit finallyExit : finallyExits) {
            if (finallyExit.isNormal()) {
              addExit(new Exit(e.reason,finallyExit.node,e.exceptionType,e.label,e.role));
            }
 else {
            }
          }
        }
      }
    }
  }
  popNode();
  return false;
}
