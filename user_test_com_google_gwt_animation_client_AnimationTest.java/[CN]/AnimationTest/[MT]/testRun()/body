{
  final TestAnimation animNow=new TestAnimation();
  final TestAnimation animPast=new TestAnimation();
  final TestAnimation animFuture=new TestAnimation();
  delayTestFinish(50 * DELAY_MULTIPLIER);
  double curTime=Duration.currentTimeMillis();
  animNow.run(30 * DELAY_MULTIPLIER);
  animPast.run(30 * DELAY_MULTIPLIER,curTime - 10 * DELAY_MULTIPLIER);
  animFuture.run(30 * DELAY_MULTIPLIER,curTime + 10 * DELAY_MULTIPLIER);
  animNow.assertStarted(true);
  animNow.assertCompleted(false);
  animNow.assertProgress(-1.0);
  animPast.assertStarted(true);
  animPast.assertCompleted(false);
  animPast.assertProgress(-1.0);
  animFuture.assertStarted(false);
  animFuture.assertCompleted(false);
  animFuture.assertProgress(-1.0);
  new Timer(){
    @Override public void run(){
      animNow.assertStarted(true);
      animNow.assertCompleted(false);
      animNow.assertProgressRange(0.0,1.0);
      animPast.assertStarted(true);
      animPast.assertCompleted(false);
      animPast.assertProgressRange(0.0,1.0);
      animFuture.assertStarted(false);
      animFuture.assertCompleted(false);
      animFuture.assertProgress(-1.0);
    }
  }
.schedule(5 * DELAY_MULTIPLIER);
  new Timer(){
    @Override public void run(){
      animNow.assertStarted(true);
      animNow.assertCompleted(false);
      animNow.assertProgressRange(0.0,1.0);
      animPast.assertStarted(true);
      animPast.assertCompleted(false);
      animPast.assertProgressRange(0.0,1.0);
      animFuture.assertStarted(true);
      animFuture.assertCompleted(false);
      animFuture.assertProgressRange(0.0,1.0);
    }
  }
.schedule(15 * DELAY_MULTIPLIER);
  new Timer(){
    @Override public void run(){
      animNow.assertStarted(true);
      animNow.assertCompleted(false);
      animNow.assertProgressRange(0.0,1.0);
      animPast.assertStarted(true);
      animPast.assertCompleted(true);
      animPast.assertProgressRange(0.0,1.0);
      animFuture.assertStarted(true);
      animFuture.assertCompleted(false);
      animFuture.assertProgressRange(0.0,1.0);
    }
  }
.schedule(25 * DELAY_MULTIPLIER);
  new Timer(){
    @Override public void run(){
      animNow.assertStarted(true);
      animNow.assertCompleted(true);
      animNow.assertProgressRange(0.0,1.0);
      animPast.assertStarted(true);
      animPast.assertCompleted(true);
      animPast.assertProgressRange(0.0,1.0);
      animFuture.assertStarted(true);
      animFuture.assertCompleted(false);
      animFuture.assertProgressRange(0.0,1.0);
    }
  }
.schedule(35 * DELAY_MULTIPLIER);
  new Timer(){
    @Override public void run(){
      animNow.assertStarted(true);
      animNow.assertCompleted(true);
      animNow.assertProgressRange(0.0,1.0);
      animPast.assertStarted(true);
      animPast.assertCompleted(true);
      animPast.assertProgressRange(0.0,1.0);
      animFuture.assertStarted(true);
      animFuture.assertCompleted(true);
      animFuture.assertProgressRange(0.0,1.0);
      finishTest();
    }
  }
.schedule(45 * DELAY_MULTIPLIER);
}
