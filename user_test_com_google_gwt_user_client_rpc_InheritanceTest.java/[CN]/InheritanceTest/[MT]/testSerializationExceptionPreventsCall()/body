{
  delayTestFinishForRpc();
  final boolean serializationExceptionCaught[]=new boolean[1];
  new Timer(){
    @Override public void run(){
      assertTrue("serializationExceptionCaught was not true",serializationExceptionCaught[0]);
      finishTest();
    }
  }
.schedule(RPC_TIMEOUT / 2);
  InheritanceTestServiceAsync service=getServiceAsync();
  service.echo(new AnonymousClassInterface(){
    @Override public void foo(){
    }
  }
,new AsyncCallback<Object>(){
    @Override public void onFailure(    Throwable caught){
      assertTrue("onFailure: got something other than a SerializationException (" + caught.getClass().getName() + ")",caught instanceof SerializationException);
      serializationExceptionCaught[0]=true;
    }
    @Override public void onSuccess(    Object result){
      fail("onSuccess: call should not have succeeded");
    }
  }
);
}
