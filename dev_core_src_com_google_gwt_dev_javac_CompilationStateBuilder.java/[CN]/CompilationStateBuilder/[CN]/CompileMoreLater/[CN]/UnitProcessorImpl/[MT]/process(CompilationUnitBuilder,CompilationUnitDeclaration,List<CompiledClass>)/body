{
  Map<AbstractMethodDeclaration,JsniMethod> jsniMethods=JsniCollector.collectJsniMethods(cud,builder.getSource(),jsProgram);
  final Set<String> jsniDeps=new HashSet<String>();
  JsniChecker.check(cud,jsniMethods,new JsniChecker.TypeResolver(){
    public ReferenceBinding resolveType(    String typeName){
      ReferenceBinding resolveType=compiler.resolveType(typeName);
      if (resolveType != null) {
        jsniDeps.add(String.valueOf(resolveType.qualifiedSourceName()));
      }
      return resolveType;
    }
  }
);
  JSORestrictionsChecker.check(jsoState,cud);
  ArtificialRescueChecker.check(cud,builder.isGenerated());
  BinaryTypeReferenceRestrictionsChecker.check(cud);
  MethodArgNamesLookup methodArgs=MethodParamCollector.collect(cud);
  String packageName=Shared.getPackageName(builder.getTypeName());
  List<String> unresolvedQualified=new ArrayList<String>();
  List<String> unresolvedSimple=new ArrayList<String>();
  for (  char[] simpleRef : cud.compilationResult().simpleNameReferences) {
    unresolvedSimple.add(canonical(String.valueOf(simpleRef)));
  }
  for (  char[][] qualifiedRef : cud.compilationResult().qualifiedReferences) {
    unresolvedQualified.add(canonical(CharOperation.toString(qualifiedRef)));
  }
  for (  String jsniDep : jsniDeps) {
    unresolvedQualified.add(canonical(jsniDep));
  }
  ArrayList<String> apiRefs=compiler.collectApiRefs(cud);
  for (int i=0; i < apiRefs.size(); ++i) {
    apiRefs.set(i,canonical(apiRefs.get(i)));
  }
  Dependencies dependencies=new Dependencies(packageName,unresolvedQualified,unresolvedSimple,apiRefs);
  CompilationUnit unit=builder.build(compiledClasses,dependencies,jsniMethods.values(),methodArgs,cud.compilationResult().getProblems());
  addValidUnit(unit);
  ContentId contentId=builder.getContentId();
  unitCache.put(contentId,unit);
  if (builder instanceof ResourceCompilationUnitBuilder) {
    ResourceCompilationUnitBuilder rcub=(ResourceCompilationUnitBuilder)builder;
    ResourceTag resourceTag=new ResourceTag(rcub.getLastModifed(),contentId);
    resourceContentCache.put(builder.getLocation(),resourceTag);
    keepAliveLatestVersion.put(resourceTag,unit);
  }
 else   if (builder instanceof GeneratedCompilationUnitBuilder) {
    keepAliveRecentlyGenerated.put(unit.getTypeName(),unit);
  }
  newlyBuiltUnits.add(unit);
}
