{
  for (  CompilationUnit unit : cachedUnits.values()) {
    for (    CompiledClass cc : unit.getCompiledClasses()) {
      String sourceName=cc.getSourceName();
      allValidClasses.put(sourceName,cc);
    }
  }
  ArrayList<CompilationUnit> resultUnits=new ArrayList<CompilationUnit>();
  do {
    this.newlyBuiltUnits=new ArrayList<CompilationUnit>();
    Event jdtCompilerEvent=SpeedTracerLogger.start(eventType);
    try {
      compiler.doCompile(builders);
    }
  finally {
      jdtCompilerEvent.end();
    }
    resultUnits.addAll(this.newlyBuiltUnits);
    builders.clear();
    for (    CompilationUnit unit : this.newlyBuiltUnits) {
      unit.getDependencies().resolve(allValidClasses);
    }
    Collection<CompilationUnit> invalidatedUnits=new ArrayList<CompilationUnit>();
    for (Iterator<Entry<CompilationUnitBuilder,CompilationUnit>> it=cachedUnits.entrySet().iterator(); it.hasNext(); ) {
      Entry<CompilationUnitBuilder,CompilationUnit> entry=it.next();
      CompilationUnit unit=entry.getValue();
      boolean isValid=unit.getDependencies().validate(logger,allValidClasses);
      if (!isValid) {
        logger.log(TreeLogger.TRACE,"Invalid Unit: " + unit.getTypeName());
        invalidatedUnits.add(unit);
        builders.add(entry.getKey());
        it.remove();
      }
    }
    if (invalidatedUnits.size() > 0) {
      logger.log(TreeLogger.TRACE,"Invalid units found: " + invalidatedUnits.size());
    }
    for (    CompilationUnit unit : invalidatedUnits) {
      for (      CompiledClass cc : unit.getCompiledClasses()) {
        allValidClasses.remove(cc.getSourceName());
      }
    }
  }
 while (builders.size() > 0);
  for (  CompilationUnit unit : resultUnits) {
    unitCache.add(unit);
  }
  resultUnits.addAll(cachedUnits.values());
  unitCache.cleanup(logger);
  Collections.sort(resultUnits,CompilationUnit.COMPARATOR);
  logger=logger.branch(TreeLogger.DEBUG,"Validating newly compiled units");
  for (  CompilationUnit unit : resultUnits) {
    CompilationUnitInvalidator.reportErrors(logger,unit);
  }
  return resultUnits;
}
