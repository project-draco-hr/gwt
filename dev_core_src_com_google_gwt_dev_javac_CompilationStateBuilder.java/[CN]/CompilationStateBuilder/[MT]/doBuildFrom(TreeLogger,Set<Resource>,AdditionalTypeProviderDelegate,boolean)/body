{
  List<CompilationUnitBuilder> builders=new ArrayList<CompilationUnitBuilder>();
  Map<CompilationUnitBuilder,CompilationUnit> cachedUnits=new IdentityHashMap<CompilationUnitBuilder,CompilationUnit>();
  CompileMoreLater compileMoreLater=new CompileMoreLater(compilerDelegate,suppressErrors);
  for (  Resource resource : resources) {
    String typeName=Shared.toTypeName(resource.getPath());
    ResourceCompilationUnitBuilder builder=new ResourceCompilationUnitBuilder(typeName,resource);
    CompilationUnit cachedUnit=unitCache.find(resource.getPathPrefix() + resource.getPath());
    if (cachedUnit != null && cachedUnit.getLastModified() != resource.getLastModified()) {
      unitCache.remove(cachedUnit);
      if (!cachedUnit.getContentId().equals(builder.getContentId())) {
        cachedUnit=null;
      }
 else {
        CachedCompilationUnit updatedUnit=new CachedCompilationUnit(cachedUnit.asCachedCompilationUnit(),resource.getLastModified(),resource.getLocation());
        unitCache.add(updatedUnit);
      }
    }
    if (cachedUnit != null) {
      cachedUnits.put(builder,cachedUnit);
      compileMoreLater.addValidUnit(cachedUnit);
      continue;
    }
    builders.add(builder);
  }
  if (logger.isLoggable(TreeLogger.TRACE)) {
    logger.log(TreeLogger.TRACE,"Found " + cachedUnits.size() + " cached units.  Used "+ cachedUnits.size()+ " / "+ resources.size()+ " units from cache.");
  }
  Collection<CompilationUnit> resultUnits=compileMoreLater.compile(logger,builders,cachedUnits,CompilerEventType.JDT_COMPILER_CSB_FROM_ORACLE,suppressErrors);
  return new CompilationState(logger,resultUnits,compileMoreLater);
}
