{
  UnitCache unitCache=compilerContext.getUnitCache();
  List<CompilationUnitBuilder> builders=Lists.newArrayList();
  Map<CompilationUnitBuilder,CompilationUnit> cachedUnits=Maps.newIdentityHashMap();
  CompileMoreLater compileMoreLater=new CompileMoreLater(compilerContext,compilerDelegate);
  for (  Resource resource : resources) {
    CompilationUnitBuilder builder=CompilationUnitBuilder.create(resource);
    CompilationUnit cachedUnit=unitCache.find(resource.getPathPrefix() + resource.getPath());
    if (cachedUnit != null && cachedUnit.getLastModified() != resource.getLastModified()) {
      unitCache.remove(cachedUnit);
      if (cachedUnit instanceof CachedCompilationUnit && cachedUnit.getContentId().equals(builder.getContentId())) {
        CachedCompilationUnit updatedUnit=new CachedCompilationUnit((CachedCompilationUnit)cachedUnit,resource.getLastModified(),resource.getLocation());
        unitCache.add(updatedUnit);
      }
 else {
        cachedUnit=null;
      }
    }
    if (cachedUnit != null) {
      cachedUnits.put(builder,cachedUnit);
      compileMoreLater.addValidUnit(cachedUnit);
      continue;
    }
    builders.add(builder);
  }
  if (logger.isLoggable(TreeLogger.TRACE)) {
    logger.log(TreeLogger.TRACE,"Found " + cachedUnits.size() + " cached/archived units.  Used "+ cachedUnits.size()+ " / "+ resources.size()+ " units from cache.");
  }
  Collection<CompilationUnit> resultUnits=compileMoreLater.compile(logger,compilerContext,builders,cachedUnits,CompilerEventType.JDT_COMPILER_CSB_FROM_ORACLE);
  boolean compileMonolithic=compilerContext.shouldCompileMonolithic();
  TypeOracle typeOracle=null;
  CompilationUnitTypeOracleUpdater typeOracleUpdater=null;
  if (compileMonolithic) {
    typeOracle=new TypeOracle();
    typeOracleUpdater=new CompilationUnitTypeOracleUpdater(typeOracle);
  }
 else {
    typeOracle=new LibraryTypeOracle(compilerContext);
    typeOracleUpdater=((LibraryTypeOracle)typeOracle).getTypeOracleUpdater();
  }
  return new CompilationState(logger,compilerContext,typeOracle,typeOracleUpdater,resultUnits,compileMoreLater);
}
