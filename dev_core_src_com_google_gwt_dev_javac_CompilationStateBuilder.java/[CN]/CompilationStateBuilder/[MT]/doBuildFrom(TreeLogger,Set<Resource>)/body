{
  Map<String,CompilationUnit> resultUnits=new HashMap<String,CompilationUnit>();
  for (  Resource resource : resources) {
    String location=resource.getLocation();
    ResourceTag tag=resourceContentCache.get(location);
    if (tag != null && tag.getLastModified() == resource.getLastModified()) {
      ContentId contentId=tag.getContentId();
      CompilationUnit existingUnit=unitCache.get(contentId);
      if (existingUnit != null && existingUnit.isCompiled()) {
        resultUnits.put(existingUnit.getTypeName(),existingUnit);
      }
    }
  }
  CompilationUnitInvalidator.retainValidUnits(resultUnits.values());
  CompileMoreLater compileMoreLater=new CompileMoreLater();
  List<CompilationUnitBuilder> builders=new ArrayList<CompilationUnitBuilder>();
  for (  Resource resource : resources) {
    String typeName=Shared.toTypeName(resource.getPath());
    CompilationUnit validUnit=resultUnits.get(typeName);
    if (validUnit != null) {
      compileMoreLater.addValidUnit(validUnit);
      CompilationUnitInvalidator.reportErrors(logger,validUnit);
    }
 else {
      builders.add(new ResourceCompilationUnitBuilder(typeName,resource));
    }
  }
  compileMoreLater.compile(logger,builders,resultUnits);
  invalidateUnitsWithInvalidRefs(resultUnits,Collections.<ContentId>emptySet());
  return new CompilationState(logger,resultUnits.values(),compileMoreLater);
}
