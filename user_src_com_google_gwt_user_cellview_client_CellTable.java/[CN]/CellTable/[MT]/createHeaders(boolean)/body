{
  List<Header<?>> theHeaders=isFooter ? footers : headers;
  TableSectionElement section=isFooter ? tfoot : thead;
  String className=isFooter ? style.cellTableFooter() : style.cellTableHeader();
  boolean hasHeader=false;
  SafeHtmlBuilder sb=new SafeHtmlBuilder();
  sb.appendHtmlConstant("<tr>");
  int columnCount=columns.size();
  if (columnCount > 0) {
    Header<?> prevHeader=theHeaders.get(0);
    int prevColspan=1;
    StringBuilder classesBuilder=new StringBuilder(className);
    classesBuilder.append(" ");
    classesBuilder.append(isFooter ? style.cellTableFirstColumnFooter() : style.cellTableFirstColumnHeader());
    int curColumn;
    for (curColumn=1; curColumn < columnCount; curColumn++) {
      Header<?> header=theHeaders.get(curColumn);
      if (header != prevHeader) {
        SafeHtmlBuilder headerBuilder=new SafeHtmlBuilder();
        if (prevHeader != null) {
          hasHeader=true;
          Context context=new Context(0,curColumn - prevColspan,prevHeader.getKey());
          prevHeader.render(context,headerBuilder);
        }
        sb.append(template.th(prevColspan,classesBuilder.toString(),headerBuilder.toSafeHtml()));
        prevHeader=header;
        prevColspan=1;
        classesBuilder=new StringBuilder(className);
      }
 else {
        prevColspan++;
      }
    }
    SafeHtmlBuilder headerBuilder=new SafeHtmlBuilder();
    if (prevHeader != null) {
      hasHeader=true;
      Context context=new Context(0,curColumn - prevColspan,prevHeader.getKey());
      prevHeader.render(context,headerBuilder);
    }
    classesBuilder.append(" ");
    classesBuilder.append(isFooter ? style.cellTableLastColumnFooter() : style.cellTableLastColumnHeader());
    sb.append(template.th(prevColspan,classesBuilder.toString(),headerBuilder.toSafeHtml()));
  }
  sb.appendHtmlConstant("</tr>");
  TABLE_IMPL.replaceAllRows(this,section,sb.toSafeHtml());
  setVisible(section,hasHeader);
}
