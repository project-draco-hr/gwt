{
  registerHandler(new AllowMissingSourceDirFlag());
  registerHandler(new BindAddressFlag());
  registerHandler(new CompileTestFlag());
  registerHandler(new CompileTestRecompilesFlag());
  registerHandler(new FailOnErrorFlag());
  registerHandler(new IncrementalCompileFlag());
  registerHandler(new ModuleNameArgument());
  registerHandler(new NoPrecompileFlag());
  registerHandler(new PortFlag());
  registerHandler(new SourceFlag());
  registerHandler(new StrictResourcesFlag());
  registerHandler(new WorkDirFlag());
  registerHandler(new ArgHandlerSourceLevel(new OptionSourceLevel(){
    @Override public SourceLevel getSourceLevel(){
      return sourceLevel;
    }
    @Override public void setSourceLevel(    SourceLevel sourceLevel){
      Options.this.sourceLevel=sourceLevel;
    }
  }
));
  registerHandler(new ArgHandlerLogLevel(new OptionLogLevel(){
    @Override public TreeLogger.Type getLogLevel(){
      return logLevel;
    }
    @Override public void setLogLevel(    TreeLogger.Type logLevel){
      Options.this.logLevel=logLevel;
    }
  }
));
  registerHandler(new ArgHandlerJsInteropMode(new OptionJsInteropMode(){
    @Override public JsInteropMode getJsInteropMode(){
      return Options.this.jsInteropMode;
    }
    @Override public void setJsInteropMode(    JsInteropMode mode){
      Options.this.jsInteropMode=mode;
    }
  }
));
}
