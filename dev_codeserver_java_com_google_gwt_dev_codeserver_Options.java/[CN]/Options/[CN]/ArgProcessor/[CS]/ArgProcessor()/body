{
  registerHandler(new AllowMissingSourceDirFlag());
  registerHandler(new BindAddressFlag());
  registerHandler(new CompileTestFlag());
  registerHandler(new CompileTestRecompilesFlag());
  registerHandler(new FailOnErrorFlag());
  registerHandler(new ModuleNameArgument());
  registerHandler(new NoPrecompileFlag());
  registerHandler(new PortFlag());
  registerHandler(new SourceFlag());
  registerHandler(new StrictResourcesFlag());
  registerHandler(new WorkDirFlag());
  registerHandler(new LauncherDir());
  registerHandler(new ArgHandlerScriptStyle(new OptionScriptStyle(){
    @Override public JsOutputOption getOutput(){
      return Options.this.output;
    }
    @Override public void setOutput(    JsOutputOption output){
      Options.this.output=output;
    }
  }
));
  registerHandler(new ArgHandlerSetProperties(new OptionSetProperties(){
    @Override public void setPropertyValues(    String name,    Iterable<String> values){
      properties.replaceValues(name,values);
    }
    @Override public ListMultimap<String,String> getProperties(){
      return properties;
    }
  }
));
  registerHandler(new ArgHandlerIncrementalCompile(new OptionIncrementalCompile(){
    @Override public boolean isIncrementalCompileEnabled(){
      return incremental;
    }
    @Override public void setIncrementalCompileEnabled(    boolean enabled){
      incremental=enabled;
    }
  }
));
  registerHandler(new ArgHandlerSourceLevel(new OptionSourceLevel(){
    @Override public SourceLevel getSourceLevel(){
      return sourceLevel;
    }
    @Override public void setSourceLevel(    SourceLevel sourceLevel){
      Options.this.sourceLevel=sourceLevel;
    }
  }
));
  registerHandler(new ArgHandlerLogLevel(new OptionLogLevel(){
    @Override public TreeLogger.Type getLogLevel(){
      return logLevel;
    }
    @Override public void setLogLevel(    TreeLogger.Type logLevel){
      Options.this.logLevel=logLevel;
    }
  }
));
  registerHandler(new ArgHandlerJsInteropMode(new OptionJsInteropMode(){
    @Override public OptionJsInteropMode.Mode getJsInteropMode(){
      return Options.this.jsInteropMode;
    }
    @Override public void setJsInteropMode(    OptionJsInteropMode.Mode mode){
      Options.this.jsInteropMode=mode;
    }
  }
));
  registerHandler(new ArgHandlerMethodNameDisplayMode(new OptionMethodNameDisplayMode(){
    @Override public OptionMethodNameDisplayMode.Mode getMethodNameDisplayMode(){
      return Options.this.methodNameDisplayMode;
    }
    @Override public void setMethodNameDisplayMode(    Mode mode){
      Options.this.methodNameDisplayMode=mode;
    }
  }
){
  }
);
  registerHandler(new ArgHandlerClosureFormattedOutput(new OptionClosureFormattedOutput(){
    @Override public boolean isClosureCompilerFormatEnabled(){
      return Options.this.closureFormattedOutput;
    }
    @Override public void setClosureCompilerFormatEnabled(    boolean enabled){
      Options.this.closureFormattedOutput=enabled;
    }
  }
));
}
