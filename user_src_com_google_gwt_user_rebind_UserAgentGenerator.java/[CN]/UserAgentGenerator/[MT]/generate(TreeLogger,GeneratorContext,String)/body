{
  TypeOracle typeOracle=context.getTypeOracle();
  JClassType userType;
  try {
    userType=typeOracle.getType(typeName);
  }
 catch (  NotFoundException e) {
    logger.log(TreeLogger.ERROR,"OOPS",e);
    throw new UnableToCompleteException();
  }
  String packageName=userType.getPackage().getName();
  String className=userType.getName();
  className=className.replace('.','_');
  JClassType remoteService=typeOracle.findType(typeName);
  if (remoteService == null) {
    logger.log(TreeLogger.ERROR,"Unable to find metadata for type '" + typeName + "'",null);
    throw new UnableToCompleteException();
  }
  if (remoteService.isInterface() == null) {
    logger.log(TreeLogger.ERROR,remoteService.getQualifiedSourceName() + " is not an interface",null);
    throw new UnableToCompleteException();
  }
  PropertyOracle propertyOracle=context.getPropertyOracle();
  String userAgentValue;
  try {
    SelectionProperty userAgentProperty=propertyOracle.getSelectionProperty(logger,PROPERTY_USER_AGENT);
    userAgentValue=userAgentProperty.getCurrentValue();
  }
 catch (  BadPropertyValueException e) {
    logger.log(TreeLogger.ERROR,"Unable to find value for '" + PROPERTY_USER_AGENT + "'",e);
    throw new UnableToCompleteException();
  }
  String userAgentValueInitialCap=userAgentValue.substring(0,1).toUpperCase() + userAgentValue.substring(1);
  className=className + "Impl" + userAgentValueInitialCap;
  ClassSourceFileComposerFactory composerFactory=new ClassSourceFileComposerFactory(packageName,className);
  composerFactory.addImplementedInterface(remoteService.getQualifiedSourceName());
  PrintWriter pw=context.tryCreate(logger,packageName,className);
  if (pw != null) {
    SourceWriter sw=composerFactory.createSourceWriter(context,pw);
    sw.println();
    sw.println("public native String getRuntimeValue() /*-{");
    sw.indent();
    UserAgentPropertyGenerator.writeUserAgentPropertyJavaScript(sw);
    sw.outdent();
    sw.println("}-*/;");
    sw.println();
    sw.println();
    sw.println("public String getCompileTimeValue() {");
    sw.indent();
    sw.println("return \"" + userAgentValue.trim() + "\";");
    sw.outdent();
    sw.println("}");
    sw.commit(logger);
  }
  return composerFactory.getCreatedClassName();
}
