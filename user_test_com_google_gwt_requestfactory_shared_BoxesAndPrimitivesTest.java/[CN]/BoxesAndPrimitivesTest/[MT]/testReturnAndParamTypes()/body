{
  delayTestFinish(TEST_DELAY);
  Context ctx=context();
  ctx.getBoxed().to(new TestReceiver<Integer>(){
    @Override public void onSuccess(    Integer response){
      assertEquals(EXPECTED_BOXED,response);
    }
  }
);
  ctx.getPrimitive().to(new TestReceiver<Integer>(){
    @Override public void onSuccess(    Integer response){
      assertEquals(EXPECTED_BOXED,response);
    }
  }
);
  ctx.getEntity().to(new TestReceiver<Proxy>(){
    @Override public void onSuccess(    Proxy response){
      assertEquals(EXPECTED_BOXED,response.getBoxed());
      assertEquals(EXPECTED,response.getPrimitive());
      assertEquals(EXPECTED_BOOL,response.isIs());
      assertEquals(EXPECTED_BOOL_BOXED,response.isIsBoxed());
      assertEquals(EXPECTED_BOOL,response.hasHas());
      assertEquals(EXPECTED_BOOL_BOXED,response.hasHasBoxed());
    }
  }
);
  ctx.checkBoxed(EXPECTED_BOXED).to(new TestReceiver<Void>(){
    @Override public void onSuccess(    Void response){
    }
  }
);
  ctx.checkPrimitive(EXPECTED).to(new TestReceiver<Void>(){
    @Override public void onSuccess(    Void response){
    }
  }
);
  ctx.fire(new TestReceiver<Void>(){
    @Override public void onSuccess(    Void response){
      finishTest();
    }
  }
);
}
