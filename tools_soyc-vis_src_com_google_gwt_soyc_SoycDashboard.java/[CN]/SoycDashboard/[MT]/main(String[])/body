{
  System.out.println("Generating the Story of Your Compile...");
  try {
    GlobalInformation.settings=Settings.fromArgumentList(args);
  }
 catch (  Settings.ArgumentListException e) {
    System.err.println(e.getMessage());
    System.err.println("Usage: java com.google.gwt.soyc.SoycDashboard [options] report0.xml[.gz] [dependencies0.xml[.gz]] [splitpoints0.xml[.gz]]");
    System.err.println("Options:");
    System.err.println(Settings.settingsHelp());
    System.exit(1);
  }
  Settings settings=GlobalInformation.settings;
  GlobalInformation.displayDependencies=(settings.depFileName != null);
  GlobalInformation.displaySplitPoints=(settings.splitPointsFileName != null);
  MakeTopLevelHtmlForPerm makeTopLevelHtmlForPerm=new MakeTopLevelHtmlForPerm();
  if (GlobalInformation.displayDependencies == true) {
    Map<String,ArrayList<String>> dependencies=new TreeMap<String,ArrayList<String>>();
    DefaultHandler depHandler=parseXMLDocumentDependencies(dependencies);
    SAXParserFactory depFactoryMain=SAXParserFactory.newInstance();
    depFactoryMain.setNamespaceAware(true);
    try {
      SAXParser saxParser=depFactoryMain.newSAXParser();
      InputStream in=new FileInputStream(settings.depFileName);
      if (settings.depFileName.endsWith(".gz")) {
        in=new GZIPInputStream(in);
      }
      in=new BufferedInputStream(in);
      saxParser.parse(in,depHandler);
    }
 catch (    ParserConfigurationException e) {
      throw new RuntimeException("Could not parse document. ",e);
    }
catch (    SAXException e) {
      throw new RuntimeException("Could not create SAX parser. ",e);
    }
catch (    FileNotFoundException e) {
      throw new RuntimeException("Could not open file. ",e);
    }
catch (    IOException e) {
      throw new RuntimeException("Could not open file. ",e);
    }
    try {
      makeTopLevelHtmlForPerm.makeDependenciesHtml(dependencies);
    }
 catch (    IOException e) {
      throw new RuntimeException("Cannot open file. ",e);
    }
  }
  if (GlobalInformation.displaySplitPoints == true) {
    DefaultHandler splitPointHandler=parseXMLDocumentSplitPoints();
    SAXParserFactory splitPointsFactoryMain=SAXParserFactory.newInstance();
    splitPointsFactoryMain.setNamespaceAware(true);
    try {
      SAXParser saxParser=splitPointsFactoryMain.newSAXParser();
      InputStream in=new FileInputStream(settings.splitPointsFileName);
      if (settings.depFileName.endsWith(".gz")) {
        in=new GZIPInputStream(in);
      }
      in=new BufferedInputStream(in);
      saxParser.parse(in,splitPointHandler);
    }
 catch (    ParserConfigurationException e) {
      throw new RuntimeException("Could not parse document. ",e);
    }
catch (    SAXException e) {
      throw new RuntimeException("Could not create SAX parser. ",e);
    }
catch (    FileNotFoundException e) {
      throw new RuntimeException("Could not open file. ",e);
    }
catch (    IOException e) {
      throw new RuntimeException("Could not open file. ",e);
    }
  }
  DefaultHandler handler=parseXMLDocument();
  SAXParserFactory factoryMain=SAXParserFactory.newInstance();
  factoryMain.setNamespaceAware(true);
  try {
    SAXParser saxParser=factoryMain.newSAXParser();
    InputStream in=new FileInputStream(settings.storiesFileName);
    if (settings.storiesFileName.endsWith(".gz")) {
      in=new GZIPInputStream(in);
    }
    in=new BufferedInputStream(in);
    saxParser.parse(in,handler);
  }
 catch (  ParserConfigurationException e) {
    throw new RuntimeException("Could not parse document. ",e);
  }
catch (  SAXException e) {
    throw new RuntimeException("Could not create SAX parser. ",e);
  }
catch (  FileNotFoundException e) {
    throw new RuntimeException("Could not open file. ",e);
  }
catch (  IOException e) {
    throw new RuntimeException("Could not open file. ",e);
  }
  for (  SizeBreakdown breakdown : GlobalInformation.allSizeBreakdowns()) {
    updateAllOtherCodeType(breakdown.nameToCodeColl);
  }
  GlobalInformation.computePackageSizes();
  GlobalInformation.computePartialPackageSizes();
  for (  SizeBreakdown breakdown : GlobalInformation.allSizeBreakdowns()) {
    foldInRPCHeuristic(breakdown.nameToCodeColl);
  }
  for (  SizeBreakdown breakdown : GlobalInformation.allSizeBreakdowns()) {
    makeHTMLFiles(makeTopLevelHtmlForPerm,breakdown);
  }
  System.out.println("Finished creating reports. To see the dashboard, open SoycDashboard-index.html in your browser.");
}
