{
  if (args.length != 2) {
    System.err.println("Usage: java com/google/gwt/soyc/SoycDashboard soyc-report0.xml[.gz] soyc-dependencies0.xml[.gz]");
    System.exit(1);
  }
  String inFileName=args[0];
  String depInFileName=args[1];
  Map<String,ArrayList<String>> dependencies=new TreeMap<String,ArrayList<String>>();
  DefaultHandler depHandler=parseXMLDocumentDependencies(dependencies);
  SAXParserFactory depFactoryMain=SAXParserFactory.newInstance();
  depFactoryMain.setNamespaceAware(true);
  try {
    SAXParser saxParser=depFactoryMain.newSAXParser();
    InputStream in=new FileInputStream(depInFileName);
    if (depInFileName.endsWith(".gz")) {
      in=new GZIPInputStream(in);
    }
    in=new BufferedInputStream(in);
    saxParser.parse(in,depHandler);
  }
 catch (  ParserConfigurationException e) {
    throw new RuntimeException("Could not parse document. ",e);
  }
catch (  SAXException e) {
    throw new RuntimeException("Could not create SAX parser. ",e);
  }
catch (  FileNotFoundException e) {
    throw new RuntimeException("Could not open file. ",e);
  }
catch (  IOException e) {
    throw new RuntimeException("Could not open file. ",e);
  }
  try {
    MakeTopLevelHtmlForPerm.makeDependenciesHtml(dependencies);
  }
 catch (  IOException e) {
    throw new RuntimeException("Cannot open file. ",e);
  }
  GlobalInformation.nameToLitColl.put("long",new LiteralsCollection("long"));
  GlobalInformation.nameToLitColl.put("null",new LiteralsCollection("null"));
  GlobalInformation.nameToLitColl.put("class",new LiteralsCollection("class"));
  GlobalInformation.nameToLitColl.put("int",new LiteralsCollection("int"));
  GlobalInformation.nameToLitColl.put("string",new LiteralsCollection("string"));
  GlobalInformation.nameToLitColl.put("number",new LiteralsCollection("number"));
  GlobalInformation.nameToLitColl.put("boolean",new LiteralsCollection("boolean"));
  GlobalInformation.nameToLitColl.put("double",new LiteralsCollection("double"));
  GlobalInformation.nameToLitColl.put("char",new LiteralsCollection("char"));
  GlobalInformation.nameToLitColl.put("undefined",new LiteralsCollection("undefined"));
  GlobalInformation.nameToLitColl.put("float",new LiteralsCollection("float"));
  GlobalInformation.nameToCodeColl.put("allOther",new CodeCollection("allOther"));
  GlobalInformation.nameToCodeColl.put("widget",new CodeCollection("widget"));
  GlobalInformation.nameToCodeColl.put("rpcUser",new CodeCollection("rpcUser"));
  GlobalInformation.nameToCodeColl.put("rpcGen",new CodeCollection("rpcGen"));
  GlobalInformation.nameToCodeColl.put("rpcGwt",new CodeCollection("rpcGwt"));
  GlobalInformation.nameToCodeColl.put("gwtLang",new CodeCollection("long"));
  GlobalInformation.nameToCodeColl.put("jre",new CodeCollection("jre"));
  DefaultHandler handler=parseXMLDocument(GlobalInformation.nameToLitColl,GlobalInformation.nameToCodeColl);
  SAXParserFactory factoryMain=SAXParserFactory.newInstance();
  factoryMain.setNamespaceAware(true);
  try {
    SAXParser saxParser=factoryMain.newSAXParser();
    InputStream in=new FileInputStream(inFileName);
    if (inFileName.endsWith(".gz")) {
      in=new GZIPInputStream(in);
    }
    in=new BufferedInputStream(in);
    saxParser.parse(in,handler);
  }
 catch (  ParserConfigurationException e) {
    throw new RuntimeException("Could not parse document. ",e);
  }
catch (  SAXException e) {
    throw new RuntimeException("Could not create SAX parser. ",e);
  }
catch (  FileNotFoundException e) {
    throw new RuntimeException("Could not open file. ",e);
  }
catch (  IOException e) {
    throw new RuntimeException("Could not open file. ",e);
  }
  updateAllOtherCodeType(GlobalInformation.nameToCodeColl);
  GlobalInformation.computePackageSizes();
  GlobalInformation.computePartialPackageSizes();
  foldInRPCHeuristic(GlobalInformation.nameToCodeColl);
  makeHTMLFiles(GlobalInformation.nameToLitColl,GlobalInformation.nameToCodeColl);
  System.out.println("Finished creating reports. To see the dashboard, open SoycDashboard-index.html in your browser.");
}
