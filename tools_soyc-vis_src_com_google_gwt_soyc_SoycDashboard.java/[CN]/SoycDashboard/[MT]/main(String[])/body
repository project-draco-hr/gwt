{
  try {
    System.out.println("Generating the Story of Your Compile...");
    GlobalInformation.settings=Settings.fromArgumentList(args);
    Settings settings=GlobalInformation.settings;
    GlobalInformation.displayDependencies=(settings.depFileName != null);
    GlobalInformation.displaySplitPoints=(settings.splitPointsFileName != null);
    MakeTopLevelHtmlForPerm makeTopLevelHtmlForPerm=new MakeTopLevelHtmlForPerm();
    if (GlobalInformation.displayDependencies == true) {
      Map<String,ArrayList<String>> dependencies=new TreeMap<String,ArrayList<String>>();
      DefaultHandler depHandler=parseXMLDocumentDependencies(dependencies);
      SAXParserFactory depFactoryMain=SAXParserFactory.newInstance();
      depFactoryMain.setNamespaceAware(true);
      SAXParser saxParser=depFactoryMain.newSAXParser();
      InputStream in=new FileInputStream(settings.depFileName);
      if (settings.depFileName.endsWith(".gz")) {
        in=new GZIPInputStream(in);
      }
      in=new BufferedInputStream(in);
      saxParser.parse(in,depHandler);
      makeTopLevelHtmlForPerm.makeDependenciesHtml(dependencies);
    }
    if (GlobalInformation.displaySplitPoints == true) {
      DefaultHandler splitPointHandler=parseXMLDocumentSplitPoints();
      SAXParserFactory splitPointsFactoryMain=SAXParserFactory.newInstance();
      splitPointsFactoryMain.setNamespaceAware(true);
      SAXParser saxParser=splitPointsFactoryMain.newSAXParser();
      InputStream in=new FileInputStream(settings.splitPointsFileName);
      if (settings.depFileName.endsWith(".gz")) {
        in=new GZIPInputStream(in);
      }
      in=new BufferedInputStream(in);
      saxParser.parse(in,splitPointHandler);
    }
    DefaultHandler handler=parseXMLDocument();
    SAXParserFactory factoryMain=SAXParserFactory.newInstance();
    factoryMain.setNamespaceAware(true);
    SAXParser saxParser=factoryMain.newSAXParser();
    InputStream in=new FileInputStream(settings.storiesFileName);
    if (settings.storiesFileName.endsWith(".gz")) {
      in=new GZIPInputStream(in);
    }
    in=new BufferedInputStream(in);
    saxParser.parse(in,handler);
    for (    SizeBreakdown breakdown : GlobalInformation.allSizeBreakdowns()) {
      updateAllOtherCodeType(breakdown.nameToCodeColl);
    }
    GlobalInformation.computePackageSizes();
    GlobalInformation.computePartialPackageSizes();
    for (    SizeBreakdown breakdown : GlobalInformation.allSizeBreakdowns()) {
      foldInRPCHeuristic(breakdown.nameToCodeColl);
    }
    for (    SizeBreakdown breakdown : GlobalInformation.allSizeBreakdowns()) {
      makeHTMLFiles(makeTopLevelHtmlForPerm,breakdown);
    }
    System.out.println("Finished creating reports. To see the dashboard, open SoycDashboard-index.html in your browser.");
  }
 catch (  ParserConfigurationException e) {
    System.err.println("Could not parse document. " + e.getMessage());
    System.exit(1);
  }
catch (  SAXException e) {
    System.err.println("Could not create SAX parser. " + e.getMessage());
    System.exit(1);
  }
catch (  FileNotFoundException e) {
    System.err.println("Cannot open file " + e.getMessage());
    System.exit(1);
  }
catch (  IOException e) {
    System.err.println("Error creating html file. " + e.getMessage());
    System.exit(1);
  }
catch (  Settings.ArgumentListException e) {
    System.err.println(e.getMessage());
    System.err.println("Usage: java com.google.gwt.soyc.SoycDashboard options stories0.xml[.gz] [dependencies0.xml[.gz]] [splitpoints0.xml[.gz]]");
    System.err.println("Options:");
    System.err.println(Settings.settingsHelp());
    System.exit(1);
  }
}
