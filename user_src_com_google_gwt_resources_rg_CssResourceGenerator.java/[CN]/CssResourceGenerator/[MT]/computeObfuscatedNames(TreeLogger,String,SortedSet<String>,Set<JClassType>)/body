{
  logger=logger.branch(TreeLogger.DEBUG,"Computing CSS class replacements");
  for (  JClassType type : cssResourceSubtypes) {
    if (replacementsByClassAndMethod.containsKey(type)) {
      continue;
    }
    Map<JMethod,String> replacements=new IdentityHashMap<JMethod,String>();
    replacementsByClassAndMethod.put(type,replacements);
    for (    JMethod method : type.getOverridableMethods()) {
      String name=method.getName();
      if (ignoredMethods.contains(name)) {
        continue;
      }
      ClassName classNameOverride=method.getAnnotation(ClassName.class);
      if (classNameOverride != null) {
        name=classNameOverride.value();
      }
      String obfuscatedClassName=computeObfuscatedClassName(classPrefix,classCounter,reservedPrefixes);
      if (prettyOutput) {
        obfuscatedClassName+="-" + type.getQualifiedSourceName().replaceAll("[.$]","-") + "-"+ name;
      }
      replacements.put(method,obfuscatedClassName);
      if (method.getEnclosingType() == type) {
        Shared shared=type.getAnnotation(Shared.class);
        if (shared != null) {
          replacementsForSharedMethods.put(method,obfuscatedClassName);
        }
      }
      logger.log(TreeLogger.SPAM,"Mapped " + type.getQualifiedSourceName() + "."+ name+ " to "+ obfuscatedClassName);
    }
  }
}
