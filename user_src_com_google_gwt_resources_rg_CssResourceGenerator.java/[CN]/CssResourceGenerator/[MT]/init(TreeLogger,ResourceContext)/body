{
  GssOptions gssOptions=GssResourceGenerator.getGssOptions(context.getGeneratorContext().getPropertyOracle(),logger);
  if (gssOptions.isEnabled()) {
    gssEnabled=true;
    gssResourceGenerator=new GssResourceGenerator(gssOptions);
    gssResourceGenerator.init(logger,context);
    return;
  }
  gssEnabled=false;
  String classPrefix;
  try {
    PropertyOracle propertyOracle=context.getGeneratorContext().getPropertyOracle();
    ConfigurationProperty styleProp=propertyOracle.getConfigurationProperty(KEY_STYLE);
    obfuscationStyle=CssObfuscationStyle.getObfuscationStyle(styleProp.getValues().get(0));
    ConfigurationProperty mergeProp=propertyOracle.getConfigurationProperty(KEY_MERGE_ENABLED);
    String merge=mergeProp.getValues().get(0);
    enableMerge=merge.equals("true");
    ConfigurationProperty classPrefixProp=propertyOracle.getConfigurationProperty(KEY_OBFUSCATION_PREFIX);
    classPrefix=classPrefixProp.getValues().get(0);
    ClientBundleRequirements requirements=context.getRequirements();
    requirements.addConfigurationProperty(KEY_STYLE);
    requirements.addConfigurationProperty(KEY_MERGE_ENABLED);
    requirements.addConfigurationProperty(KEY_OBFUSCATION_PREFIX);
  }
 catch (  BadPropertyValueException e) {
    logger.log(TreeLogger.ERROR,"Unable to query module property",e);
    throw new UnableToCompleteException();
  }
  TypeOracle typeOracle=context.getGeneratorContext().getTypeOracle();
  JClassType superInterface=typeOracle.findType(getSuperclassInterfaceName());
  JClassType baseInterface=typeOracle.findType(getBaseclassInterfaceName());
  for (  JMethod m : superInterface.getInheritableMethods()) {
    ignoredMethods.add(m.getName());
  }
  stylesheetMap=new IdentityHashMap<JMethod,CssStylesheet>();
  SortedSet<JClassType> cssResourceSubtypes=computeOperableTypes(logger,baseInterface);
  initReplacements(logger,context,classPrefix,cssResourceSubtypes);
}
