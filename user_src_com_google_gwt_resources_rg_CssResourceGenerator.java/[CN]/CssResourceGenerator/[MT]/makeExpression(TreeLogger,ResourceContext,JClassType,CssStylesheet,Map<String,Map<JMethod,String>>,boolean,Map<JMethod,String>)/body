{
  try {
    (new Spriter(logger,context)).accept(sheet);
    SubstitutionCollector collector=new SubstitutionCollector();
    collector.accept(sheet);
    (new SubstitutionReplacer(logger,context,collector.getSubstitutions())).accept(sheet);
    (new IfEvaluator(logger,context.getGeneratorContext().getPropertyOracle())).accept(sheet);
    ExternalClassesCollector externalClasses=new ExternalClassesCollector();
    externalClasses.accept(sheet);
    ClassRenamer renamer=new ClassRenamer(logger,classReplacementsWithPrefix,strict,externalClasses.getClasses());
    renamer.accept(sheet);
    actualReplacements.putAll(renamer.getReplacements());
    if (enableMerge) {
      (new SplitRulesVisitor()).accept(sheet);
      (new MergeIdenticalSelectorsVisitor()).accept(sheet);
      (new MergeRulesByContentVisitor()).accept(sheet);
    }
    String standard=makeExpression(logger,context,cssResourceType,sheet,prettyOutput);
    (new RtlVisitor()).accept(sheet);
    String reversed=makeExpression(logger,context,cssResourceType,sheet,prettyOutput);
    return LocaleInfo.class.getName() + ".getCurrentLocale().isRTL() ? (" + reversed+ ") : ("+ standard+ ")";
  }
 catch (  CssCompilerException e) {
    logger.log(TreeLogger.ERROR,"Unable to process CSS",e.getCause() == null ? null : e);
    throw new UnableToCompleteException();
  }
}
