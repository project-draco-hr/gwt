{
  StringBuffer sb=new StringBuffer();
  sb.append("new Object[]{");
  JParameter[] params=method.getParameters();
  for (int i=0; i < params.length; ++i) {
    if (i > 0) {
      sb.append(", ");
    }
    JType type=params[i].getType();
    String typeName=type.getQualifiedSourceName();
    if ((type.isArray() == null) && (type.isPrimitive() != null)) {
      if (typeName.equals("boolean")) {
        sb.append("new Boolean(" + params[i].getName() + ")");
      }
 else       if (typeName.equals("byte")) {
        sb.append("new Byte(" + params[i].getName() + ")");
      }
 else       if (typeName.equals("char")) {
        sb.append("new Character(" + params[i].getName() + ")");
      }
 else       if (typeName.equals("short")) {
        sb.append("new Short(" + params[i].getName() + ")");
      }
 else       if (typeName.equals("int")) {
        sb.append("new Integer(" + params[i].getName() + ")");
      }
 else       if (typeName.equals("float")) {
        sb.append("new Float(" + params[i].getName() + ")");
      }
 else       if (typeName.equals("double")) {
        sb.append("new Double(" + params[i].getName() + ")");
      }
 else       if (typeName.equals("long")) {
        sb.append("new Long(" + params[i].getName() + ")");
      }
 else {
        throw new RuntimeException("Unexpected primitive parameter type");
      }
    }
 else {
      sb.append(params[i].getName());
    }
  }
  sb.append("}");
  String args=sb.toString();
  return args;
}
