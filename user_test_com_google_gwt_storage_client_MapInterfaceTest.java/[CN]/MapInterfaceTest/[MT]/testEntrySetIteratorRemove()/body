{
  final Map<K,V> map;
  try {
    map=makePopulatedMap();
  }
 catch (  UnsupportedOperationException e) {
    return;
  }
  Set<Entry<K,V>> entrySet=map.entrySet();
  Iterator<Entry<K,V>> iterator=entrySet.iterator();
  if (supportsIteratorRemove) {
    int initialSize=map.size();
    Entry<K,V> entry=iterator.next();
    iterator.remove();
    assertEquals(initialSize - 1,map.size());
    assertFalse(entrySet.contains(entry));
    assertInvariants(map);
    try {
      iterator.remove();
      fail("Expected IllegalStateException.");
    }
 catch (    IllegalStateException e) {
    }
  }
 else {
    try {
      iterator.next();
      iterator.remove();
      fail("Expected UnsupportedOperationException.");
    }
 catch (    UnsupportedOperationException e) {
    }
  }
  assertInvariants(map);
}
