{
  Event validateEvent=SpeedTracerLogger.start(CompilerEventType.VALIDATE);
  try {
    ModuleDef module=compilerContext.getModule();
    PrecompileTaskOptions jjsOptions=compilerContext.getOptions();
    CompilationState compilationState=module.getCompilationState(logger,compilerContext);
    if (jjsOptions.isStrict() && compilationState.hasErrors()) {
      abortDueToStrictMode(logger);
    }
    String[] declEntryPts=module.getEntryPointTypeNames();
    String[] additionalRootTypes=null;
    if (declEntryPts.length == 0) {
      Collection<CompilationUnit> compilationUnits=compilationState.getCompilationUnits();
      additionalRootTypes=new String[compilationUnits.size()];
      int i=0;
      for (      CompilationUnit unit : compilationUnits) {
        additionalRootTypes[i++]=unit.getTypeName();
      }
    }
    PrecompilationContext precompilationContext=PrecompilationContextCreator.create(compilerContext,compilationState,new PropertyCombinations(module.getProperties(),module.getActiveLinkerNames()),declEntryPts,additionalRootTypes,null);
    compilationState=null;
    JavaToJavaScriptCompiler.precompile(logger,compilerContext,precompilationContext);
    return true;
  }
 catch (  UnableToCompleteException e) {
    return false;
  }
 finally {
    validateEvent.end();
  }
}
