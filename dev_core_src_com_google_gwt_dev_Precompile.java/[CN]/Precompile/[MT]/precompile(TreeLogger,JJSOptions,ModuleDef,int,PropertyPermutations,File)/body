{
  Event precompileEvent=SpeedTracerLogger.start(CompilerEventType.PRECOMPILE);
  new GraphicsInitThread().start();
  try {
    CompilationState compilationState=module.getCompilationState(logger);
    String[] declEntryPts=module.getEntryPointTypeNames();
    if (declEntryPts.length == 0) {
      logger.log(TreeLogger.ERROR,"Module has no entry points defined",null);
      throw new UnableToCompleteException();
    }
    ArtifactSet generatedArtifacts=new ArtifactSet();
    DistillerRebindPermutationOracle rpo=new DistillerRebindPermutationOracle(module,compilationState,generatedArtifacts,allPermutations,genDir);
    compilationState=null;
    UnifiedAst unifiedAst=getCompiler(module).precompile(logger,module,rpo,declEntryPts,null,jjsOptions,rpo.getPermuationCount() == 1);
    List<Permutation> permutations=new ArrayList<Permutation>(Arrays.asList(rpo.getPermutations()));
    mergeCollapsedPermutations(permutations);
    SortedMap<RebindAnswersPermutationKey,Permutation> merged=new TreeMap<RebindAnswersPermutationKey,Permutation>();
    SortedSet<String> liveRebindRequests=unifiedAst.getRebindRequests();
    for (    Permutation permutation : permutations) {
      RebindAnswersPermutationKey key=new RebindAnswersPermutationKey(permutation,liveRebindRequests);
      if (merged.containsKey(key)) {
        Permutation existing=merged.get(key);
        existing.mergeFrom(permutation,liveRebindRequests);
      }
 else {
        merged.put(key,permutation);
      }
    }
    return new Precompilation(unifiedAst,merged.values(),permutationBase,generatedArtifacts);
  }
 catch (  UnableToCompleteException e) {
    return null;
  }
 finally {
    precompileEvent.end();
  }
}
