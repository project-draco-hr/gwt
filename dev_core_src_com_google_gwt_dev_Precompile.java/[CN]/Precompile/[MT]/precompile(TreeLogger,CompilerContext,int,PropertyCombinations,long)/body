{
  Event precompileEvent=SpeedTracerLogger.start(CompilerEventType.PRECOMPILE);
  new GraphicsInitThread().start();
  try {
    ModuleDef module=compilerContext.getModule();
    PrecompileTaskOptions jjsOptions=compilerContext.getOptions();
    if (jjsOptions.isIncrementalCompileEnabled()) {
      compilerContext.getMinimalRebuildCache().recordDiskSourceResources(module);
      compilerContext.getMinimalRebuildCache().recordBuildResources(module);
    }
    CompilationState compilationState=module.getCompilationState(logger,compilerContext);
    if (jjsOptions.isStrict() && compilationState.hasErrors()) {
      abortDueToStrictMode(logger);
    }
    List<String> initialTypeOracleTypes=new ArrayList<String>();
    if (jjsOptions.isCompilerMetricsEnabled()) {
      for (      JClassType type : compilationState.getTypeOracle().getTypes()) {
        initialTypeOracleTypes.add(type.getPackage().getName() + "." + type.getName());
      }
    }
    long moduleLoadFinished=System.currentTimeMillis();
    String[] declEntryPts=module.getEntryPointTypeNames();
    if (declEntryPts.length == 0) {
      logger.log(TreeLogger.ERROR,"Module has no entry points defined",null);
      throw new UnableToCompleteException();
    }
    PrecompilationMetricsArtifact precompilationMetrics=jjsOptions.isCompilerMetricsEnabled() ? new PrecompilationMetricsArtifact(permutationBase) : null;
    PrecompilationContext precompilationContext=PrecompilationContextCreator.create(compilerContext,compilationState,propertyCombinations,declEntryPts,null,precompilationMetrics);
    compilationState=null;
    UnifiedAst unifiedAst=JavaToJavaScriptCompiler.precompile(logger,compilerContext,precompilationContext);
    if (jjsOptions.isCompilerMetricsEnabled()) {
      ModuleMetricsArtifact moduleMetrics=new ModuleMetricsArtifact();
      moduleMetrics.setSourceFiles(module.getAllSourceFiles());
      moduleMetrics.setInitialTypes(initialTypeOracleTypes);
      moduleMetrics.setElapsedMilliseconds(moduleLoadFinished - startTimeMilliseconds);
      unifiedAst.setModuleMetrics(moduleMetrics);
    }
    List<Permutation> permutations=new ArrayList<Permutation>(Arrays.asList(precompilationContext.getPermutations()));
    mergeCollapsedPermutations(permutations);
    SortedMap<RebindAnswersPermutationKey,Permutation> merged=new TreeMap<RebindAnswersPermutationKey,Permutation>();
    SortedSet<String> liveRebindRequests=unifiedAst.getRebindRequests();
    for (    Permutation permutation : permutations) {
      RebindAnswersPermutationKey key=new RebindAnswersPermutationKey(permutation,liveRebindRequests);
      if (merged.containsKey(key)) {
        Permutation existing=merged.get(key);
        existing.mergeFrom(permutation,liveRebindRequests);
      }
 else {
        merged.put(key,permutation);
      }
    }
    permutations.clear();
    permutations.addAll(merged.values());
    if (jjsOptions.isCompilerMetricsEnabled()) {
      int[] ids=new int[propertyCombinations.size()];
      for (int i=0; i < propertyCombinations.size(); i++) {
        ids[i]=permutationBase + i;
      }
      precompilationMetrics.setPermutationIds(ids);
      precompilationMetrics.setElapsedMilliseconds(System.currentTimeMillis() - startTimeMilliseconds);
      unifiedAst.setPrecompilationMetrics(precompilationMetrics);
    }
    return new Precompilation(unifiedAst,permutations,permutationBase,precompilationContext.getGeneratorArtifacts());
  }
 catch (  UnableToCompleteException e) {
    return null;
  }
 finally {
    precompileEvent.end();
  }
}
