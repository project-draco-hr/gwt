{
  options.setOptimizePrecompile(false);
  for (  String moduleName : options.getModuleNames()) {
    File compilerWorkDir=options.getCompilerWorkDir(moduleName);
    Util.recursiveDelete(compilerWorkDir,true);
    compilerWorkDir.mkdirs();
    File precompilationFile=new File(compilerWorkDir,PRECOMPILE_FILENAME);
    ModuleDef module=ModuleDefLoader.loadFromClassPath(logger,moduleName);
    StandardLinkerContext linkerContext=new StandardLinkerContext(TreeLogger.NULL,module,options);
    boolean generateOnShards=true;
    if (!options.isEnabledGeneratingOnShards()) {
      logger.log(TreeLogger.INFO,"Precompiling on the start node");
      generateOnShards=false;
    }
 else     if (!linkerContext.allLinkersAreShardable()) {
      TreeLogger legacyLinkersLogger=logger.branch(TreeLogger.INFO,"Precompiling on the start node, because some linkers are not updated");
      for (      Linker linker : linkerContext.findUnshardableLinkers()) {
        legacyLinkersLogger.log(TreeLogger.INFO,"Linker" + linker.getClass().getCanonicalName() + " is not updated");
      }
      generateOnShards=false;
    }
 else     if (options.isValidateOnly()) {
      generateOnShards=false;
    }
 else     if (options.getDumpSignatureFile() != null) {
      logger.log(TreeLogger.INFO,"Precompiling on the start node, because a dump signature file was specified");
      generateOnShards=false;
    }
    if (generateOnShards) {
      TreeLogger branch=logger.branch(TreeLogger.INFO,"Precompiling (minimal) module " + module.getName());
      Util.writeObjectAsFile(logger,precompilationFile,options);
      int numPermutations=new PropertyPermutations(module.getProperties(),module.getActiveLinkerNames()).size();
      Util.writeStringAsFile(logger,new File(compilerWorkDir,PERM_COUNT_FILENAME),String.valueOf(numPermutations));
      branch.log(TreeLogger.INFO,"Precompilation (minimal) succeeded, number of permutations: " + numPermutations);
    }
 else {
      if (options.isValidateOnly()) {
        TreeLogger branch=logger.branch(TreeLogger.INFO,"Validating compilation " + module.getName());
        if (!validate(branch,options,module,options.getGenDir(),compilerWorkDir,options.getDumpSignatureFile())) {
          branch.log(TreeLogger.ERROR,"Validation failed");
          return false;
        }
        branch.log(TreeLogger.INFO,"Validation succeeded");
      }
 else {
        TreeLogger branch=logger.branch(TreeLogger.INFO,"Precompiling module " + module.getName());
        Precompilation precompilation=precompile(branch,options,module,options.getGenDir(),compilerWorkDir,options.getDumpSignatureFile());
        if (precompilation == null) {
          branch.log(TreeLogger.ERROR,"Precompilation failed");
          return false;
        }
        Util.writeObjectAsFile(logger,precompilationFile,precompilation);
        int permsPrecompiled=precompilation.getPermutations().length;
        Util.writeStringAsFile(logger,new File(compilerWorkDir,PERM_COUNT_FILENAME),String.valueOf(permsPrecompiled));
        branch.log(TreeLogger.INFO,"Precompilation succeeded, number of permutations: " + permsPrecompiled);
      }
    }
  }
  return true;
}
