{
  try {
    CompilationState compilationState=module.getCompilationState(logger);
    if (dumpSignatureFile != null) {
      SignatureDumper.dumpSignatures(logger,compilationState.getTypeOracle(),dumpSignatureFile);
    }
    String[] declEntryPts=module.getEntryPointTypeNames();
    if (declEntryPts.length == 0) {
      logger.log(TreeLogger.ERROR,"Module has no entry points defined",null);
      throw new UnableToCompleteException();
    }
    ArtifactSet generatedArtifacts=new ArtifactSet();
    DistillerRebindPermutationOracle rpo=new DistillerRebindPermutationOracle(module,compilationState,generatedArtifacts,allPermutations,genDir,generatorResourcesDir);
    compilationState=null;
    PerfLogger.start("Precompile");
    UnifiedAst unifiedAst=getCompiler(module).precompile(logger,module,rpo,declEntryPts,null,jjsOptions,rpo.getPermuationCount() == 1);
    PerfLogger.end();
    Permutation[] permutations=rpo.getPermutations();
    SortedMap<String,Permutation> merged=new TreeMap<String,Permutation>();
    SortedSet<String> liveRebindRequests=unifiedAst.getRebindRequests();
    for (    Permutation permutation : permutations) {
      SortedMap<String,String> rebindAnswers=new TreeMap<String,String>(permutation.getRebindAnswers());
      rebindAnswers.keySet().retainAll(liveRebindRequests);
      String key=rebindAnswers.toString();
      if (merged.containsKey(key)) {
        Permutation existing=merged.get(key);
        existing.mergeFrom(permutation,liveRebindRequests);
      }
 else {
        merged.put(key,permutation);
      }
    }
    return new Precompilation(unifiedAst,merged.values(),permutationBase,generatedArtifacts);
  }
 catch (  UnableToCompleteException e) {
    return null;
  }
}
