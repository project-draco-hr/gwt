{
  if (prepared) {
    logger.log(TreeLogger.DEBUG,"ImageResources already prepared");
    return;
  }
  ImageResourceDeclaration image=new ImageResourceDeclaration(method);
  boolean cannotBundle=false;
  DisplayedImage displayed=null;
  LocalizedImage localizedImage;
  ImageRect rect;
  try {
    BundledImage bundledImage=(BundledImage)getImage(context,image);
    localizedImage=bundledImage.addImage(logger,context,image);
    rect=bundledImage.getImageRect(image);
    displayed=bundledImage;
  }
 catch (  CannotBundleImageException e) {
    cannotBundle=true;
    localizedImage=e.getLocalizedImage();
    rect=e.getImageRect();
  }
  if (cannotBundle) {
    if (rect.isAnimated() || rect.isLossy()) {
    }
 else {
      try {
        URL contentLocation=localizedImage.getUrl();
        int originalSize=contentLocation.openConnection().getContentLength();
        URL reencodedContents=reencodeToTempFile(logger,rect);
        int newSize=reencodedContents.openConnection().getContentLength();
        if (newSize < originalSize) {
          logger.log(TreeLogger.SPAM,"Reencoded image and saved " + (originalSize - newSize) + " bytes");
          localizedImage=new LocalizedImage(localizedImage,reencodedContents);
        }
      }
 catch (      IOException e2) {
        logger.log(TreeLogger.WARN,"Unable to determine before/after size when re-encoding image " + "data",e2);
      }
    }
    ExternalImage externalImage=new ExternalImage(image,localizedImage,rect);
    shared.externalImages.put(new BundleKey(image),externalImage);
    displayed=externalImage;
  }
  if (image.isFlipRtl()) {
    displayed.setRtlImage(localizedImage);
  }
}
