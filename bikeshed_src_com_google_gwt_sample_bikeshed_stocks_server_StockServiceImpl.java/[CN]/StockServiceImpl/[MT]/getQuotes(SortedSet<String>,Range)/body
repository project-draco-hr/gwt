{
  int start=range.getStart();
  int end=Math.min(start + range.getLength(),symbols.size());
  if (end <= start) {
    return new Result(new StockQuoteList(0),0);
  }
  SortedSet<String> symbolsInRange=new TreeSet<String>();
  int idx=0;
  for (  String symbol : symbols) {
    if (idx >= start && idx < end) {
      symbolsInRange.add(symbol);
    }
    idx++;
  }
  SortedSet<String> symbolsToQuery=new TreeSet<String>();
  long now=System.currentTimeMillis();
  for (  String symbol : symbolsInRange) {
    Quote quote=QUOTES.get(symbol);
    if (quote == null || now - quote.getCreatedTime() >= 5000) {
      symbolsToQuery.add(symbol);
    }
 else {
    }
  }
  if (symbolsToQuery.size() > 0) {
    GoogleFinance.queryServer(symbolsToQuery,QUOTES);
  }
  StockQuoteList toRet=new StockQuoteList(start);
  for (  String symbol : symbolsInRange) {
    Quote quote=QUOTES.get(symbol);
    if (quote == null) {
      System.out.println("Bad symbol " + symbol);
    }
 else {
      String name=Stocks.companyNamesBySymbol.get(symbol);
      PlayerStatus player=ensurePlayer();
      Integer sharesOwned=player.getSharesOwned(symbol);
      boolean favorite=player.isFavorite(symbol);
      int totalPaid=player.getAverageCostBasis(symbol);
      toRet.add(new StockQuote(symbol,name,quote.getPrice(),quote.getChange(),sharesOwned == null ? 0 : sharesOwned.intValue(),favorite,totalPaid));
    }
  }
  return new Result(toRet,toRet.size());
}
