def _compile(rule):
    'Recursively compiles user-defined rules into parser rules.\n  Compilation is performed by converting strings, regular expressions, lists\n  and functions into _StringRule, _RegExpRule, SEQUENCE and _FunctionRule\n  (respectively). Memoization is used to avoid infinite recursion as rules\n  may refer to each other.'
    if (rule is None):
        raise RuntimeError('None is not a valid rule')
    elif isinstance(rule, str):
        return _StringRule(rule)
    elif isinstance(rule, _regex_type):
        return _RegExpRule(rule)
    elif isinstance(rule, _list_type):
        return SEQUENCE(*rule)
    elif isinstance(rule, _function_type):
        if (rule in _compiled_functions_memory):
            return _compiled_functions_memory[rule]
        else:
            compiled_function = _FunctionRule(rule)
            _compiled_functions_memory[rule] = compiled_function
            compiled_function._sub_rule = _compile(rule())
            return compiled_function
    elif isinstance(rule, _PegParserRule):
        return rule
    else:
        raise RuntimeError('Invalid rule type %s: %s', (type(rule), rule))
