{
  PriorityQueue<Integer> pq=new PriorityQueue<Integer>();
  assertNull(pq.comparator());
  pq=new PriorityQueue<Integer>(11);
  assertNull(pq.comparator());
  Comparator<Integer> comparator=new Comparator<Integer>(){
    @Override public int compare(    Integer o1,    Integer o2){
      return o1 - o2;
    }
  }
;
  pq=new PriorityQueue<Integer>(11,comparator);
  assertEquals(comparator,pq.comparator());
  PriorityQueue<Integer> anotherQueue=new PriorityQueue<Integer>(pq);
  assertEquals(pq.comparator(),anotherQueue.comparator());
  TreeSet<Integer> sortedSet=new TreeSet<Integer>(comparator);
  pq=new PriorityQueue<Integer>(sortedSet);
  assertEquals(sortedSet.comparator(),pq.comparator());
}
