{
  Matcher match=argPattern.matcher(template);
  int curPos=0;
  boolean inQuote=false;
  int templateLen=template.length();
  ArrayList<TemplateChunk> chunks=new ArrayList<TemplateChunk>();
  TemplateChunk curChunk=null;
  while (curPos < templateLen) {
    char ch=template.charAt(curPos++);
switch (ch) {
case '\'':
      if (curPos < templateLen && template.charAt(curPos) == '\'') {
        curChunk=appendString(chunks,curChunk,"'");
        ++curPos;
        break;
      }
    inQuote=!inQuote;
  break;
case '{':
if (inQuote) {
  curChunk=appendString(chunks,curChunk,"{");
  break;
}
if (match.find(curPos - 1) && match.start() == curPos - 1) {
int argNumber=Integer.valueOf(match.group(1));
curPos=match.end();
String format=match.group(3);
String subformat=match.group(5);
if (curChunk != null) {
  chunks.add(curChunk);
}
chunks.add(new ArgumentChunk(argNumber,format,subformat));
curChunk=null;
}
 else {
throw new ParseException("Invalid message format - { not start of valid argument" + template,curPos);
}
break;
case '\n':
curChunk=appendString(chunks,curChunk,"\\n");
break;
case '\r':
curChunk=appendString(chunks,curChunk,"\\r");
break;
case '\\':
curChunk=appendString(chunks,curChunk,"\\\\");
break;
case '"':
curChunk=appendString(chunks,curChunk,"\\\"");
break;
default :
curChunk=appendString(chunks,curChunk,String.valueOf(ch));
break;
}
}
if (inQuote) {
throw new ParseException("Unterminated single quote: " + template,template.length());
}
if (curChunk != null) {
chunks.add(curChunk);
}
return chunks;
}
