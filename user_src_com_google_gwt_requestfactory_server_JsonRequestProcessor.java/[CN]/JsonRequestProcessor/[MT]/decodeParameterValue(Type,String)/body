{
  Class<?> parameterType=null;
  if (genericParameterType instanceof Class<?>) {
    parameterType=(Class<?>)genericParameterType;
  }
  if (genericParameterType instanceof ParameterizedType) {
    ParameterizedType pType=(ParameterizedType)genericParameterType;
    if (pType.getRawType() instanceof Class<?>) {
      Class<?> rType=(Class<?>)pType.getRawType();
      parameterType=rType;
      if (Collection.class.isAssignableFrom(rType)) {
        Collection<Object> collection=createCollection(rType);
        if (collection != null) {
          JSONArray array=new JSONArray(parameterValue);
          for (int i=0; i < array.length(); i++) {
            collection.add(decodeParameterValue(pType.getActualTypeArguments()[0],array.getString(i)));
          }
          return collection;
        }
      }
    }
  }
  if (parameterValue == null) {
    return null;
  }
  if (String.class == parameterType) {
    return parameterValue;
  }
  if (Boolean.class == parameterType || boolean.class == parameterType) {
    return Boolean.valueOf(parameterValue);
  }
  if (Integer.class == parameterType || int.class == parameterType) {
    return new Integer(parameterValue);
  }
  if (Byte.class == parameterType || byte.class == parameterType) {
    return new Byte(parameterValue);
  }
  if (Short.class == parameterType || short.class == parameterType) {
    return new Short(parameterValue);
  }
  if (Float.class == parameterType || float.class == parameterType) {
    return new Float(parameterValue);
  }
  if (Double.class == parameterType || double.class == parameterType) {
    return new Double(parameterValue);
  }
  if (Long.class == parameterType || long.class == parameterType) {
    return new Long(parameterValue);
  }
  if (Character.class == parameterType || char.class == parameterType) {
    return parameterValue.charAt(0);
  }
  if (BigInteger.class == parameterType) {
    return new BigInteger(parameterValue);
  }
  if (BigDecimal.class == parameterType) {
    return new BigDecimal(parameterValue);
  }
  if (parameterType.isEnum()) {
    int ordinal=Integer.parseInt(parameterValue);
    Method valuesMethod=parameterType.getDeclaredMethod("values",new Class[0]);
    if (valuesMethod != null) {
      valuesMethod.setAccessible(true);
      Enum<?>[] values=(Enum<?>[])valuesMethod.invoke(null);
      for (      Enum<?> e : values) {
        if (ordinal == e.ordinal()) {
          return e;
        }
      }
    }
    throw new IllegalArgumentException("Can't decode enum " + parameterType + " no matching ordinal "+ ordinal);
  }
  if (Date.class == parameterType) {
    return new Date(Long.parseLong(parameterValue));
  }
  if (EntityProxy.class.isAssignableFrom(parameterType)) {
    ProxyFor service=parameterType.getAnnotation(ProxyFor.class);
    if (service != null) {
      EntityKey entityKey=getEntityKey(parameterValue.toString());
      DvsData dvsData=dvsDataMap.get(entityKey);
      if (dvsData != null) {
        EntityData entityData=getEntityDataForRecordWithSettersApplied(entityKey,dvsData.jsonObject,dvsData.writeOperation);
        return entityData.entityInstance;
      }
 else {
        involvedKeys.add(entityKey);
        return getEntityInstance(entityKey);
      }
    }
  }
  if (EntityProxyId.class.isAssignableFrom(parameterType)) {
    EntityKey entityKey=getEntityKey(parameterValue.toString());
    ProxyFor service=entityKey.proxyType.getAnnotation(ProxyFor.class);
    if (service == null) {
      throw new IllegalArgumentException("Unknown service, unable to decode " + parameterValue);
    }
    involvedKeys.add(entityKey);
    return getEntityInstance(entityKey);
  }
  throw new IllegalArgumentException("Unknown parameter type: " + parameterType);
}
