{
  Class<? extends Record> record=getRecordFromClassToken(recordToken);
  EntityKey entityKey=new EntityKey(recordObject.getLong("id"),(writeOperation == WriteOperation.CREATE),record);
  try {
    Class<?> entity=getEntityFromRecordAnnotation(record);
    Map<String,Class<?>> propertiesInRecord=getPropertiesFromRecord(record);
    validateKeys(recordObject,propertiesInRecord.keySet());
    updatePropertyTypes(propertiesInRecord,entity);
    Object entityInstance=getEntityInstance(writeOperation,entity,recordObject.get("id"),propertiesInRecord.get("id"));
    Set<ConstraintViolation<Object>> violations=Collections.emptySet();
    Iterator<?> keys=recordObject.keys();
    while (keys.hasNext()) {
      String key=(String)keys.next();
      Class<?> propertyType=propertiesInRecord.get(key);
      if (writeOperation == WriteOperation.CREATE && ("id".equals(key))) {
        Long id=generateIdForCreate(key);
        if (id != null) {
          entity.getMethod(getMethodNameFromPropertyName(key,"set"),propertyType).invoke(entityInstance,id);
        }
      }
 else {
        Object propertyValue=getPropertyValueFromRequest(recordObject,key,propertyType);
        entity.getMethod(getMethodNameFromPropertyName(key,"set"),propertyType).invoke(entityInstance,propertyValue);
      }
    }
    Validator validator=null;
    try {
      ValidatorFactory validatorFactory=Validation.buildDefaultValidatorFactory();
      validator=validatorFactory.getValidator();
    }
 catch (    Exception e) {
      log.info(String.format("Ingnoring exception caught initializing bean validation framework. " + "It is probably unconfigured or misconfigured. [%s] %s ",e.getClass().getName(),e.getLocalizedMessage()));
    }
    if (validator != null) {
      violations=validator.validate(entityInstance);
    }
    return new EntityData(entityKey,entityInstance,getViolationsAsJson(violations),writeOperation,entity);
  }
 catch (  Exception ex) {
    log.severe(String.format("Caught exception [%s] %s",ex.getClass().getName(),ex.getLocalizedMessage()));
    return getEntityDataForException(entityKey,writeOperation,ex);
  }
}
