{
  Class<?> entityType=getEntityTypeForProxyType(entityKey.proxyType);
  Map<String,Class<?>> entityPropTypes=getPropertiesFromRecordProxyType(entityKey.proxyType);
  Map<String,Class<?>> proxyPropTypes=new HashMap<String,Class<?>>(entityPropTypes);
  validateKeys(recordObject,entityPropTypes.keySet());
  updatePropertyTypes(entityPropTypes,entityType);
  Object entityInstance=getEntityInstance(writeOperation,entityType,entityKey.decodedId(entityPropTypes.get(ENTITY_ID_PROPERTY)),entityPropTypes.get(ENTITY_ID_PROPERTY));
  cachedEntityLookup.put(entityKey,entityInstance);
  Iterator<?> keys=recordObject.keys();
  while (keys.hasNext()) {
    String key=(String)keys.next();
    Class<?> propertyType=entityPropTypes.get(key);
    Class<?> dtoType=proxyPropTypes.get(key);
    if (writeOperation == WriteOperation.CREATE && (ENTITY_ID_PROPERTY.equals(key))) {
      String id=generateIdForCreate(key);
      if (id != null) {
        entityType.getMethod(getMethodNameFromPropertyName(key,"set"),propertyType).invoke(entityInstance,id);
      }
    }
 else {
      Object propertyValue=null;
      if (!recordObject.isNull(key) && EntityProxy.class.isAssignableFrom(dtoType)) {
        EntityKey propKey=getEntityKey(recordObject.getString(key));
        Object cacheValue=cachedEntityLookup.get(propKey);
        if (cachedEntityLookup.containsKey(propKey)) {
          propertyValue=cacheValue;
        }
 else {
          propertyValue=getPropertyValueFromRequest(recordObject,key,proxyPropTypes.get(key));
        }
      }
 else {
        propertyValue=getPropertyValueFromRequest(recordObject,key,proxyPropTypes.get(key));
      }
      entityType.getMethod(getMethodNameFromPropertyName(key,"set"),propertyType).invoke(entityInstance,propertyValue);
    }
  }
  Set<ConstraintViolation<Object>> violations=Collections.emptySet();
  Validator validator=null;
  try {
    ValidatorFactory validatorFactory=Validation.buildDefaultValidatorFactory();
    validator=validatorFactory.getValidator();
  }
 catch (  Exception e) {
    log.info(String.format("Ignoring exception caught initializing bean validation framework. " + "It is probably unconfigured or misconfigured. [%s] %s ",e.getClass().getName(),e.getLocalizedMessage()));
  }
  if (validator != null) {
    violations=validator.validate(entityInstance);
  }
  return new EntityData(entityInstance,(violations.isEmpty() ? null : getViolationsAsJson(violations)));
}
