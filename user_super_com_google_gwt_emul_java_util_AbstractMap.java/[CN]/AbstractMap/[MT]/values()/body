{
  return new AbstractCollection<V>(){
    @Override public void clear(){
      AbstractMap.this.clear();
    }
    @Override public boolean contains(    Object value){
      return containsValue(value);
    }
    @Override public Iterator<V> iterator(){
      final Iterator<Entry<K,V>> outerIter=entrySet().iterator();
      return new Iterator<V>(){
        @Override public boolean hasNext(){
          return outerIter.hasNext();
        }
        @Override public V next(){
          Entry<K,V> entry=outerIter.next();
          return entry.getValue();
        }
        @Override public void remove(){
          outerIter.remove();
        }
      }
;
    }
    @Override public int size(){
      return AbstractMap.this.size();
    }
  }
;
}
