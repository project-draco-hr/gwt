{
  CellBasedWidgetImpl.get().onBrowserEvent(this,event);
  if (isRefreshing) {
    return;
  }
  super.onBrowserEvent(event);
  String eventType=event.getType();
  if ("focus".equals(eventType)) {
    isFocused=true;
    onFocus();
  }
 else   if ("blur".equals(eventType)) {
    isFocused=false;
    onBlur();
  }
 else   if ("keydown".equals(eventType) && !cellIsEditing) {
    int keyCode=event.getKeyCode();
switch (keyCode) {
case KeyCodes.KEY_DOWN:
case KeyCodes.KEY_UP:
case KeyCodes.KEY_RIGHT:
case KeyCodes.KEY_LEFT:
      handleKeyNavigation(keyCode);
    event.preventDefault();
  return;
case 32:
if (KeyboardSelectionPolicy.ENABLED == getKeyboardSelectionPolicy()) {
  keyboardSelectedNode.setSelected(!keyboardSelectedNode.isSelected());
  event.preventDefault();
}
return;
}
}
Element target=event.getEventTarget().cast();
ArrayList<Element> chain=new ArrayList<Element>();
collectElementChain(chain,getElement(),target);
boolean isMouseDown="mousedown".equals(eventType);
final CellTreeNodeView<?> nodeView=findItemByChain(chain,0,rootNode);
if (nodeView != null && nodeView != rootNode) {
if (isMouseDown) {
Element showMoreElem=nodeView.getShowMoreElement();
if (nodeView.getImageElement().isOrHasChild(target)) {
nodeView.setOpen(!nodeView.isOpen(),true);
return;
}
 else if (showMoreElem != null && showMoreElem.isOrHasChild(target)) {
nodeView.showMore();
return;
}
}
if (nodeView.getSelectionElement().isOrHasChild(target)) {
if ("focus".equals(eventType) || isMouseDown) {
final boolean targetsCellParent=nodeView.getCellParent().isOrHasChild(target);
keyboardSelectCommand=new ScheduledCommand(){
public void execute(){
  if (keyboardSelectCommand == this && !nodeView.isDestroyed()) {
    isFocused=true;
    keyboardSelectCommand=null;
    keyboardSelect(nodeView,!targetsCellParent);
  }
}
}
;
Scheduler.get().scheduleDeferred(keyboardSelectCommand);
}
nodeView.fireEventToCell(event);
}
}
}
