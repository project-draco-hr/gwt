{
  Set<Resource> res=new HashSet<Resource>(Arrays.asList(JavaResourceBase.getStandardResources()));
  res.add(new MockJavaResource("test.A"){
    @Override public CharSequence getContent(){
      StringBuilder code=new StringBuilder();
      code.append("package test;");
      code.append("interface A {");
      code.append(" A[] array();");
      code.append(" B b();");
      code.append(" D d(String withArg);");
      code.append(" int i();");
      code.append(" void v();");
      code.append("}");
      return code;
    }
  }
);
  res.add(new MockJavaResource("test.B"){
    @Override public CharSequence getContent(){
      StringBuilder code=new StringBuilder();
      code.append("package test;");
      code.append("abstract class B {");
      code.append(" abstract C c();");
      code.append(" abstract Object c(String withOverload);");
      code.append("}");
      return code;
    }
  }
);
  res.add(new MockJavaResource("test.C"){
    @Override public CharSequence getContent(){
      StringBuilder code=new StringBuilder();
      code.append("package test;");
      code.append("interface C {");
      code.append(" D d();");
      code.append("}");
      return code;
    }
  }
);
  res.add(new MockJavaResource("test.D"){
    @Override public CharSequence getContent(){
      StringBuilder code=new StringBuilder();
      code.append("package test;");
      code.append("interface D {");
      code.append(" String string();");
      code.append("}");
      return code;
    }
  }
);
  return res;
}
