{
  apiMembersByName=new EnumMap<MethodType,Map<String,Set<ApiAbstractMethod>>>(MethodType.class);
  for (  MethodType method : MethodType.values()) {
    apiMembersByName.put(method,new HashMap<String,Set<ApiAbstractMethod>>());
    Map<String,Set<ApiAbstractMethod>> pointer=apiMembersByName.get(method);
    List<String> notAddedMembers=new ArrayList<String>();
    JAbstractMethod jams[]=getAccessibleMethods(method);
    for (    JAbstractMethod jam : jams) {
      if (isApiMember(jam)) {
        String tempName=jam.getName() + jam.getParameters().length;
        Set<ApiAbstractMethod> existingMembers=pointer.get(tempName);
        if (existingMembers == null) {
          existingMembers=new HashSet<ApiAbstractMethod>();
        }
switch (method) {
case CONSTRUCTOR:
          existingMembers.add(new ApiConstructor(jam,this));
        break;
case METHOD:
      existingMembers.add(new ApiMethod(jam,this));
    break;
default :
  throw new AssertionError("Unknown memberType : " + method);
}
pointer.put(tempName,existingMembers);
}
 else {
notAddedMembers.add(jam.toString());
}
}
if (notAddedMembers.size() > 0) {
logger.log(TreeLogger.SPAM,"class " + getName() + ", removing "+ notAddedMembers.size()+ " nonApi members: "+ notAddedMembers,null);
}
}
}
