{
  for (  MethodType member : MethodType.values()) {
    apiMembersByName.add(member.getId(),new HashMap<String,HashSet<ApiAbstractMethod>>());
    HashMap<String,HashSet<ApiAbstractMethod>> pointer=apiMembersByName.get(member.getId());
    ArrayList<String> notAddedMembers=new ArrayList<String>();
    JAbstractMethod jams[]=getAccessibleMembers(member);
    for (    JAbstractMethod jam : jams) {
      if (isApiMember(jam)) {
        String tempName=jam.getName() + jam.getParameters().length;
        HashSet<ApiAbstractMethod> existingMembers=pointer.get(tempName);
        if (existingMembers == null) {
          existingMembers=new HashSet<ApiAbstractMethod>();
        }
switch (member) {
case CONSTRUCTOR:
          existingMembers.add(new ApiConstructor(jam,this));
        break;
case METHOD:
      existingMembers.add(new ApiMethod(jam,this));
    break;
default :
  throw new AssertionError("Unknown memberType : " + member);
}
pointer.put(tempName,existingMembers);
}
 else {
notAddedMembers.add(jam.toString());
}
}
if (notAddedMembers.size() > 0) {
logger.log(TreeLogger.SPAM,"class " + getName() + ", removing "+ notAddedMembers.size()+ " nonApi members: "+ notAddedMembers,null);
}
}
}
