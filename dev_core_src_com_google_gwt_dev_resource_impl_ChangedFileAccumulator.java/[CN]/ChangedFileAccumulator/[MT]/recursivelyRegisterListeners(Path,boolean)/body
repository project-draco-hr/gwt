{
  Files.walkFileTree(directory,new SimpleFileVisitor<Path>(){
    @Override public FileVisitResult preVisitDirectory(    Path currentDirectory,    BasicFileAttributes attrs) throws IOException {
      WatchKey watchKey=currentDirectory.register(watchService,StandardWatchEventKinds.ENTRY_CREATE,StandardWatchEventKinds.ENTRY_DELETE,StandardWatchEventKinds.ENTRY_MODIFY);
      if (pathsByWatchKey.containsKey(watchKey)) {
        return FileVisitResult.SKIP_SUBTREE;
      }
      pathsByWatchKey.put(watchKey,currentDirectory);
      return FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult visitFile(    Path file,    BasicFileAttributes attrs) throws IOException {
      if (attrs.isSymbolicLink()) {
        recursivelyRegisterListeners(Files.readSymbolicLink(file),considerPreexistingFilesChanged);
        return FileVisitResult.CONTINUE;
      }
      if (considerPreexistingFilesChanged) {
        changedFiles.add(file.toFile());
      }
      return FileVisitResult.CONTINUE;
    }
  }
);
}
