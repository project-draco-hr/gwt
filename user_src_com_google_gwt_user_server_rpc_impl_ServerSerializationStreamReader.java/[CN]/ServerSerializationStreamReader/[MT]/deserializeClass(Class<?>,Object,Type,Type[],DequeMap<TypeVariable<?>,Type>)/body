{
  Map<String,Method> setters=null;
  Set<String> clientFieldNames=serializationPolicy.getClientFieldNamesForEnhancedClass(instanceClass);
  if (clientFieldNames != null) {
    try {
      String encodedData=readString();
      if (encodedData != null) {
        byte[] serializedData=Base64Utils.fromBase64(encodedData);
        ByteArrayInputStream baos=new ByteArrayInputStream(serializedData);
        ObjectInputStream ois=new ObjectInputStream(baos);
        int count=ois.readInt();
        for (int i=0; i < count; i++) {
          String fieldName=(String)ois.readObject();
          Object fieldValue=ois.readObject();
          Field field=instanceClass.getDeclaredField(fieldName);
          field.setAccessible(true);
          field.set(instance,fieldValue);
        }
      }
    }
 catch (    IOException e) {
      throw new SerializationException(e);
    }
catch (    NoSuchFieldException e) {
      throw new SerializationException(e);
    }
    setters=getSetters(instanceClass);
  }
  Field[] serializableFields=SerializabilityUtil.applyFieldSerializationPolicy(instanceClass,serializationPolicy);
  for (  Field declField : serializableFields) {
    assert(declField != null);
    if ((clientFieldNames != null) && !clientFieldNames.contains(declField.getName())) {
      continue;
    }
    Type declGenericType=declField.getGenericType();
    Object value=deserializeValue(declField.getType(),declGenericType,resolvedTypes);
    String fieldName=declField.getName();
    Method setter;
    if ((setters != null) && ((setter=setters.get(fieldName)) != null)) {
      setter.invoke(instance,value);
    }
 else {
      boolean isAccessible=declField.isAccessible();
      boolean needsAccessOverride=(!isAccessible && !Modifier.isPublic(declField.getModifiers())) || Modifier.isFinal(declField.getModifiers());
      if (needsAccessOverride) {
        declField.setAccessible(true);
      }
      declField.set(instance,value);
    }
  }
  Class<?> superClass=instanceClass.getSuperclass();
  if (serializationPolicy.shouldDeserializeFields(superClass)) {
    Type[] superParameterTypes=SerializabilityUtil.findExpectedParameterTypes(superClass,superClass,resolvedTypes);
    deserializeImpl(SerializabilityUtil.hasServerCustomFieldSerializer(superClass),superClass,instance,expectedType,superParameterTypes,resolvedTypes);
  }
}
