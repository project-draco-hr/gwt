{
  Object instance=null;
  try {
    Class<?> instanceClass;
    if (hasFlags(FLAG_ELIDE_TYPE_NAMES)) {
      if (getSerializationPolicy() instanceof TypeNameObfuscator) {
        TypeNameObfuscator obfuscator=(TypeNameObfuscator)getSerializationPolicy();
        String instanceClassName=obfuscator.getClassNameForTypeId(typeSignature);
        instanceClass=Class.forName(instanceClassName,false,classLoader);
      }
 else {
        throw new SerializationException("The GWT module was compiled with RPC type name elision enabled, but " + getSerializationPolicy().getClass().getName() + " does not implement "+ TypeNameObfuscator.class.getName());
      }
    }
 else {
      SerializedInstanceReference serializedInstRef=SerializabilityUtil.decodeSerializedInstanceReference(typeSignature);
      instanceClass=Class.forName(serializedInstRef.getName(),false,classLoader);
      validateTypeVersions(instanceClass,serializedInstRef);
    }
    if (resolvedTypes == null) {
      resolvedTypes=new DequeMap<Type,Type>();
    }
    if (expectedType != null) {
      SerializabilityUtil.resolveTypes(expectedType,resolvedTypes);
      if (!SerializabilityUtil.isInstanceAssignableToType(instanceClass,expectedType,resolvedTypes)) {
        throw new SerializedTypeViolationException("Attempt to deserialize an object of type " + instanceClass.toString() + " when an object of type "+ SerializabilityUtil.findActualType(expectedType,resolvedTypes).toString()+ " is expected");
      }
    }
    assert(serializationPolicy != null);
    serializationPolicy.validateDeserialize(instanceClass);
    Class<?> customSerializer=SerializabilityUtil.hasServerCustomFieldSerializer(instanceClass);
    int index=reserveDecodedObjectIndex();
    instance=instantiate(customSerializer,instanceClass,expectedType,resolvedTypes);
    rememberDecodedObject(index,instance);
    Object replacement=deserializeImpl(customSerializer,instanceClass,instance,expectedType,resolvedTypes);
    SerializabilityUtil.releaseTypes(expectedType,resolvedTypes);
    if (instance != replacement) {
      rememberDecodedObject(index,replacement);
      instance=replacement;
    }
    return instance;
  }
 catch (  ClassNotFoundException e) {
    throw new SerializationException(e);
  }
catch (  InstantiationException e) {
    throw new SerializationException(e);
  }
catch (  IllegalAccessException e) {
    throw new SerializationException(e);
  }
catch (  IllegalArgumentException e) {
    throw new SerializationException(e);
  }
catch (  InvocationTargetException e) {
    throw new SerializationException(e.getTargetException());
  }
catch (  NoSuchMethodException e) {
    throw new SerializationException(e);
  }
}
