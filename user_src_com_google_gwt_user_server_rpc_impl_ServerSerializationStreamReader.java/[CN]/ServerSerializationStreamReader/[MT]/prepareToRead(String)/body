{
  tokenList.clear();
  tokenListIndex=0;
  stringTable=null;
  int idx=0, nextIdx;
  while (-1 != (nextIdx=encodedTokens.indexOf(RPC_SEPARATOR_CHAR,idx))) {
    String current=encodedTokens.substring(idx,nextIdx);
    tokenList.add(current);
    idx=nextIdx + 1;
  }
  if (idx == 0) {
    while (idx < encodedTokens.length() && Character.isDigit(encodedTokens.charAt(idx))) {
      ++idx;
    }
    if (idx == 0) {
      throw new IncompatibleRemoteServiceException("Malformed or old RPC message received - expecting version between " + SERIALIZATION_STREAM_MIN_VERSION + " and "+ SERIALIZATION_STREAM_MAX_VERSION);
    }
 else {
      int version=Integer.valueOf(encodedTokens.substring(0,idx));
      throw new IncompatibleRemoteServiceException("Expecting version between " + SERIALIZATION_STREAM_MIN_VERSION + " and "+ SERIALIZATION_STREAM_MAX_VERSION+ " from client, got "+ version+ ".");
    }
  }
  super.prepareToRead(encodedTokens);
  if (getVersion() < SERIALIZATION_STREAM_MIN_VERSION || getVersion() > SERIALIZATION_STREAM_MAX_VERSION) {
    throw new IncompatibleRemoteServiceException("Expecting version between " + SERIALIZATION_STREAM_MIN_VERSION + " and "+ SERIALIZATION_STREAM_MAX_VERSION+ " from client, got "+ getVersion()+ ".");
  }
  if (!areFlagsValid()) {
    throw new IncompatibleRemoteServiceException("Got an unknown flag from " + "client: " + getFlags());
  }
  deserializeStringTable();
  String moduleBaseURL=readString();
  String strongName=readString();
  if (serializationPolicyProvider != null) {
    if (strongName != null && !ALLOWED_STRONG_NAME.matcher(strongName).matches()) {
      throw new SerializationException("GWT-RPC request is invalid because the strong name contains invalid characters");
    }
    serializationPolicy=serializationPolicyProvider.getSerializationPolicy(moduleBaseURL,strongName);
    if (serializationPolicy == null) {
      throw new NullPointerException("serializationPolicyProvider.getSerializationPolicy()");
    }
  }
}
