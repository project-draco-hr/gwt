{
  tokenList.clear();
  tokenListIndex=0;
  stringTable=null;
  int idx=0, nextIdx;
  while (-1 != (nextIdx=encodedTokens.indexOf(RPC_SEPARATOR_CHAR,idx))) {
    String current=encodedTokens.substring(idx,nextIdx);
    tokenList.add(current);
    idx=nextIdx + 1;
  }
  if (idx == 0) {
    while (idx < encodedTokens.length() && Character.isDigit(encodedTokens.charAt(idx))) {
      ++idx;
    }
    if (idx == 0) {
      throw new IncompatibleRemoteServiceException("Malformed or old RPC message received - expecting version " + SERIALIZATION_STREAM_VERSION);
    }
 else {
      int version=Integer.valueOf(encodedTokens.substring(0,idx));
      throw new IncompatibleRemoteServiceException("Expecting version " + SERIALIZATION_STREAM_VERSION + " from client, got "+ version+ ".");
    }
  }
  super.prepareToRead(encodedTokens);
  if (getVersion() != SERIALIZATION_STREAM_VERSION) {
    throw new IncompatibleRemoteServiceException("Expecting version " + SERIALIZATION_STREAM_VERSION + " from client, got "+ getVersion()+ ".");
  }
  deserializeStringTable();
  String moduleBaseURL=readString();
  String strongName=readString();
  if (serializationPolicyProvider != null) {
    serializationPolicy=serializationPolicyProvider.getSerializationPolicy(moduleBaseURL,strongName);
    if (serializationPolicy == null) {
      throw new NullPointerException("serializationPolicyProvider.getSerializationPolicy()");
    }
  }
}
