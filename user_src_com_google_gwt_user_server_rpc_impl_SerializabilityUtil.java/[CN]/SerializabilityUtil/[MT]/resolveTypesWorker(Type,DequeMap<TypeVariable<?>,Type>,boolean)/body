{
  if (methodType instanceof GenericArrayType) {
    SerializabilityUtil.resolveTypesWorker(((GenericArrayType)methodType).getGenericComponentType(),resolvedTypes,addTypes);
  }
 else   if (methodType instanceof ParameterizedType) {
    ParameterizedType paramType=(ParameterizedType)methodType;
    Type rawType=paramType.getRawType();
    if (rawType instanceof Class) {
      Class<?> rawClass=(Class<?>)paramType.getRawType();
      TypeVariable<?>[] classGenericTypes=rawClass.getTypeParameters();
      Type[] actualTypes=paramType.getActualTypeArguments();
      for (int i=0; i < actualTypes.length; ++i) {
        TypeVariable<?> variableType=classGenericTypes[i];
        if (addTypes) {
          resolvedTypes.add(variableType,actualTypes[i]);
        }
 else {
          resolvedTypes.remove(variableType);
        }
      }
      Class<?> superClass=rawClass.getSuperclass();
      if (superClass != null) {
        Type superGenericType=rawClass.getGenericSuperclass();
        SerializabilityUtil.resolveTypesWorker(superGenericType,resolvedTypes,addTypes);
      }
      Type[] interfaceTypes=rawClass.getGenericInterfaces();
      for (      Type interfaceType : interfaceTypes) {
        SerializabilityUtil.resolveTypesWorker(interfaceType,resolvedTypes,addTypes);
      }
    }
  }
 else   if (methodType instanceof WildcardType) {
    WildcardType wildcardType=(WildcardType)methodType;
    Type[] lowerBounds=wildcardType.getLowerBounds();
    for (    Type type : lowerBounds) {
      SerializabilityUtil.resolveTypesWorker(type,resolvedTypes,addTypes);
    }
    Type[] upperBounds=wildcardType.getUpperBounds();
    for (    Type type : upperBounds) {
      SerializabilityUtil.resolveTypesWorker(type,resolvedTypes,addTypes);
    }
  }
 else   if (methodType instanceof TypeVariable) {
    Type[] bounds=((TypeVariable<?>)methodType).getBounds();
    for (    Type type : bounds) {
      SerializabilityUtil.resolveTypesWorker(type,resolvedTypes,addTypes);
    }
  }
 else   if (methodType instanceof Class) {
    Class<?> classType=(Class<?>)methodType;
    TypeVariable<?>[] classParams=classType.getTypeParameters();
    for (    TypeVariable<?> classParamType : classParams) {
      if (addTypes) {
        resolvedTypes.add(classParamType,classParamType);
      }
 else {
        resolvedTypes.remove(classParamType);
      }
    }
    Type superGenericType=classType.getGenericSuperclass();
    if (superGenericType != null) {
      SerializabilityUtil.resolveTypesWorker(superGenericType,resolvedTypes,addTypes);
    }
    Type[] interfaceTypes=classType.getGenericInterfaces();
    for (    Type interfaceType : interfaceTypes) {
      SerializabilityUtil.resolveTypesWorker(interfaceType,resolvedTypes,addTypes);
    }
  }
}
