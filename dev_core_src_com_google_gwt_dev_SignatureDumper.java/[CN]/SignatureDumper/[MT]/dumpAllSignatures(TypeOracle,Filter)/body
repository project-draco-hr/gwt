{
  StringBuilder result=new StringBuilder();
  for (  JClassType current : typeOracle.getTypes()) {
    if (!filter.shouldPrint(current)) {
      continue;
    }
    if (current.isInterface() != null) {
      result.append("interface ");
    }
 else {
      result.append("class ");
    }
    result.append(current.getJNISignature());
    JClassType superclass=current.getSuperclass();
    if (superclass != null) {
      result.append(" extends ");
      result.append(superclass.getJNISignature());
    }
    for (    JClassType currentInterface : current.getImplementedInterfaces()) {
      result.append(" implements ");
      result.append(currentInterface.getJNISignature());
    }
    result.append('\n');
    result.append(" method static <clinit> ()V\n");
    JConstructor[] constructors=current.getConstructors();
    if (constructors.length == 0) {
      result.append(" method <init> ()V\n");
    }
 else {
      addMethods(constructors,result,filter);
    }
    addMethods(current.getMethods(),result,filter);
    addFields(current.getFields(),result,filter);
    for (JClassType c=superclass; c != null && !filter.shouldPrint(c); c=c.getSuperclass()) {
      addMethods(c.getMethods(),result,filter);
      addFields(c.getFields(),result,filter);
    }
  }
  return result.toString();
}
