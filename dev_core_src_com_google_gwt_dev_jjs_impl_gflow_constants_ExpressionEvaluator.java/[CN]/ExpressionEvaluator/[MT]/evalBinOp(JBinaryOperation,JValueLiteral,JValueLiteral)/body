{
  if (lhs instanceof JNullLiteral || rhs instanceof JNullLiteral) {
    if (x.getOp() == JBinaryOperator.EQ) {
      return JBooleanLiteral.get((lhs instanceof JNullLiteral) && (rhs instanceof JNullLiteral));
    }
 else     if (x.getOp() == JBinaryOperator.NEQ) {
      return JBooleanLiteral.get(!(lhs instanceof JNullLiteral) || !(rhs instanceof JNullLiteral));
    }
  }
  if (!lhs.getType().equals(rhs.getType())) {
    return null;
  }
  if (lhs.getType().equals(JPrimitiveType.INT)) {
    if (!(lhs instanceof JIntLiteral) || !(rhs instanceof JIntLiteral)) {
      return null;
    }
    int a=((JIntLiteral)lhs).getValue();
    int b=((JIntLiteral)rhs).getValue();
switch (x.getOp()) {
case ADD:
      return new JIntLiteral(x.getSourceInfo(),a + b);
case MUL:
    return new JIntLiteral(x.getSourceInfo(),a * b);
case SUB:
  return new JIntLiteral(x.getSourceInfo(),a - b);
case DIV:
if (b != 0) {
  return new JIntLiteral(x.getSourceInfo(),a / b);
}
 else {
  return null;
}
case EQ:
return JBooleanLiteral.get(a == b);
case NEQ:
return JBooleanLiteral.get(a != b);
case GT:
return JBooleanLiteral.get(a > b);
case GTE:
return JBooleanLiteral.get(a >= b);
case LT:
return JBooleanLiteral.get(a < b);
case LTE:
return JBooleanLiteral.get(a <= b);
default :
return null;
}
}
 else if (lhs.getType().equals(JPrimitiveType.BOOLEAN)) {
if (!(lhs instanceof JBooleanLiteral) || !(rhs instanceof JBooleanLiteral)) {
return null;
}
boolean a=((JBooleanLiteral)lhs).getValue();
boolean b=((JBooleanLiteral)rhs).getValue();
switch (x.getOp()) {
case EQ:
return JBooleanLiteral.get(a == b);
case NEQ:
return JBooleanLiteral.get(a != b);
default :
return null;
}
}
return null;
}
