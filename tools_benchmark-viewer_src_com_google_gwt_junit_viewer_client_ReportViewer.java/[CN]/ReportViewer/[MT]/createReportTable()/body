{
  FlexTable topTable=new FlexTable();
  FlexTable tempReportTable=new FlexTable();
  tempReportTable.setBorderWidth(1);
  tempReportTable.setCellPadding(5);
  tempReportTable.setWidget(0,0,new Label("Date Created"));
  tempReportTable.setWidget(0,1,new Label("GWT Version"));
  if (report == null) {
    tempReportTable.setWidget(1,0,new Label("No currently selected report."));
    tempReportTable.getFlexCellFormatter().setColSpan(1,0,3);
    return tempReportTable;
  }
  detailsLabel.setHTML("<h3>" + report.getId() + " details </h3>");
  tempReportTable.setWidget(1,0,new Label(report.getDateString()));
  tempReportTable.setWidget(1,1,new Label(report.getGwtVersion()));
  int currentRow=1;
  Collections.sort(report.getCategories(),new Comparator(){
    public int compare(    Object o1,    Object o2){
      Category c1=(Category)o1;
      Category c2=(Category)o2;
      return c1.getName().compareTo(c2.getName());
    }
  }
);
  for (int i=0; i < report.getCategories().size(); ++i) {
    Category c=(Category)report.getCategories().get(i);
    if (!c.getName().equals("")) {
      FlexTable categoryTable=new FlexTable();
      categoryTable.setBorderWidth(0);
      categoryTable.setCellPadding(5);
      categoryTable.setText(0,0,c.getName());
      categoryTable.getFlexCellFormatter().setStyleName(0,0,"benchmark-category");
      categoryTable.setWidget(0,1,new Label("Description"));
      categoryTable.setWidget(1,0,new Label(c.getName()));
      categoryTable.setWidget(1,1,new Label(c.getDescription()));
      topTable.setWidget(currentRow++,0,categoryTable);
    }
    Collections.sort(c.getBenchmarks(),new Comparator(){
      public int compare(      Object o1,      Object o2){
        Benchmark b1=(Benchmark)o1;
        Benchmark b2=(Benchmark)o2;
        return b1.getName().compareTo(b2.getName());
      }
    }
);
    for (int j=0; j < c.getBenchmarks().size(); ++j) {
      Benchmark benchmark=(Benchmark)c.getBenchmarks().get(j);
      FlexTable benchmarkTable=new FlexTable();
      benchmarkTable.setBorderWidth(0);
      benchmarkTable.setCellPadding(5);
      benchmarkTable.setText(0,0,benchmark.getName());
      benchmarkTable.setWidget(1,0,new HTML("<pre>" + benchmark.getSourceCode() + "</pre>"));
      benchmarkTable.getFlexCellFormatter().setStyleName(0,0,"benchmark-name");
      benchmarkTable.getFlexCellFormatter().setStyleName(1,0,"benchmark-code");
      topTable.setWidget(currentRow++,0,benchmarkTable);
      FlexTable resultsTable=new FlexTable();
      resultsTable.setBorderWidth(0);
      resultsTable.setCellPadding(5);
      FlexTable.FlexCellFormatter resultsFormatter=resultsTable.getFlexCellFormatter();
      topTable.setWidget(currentRow++,0,resultsTable);
      Collections.sort(benchmark.getResults(),new Comparator(){
        public int compare(        Object o1,        Object o2){
          Result r1=(Result)o1;
          Result r2=(Result)o2;
          return r1.getAgent().compareTo(r2.getAgent());
        }
      }
);
      final List trialsTables=new ArrayList();
      final MutableBool isVisible=new MutableBool(false);
      Button visibilityButton=new Button("Show Data",new ClickListener(){
        public void onClick(        Widget sender){
          isVisible.value=!isVisible.value;
          for (int i=0; i < trialsTables.size(); ++i) {
            Widget w=(Widget)trialsTables.get(i);
            w.setVisible(isVisible.value);
          }
          String name=isVisible.value ? "Hide Data" : "Show Data";
          ((Button)sender).setText(name);
        }
      }
);
      for (int k=0; k < benchmark.getResults().size(); ++k) {
        Result result=(Result)benchmark.getResults().get(k);
        resultsTable.setWidget(0,k,new Image(getImageUrl(report.getId(),c.getName(),benchmark.getClassName(),benchmark.getName(),result.getAgent())));
        resultsFormatter.setAlignment(2,k,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
        FlexTable trialsTable=new FlexTable();
        trialsTable.setVisible(false);
        trialsTables.add(trialsTable);
        trialsTable.setBorderWidth(1);
        trialsTable.setCellPadding(5);
        if (k == 0) {
          resultsTable.setWidget(1,k,visibilityButton);
          resultsFormatter.setColSpan(1,k,benchmark.getResults().size());
          resultsFormatter.setAlignment(1,k,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_MIDDLE);
        }
        resultsTable.setWidget(2,k,trialsTable);
        List trials=result.getTrials();
        int numTrials=trials.size();
        int numVariables=((Trial)trials.get(0)).getVariables().size();
        Trial sampleTrial=(Trial)trials.get(0);
        Map variables=sampleTrial.getVariables();
        List variableNames=new ArrayList(variables.keySet());
        Collections.sort(variableNames);
        for (int varIndex=0; varIndex < numVariables; ++varIndex) {
          String varName=(String)variableNames.get(varIndex);
          trialsTable.setWidget(0,varIndex,new HTML(varName));
        }
        trialsTable.setWidget(0,numVariables,new HTML("Timing (ms)"));
        for (int l=0; l < numTrials; ++l) {
          Trial trial=(Trial)trials.get(l);
          for (int varIndex=0; varIndex < numVariables; ++varIndex) {
            String varName=(String)variableNames.get(varIndex);
            String varValue=(String)trial.getVariables().get(varName);
            trialsTable.setWidget(l + 1,varIndex,new HTML(varValue));
          }
          String data=null;
          if (trial.getException() != null) {
            data=trial.getException();
          }
 else {
            data=trial.getRunTimeMillis() + "";
          }
          trialsTable.setWidget(l + 1,numVariables,new HTML(data));
        }
      }
    }
  }
  return topTable;
}
