{
  if (type != Opcodes.F_NEW) {
    throw new IllegalStateException("ClassReader.accept() should be called with EXPAND_FRAMES flag");
  }
  if (!changed) {
    mv.visitFrame(type,nLocal,local,nStack,stack);
    return;
  }
  Object[] oldLocals=new Object[newLocals.length];
  System.arraycopy(newLocals,0,oldLocals,0,oldLocals.length);
  updateNewLocals(newLocals);
  int index=0;
  int number=0;
  for (; number < nLocal; ++number) {
    Object t=local[number];
    int size=t == Opcodes.LONG || t == Opcodes.DOUBLE ? 2 : 1;
    if (t != Opcodes.TOP) {
      Type typ=OBJECT_TYPE;
      if (t == Opcodes.INTEGER) {
        typ=Type.INT_TYPE;
      }
 else       if (t == Opcodes.FLOAT) {
        typ=Type.FLOAT_TYPE;
      }
 else       if (t == Opcodes.LONG) {
        typ=Type.LONG_TYPE;
      }
 else       if (t == Opcodes.DOUBLE) {
        typ=Type.DOUBLE_TYPE;
      }
 else       if (t instanceof String) {
        typ=Type.getObjectType((String)t);
      }
      setFrameLocal(remap(index,typ),t);
    }
    index+=size;
  }
  index=0;
  number=0;
  for (int i=0; index < newLocals.length; ++i) {
    Object t=newLocals[index++];
    if (t != null && t != Opcodes.TOP) {
      newLocals[i]=t;
      number=i + 1;
      if (t == Opcodes.LONG || t == Opcodes.DOUBLE) {
        index+=1;
      }
    }
 else {
      newLocals[i]=Opcodes.TOP;
    }
  }
  mv.visitFrame(type,number,newLocals,nStack,stack);
  newLocals=oldLocals;
}
