{
  JMethod method=x.getTarget();
  JExpression instance=x.getInstance();
  if (!x.canBePolymorphic()) {
    return;
  }
  JType instanceType=instance.getType();
  JReferenceType enclosingType=method.getEnclosingType();
  if (instanceType == enclosingType || instanceType instanceof JInterfaceType) {
    return;
  }
  if (instanceType instanceof JArrayType) {
    return;
  }
  if (instanceType instanceof JNullType) {
    return;
  }
  assert(instanceType instanceof JClassType);
  JMethod foundMethod=null;
  JClassType type;
  outer:   for (type=(JClassType)instanceType; type != null && type != enclosingType; type=type.extnds) {
    for (int i=0; i < type.methods.size(); ++i) {
      JMethod methodIt=(JMethod)type.methods.get(i);
      if (JProgram.methodsDoMatch(method,methodIt)) {
        foundMethod=methodIt;
        break outer;
      }
    }
  }
  if (foundMethod == null) {
    return;
  }
  ChangeList changes=new ChangeList("Replace call '" + x + "' to type '"+ enclosingType+ "' with a call to type '"+ foundMethod.getEnclosingType()+ "'");
  JMethodCall call=new JMethodCall(program,null,foundMethod);
  changes.replaceExpression(m,call);
  changes.replaceExpression(call.instance,x.instance);
  for (int i=0; i < x.args.size(); ++i) {
    Mutator arg=x.args.getMutator(i);
    changes.addExpression(arg,call.args);
  }
  changeList.add(changes);
  return;
}
