{
  JMethod method=x.getTarget();
  JExpression instance=x.getInstance();
  if (!x.canBePolymorphic()) {
    return;
  }
  JReferenceType instanceType=((JReferenceType)instance.getType()).getUnderlyingType();
  JReferenceType enclosingType=method.getEnclosingType();
  if (instanceType == enclosingType || instanceType instanceof JInterfaceType) {
    return;
  }
  if (instanceType instanceof JArrayType) {
    return;
  }
  if (instanceType instanceof JNullType) {
    return;
  }
  assert(instanceType instanceof JClassType);
  JMethod foundMethod=null;
  JClassType type;
  outer:   for (type=(JClassType)instanceType; type != null && type != enclosingType; type=type.getSuperClass()) {
    for (    JMethod methodIt : type.getMethods()) {
      if (methodOverrides(methodIt,method)) {
        foundMethod=methodIt;
        break outer;
      }
    }
  }
  if (foundMethod == null) {
    return;
  }
  JMethodCall call=new JMethodCall(x.getSourceInfo(),x.getInstance(),foundMethod);
  call.addArgs(x.getArgs());
  ctx.replaceMe(call);
}
