{
  if (s == null) {
    throw NumberFormatException.forNullInputString();
  }
  if (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX) {
    throw NumberFormatException.forRadix(radix);
  }
  final String orig=s;
  int length=s.length();
  boolean negative=false;
  if (length > 0) {
    char c=s.charAt(0);
    if (c == '-' || c == '+') {
      s=s.substring(1);
      length--;
      negative=(c == '-');
    }
  }
  if (length == 0) {
    throw NumberFormatException.forInputString(orig);
  }
  while (s.length() > 0 && s.charAt(0) == '0') {
    s=s.substring(1);
    length--;
  }
  if (length > __ParseLong.maxLengthForRadix[radix]) {
    throw NumberFormatException.forInputString(orig);
  }
  for (int i=0; i < length; i++) {
    if (Character.digit(s.charAt(i),radix) == -1) {
      throw NumberFormatException.forInputString(orig);
    }
  }
  long toReturn=0;
  int maxDigits=__ParseLong.maxDigitsForRadix[radix];
  long radixPower=__ParseLong.maxDigitsRadixPower[radix];
  long minValue=-__ParseLong.maxValueForRadix[radix];
  boolean firstTime=true;
  int head=length % maxDigits;
  if (head > 0) {
    toReturn=-JsUtils.parseInt(s.substring(0,head),radix);
    s=s.substring(head);
    length-=head;
    firstTime=false;
  }
  while (length >= maxDigits) {
    head=JsUtils.parseInt(s.substring(0,maxDigits),radix);
    s=s.substring(maxDigits);
    length-=maxDigits;
    if (!firstTime) {
      if (toReturn < minValue) {
        throw NumberFormatException.forInputString(orig);
      }
      toReturn*=radixPower;
    }
 else {
      firstTime=false;
    }
    toReturn-=head;
  }
  if (toReturn > 0) {
    throw NumberFormatException.forInputString(orig);
  }
  if (!negative) {
    toReturn=-toReturn;
    if (toReturn < 0) {
      throw NumberFormatException.forInputString(orig);
    }
  }
  return toReturn;
}
