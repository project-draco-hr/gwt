{
  PerfLogger.start("ResourceOracleImpl.refresh");
  TreeLogger refreshBranch=Messages.REFRESHING_RESOURCES.branch(logger,null);
  Map<String,ResourceData> newInternalMap=new LinkedHashMap<String,ResourceData>();
  for (  ClassPathEntry pathRoot : classPath) {
    TreeLogger branchForClassPathEntry=Messages.EXAMINING_PATH_ROOT.branch(refreshBranch,pathRoot.getLocation(),null);
    Map<AbstractResource,PathPrefix> resourceToPrefixMap=pathRoot.findApplicableResources(branchForClassPathEntry,pathPrefixSet);
    for (    Entry<AbstractResource,PathPrefix> entry : resourceToPrefixMap.entrySet()) {
      ResourceData newCpeData=new ResourceData(entry.getKey(),entry.getValue());
      String resourcePath=newCpeData.resource.getPath();
      ResourceData oldCpeData=newInternalMap.get(resourcePath);
      if (oldCpeData == null || oldCpeData.compareTo(newCpeData) < 0) {
        newInternalMap.put(resourcePath,newCpeData);
      }
 else {
        Messages.IGNORING_SHADOWED_RESOURCE.log(branchForClassPathEntry,resourcePath,null);
      }
    }
  }
  boolean didChange=internalMap.size() != newInternalMap.size();
  for (  Map.Entry<String,ResourceData> entry : newInternalMap.entrySet()) {
    String resourcePath=entry.getKey();
    ResourceData newData=entry.getValue();
    ResourceData oldData=internalMap.get(resourcePath);
    if (shouldUseNewResource(logger,oldData,newData)) {
      didChange=true;
    }
 else {
      if (oldData.resource != newData.resource) {
        newInternalMap.put(resourcePath,oldData);
      }
    }
  }
  if (!didChange) {
    PerfLogger.end();
    return;
  }
  internalMap=newInternalMap;
  Map<String,Resource> externalMap=new HashMap<String,Resource>();
  Set<Resource> externalSet=new HashSet<Resource>();
  for (  Entry<String,ResourceData> entry : internalMap.entrySet()) {
    String path=entry.getKey();
    ResourceData data=entry.getValue();
    externalMap.put(path,data.resource);
    externalSet.add(data.resource);
  }
  exposedResources=Collections.unmodifiableSet(externalSet);
  exposedResourceMap=Collections.unmodifiableMap(externalMap);
  exposedPathNames=Collections.unmodifiableSet(externalMap.keySet());
  PerfLogger.end();
}
