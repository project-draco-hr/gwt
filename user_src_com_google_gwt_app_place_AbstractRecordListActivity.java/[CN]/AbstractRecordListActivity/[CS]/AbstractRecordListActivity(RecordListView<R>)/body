{
  this.view=view;
  view.setDelegate(this);
  final HasData<R> hasData=view.asHasData();
  rangeChangeHandler=hasData.addRangeChangeHandler(new RangeChangeEvent.Handler(){
    public void onRangeChange(    RangeChangeEvent event){
      AbstractRecordListActivity.this.onRangeChanged(hasData);
    }
  }
);
  selectionModel=new SingleSelectionModel<R>(){
    @Override public void setSelected(    R newSelection,    boolean selected){
      R wasSelected=this.getSelectedObject();
      super.setSelected(newSelection,selected);
      if (!newSelection.equals(wasSelected)) {
        showDetails(newSelection);
      }
    }
  }
;
  hasData.setSelectionModel(selectionModel);
}
