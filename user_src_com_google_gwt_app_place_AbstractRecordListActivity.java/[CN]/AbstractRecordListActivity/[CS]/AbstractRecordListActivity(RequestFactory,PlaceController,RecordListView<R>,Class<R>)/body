{
  this.view=view;
  this.requests=requests;
  this.placeController=placeController;
  this.proxyType=proxyType;
  view.setDelegate(this);
  final HasData<R> hasData=view.asHasData();
  rangeChangeHandler=hasData.addRangeChangeHandler(new RangeChangeEvent.Handler(){
    public void onRangeChange(    RangeChangeEvent event){
      AbstractRecordListActivity.this.onRangeChanged(hasData);
    }
  }
);
  selectionModel=new SingleSelectionModel<R>();
  selectionModel.setKeyProvider(keyProvider);
  hasData.setSelectionModel(selectionModel);
  ((AbstractHasData<R>)hasData).setKeyProvider(keyProvider);
  selectionModel.addSelectionChangeHandler(new SelectionChangeEvent.Handler(){
    public void onSelectionChange(    SelectionChangeEvent event){
      R selectedObject=selectionModel.getSelectedObject();
      if (selectedObject != null) {
        showDetails(selectedObject);
      }
    }
  }
);
}
