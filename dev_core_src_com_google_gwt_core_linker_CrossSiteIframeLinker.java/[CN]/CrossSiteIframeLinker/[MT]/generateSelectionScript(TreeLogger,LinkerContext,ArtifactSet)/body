{
  StringBuffer selectionScript=getSelectionScriptStringBuffer(logger,context);
  String waitForBodyLoadedJs;
  String installLocationJs;
  String computeScriptBase;
  String processMetas;
  try {
    waitForBodyLoadedJs=Utility.getFileFromClassPath(WAIT_FOR_BODY_LOADED_JS);
    processMetas=Utility.getFileFromClassPath(PROCESS_METAS_JS);
    installLocationJs=Utility.getFileFromClassPath(installLocationJsProperty);
    computeScriptBase=Utility.getFileFromClassPath(COMPUTE_SCRIPT_BASE_JS);
  }
 catch (  IOException e) {
    logger.log(TreeLogger.ERROR,"Unable to read selection script template",e);
    throw new UnableToCompleteException();
  }
  replaceAll(selectionScript,"__INSTALL_LOCATION__",installLocationJs);
  if (waitForBodyLoadedProperty) {
    replaceAll(selectionScript,"__WAIT_FOR_BODY_LOADED__",waitForBodyLoadedJs);
  }
 else {
    String waitForBodyLoadedNullImpl="function setupWaitForBodyLoad(callback) { callback(); }";
    replaceAll(selectionScript,"__WAIT_FOR_BODY_LOADED__",waitForBodyLoadedNullImpl);
  }
  if (startDownloadImmediatelyProperty) {
    replaceAll(selectionScript,"__START_DOWNLOAD_IMMEDIATELY__","true");
  }
 else {
    replaceAll(selectionScript,"__START_DOWNLOAD_IMMEDIATELY__","false");
  }
  if (processMetasProperty) {
    replaceAll(selectionScript,"__PROCESS_METAS__",processMetas);
  }
 else {
    String processMetasNullImpl="function processMetas() { }";
    replaceAll(selectionScript,"__PROCESS_METAS__",processMetasNullImpl);
  }
  String scriptBase=scriptBaseProperty;
  if ("".equals(scriptBase)) {
    replaceAll(selectionScript,"__COMPUTE_SCRIPT_BASE__",computeScriptBase);
  }
 else {
    String computeScriptBaseNullImpl="function computeScriptBase() { return '" + scriptBase + "';}";
    replaceAll(selectionScript,"__COMPUTE_SCRIPT_BASE__",computeScriptBaseNullImpl);
  }
  selectionScript=processSelectionScriptCommon(selectionScript,logger,context);
  return selectionScript.toString();
}
