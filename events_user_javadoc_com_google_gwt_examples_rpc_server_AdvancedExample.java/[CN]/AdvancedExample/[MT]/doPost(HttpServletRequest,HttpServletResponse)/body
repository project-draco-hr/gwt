{
  String payload=readPayloadAsUtf8(httpRequest);
  try {
    try {
      RPCRequest rpcRequest=RPC.decodeRequest(payload);
      Object targetInstance=getInstanceToHandleRequest(httpRequest,rpcRequest);
      Method targetMethod=maybeMapRequestedMethod(targetInstance,rpcRequest.getMethod());
      Object[] targetParameters=maybeMapParameters(rpcRequest.getParameters());
      try {
        Object result=targetMethod.invoke(targetInstance,targetParameters);
        result=maybeMapResult(rpcRequest.getMethod(),result);
        String encodedResult=RPC.encodeResponseForSuccess(rpcRequest.getMethod(),result);
        sendResponseForSuccess(httpResponse,encodedResult);
      }
 catch (      IllegalArgumentException e) {
        SecurityException securityException=new SecurityException("Blocked attempt to invoke method " + targetMethod);
        securityException.initCause(e);
        throw securityException;
      }
catch (      IllegalAccessException e) {
        SecurityException securityException=new SecurityException("Blocked attempt to access inaccessible method " + targetMethod + (targetInstance != null ? " on target " + targetInstance : ""));
        securityException.initCause(e);
        throw securityException;
      }
catch (      InvocationTargetException e) {
        Throwable cause=e.getCause();
        Throwable mappedThrowable=maybeMapThrowable(cause,rpcRequest.getMethod());
        String failurePayload=RPC.encodeResponseForFailure(rpcRequest.getMethod(),mappedThrowable);
        sendResponseForFailure(httpResponse,failurePayload);
      }
    }
 catch (    IncompatibleRemoteServiceException e) {
      sendResponseForFailure(httpResponse,RPC.encodeResponseForFailure(null,e));
    }
  }
 catch (  Throwable e) {
    sendResponseForGenericFailure(httpResponse);
  }
}
