{
  int resSign;
  int resDigits[];
  int op1Sign=op1.sign;
  int op2Sign=op2.sign;
  if (op2Sign == 0) {
    return op1;
  }
  if (op1Sign == 0) {
    return op2.negate();
  }
  int op1Len=op1.numberLength;
  int op2Len=op2.numberLength;
  if (op1Len + op2Len == 2) {
    long a=(op1.digits[0] & 0xFFFFFFFFL);
    long b=(op2.digits[0] & 0xFFFFFFFFL);
    if (op1Sign < 0) {
      a=-a;
    }
    if (op2Sign < 0) {
      b=-b;
    }
    return BigInteger.valueOf(a - b);
  }
  int cmp=((op1Len != op2Len) ? ((op1Len > op2Len) ? 1 : -1) : Elementary.compareArrays(op1.digits,op2.digits,op1Len));
  if (cmp == BigInteger.LESS) {
    resSign=-op2Sign;
    resDigits=(op1Sign == op2Sign) ? subtract(op2.digits,op2Len,op1.digits,op1Len) : add(op2.digits,op2Len,op1.digits,op1Len);
  }
 else {
    resSign=op1Sign;
    if (op1Sign == op2Sign) {
      if (cmp == BigInteger.EQUALS) {
        return BigInteger.ZERO;
      }
      resDigits=subtract(op1.digits,op1Len,op2.digits,op2Len);
    }
 else {
      resDigits=add(op1.digits,op1Len,op2.digits,op2Len);
    }
  }
  BigInteger res=new BigInteger(resSign,resDigits.length,resDigits);
  res.cutOffLeadingZeroes();
  return res;
}
