{
  int resDigits[];
  int resSign;
  int op1Sign=op1.sign;
  int op2Sign=op2.sign;
  if (op1Sign == 0) {
    return op2;
  }
  if (op2Sign == 0) {
    return op1;
  }
  int op1Len=op1.numberLength;
  int op2Len=op2.numberLength;
  if (op1Len + op2Len == 2) {
    long a=(op1.digits[0] & 0xFFFFFFFFL);
    long b=(op2.digits[0] & 0xFFFFFFFFL);
    long res;
    int valueLo;
    int valueHi;
    if (op1Sign == op2Sign) {
      res=a + b;
      valueLo=(int)res;
      valueHi=(int)(res >>> 32);
      return ((valueHi == 0) ? new BigInteger(op1Sign,valueLo) : new BigInteger(op1Sign,2,new int[]{valueLo,valueHi}));
    }
    return BigInteger.valueOf((op1Sign < 0) ? (b - a) : (a - b));
  }
 else   if (op1Sign == op2Sign) {
    resSign=op1Sign;
    resDigits=(op1Len >= op2Len) ? add(op1.digits,op1Len,op2.digits,op2Len) : add(op2.digits,op2Len,op1.digits,op1Len);
  }
 else {
    int cmp=((op1Len != op2Len) ? ((op1Len > op2Len) ? 1 : -1) : compareArrays(op1.digits,op2.digits,op1Len));
    if (cmp == BigInteger.EQUALS) {
      return BigInteger.ZERO;
    }
    if (cmp == BigInteger.GREATER) {
      resSign=op1Sign;
      resDigits=subtract(op1.digits,op1Len,op2.digits,op2Len);
    }
 else {
      resSign=op2Sign;
      resDigits=subtract(op2.digits,op2Len,op1.digits,op1Len);
    }
  }
  BigInteger res=new BigInteger(resSign,resDigits.length,resDigits);
  res.cutOffLeadingZeroes();
  return res;
}
