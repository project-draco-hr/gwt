{
  assertEquals(10,node.getChildCount());
  assertEquals(index,node.getIndex());
  assertEquals(parent,node.getParent());
  assertEquals(value,node.getValue());
  String prefix=(value == ROOT_VALUE) ? "" : value.toString();
  assertEquals(prefix + "a",node.getChildValue(0));
  assertEquals(prefix + "j",node.getChildValue(9));
  for (int i=0; i < 10; i++) {
    assertEquals(isChildLeaf,node.isChildLeaf(i));
    assertFalse(node.isChildOpen(i));
  }
  try {
    node.getChildValue(-1);
    fail("Expected IndexOutOfBoundsException");
  }
 catch (  IndexOutOfBoundsException e) {
  }
  try {
    node.getChildValue(10);
    fail("Expected IndexOutOfBoundsException");
  }
 catch (  IndexOutOfBoundsException e) {
  }
  try {
    node.isChildLeaf(-1);
    fail("Expected IndexOutOfBoundsException");
  }
 catch (  IndexOutOfBoundsException e) {
  }
  try {
    node.isChildLeaf(10);
    fail("Expected IndexOutOfBoundsException");
  }
 catch (  IndexOutOfBoundsException e) {
  }
  try {
    node.isChildOpen(-1);
    fail("Expected IndexOutOfBoundsException");
  }
 catch (  IndexOutOfBoundsException e) {
  }
  try {
    node.isChildOpen(10);
    fail("Expected IndexOutOfBoundsException");
  }
 catch (  IndexOutOfBoundsException e) {
  }
  try {
    node.setChildOpen(-1,true);
    fail("Expected IndexOutOfBoundsException");
  }
 catch (  IndexOutOfBoundsException e) {
  }
  try {
    node.setChildOpen(10,true);
    fail("Expected IndexOutOfBoundsException");
  }
 catch (  IndexOutOfBoundsException e) {
  }
}
