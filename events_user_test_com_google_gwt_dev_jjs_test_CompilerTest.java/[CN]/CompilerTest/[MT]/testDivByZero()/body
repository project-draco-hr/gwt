{
  assertTrue(Double.isNaN(0.0 / 0.0));
  try {
    assertEquals(0,0 / 0);
  }
 catch (  ArithmeticException expected) {
  }
  try {
    volatileLong=0L / 0;
    fail("expected an ArithmeticException");
  }
 catch (  ArithmeticException expected) {
  }
  assertTrue(Double.isNaN(0.0 % 0.0));
  try {
    assertTrue(Double.isNaN(0 % 0));
  }
 catch (  ArithmeticException expected) {
  }
  try {
    volatileLong=0L % 0;
    fail("expected an ArithmeticException");
  }
 catch (  ArithmeticException expected) {
  }
}
