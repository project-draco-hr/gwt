{
  int i=0, j=0;
  outer:   for (i=0; i < 1; ++i) {
    inner:     for (j=0; j < 1; ++j) {
      break outer;
    }
    fail();
  }
  assertEquals(0,i);
  assertEquals(0,j);
  outer:   for (i=0; i < 1; ++i) {
    inner:     for (j=0; j < 1; ++j) {
      continue outer;
    }
    fail();
  }
  assertEquals(1,i);
  assertEquals(0,j);
  outer:   for (i=0; i < 1; ++i) {
    inner:     for (j=0; j < 1; ++j) {
      break inner;
    }
  }
  assertEquals(1,i);
  assertEquals(0,j);
  outer:   for (i=0; i < 1; ++i) {
    inner:     for (j=0; j < 1; ++j) {
      continue inner;
    }
  }
  assertEquals(1,i);
  assertEquals(1,j);
  outer:   while (true) {
switch (THREE) {
case 0:
case 1:
      break;
default :
    break outer;
}
fail("should not be reached");
}
outer: while (true) {
switch (THREE) {
case 0:
case 1:
case 2:
case 3:
  break outer;
case 4:
case 5:
break;
}
}
}
