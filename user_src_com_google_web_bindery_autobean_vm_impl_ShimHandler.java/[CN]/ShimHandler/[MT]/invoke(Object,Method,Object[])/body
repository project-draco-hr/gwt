{
  method.setAccessible(true);
  Object toReturn;
  String name=method.getName();
  method.setAccessible(true);
  try {
    if (BeanMethod.OBJECT.matches(method)) {
      return method.invoke(this,args);
    }
 else     if (BeanMethod.GET.matches(method)) {
      toReturn=method.invoke(bean.getWrapped(),args);
      toReturn=bean.get(name,toReturn);
    }
 else     if (BeanMethod.SET.matches(method) || BeanMethod.SET_BUILDER.matches(method)) {
      toReturn=method.invoke(bean.getWrapped(),args);
      bean.set(name,args[0]);
    }
 else {
      toReturn=method.invoke(bean.getWrapped(),args);
      bean.call(name,toReturn,args);
    }
    Class<?> intf=method.getReturnType();
    if (!Object.class.equals(intf)) {
      toReturn=maybeWrap(intf,toReturn);
    }
    if (interceptor != null) {
      toReturn=interceptor.invoke(null,bean,toReturn);
    }
  }
 catch (  InvocationTargetException e) {
    throw e.getCause();
  }
  return toReturn;
}
