{
  sw.println("private final %1$s shim = new %1$s() {",type.getPeerType().getQualifiedSourceName());
  sw.indent();
  for (  AutoBeanMethod method : type.getMethods()) {
    JMethod jmethod=method.getMethod();
    if (jmethod.isStatic()) {
      continue;
    }
    String methodName=jmethod.getName();
    JParameter[] parameters=jmethod.getParameters();
    if (isObjectMethodImplementedByShim(jmethod)) {
      continue;
    }
    StringBuilder arguments=new StringBuilder();
{
      for (      JParameter param : parameters) {
        arguments.append(",").append(param.getName());
      }
      if (arguments.length() > 0) {
        arguments=arguments.deleteCharAt(0);
      }
    }
    sw.println("public %s {",getBaseMethodDeclaration(jmethod));
    sw.indent();
switch (method.getAction()) {
case GET:
      String getValueType=ModelUtils.getQualifiedBaseSourceName(jmethod.getReturnType());
    sw.println("%s toReturn = (%s) %s.this.getWrapped().%s();",getValueType,getValueType,type.getSimpleSourceName(),methodName);
  writeReturnWrapper(sw,type,method);
sw.println("return toReturn;");
break;
case SET:
case SET_BUILDER:
sw.println("%s.this.getWrapped().%s(%s);",type.getSimpleSourceName(),methodName,parameters[0].getName());
sw.println("%s.this.set(\"%s\", %s);",type.getSimpleSourceName(),methodName,parameters[0].getName());
if (JBeanMethod.SET_BUILDER.equals(method.getAction())) {
sw.println("return this;");
}
break;
case CALL:
if (JPrimitiveType.VOID.equals(jmethod.getReturnType())) {
sw.println("%s.this.getWrapped().%s(%s);",type.getSimpleSourceName(),methodName,arguments);
sw.println("%s.this.call(\"%s\", null%s %s);",type.getSimpleSourceName(),methodName,arguments.length() > 0 ? "," : "",arguments);
}
 else {
String callValueType=ModelUtils.ensureBaseType(jmethod.getReturnType()).getQualifiedSourceName();
sw.println("%s toReturn = (%s) %s.this.getWrapped().%s(%s);",callValueType,callValueType,type.getSimpleSourceName(),methodName,arguments);
writeReturnWrapper(sw,type,method);
sw.println("%s.this.call(\"%s\", toReturn%s %s);",type.getSimpleSourceName(),methodName,arguments.length() > 0 ? "," : "",arguments);
sw.println("return toReturn;");
}
break;
default :
throw new RuntimeException();
}
sw.outdent();
sw.println("}");
}
if (type.getPeerType().getQualifiedSourceName().equals(Iterator.class.getCanonicalName()) || type.getPeerType().getQualifiedSourceName().equals(ListIterator.class.getCanonicalName())) {
sw.println("@Override public void remove() {");
sw.indent();
sw.println("%s.this.getWrapped().remove();",type.getSimpleSourceName());
sw.println("%s.this.call(\"remove\", null);",type.getSimpleSourceName());
sw.outdent();
sw.println("}");
}
sw.println("@Override public boolean equals(Object o) {");
sw.indentln("return this == o || getWrapped().equals(o);");
sw.println("}");
sw.println("@Override public int hashCode() {");
sw.indentln("return getWrapped().hashCode();");
sw.println("}");
sw.println("@Override public String toString() {");
sw.indentln("return getWrapped().toString();");
sw.println("}");
sw.outdent();
sw.println("};");
}
