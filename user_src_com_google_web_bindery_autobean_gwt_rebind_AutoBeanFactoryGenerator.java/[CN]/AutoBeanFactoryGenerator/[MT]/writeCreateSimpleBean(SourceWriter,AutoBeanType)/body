{
  sw.println("@Override protected %s createSimplePeer() {",type.getPeerType().getQualifiedSourceName());
  sw.indent();
  sw.println("return new %s() {",type.getPeerType().getQualifiedSourceName());
  sw.indent();
  sw.println("private final %s data = %s.this.data;",Splittable.class.getCanonicalName(),type.getQualifiedSourceName());
  for (  AutoBeanMethod method : type.getMethods()) {
    JMethod jmethod=method.getMethod();
    JType returnType=jmethod.getReturnType();
    sw.println("public %s {",getBaseMethodDeclaration(jmethod));
    sw.indent();
switch (method.getAction()) {
case GET:
{
        String castType;
        if (returnType.isPrimitive() != null) {
          castType=returnType.isPrimitive().getQualifiedBoxedSourceName();
          sw.println("%s toReturn = %s.this.getOrReify(\"%s\");",castType,type.getSimpleSourceName(),method.getPropertyName());
          sw.println("return toReturn == null ? %s : toReturn;",returnType.isPrimitive().getUninitializedFieldExpression());
        }
 else         if (returnType.equals(context.getTypeOracle().findType(Splittable.class.getCanonicalName()))) {
          sw.println("return data.isNull(\"%1$s\") ? null : data.get(\"%1$s\");",method.getPropertyName());
        }
 else {
          castType=ModelUtils.getQualifiedBaseSourceName(returnType);
          sw.println("return (%s) %s.this.getOrReify(\"%s\");",castType,type.getSimpleSourceName(),method.getPropertyName());
        }
      }
    break;
case SET:
case SET_BUILDER:
{
    JParameter param=jmethod.getParameters()[0];
    sw.println("%s.this.setProperty(\"%s\", %s);",type.getSimpleSourceName(),method.getPropertyName(),param.getName());
    if (JBeanMethod.SET_BUILDER.equals(method.getAction())) {
      sw.println("return this;");
    }
    break;
  }
case CALL:
JMethod staticImpl=method.getStaticImpl();
if (!returnType.equals(JPrimitiveType.VOID)) {
sw.print("return ");
}
sw.print("%s.%s(%s.this",staticImpl.getEnclosingType().getQualifiedSourceName(),staticImpl.getName(),type.getSimpleSourceName());
for (JParameter param : jmethod.getParameters()) {
sw.print(", %s",param.getName());
}
sw.println(");");
break;
default :
throw new RuntimeException();
}
sw.outdent();
sw.println("}");
}
sw.outdent();
sw.println("};");
sw.outdent();
sw.println("}");
}
