{
  List<JClassType> privatePeers=new ArrayList<JClassType>();
  sw.println("@Override protected void initializeCreatorMap(%s map) {",JsniCreatorMap.class.getCanonicalName());
  sw.indent();
  for (  AutoBeanType type : model.getAllTypes()) {
    if (type.isNoWrap()) {
      continue;
    }
    String classLiteralAccessor;
    JClassType peer=type.getPeerType();
    String peerName=ModelUtils.ensureBaseType(peer).getQualifiedSourceName();
    if (peer.isPublic()) {
      classLiteralAccessor=peerName + ".class";
    }
 else {
      privatePeers.add(peer);
      classLiteralAccessor="classLit_" + peerName.replace('.','_') + "()";
    }
    sw.println("map.add(%s, getConstructors_%s());",classLiteralAccessor,peerName.replace('.','_'));
  }
  sw.outdent();
  sw.println("}");
  for (  JClassType peer : privatePeers) {
    String peerName=ModelUtils.ensureBaseType(peer).getQualifiedSourceName();
    sw.println("private native Class<?> classLit_%s() /*-{return @%s::class;}-*/;",peerName.replace('.','_'),peerName);
  }
  String factoryJNIName=context.getTypeOracle().findType(AutoBeanFactory.class.getCanonicalName()).getJNISignature();
  for (  AutoBeanType type : model.getAllTypes()) {
    String peerName=ModelUtils.ensureBaseType(type.getPeerType()).getQualifiedSourceName();
    String peerJNIName=ModelUtils.ensureBaseType(type.getPeerType()).getJNISignature();
    sw.println("private native %s<%s> getConstructors_%s() /*-{",JsArray.class.getCanonicalName(),JavaScriptObject.class.getCanonicalName(),peerName.replace('.','_'));
    sw.indent();
    sw.println("return [");
    if (type.isSimpleBean()) {
      sw.indentln("@%s::new(%s),",type.getQualifiedSourceName(),factoryJNIName);
    }
 else {
      sw.indentln(",");
    }
    sw.indentln("@%s::new(%s%s)",type.getQualifiedSourceName(),factoryJNIName,peerJNIName);
    sw.println("];");
    sw.outdent();
    sw.println("}-*/;");
  }
}
