{
  String name=x.getName();
  if (!x.isStatic()) {
    if (polymorphicNames.get(x) == null) {
      String mangleName=mangleNameForPoly(x);
      JsName polyName;
      if (belongsToSpecialObfuscatedType(x)) {
        polyName=interfaceScope.declareName(mangleNameSpecialObfuscate(x));
        polyName.setObfuscatable(false);
      }
 else {
        polyName=interfaceScope.declareName(mangleName,name);
      }
      polymorphicNames.put(x,polyName);
    }
  }
  if (x.isAbstract()) {
    push(null);
    return false;
  }
  JsName globalName;
  if (x.getEnclosingType() == null) {
    globalName=topScope.declareName(name);
  }
 else {
    String mangleName=mangleNameForGlobal(x);
    globalName=topScope.declareName(mangleName,name);
  }
  names.put(x,globalName);
  JsFunction jsFunction;
  if (x.isNative()) {
    JsniMethodBody body=(JsniMethodBody)x.getBody();
    jsFunction=body.getFunc();
    jsFunction.setName(globalName);
  }
 else {
    SourceInfo sourceInfo=x.getSourceInfo().makeChild("Translated JS function");
    jsFunction=new JsFunction(sourceInfo,topScope,globalName,true);
    methodBodyMap.put(x.getBody(),jsFunction);
  }
  jsFunction.getSourceInfo().addCorrelation(Correlation.by(jsFunction));
  push(jsFunction.getScope());
  return true;
}
