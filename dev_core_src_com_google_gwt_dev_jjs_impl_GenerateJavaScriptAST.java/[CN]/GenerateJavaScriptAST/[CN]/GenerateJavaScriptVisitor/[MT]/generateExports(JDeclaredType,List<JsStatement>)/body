{
  TreeLogger branch=logger.branch(TreeLogger.Type.INFO,"Exporting " + x.getName());
  String lastProvidedNamespace="";
  boolean createdClinit=false;
  JConstructor ctor=null;
  for (  JMethod m : x.getMethods()) {
    if (m instanceof JConstructor) {
      if (!((JConstructor)m).isDefaultConstructor() && typeOracle.isExportedMethod(m)) {
        ctor=(JConstructor)m;
        break;
      }
    }
  }
  for (  JMethod m : x.getMethods()) {
    if (m instanceof JConstructor && m != ctor) {
      continue;
    }
    if (m == ctor && !m.isPrivate() || (m.isStatic()) && typeOracle.isExportedMethod(m)) {
      createdClinit=maybeHoistClinit(exportStmts,createdClinit,maybeCreateClinitCall(m));
      JsExpression exportRhs=createJsInteropBridgeMethod(m,names.get(m).makeRef(m.getSourceInfo()));
      String exportName=m.getQualifiedExportName();
      lastProvidedNamespace=exportMember(x,globalStmts,lastProvidedNamespace,exportRhs,exportName);
    }
  }
  for (  JField f : x.getFields()) {
    if (f.isStatic() && f.getExportName() != null) {
      if (!f.isFinal()) {
        branch.log(TreeLogger.Type.WARN,"Exporting effectively non-final field " + f.getName() + " is discouraged. Due to the way exporting works, the value of the exported field"+ " will not be reflected across Java&JavaScript border.");
      }
      createdClinit=maybeHoistClinit(exportStmts,createdClinit,maybeCreateClinitCall(f,true));
      JsNameRef exportRhs=names.get(f).makeRef(f.getSourceInfo());
      String exportName=f.getQualifiedExportName();
      lastProvidedNamespace=exportMember(x,globalStmts,lastProvidedNamespace,exportRhs,exportName);
    }
  }
}
