{
  SourceInfo sourceInfo=x.getSourceInfo();
  JsExpression instance=(JsExpression)pop();
  JsNameRef methodNameRef;
  if (method.isConstructor()) {
    if (method.isJsNative()) {
      return JsNullLiteral.INSTANCE;
    }
    methodNameRef=names.get(method).makeRef(sourceInfo);
  }
 else {
    JDeclaredType superClass=method.getEnclosingType();
    if (method.isJsNative()) {
      methodNameRef=createJsQualifier(method.getQualifiedJsName(),x.getSourceInfo());
    }
 else {
      JsInvocation protoRef=constructInvocation(sourceInfo,"JavaClassHierarchySetupUtil.getClassPrototype",convertJavaLiteral(typeMapper.get(superClass)));
      methodNameRef=polymorphicNames.get(method).makeRef(sourceInfo);
      methodNameRef.setQualifier(protoRef);
    }
  }
  JsNameRef qualifiedMethodName=call.makeRef(sourceInfo);
  qualifiedMethodName.setQualifier(methodNameRef);
  JsInvocation jsInvocation=new JsInvocation(sourceInfo,qualifiedMethodName);
  jsInvocation.getArguments().add(instance);
  jsInvocation.getArguments().addAll(args);
  return jsInvocation;
}
