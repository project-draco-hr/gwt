{
  JType returnType=targetMethod.getType();
  boolean fluent=returnType instanceof JReferenceType && returnType != program.getTypeJavaLangObject() && typeOracle.canTriviallyCast(x.getTarget().getEnclosingType(),returnType.getUnderlyingType());
  String propertyName=targetMethod.getImmediateOrTransitiveJsMemberName();
  JsExpression result;
  JsNameRef propertyReference=new JsNameRef(x.getSourceInfo(),propertyName);
  propertyReference.setQualifier(fluent ? globalTemp.makeRef(x.getSourceInfo()) : qualExpr);
  result=createAssignment(propertyReference,jsInvocation.getArguments().get(0));
  if (fluent) {
    result=createCommaExpression(createAssignment(globalTemp.makeRef(x.getSourceInfo()),qualExpr),createCommaExpression(result,globalTemp.makeRef(x.getSourceInfo())));
  }
  return result;
}
