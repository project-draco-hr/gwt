{
  JExpression typeId=getRuntimeTypeReference(x);
  JClassType superClass=x.getSuperClass();
  JExpression superTypeId=(superClass == null) ? JNullLiteral.INSTANCE : getRuntimeTypeReference(superClass);
  String jsPrototype=getSuperPrototype(x);
  List<JsExpression> defineClassArguments=Lists.newArrayList();
  defineClassArguments.add(convertJavaLiteral(typeId));
  defineClassArguments.add(jsPrototype == null ? convertJavaLiteral(superTypeId) : createJsQualifier(jsPrototype,x.getSourceInfo()));
  defineClassArguments.add(generateCastableTypeMap(x));
  defineClassArguments.addAll(constructorArgs);
  JsStatement defineClassStatement=constructInvocation(x.getSourceInfo(),"JavaClassHierarchySetupUtil.defineClass",defineClassArguments).makeStmt();
  globalStmts.add(defineClassStatement);
  typeForStatMap.put(defineClassStatement,x);
  if (jsPrototype != null) {
    JExpression objectTypeId=getRuntimeTypeReference(program.getTypeJavaLangObject());
    JsStatement statement=constructInvocation(x.getSourceInfo(),"JavaClassHierarchySetupUtil.copyObjectMethods",convertJavaLiteral(objectTypeId)).makeStmt();
    globalStmts.add(statement);
    typeForStatMap.put(statement,x);
  }
}
