{
  JMethod method=x.getTarget();
  JsInvocation jsInvocation=new JsInvocation(x.getSourceInfo());
  popList(jsInvocation.getArguments(),x.getArgs().size());
  if (JProgram.isClinit(method)) {
    JDeclaredType type=method.getEnclosingType();
    JDeclaredType clinitTarget=type.getClinitTarget();
    if (clinitTarget == null) {
      if (x.getInstance() != null) {
        pop();
      }
      push(JsNullLiteral.INSTANCE);
      return;
    }
 else     if (type != clinitTarget) {
      method=clinitTarget.getMethods().get(0);
    }
  }
  JsNameRef qualifier;
  JsExpression unnecessaryQualifier=null;
  if (method.isStatic()) {
    if (x.getInstance() != null) {
      unnecessaryQualifier=(JsExpression)pop();
    }
    qualifier=names.get(method).makeRef(x.getSourceInfo());
  }
 else {
    if (x.isStaticDispatchOnly()) {
      JsName callName=objectScope.declareName("call");
      callName.setObfuscatable(false);
      qualifier=callName.makeRef(x.getSourceInfo());
      qualifier.setQualifier(names.get(method).makeRef(x.getSourceInfo()));
      jsInvocation.getArguments().add(0,(JsExpression)pop());
    }
 else {
      qualifier=polymorphicNames.get(method).makeRef(x.getSourceInfo());
      qualifier.setQualifier((JsExpression)pop());
    }
  }
  jsInvocation.setQualifier(qualifier);
  push(createCommaExpression(unnecessaryQualifier,jsInvocation));
}
