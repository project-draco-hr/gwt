{
  JsExpression rhs=(JsExpression)pop();
  JsExpression lhs=(JsExpression)pop();
  JsBinaryOperator myOp=JavaToJsOperatorMap.get(x.getOp());
  if ((x.getOp() == JBinaryOperator.EQ) || (x.getOp() == JBinaryOperator.NEQ)) {
    boolean lhsNull=x.getLhs() instanceof JNullLiteral;
    boolean rhsNull=x.getRhs() instanceof JNullLiteral;
    if (lhsNull || rhsNull) {
      JExpression toUse=lhsNull ? x.getRhs() : x.getLhs();
      JsExpression toUseJs=lhsNull ? rhs : lhs;
      if (!couldBeString(toUse)) {
        if ((x.getOp() == JBinaryOperator.EQ)) {
          push(new JsPrefixOperation(JsUnaryOperator.NOT,toUseJs));
        }
 else {
          push(new JsPrefixOperation(JsUnaryOperator.NOT,new JsPrefixOperation(JsUnaryOperator.NOT,toUseJs)));
        }
        return;
      }
    }
  }
  if (myOp == JsBinaryOperator.EQ && x.getLhs().getType() instanceof JReferenceType && x.getRhs().getType() instanceof JReferenceType) {
    myOp=JsBinaryOperator.REF_EQ;
  }
 else   if (myOp == JsBinaryOperator.NEQ && x.getLhs().getType() instanceof JReferenceType && x.getRhs().getType() instanceof JReferenceType) {
    myOp=JsBinaryOperator.REF_NEQ;
  }
  push(new JsBinaryOperation(myOp,lhs,rhs));
}
