{
  JsExpression rhs=(JsExpression)pop();
  JsExpression lhs=(JsExpression)pop();
  JsBinaryOperator myOp=JavaToJsOperatorMap.get(x.getOp());
  if (myOp == JsBinaryOperator.EQ && x.getLhs().getType() instanceof JReferenceType && x.getRhs().getType() instanceof JReferenceType) {
    myOp=JsBinaryOperator.REF_EQ;
  }
 else   if (myOp == JsBinaryOperator.NEQ && x.getLhs().getType() instanceof JReferenceType && x.getRhs().getType() instanceof JReferenceType) {
    myOp=JsBinaryOperator.REF_NEQ;
  }
  if (myOp.isAssignment() && (lhs instanceof JsBinaryOperation)) {
    JsBinaryOperation curLhs=(JsBinaryOperation)lhs;
    assert(curLhs.getOperator() == JsBinaryOperator.COMMA);
    while (curLhs.getArg2() instanceof JsBinaryOperation) {
      curLhs=(JsBinaryOperation)curLhs.getArg2();
      assert(curLhs.getOperator() == JsBinaryOperator.COMMA);
    }
    JsBinaryOperation asg=new JsBinaryOperation(myOp,curLhs.getArg2(),rhs);
    curLhs.setArg2(asg);
    push(lhs);
    return;
  }
  JsBinaryOperation binOp=new JsBinaryOperation(myOp,lhs,rhs);
  push(binOp);
}
