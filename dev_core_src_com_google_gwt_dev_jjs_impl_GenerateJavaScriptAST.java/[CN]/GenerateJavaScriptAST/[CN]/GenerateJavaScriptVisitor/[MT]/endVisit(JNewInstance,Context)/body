{
  JsName ctorName=names.get(x.getTarget());
  JsNew newOp=new JsNew(x.getSourceInfo(),ctorName.makeRef(x.getSourceInfo()));
  popList(newOp.getArguments(),x.getArgs().size());
  JsExpression newExpr=newOp;
  if (x.getClassType().isJsFunctionImplementation()) {
    JsFunction makeLambdaFunc=indexedFunctions.get("JavaClassHierarchySetupUtil.makeLambdaFunction");
    JMethod jsFunctionMethod=getJsFunctionMethod(x.getClassType());
    JsNameRef funcNameRef=polymorphicNames.get(jsFunctionMethod).makeRef(x.getSourceInfo());
    JsNameRef protoRef=prototype.makeRef(x.getSourceInfo());
    funcNameRef.setQualifier(protoRef);
    protoRef.setQualifier(ctorName.makeRef(x.getSourceInfo()));
    newExpr=new JsInvocation(x.getSourceInfo(),makeLambdaFunc,funcNameRef,newOp);
  }
  push(newExpr);
}
