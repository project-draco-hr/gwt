{
  SourceInfo sourceInfo=x.getSourceInfo();
  JConstructor ctor=x.getTarget();
  JsName ctorName=names.get(ctor);
  JsNew newOp=new JsNew(sourceInfo,ctorName.makeRef(sourceInfo));
  popList(newOp.getArguments(),x.getArgs().size());
  JsExpression newExpr=newOp;
  if (ctor.isJsNative()) {
    String nativeName=ctor.getEnclosingType().getJsPrototype();
    newExpr=new JsNew(sourceInfo,createJsQualifier(nativeName,sourceInfo));
  }
 else   if (x.getClassType().isJsFunctionImplementation()) {
    JMethod jsFunctionMethod=getJsFunctionMethod(x.getClassType());
    JsNameRef funcNameRef=polymorphicNames.get(jsFunctionMethod).makeRef(sourceInfo);
    JsNameRef protoRef=prototype.makeRef(sourceInfo);
    funcNameRef.setQualifier(protoRef);
    protoRef.setQualifier(ctorName.makeRef(sourceInfo));
    JsFunction makeLambdaFunc=indexedFunctions.get("JavaClassHierarchySetupUtil.makeLambdaFunction");
    newExpr=new JsInvocation(sourceInfo,makeLambdaFunc,funcNameRef,newOp);
  }
  push(newExpr);
}
