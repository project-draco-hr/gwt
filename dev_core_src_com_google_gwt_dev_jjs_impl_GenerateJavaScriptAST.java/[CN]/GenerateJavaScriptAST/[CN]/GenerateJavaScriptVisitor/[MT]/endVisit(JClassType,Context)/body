{
  if (program.isReferenceOnly(x)) {
    return;
  }
  if (program.isJsTypePrototype(x)) {
    return;
  }
  if (alreadyRan.contains(x)) {
    return;
  }
  if (program.getTypeClassLiteralHolder() == x) {
    return;
  }
  if (program.immortalCodeGenTypes.contains(x)) {
    return;
  }
  alreadyRan.add(x);
  List<JsFunction> jsFuncs=popList(x.getMethods().size());
  List<JsNode> jsFields=popList(x.getFields().size());
  if (x.getClinitTarget() == x) {
    JsFunction superClinit=clinitMap.get(x.getSuperClass());
    JsFunction myClinit=jsFuncs.get(0);
    handleClinit(myClinit,superClinit);
    clinitMap.put(x,myClinit);
  }
 else {
    jsFuncs.set(0,null);
  }
  List<JsStatement> globalStmts=jsProgram.getGlobalBlock().getStatements();
  for (int i=0; i < jsFuncs.size(); ++i) {
    JsFunction func=jsFuncs.get(i);
    if (func != null && !polymorphicJsFunctions.contains(func)) {
      globalStmts.add(func.makeStmt());
    }
  }
  if (typeOracle.isInstantiatedType(x) && !program.isJavaScriptObject(x) && x != program.getTypeJavaLangString()) {
    generateClassSetup(x,globalStmts);
  }
  JsVars vars=new JsVars(x.getSourceInfo());
  for (int i=0; i < jsFields.size(); ++i) {
    JsNode node=jsFields.get(i);
    if (node instanceof JsVar) {
      vars.add((JsVar)node);
    }
 else {
      assert(node instanceof JsStatement);
      JsStatement stmt=(JsStatement)node;
      globalStmts.add(stmt);
      typeForStatMap.put(stmt,x);
    }
  }
  if (!vars.isEmpty()) {
    globalStmts.add(vars);
  }
  if (program.typeOracle.isInteropEnabled() && typeOracle.isInstantiatedType(x) && !program.isJavaScriptObject(x)&& x != program.getTypeJavaLangString()) {
    generateExports(x,exportStmts);
  }
  for (  JNode node : x.getArtificialRescues()) {
    if (node instanceof JMethod) {
      JsName jsName=names.get(node);
      if (jsName != null) {
        JsFunction func=(JsFunction)jsName.getStaticRef();
        func.setArtificiallyRescued(true);
      }
    }
  }
}
