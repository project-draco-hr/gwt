{
  if (alreadyRan.contains(x)) {
    return;
  }
  alreadyRan.add(x);
  List jsFuncs=popList(x.methods.size());
  List jsFields=popList(x.fields.size());
  if (typeOracle.hasClinit(x)) {
    handleClinit((JsFunction)jsFuncs.get(0));
  }
 else {
    jsFuncs.set(0,null);
  }
  JsStatements globalStmts=jsProgram.getGlobalBlock().getStatements();
  for (int i=0; i < jsFuncs.size(); ++i) {
    JsFunction func=(JsFunction)jsFuncs.get(i);
    if (func != null) {
      globalStmts.add(func.makeStmt());
    }
  }
  if (typeOracle.isInstantiatedType(x)) {
    if (x != program.getTypeJavaLangString()) {
      JsName seedFuncName=getName(x);
      JsFunction seedFunc=new JsFunction(topScope,seedFuncName);
      JsBlock body=new JsBlock();
      seedFunc.setBody(body);
      globalStmts.add(seedFunc.makeStmt());
      JsNameRef lhs=prototype.makeRef();
      lhs.setQualifier(seedFuncName.makeRef());
      JsExpression rhs;
      if (x.extnds != null) {
        JsNew newExpr=new JsNew();
        newExpr.setConstructorExpression(getName(x.extnds).makeRef());
        rhs=newExpr;
      }
 else {
        rhs=new JsObjectLiteral();
      }
      JsExpression protoAsg=createAssignment(lhs,rhs);
      JsExpression tmpAsg=createAssignment(globalTemp.makeRef(),protoAsg);
      globalStmts.add(tmpAsg.makeStmt());
    }
 else {
      JsNameRef rhs=prototype.makeRef();
      rhs.setQualifier(jsProgram.getRootScope().declareName("String").makeRef());
      JsExpression tmpAsg=createAssignment(globalTemp.makeRef(),rhs);
      globalStmts.add(tmpAsg.makeStmt());
    }
    for (int i=0; i < x.methods.size(); ++i) {
      JMethod method=(JMethod)x.methods.get(i);
      if (!method.isStatic() && !method.isAbstract()) {
        JsNameRef lhs=getPolyName(method).makeRef();
        lhs.setQualifier(globalTemp.makeRef());
        JsNameRef rhs=getName(method).makeRef();
        JsExpression asg=createAssignment(lhs,rhs);
        globalStmts.add(new JsExprStmt(asg));
      }
    }
    if (x == program.getTypeJavaLangObject()) {
      JMethod toStringMeth=program.getSpecialMethod("Object.toString");
      if (x.methods.contains(toStringMeth)) {
        JsName lhsName=objectScope.declareName("toString");
        lhsName.setObfuscatable(false);
        JsNameRef lhs=lhsName.makeRef();
        lhs.setQualifier(globalTemp.makeRef());
        JsInvocation call=new JsInvocation();
        JsNameRef toStringRef=new JsNameRef(getPolyName(toStringMeth));
        toStringRef.setQualifier(new JsThisRef());
        call.setQualifier(toStringRef);
        JsReturn jsReturn=new JsReturn(call);
        JsFunction rhs=new JsFunction(topScope);
        JsBlock body=new JsBlock();
        body.getStatements().add(jsReturn);
        rhs.setBody(body);
        JsExpression asg=createAssignment(lhs,rhs);
        globalStmts.add(new JsExprStmt(asg));
      }
    }
{
      JField typeIdField=program.getSpecialField("Object.typeName");
      JsNameRef lhs=getName(typeIdField).makeRef();
      lhs.setQualifier(globalTemp.makeRef());
      JsStringLiteral rhs=jsProgram.getStringLiteral(x.getName());
      JsExpression asg=createAssignment(lhs,rhs);
      globalStmts.add(new JsExprStmt(asg));
    }
    int typeId=program.getTypeId(x);
    if (typeId >= 0) {
      JField typeIdField=program.getSpecialField("Object.typeId");
      JsNameRef fieldRef=getName(typeIdField).makeRef();
      fieldRef.setQualifier(globalTemp.makeRef());
      JsIntegralLiteral typeIdLit=jsProgram.getIntegralLiteral(BigInteger.valueOf(typeId));
      JsExpression asg=createAssignment(fieldRef,typeIdLit);
      globalStmts.add(new JsExprStmt(asg));
    }
  }
  for (int i=0; i < jsFields.size(); ++i) {
    JsStatement stmt=(JsStatement)jsFields.get(i);
    globalStmts.add(stmt);
  }
}
