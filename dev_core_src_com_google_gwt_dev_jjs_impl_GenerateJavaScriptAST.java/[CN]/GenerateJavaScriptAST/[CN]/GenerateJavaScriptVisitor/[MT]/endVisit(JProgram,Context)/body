{
  JsStatements globalStmts=jsProgram.getGlobalBlock().getStatements();
  List funcs=popList(x.entryMethods.size());
  for (int i=0; i < funcs.size(); ++i) {
    JsFunction func=(JsFunction)funcs.get(i);
    if (func != null) {
      globalStmts.add(func.makeStmt());
    }
  }
  JsFunction gwtOnLoad=new JsFunction(topScope);
  globalStmts.add(gwtOnLoad.makeStmt());
  JsName gwtOnLoadName=topScope.declareName("gwtOnLoad");
  gwtOnLoadName.setObfuscatable(false);
  gwtOnLoad.setName(gwtOnLoadName);
  JsBlock body=new JsBlock();
  gwtOnLoad.setBody(body);
  JsScope fnScope=gwtOnLoad.getScope();
  JsParameters params=gwtOnLoad.getParameters();
  JsName errFn=fnScope.declareName("errFn");
  JsName modName=fnScope.declareName("modName");
  params.add(new JsParameter(errFn));
  params.add(new JsParameter(modName));
  JsIf jsIf=new JsIf();
  body.getStatements().add(jsIf);
  jsIf.setIfExpr(errFn.makeRef());
  JsTry jsTry=new JsTry();
  jsIf.setThenStmt(jsTry);
  JsBlock callBlock=new JsBlock();
  jsIf.setElseStmt(callBlock);
  jsTry.setTryBlock(callBlock);
  for (int i=0; i < funcs.size(); ++i) {
    JsFunction func=(JsFunction)funcs.get(i);
    if (func != null) {
      JsInvocation call=new JsInvocation();
      call.setQualifier(func.getName().makeRef());
      callBlock.getStatements().add(call.makeStmt());
    }
  }
  JsCatch jsCatch=new JsCatch(fnScope,"e");
  jsTry.getCatches().add(jsCatch);
  JsBlock catchBlock=new JsBlock();
  jsCatch.setBody(catchBlock);
  JsInvocation errCall=new JsInvocation();
  catchBlock.getStatements().add(errCall.makeStmt());
  errCall.setQualifier(errFn.makeRef());
  errCall.getArguments().add(modName.makeRef());
  JField typeIdArray=program.getSpecialField("Cast.typeIdArray");
  JsNameRef fieldRef=getName(typeIdArray).makeRef();
  JsArrayLiteral arrayLit=new JsArrayLiteral();
  for (int i=0; i < program.getJsonTypeTable().size(); ++i) {
    JsonObject jsonObject=(JsonObject)program.getJsonTypeTable().get(i);
    accept(jsonObject);
    arrayLit.getExpressions().add((JsExpression)pop());
  }
  JsExpression asg=createAssignment(fieldRef,arrayLit);
  globalStmts.add(new JsExprStmt(asg));
  for (Iterator itType=classLits.keySet().iterator(); itType.hasNext(); ) {
    JType type=(JType)itType.next();
    JsName jsName=(JsName)classLits.get(type);
    String string;
    if (type instanceof JArrayType) {
      string="class " + type.getJsniSignatureName().replace('/','.');
    }
 else     if (type instanceof JClassType) {
      string="class " + type.getName();
    }
 else     if (type instanceof JInterfaceType) {
      string="interface " + type.getName();
    }
 else {
      string=type.getName();
    }
    JsStringLiteral stringLiteral=jsProgram.getStringLiteral(string);
    asg=createAssignment(jsName.makeRef(),stringLiteral);
    globalStmts.add(asg.makeStmt());
  }
}
