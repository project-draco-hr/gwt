{
  List<JsStatement> globalStmts=jsProgram.getGlobalBlock().getStatements();
  generateGwtOnLoad(Arrays.asList(entryFunctions).subList(0,x.getEntryCount(0)),globalStmts);
  JsVars vars=new JsVars(jsProgram.getSourceInfo());
  vars.add(new JsVar(jsProgram.getSourceInfo(),globalTemp));
  globalStmts.add(0,vars);
  generateLongLiterals(vars);
  generateQueryIdConstants(vars);
  if (x.getDeclaredTypes().contains(x.getTypeClassLiteralHolder())) {
    vars=new JsVars(jsProgram.getSourceInfo());
    generateClassLiterals(vars);
    if (!vars.isEmpty()) {
      globalStmts.add(vars);
    }
  }
  List<JsFunction> nonInitialEntries=Arrays.asList(entryFunctions).subList(x.getEntryCount(0),entryFunctions.length);
  if (!nonInitialEntries.isEmpty()) {
    JMethod loadedMethod=program.getIndexedMethod("AsyncFragmentLoader.browserLoaderLeftoversFragmentHasLoaded");
    JsName loadedMethodName=names.get(loadedMethod);
    JsInvocation call=new JsInvocation(jsProgram.getSourceInfo());
    call.setQualifier(loadedMethodName.makeRef(jsProgram.getSourceInfo().makeChild()));
    globalStmts.add(call.makeStmt());
  }
  for (  JsFunction func : nonInitialEntries) {
    if (func != null) {
      JsInvocation call=new JsInvocation(jsProgram.getSourceInfo());
      call.setQualifier(func.getName().makeRef(jsProgram.getSourceInfo().makeChild()));
      globalStmts.add(call.makeStmt());
    }
  }
}
