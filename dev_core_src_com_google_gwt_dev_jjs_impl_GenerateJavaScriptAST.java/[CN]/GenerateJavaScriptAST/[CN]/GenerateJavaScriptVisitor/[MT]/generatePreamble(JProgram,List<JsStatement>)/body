{
  List<JMethod> entryMethods=program.getEntryMethods();
  entryFunctions=new JsFunction[entryMethods.size()];
  entryMethodToIndex=Maps.newIdentityHashMap();
  for (int i=0; i < entryMethods.size(); i++) {
    entryMethodToIndex.put(entryMethods.get(i),i);
  }
  JsVars vars=new JsVars(jsProgram.getSourceInfo());
  vars.add(new JsVar(jsProgram.getSourceInfo(),globalTemp));
  globalStmts.add(vars);
  generateImmortalTypes(vars);
  Set<JDeclaredType> alreadyProcessed=Sets.<JDeclaredType>newHashSet(program.immortalCodeGenTypes);
  alreadyProcessed.add(program.getTypeClassLiteralHolder());
  Set<JDeclaredType> classLiteralSupportClasses=generateClassLiteralsSupportClasses(program,alreadyProcessed);
  generateClassLiterals(globalStmts,(Set)classLiteralSupportClasses);
  Set<JDeclaredType> preambleTypes=Sets.newHashSet(alreadyProcessed);
  preambleTypes.addAll(classLiteralSupportClasses);
  return preambleTypes;
}
