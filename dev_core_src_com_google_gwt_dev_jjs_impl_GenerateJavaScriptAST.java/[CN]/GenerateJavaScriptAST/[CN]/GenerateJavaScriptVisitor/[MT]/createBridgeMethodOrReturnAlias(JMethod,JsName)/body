{
  SourceInfo info=method.getSourceInfo();
  if (method.isStatic() || method instanceof JConstructor) {
    return aliasedMethodName.makeRef(info);
  }
 else {
    boolean needsLongConversions=method.getType() == JPrimitiveType.LONG || Iterables.any(method.getParams(),new Predicate<JParameter>(){
      @Override public boolean apply(      JParameter jParameter){
        return jParameter.getType() == JPrimitiveType.LONG;
      }
    }
);
    JsNameRef aliasedMethodRef=aliasedMethodName.makeRef(info);
    if (!needsLongConversions) {
      aliasedMethodRef.setQualifier(getPrototypeQualifierOf(method));
      return aliasedMethodRef;
    }
    JsFunction bridgeMethod=JsUtils.createEmptyFunctionLiteral(info,topScope,null);
    JsInvocation aliasedMethodInvocation=new JsInvocation(info,aliasedMethodRef);
    aliasedMethodInvocation.setQualifier(new JsThisRef(info));
    for (    JParameter param : method.getParams()) {
      JsName argJsName=bridgeMethod.getScope().declareName("$arg_" + param.getName());
      aliasedMethodInvocation.getArguments().add(param.getType() == JPrimitiveType.LONG ? constructInvocation(info,"Cast.coerceToLong",argJsName.makeRef(info)) : argJsName.makeRef(info));
    }
    bridgeMethod.getBody().getStatements().add(new JsReturn(info,method.getType() == JPrimitiveType.LONG ? constructInvocation(info,"Cast.coerceFromLong",aliasedMethodInvocation) : aliasedMethodInvocation));
    return bridgeMethod;
  }
}
