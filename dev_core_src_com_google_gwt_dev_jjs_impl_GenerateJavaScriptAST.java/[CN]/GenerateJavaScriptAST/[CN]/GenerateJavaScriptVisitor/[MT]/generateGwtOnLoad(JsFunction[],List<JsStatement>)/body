{
  SourceInfo sourceInfo=SourceOrigin.UNKNOWN;
  String moduleRuntimeRebindRegistratorSourceName=program.getRuntimeRebindRegistratorTypeSourceName();
  if (moduleRuntimeRebindRegistratorSourceName != null) {
    String runtimeRebindRegistratorTypeShortName=SourceName.getShortClassName(moduleRuntimeRebindRegistratorSourceName);
    JsFunction registerRuntimeRebindsFunction=indexedFunctions.get(runtimeRebindRegistratorTypeShortName + ".register");
    JsInvocation registerRuntimeRebindsCall=new JsInvocation(sourceInfo);
    registerRuntimeRebindsCall.setQualifier(registerRuntimeRebindsFunction.getName().makeRef(sourceInfo));
    globalStmts.add(registerRuntimeRebindsCall.makeStmt());
  }
  String modulepropertyProviderRegistratorSourceName=program.getPropertyProviderRegistratorTypeSourceName();
  if (modulepropertyProviderRegistratorSourceName != null) {
    String propertyProviderRegistratorTypeShortName=SourceName.getShortClassName(program.getPropertyProviderRegistratorTypeSourceName());
    JsFunction registerPropertyProvidersFunction=indexedFunctions.get(propertyProviderRegistratorTypeShortName + ".register");
    JsInvocation registerPropertyProvidersCall=new JsInvocation(sourceInfo);
    registerPropertyProvidersCall.setQualifier(registerPropertyProvidersFunction.getName().makeRef(sourceInfo));
    globalStmts.add(registerPropertyProvidersCall.makeStmt());
  }
  JsName entryName=topScope.declareName("$entry");
  JsVar entryVar=new JsVar(sourceInfo,entryName);
  JsInvocation registerEntryCall=new JsInvocation(sourceInfo);
  JsFunction registerEntryFunction=indexedFunctions.get("Impl.registerEntry");
  registerEntryCall.setQualifier(registerEntryFunction.getName().makeRef(sourceInfo));
  entryVar.setInitExpr(registerEntryCall);
  JsVars entryVars=new JsVars(sourceInfo);
  entryVars.add(entryVar);
  globalStmts.add(entryVars);
  JsName gwtOnLoadName=topScope.declareName("gwtOnLoad");
  gwtOnLoadName.setObfuscatable(false);
  JsVar gwtOnLoadNameVar=new JsVar(sourceInfo,gwtOnLoadName);
  gwtOnLoadNameVar.setInitExpr(new JsConditional(sourceInfo,new JsBinaryOperation(sourceInfo,JsBinaryOperator.REF_EQ,new JsPrefixOperation(sourceInfo,JsUnaryOperator.TYPEOF,gwtOnLoadName.makeRef(sourceInfo)),new JsStringLiteral(sourceInfo,"undefined")),JsNullLiteral.INSTANCE,gwtOnLoadName.makeRef(sourceInfo)));
  JsVars gwtOnLoadNameVars=new JsVars(sourceInfo);
  gwtOnLoadNameVars.add(gwtOnLoadNameVar);
  globalStmts.add(gwtOnLoadNameVars);
  JsFunction createGwtOnLoadFunction=new JsFunction(sourceInfo,topScope);
  JsBlock createGwtOnLoadBody=new JsBlock(sourceInfo);
  createGwtOnLoadFunction.setBody(createGwtOnLoadBody);
  JsName previousGwtOnLoadName=createGwtOnLoadFunction.getScope().declareName("previousGwtOnLoad");
  JsVar previousGwtOnLoadNameVar=new JsVar(sourceInfo,previousGwtOnLoadName);
  previousGwtOnLoadNameVar.setInitExpr(gwtOnLoadName.makeRef(sourceInfo));
  JsVars previousGwtOnLoadNameVars=new JsVars(sourceInfo);
  previousGwtOnLoadNameVars.add(previousGwtOnLoadNameVar);
  createGwtOnLoadBody.getStatements().add(previousGwtOnLoadNameVars);
  JsFunction gwtOnLoad=new JsFunction(sourceInfo,createGwtOnLoadFunction.getScope());
  gwtOnLoad.setArtificiallyRescued(true);
  JsBlock gwtOnLoadFunctionBody=new JsBlock(sourceInfo);
  gwtOnLoad.setBody(gwtOnLoadFunctionBody);
  JsExpression gwtOnLoadAssignment=createAssignment(gwtOnLoadName.makeRef(sourceInfo),gwtOnLoad);
  createGwtOnLoadBody.getStatements().add(gwtOnLoadAssignment.makeStmt());
  JsScope fnScope=gwtOnLoad.getScope();
  List<JsParameter> gwtOnLoadParams=gwtOnLoad.getParameters();
  JsName errFn=fnScope.declareName("errFn");
  JsName modName=fnScope.declareName("modName");
  JsName modBase=fnScope.declareName("modBase");
  JsName softPermutationId=fnScope.declareName("softPermutationId");
  gwtOnLoadParams.add(new JsParameter(sourceInfo,errFn));
  gwtOnLoadParams.add(new JsParameter(sourceInfo,modName));
  gwtOnLoadParams.add(new JsParameter(sourceInfo,modBase));
  gwtOnLoadParams.add(new JsParameter(sourceInfo,softPermutationId));
  JsIf previousGwtOnLoadIf=new JsIf(sourceInfo);
  gwtOnLoadFunctionBody.getStatements().add(previousGwtOnLoadIf);
  previousGwtOnLoadIf.setIfExpr(previousGwtOnLoadName.makeRef(sourceInfo));
  JsInvocation previousGwtOnLoadCall=new JsInvocation(sourceInfo);
  previousGwtOnLoadCall.setQualifier(previousGwtOnLoadName.makeRef(sourceInfo));
  List<JsExpression> previousGwtOnLoadCallArguments=previousGwtOnLoadCall.getArguments();
  previousGwtOnLoadCallArguments.add(errFn.makeRef(sourceInfo));
  previousGwtOnLoadCallArguments.add(modName.makeRef(sourceInfo));
  previousGwtOnLoadCallArguments.add(modBase.makeRef(sourceInfo));
  previousGwtOnLoadCallArguments.add(softPermutationId.makeRef(sourceInfo));
  previousGwtOnLoadIf.setThenStmt(previousGwtOnLoadCall.makeStmt());
  JsExpression moduleNameAssignment=createAssignment(topScope.findExistingUnobfuscatableName("$moduleName").makeRef(sourceInfo),modName.makeRef(sourceInfo));
  gwtOnLoadFunctionBody.getStatements().add(moduleNameAssignment.makeStmt());
  JsExpression moduleBaseAssignment=createAssignment(topScope.findExistingUnobfuscatableName("$moduleBase").makeRef(sourceInfo),modBase.makeRef(sourceInfo));
  gwtOnLoadFunctionBody.getStatements().add(moduleBaseAssignment.makeStmt());
  JsName permutationIdFieldName=names.get(program.getIndexedField("CollapsedPropertyHolder.permutationId"));
  if (permutationIdFieldName != null) {
    JsExpression permutationIdAssignment=createAssignment(permutationIdFieldName.makeRef(sourceInfo),softPermutationId.makeRef(sourceInfo));
    gwtOnLoadFunctionBody.getStatements().add(permutationIdAssignment.makeStmt());
  }
  JsIf jsIf=new JsIf(sourceInfo);
  gwtOnLoadFunctionBody.getStatements().add(jsIf);
  jsIf.setIfExpr(errFn.makeRef(sourceInfo));
  JsTry jsTry=new JsTry(sourceInfo);
  jsIf.setThenStmt(jsTry);
  JsBlock callBlock=new JsBlock(sourceInfo);
  jsIf.setElseStmt(callBlock);
  jsTry.setTryBlock(callBlock);
  for (  JsFunction func : entryFuncs) {
    if (func == registerEntryFunction) {
      continue;
    }
 else     if (func != null) {
      JsInvocation call=new JsInvocation(sourceInfo);
      call.setQualifier(entryName.makeRef(sourceInfo));
      call.getArguments().add(func.getName().makeRef(sourceInfo));
      JsInvocation entryCall=new JsInvocation(sourceInfo);
      entryCall.setQualifier(call);
      callBlock.getStatements().add(entryCall.makeStmt());
    }
  }
  JsCatch jsCatch=new JsCatch(sourceInfo,fnScope,"e");
  jsTry.getCatches().add(jsCatch);
  JsBlock catchBlock=new JsBlock(sourceInfo);
  jsCatch.setBody(catchBlock);
  JsInvocation errCall=new JsInvocation(sourceInfo);
  catchBlock.getStatements().add(errCall.makeStmt());
  errCall.setQualifier(errFn.makeRef(sourceInfo));
  errCall.getArguments().add(modName.makeRef(sourceInfo));
  JsInvocation createGwtOnLoadCall=new JsInvocation(sourceInfo);
  createGwtOnLoadCall.setQualifier(createGwtOnLoadFunction);
  globalStmts.add(createGwtOnLoadCall.makeStmt());
}
