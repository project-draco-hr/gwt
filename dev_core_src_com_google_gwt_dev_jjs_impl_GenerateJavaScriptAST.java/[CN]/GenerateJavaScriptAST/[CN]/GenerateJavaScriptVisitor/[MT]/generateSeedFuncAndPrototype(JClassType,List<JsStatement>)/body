{
  SourceInfo sourceInfo=x.getSourceInfo().makeChild(GenerateJavaScriptVisitor.class,"Seed and function prototype");
  if (x != program.getTypeJavaLangString()) {
    JsName seedFuncName=names.get(x);
    JsFunction seedFunc=new JsFunction(sourceInfo,topScope,seedFuncName,true);
    seedFuncName.setStaticRef(seedFunc);
    sourceInfo.addCorrelation(Correlation.by(seedFunc));
    JsBlock body=new JsBlock(sourceInfo);
    seedFunc.setBody(body);
    JsExprStmt seedFuncStmt=seedFunc.makeStmt();
    globalStmts.add(seedFuncStmt);
    typeForStatMap.put(seedFuncStmt,x);
    JsNameRef lhs=prototype.makeRef(sourceInfo);
    lhs.setQualifier(seedFuncName.makeRef(sourceInfo));
    JsExpression rhs;
    if (x.extnds != null) {
      JsNew newExpr=new JsNew(sourceInfo);
      JsNameRef superPrototypeRef=names.get(x.extnds).makeRef(sourceInfo);
      newExpr.setConstructorExpression(superPrototypeRef);
      JsNode<?> staticRef=superPrototypeRef.getName().getStaticRef();
      rhs=newExpr;
    }
 else {
      rhs=new JsObjectLiteral(sourceInfo);
    }
    JsExpression protoAsg=createAssignment(lhs,rhs);
    JsExpression tmpAsg=createAssignment(globalTemp.makeRef(sourceInfo),protoAsg);
    JsExprStmt tmpAsgStmt=tmpAsg.makeStmt();
    globalStmts.add(tmpAsgStmt);
    typeForStatMap.put(tmpAsgStmt,x);
  }
 else {
    JsNameRef rhs=prototype.makeRef(sourceInfo);
    rhs.setQualifier(jsProgram.getRootScope().declareName("String").makeRef(sourceInfo));
    JsExpression tmpAsg=createAssignment(globalTemp.makeRef(sourceInfo),rhs);
    JsExprStmt tmpAsgStmt=tmpAsg.makeStmt();
    globalStmts.add(tmpAsgStmt);
    typeForStatMap.put(tmpAsgStmt,x);
  }
}
