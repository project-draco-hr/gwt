{
  JsNameRef methodNameRef;
  if (method.isJsNative()) {
    methodNameRef=createGlobalQualifier(method,sourceInfo);
  }
 else   if (method.isConstructor()) {
    methodNameRef=names.get(method).makeRef(sourceInfo);
  }
 else {
    JDeclaredType superClass=method.getEnclosingType();
    JsExpression protoRef=getPrototypeQualifierViaLookup(superClass,sourceInfo);
    methodNameRef=polymorphicNames.get(method).makeQualifiedRef(sourceInfo,protoRef);
  }
  return JsUtils.createInvocationOrPropertyAccess(InvocationStyle.SUPER,sourceInfo,method,instance,methodNameRef,args);
}
