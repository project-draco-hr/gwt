{
  JClassType superClass=x.getSuperClass();
  JExpression superTypeId=(superClass == null) ? JNullLiteral.INSTANCE : getRuntimeTypeReference(superClass);
  String jsPrototype=getSuperPrototype(x);
  List<JsExpression> defineClassArguments=Lists.newArrayList();
  defineClassArguments.add(transform(getRuntimeTypeReference(x)));
  defineClassArguments.add(jsPrototype == null ? transform(superTypeId) : createJsQualifier(jsPrototype,x.getSourceInfo()));
  defineClassArguments.add(generateCastableTypeMap(x));
  defineClassArguments.addAll(constructorArgs);
  JsStatement defineClassStatement=constructInvocation(x.getSourceInfo(),"JavaClassHierarchySetupUtil.defineClass",defineClassArguments).makeStmt();
  addTypeDefinitionStatement(x,defineClassStatement);
  if (jsPrototype != null) {
    JsStatement statement=constructInvocation(x.getSourceInfo(),"JavaClassHierarchySetupUtil.copyObjectProperties",getPrototypeQualifierViaLookup(program.getTypeJavaLangObject(),x.getSourceInfo()),globalTemp.makeRef(x.getSourceInfo())).makeStmt();
    addTypeDefinitionStatement(x,statement);
  }
}
