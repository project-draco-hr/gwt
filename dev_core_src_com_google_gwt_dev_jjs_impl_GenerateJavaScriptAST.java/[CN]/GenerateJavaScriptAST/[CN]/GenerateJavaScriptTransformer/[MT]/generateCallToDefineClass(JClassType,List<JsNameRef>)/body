{
  JClassType superClass=type.getSuperClass();
  JExpression superTypeId=(superClass == null) ? JNullLiteral.INSTANCE : getRuntimeTypeReference(superClass);
  String jsPrototype=getSuperPrototype(type);
  List<JsExpression> defineClassArguments=Lists.newArrayList();
  defineClassArguments.add(transform(getRuntimeTypeReference(type)));
  defineClassArguments.add(jsPrototype == null ? transform(superTypeId) : createGlobalQualifier(jsPrototype,type.getSourceInfo()));
  defineClassArguments.add(generateCastableTypeMap(type));
  defineClassArguments.addAll(constructorArgs);
  JsStatement defineClassStatement=constructInvocation(type.getSourceInfo(),RuntimeConstants.RUNTIME_DEFINE_CLASS,defineClassArguments).makeStmt();
  addTypeDefinitionStatement(type,defineClassStatement);
  maybeCopyObjProperties(type,getPrototypeQualifierViaLookup(program.getTypeJavaLangObject(),type.getSourceInfo()),globalTemp.makeRef(type.getSourceInfo()));
}
