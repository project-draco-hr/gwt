{
  Map<String,Object> exportedMembersByExportName=new TreeMap<String,Object>();
  Set<JDeclaredType> hoistedClinits=Sets.newHashSet();
  JsInteropExportsGenerator exportGenerator=closureCompilerFormatEnabled ? new ClosureJsInteropExportsGenerator(getGlobalStatements(),names) : new DefaultJsInteropExportsGenerator(getGlobalStatements(),globalTemp,getIndexedMethodJsName(RuntimeConstants.RUNTIME_PROVIDE));
  for (  JDeclaredType type : program.getDeclaredTypes()) {
    if (type.isJsNative()) {
      continue;
    }
    if (type.isJsType()) {
      exportedMembersByExportName.put(type.getQualifiedJsName(),type);
    }
    for (    JMember member : type.getMembers()) {
      if (member.isJsInteropEntryPoint()) {
        if (member.getJsMemberType() == JsMemberType.PROPERTY && !member.isFinal()) {
          logger.log(TreeLogger.Type.WARN,"Exporting effectively non-final field " + member.getQualifiedName() + ". Due to the way exporting works, the value of the"+ " exported field will not be reflected across Java/JavaScript border.");
        }
        exportedMembersByExportName.put(member.getQualifiedJsName(),member);
      }
    }
  }
  for (  Object exportedEntity : exportedMembersByExportName.values()) {
    if (exportedEntity instanceof JDeclaredType) {
      exportGenerator.exportType((JDeclaredType)exportedEntity);
    }
 else {
      JMember member=(JMember)exportedEntity;
      maybeHoistClinit(hoistedClinits,member);
      exportGenerator.exportMember(member,names.get(member).makeRef(member.getSourceInfo()));
    }
  }
}
