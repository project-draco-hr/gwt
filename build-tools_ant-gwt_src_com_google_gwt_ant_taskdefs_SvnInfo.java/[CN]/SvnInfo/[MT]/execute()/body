{
  if (outprop == null) {
    throw new BuildException("<svninfo> task requires an outputproperty attribute");
  }
  if (workdir == null) {
    workdir=getProject().getProperty("basedir");
  }
  File workDirFile=new File(workdir);
  if (!workDirFile.isDirectory()) {
    throw new BuildException(workdir + " is not a directory");
  }
  if (getProject().getProperty(outprop) == null) {
    Info info;
    if (looksLikeSvn(workDirFile)) {
      info=parseInfo(getSvnInfo(workDirFile));
      info.revision=getSvnVersion(workDirFile);
    }
 else     if (looksLikeGit(workDirFile)) {
      info=parseInfo(getGitSvnInfo(workDirFile));
      if (!doesGitWorkingCopyMatchSvnRevision(workDirFile,info.revision)) {
        info.revision+="M";
      }
    }
 else {
      info=new Info("unknown","unknown");
    }
    getProject().setNewProperty(outprop,info.branch + "@" + info.revision);
  }
 else {
    String propval=getProject().getProperty(outprop);
    if (!propval.matches("[^@]+@[0-9]+")) {
      throw new BuildException("predefined " + outprop + "should look like branch-spec@revison-number");
    }
  }
  if (fileprop != null) {
    String outpropval=getProject().getProperty(outprop);
    int atIndex=outpropval.indexOf('@');
    String branch=outpropval.substring(0,atIndex);
    String revision=outpropval.substring(atIndex + 1);
    getProject().setNewProperty(fileprop,branch.replace('/','-') + "-" + revision.replace(':','-'));
  }
}
