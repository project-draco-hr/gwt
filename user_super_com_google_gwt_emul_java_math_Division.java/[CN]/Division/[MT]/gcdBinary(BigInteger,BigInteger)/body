{
  int lsb1=op1.getLowestSetBit();
  int lsb2=op2.getLowestSetBit();
  int pow2Count=Math.min(lsb1,lsb2);
  BitLevel.inplaceShiftRight(op1,lsb1);
  BitLevel.inplaceShiftRight(op2,lsb2);
  BigInteger swap;
  if (op1.compareTo(op2) == BigInteger.GREATER) {
    swap=op1;
    op1=op2;
    op2=swap;
  }
  do {
    if ((op2.numberLength == 1) || ((op2.numberLength == 2) && (op2.digits[1] > 0))) {
      op2=BigInteger.valueOf(Division.gcdBinary(op1.longValue(),op2.longValue()));
      break;
    }
    if (op2.numberLength > op1.numberLength * 1.2) {
      op2=op2.remainder(op1);
      if (op2.signum() != 0) {
        BitLevel.inplaceShiftRight(op2,op2.getLowestSetBit());
      }
    }
 else {
      do {
        Elementary.inplaceSubtract(op2,op1);
        BitLevel.inplaceShiftRight(op2,op2.getLowestSetBit());
      }
 while (op2.compareTo(op1) >= BigInteger.EQUALS);
    }
    swap=op2;
    op2=op1;
    op1=swap;
  }
 while (op1.sign != 0);
  return op2.shiftLeft(pow2Count);
}
