{
  BigInteger pows[]=new BigInteger[8];
  BigInteger res=x2;
  int lowexp;
  BigInteger x3;
  int acc3;
  pows[0]=a2;
  x3=monPro(a2,a2,modulus,n2);
  for (int i=1; i <= 7; i++) {
    pows[i]=monPro(pows[i - 1],x3,modulus,n2);
  }
  for (int i=exponent.bitLength() - 1; i >= 0; i--) {
    if (BitLevel.testBit(exponent,i)) {
      lowexp=1;
      acc3=i;
      for (int j=Math.max(i - 3,0); j <= i - 1; j++) {
        if (BitLevel.testBit(exponent,j)) {
          if (j < acc3) {
            acc3=j;
            lowexp=(lowexp << (i - j)) ^ 1;
          }
 else {
            lowexp=lowexp ^ (1 << (j - acc3));
          }
        }
      }
      for (int j=acc3; j <= i; j++) {
        res=monPro(res,res,modulus,n2);
      }
      res=monPro(pows[(lowexp - 1) >> 1],res,modulus,n2);
      i=acc3;
    }
 else {
      res=monPro(res,res,modulus,n2);
    }
  }
  return res;
}
