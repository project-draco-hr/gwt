{
  if (a.sign == 0) {
    throw new ArithmeticException("BigInteger not invertible.");
  }
  if (!p.testBit(0)) {
    return modInverseLorencz(a,p);
  }
  int m=p.numberLength * 32;
  BigInteger u, v, r, s;
  u=p.copy();
  v=a.copy();
  int max=Math.max(v.numberLength,u.numberLength);
  r=new BigInteger(1,1,new int[max + 1]);
  s=new BigInteger(1,1,new int[max + 1]);
  s.digits[0]=1;
  int k=0;
  int lsbu=u.getLowestSetBit();
  int lsbv=v.getLowestSetBit();
  int toShift;
  if (lsbu > lsbv) {
    BitLevel.inplaceShiftRight(u,lsbu);
    BitLevel.inplaceShiftRight(v,lsbv);
    BitLevel.inplaceShiftLeft(r,lsbv);
    k+=lsbu - lsbv;
  }
 else {
    BitLevel.inplaceShiftRight(u,lsbu);
    BitLevel.inplaceShiftRight(v,lsbv);
    BitLevel.inplaceShiftLeft(s,lsbu);
    k+=lsbv - lsbu;
  }
  r.sign=1;
  while (v.signum() > 0) {
    while (u.compareTo(v) > BigInteger.EQUALS) {
      Elementary.inplaceSubtract(u,v);
      toShift=u.getLowestSetBit();
      BitLevel.inplaceShiftRight(u,toShift);
      Elementary.inplaceAdd(r,s);
      BitLevel.inplaceShiftLeft(s,toShift);
      k+=toShift;
    }
    while (u.compareTo(v) <= BigInteger.EQUALS) {
      Elementary.inplaceSubtract(v,u);
      if (v.signum() == 0) {
        break;
      }
      toShift=v.getLowestSetBit();
      BitLevel.inplaceShiftRight(v,toShift);
      Elementary.inplaceAdd(s,r);
      BitLevel.inplaceShiftLeft(r,toShift);
      k+=toShift;
    }
  }
  if (!u.isOne()) {
    throw new ArithmeticException("BigInteger not invertible.");
  }
  if (r.compareTo(p) >= BigInteger.EQUALS) {
    Elementary.inplaceSubtract(r,p);
  }
  r=p.subtract(r);
  int n1=calcN(p);
  if (k > m) {
    r=monPro(r,BigInteger.ONE,p,n1);
    k=k - m;
  }
  r=monPro(r,BigInteger.getPowerOfTwo(m - k),p,n1);
  return r;
}
