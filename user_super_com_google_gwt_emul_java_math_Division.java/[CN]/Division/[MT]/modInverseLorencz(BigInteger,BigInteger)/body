{
  int max=Math.max(a.numberLength,modulo.numberLength);
  int uDigits[]=new int[max + 1];
  int vDigits[]=new int[max + 1];
  System.arraycopy(modulo.digits,0,uDigits,0,modulo.numberLength);
  System.arraycopy(a.digits,0,vDigits,0,a.numberLength);
  BigInteger u=new BigInteger(modulo.sign,modulo.numberLength,uDigits);
  BigInteger v=new BigInteger(a.sign,a.numberLength,vDigits);
  BigInteger r=new BigInteger(0,1,new int[max + 1]);
  BigInteger s=new BigInteger(1,1,new int[max + 1]);
  s.digits[0]=1;
  int coefU=0, coefV=0;
  int n=modulo.bitLength();
  int k;
  while (!isPowerOfTwo(u,coefU) && !isPowerOfTwo(v,coefV)) {
    k=howManyIterations(u,n);
    if (k != 0) {
      BitLevel.inplaceShiftLeft(u,k);
      if (coefU >= coefV) {
        BitLevel.inplaceShiftLeft(r,k);
      }
 else {
        BitLevel.inplaceShiftRight(s,Math.min(coefV - coefU,k));
        if (k - (coefV - coefU) > 0) {
          BitLevel.inplaceShiftLeft(r,k - coefV + coefU);
        }
      }
      coefU+=k;
    }
    k=howManyIterations(v,n);
    if (k != 0) {
      BitLevel.inplaceShiftLeft(v,k);
      if (coefV >= coefU) {
        BitLevel.inplaceShiftLeft(s,k);
      }
 else {
        BitLevel.inplaceShiftRight(r,Math.min(coefU - coefV,k));
        if (k - (coefU - coefV) > 0) {
          BitLevel.inplaceShiftLeft(s,k - coefU + coefV);
        }
      }
      coefV+=k;
    }
    if (u.signum() == v.signum()) {
      if (coefU <= coefV) {
        Elementary.completeInPlaceSubtract(u,v);
        Elementary.completeInPlaceSubtract(r,s);
      }
 else {
        Elementary.completeInPlaceSubtract(v,u);
        Elementary.completeInPlaceSubtract(s,r);
      }
    }
 else {
      if (coefU <= coefV) {
        Elementary.completeInPlaceAdd(u,v);
        Elementary.completeInPlaceAdd(r,s);
      }
 else {
        Elementary.completeInPlaceAdd(v,u);
        Elementary.completeInPlaceAdd(s,r);
      }
    }
    if (v.signum() == 0 || u.signum() == 0) {
      throw new ArithmeticException("BigInteger not invertible.");
    }
  }
  if (isPowerOfTwo(v,coefV)) {
    r=s;
    if (v.signum() != u.signum()) {
      u=u.negate();
    }
  }
  if (u.testBit(n)) {
    if (r.signum() < 0) {
      r=r.negate();
    }
 else {
      r=modulo.subtract(r);
    }
  }
  if (r.signum() < 0) {
    r=r.add(modulo);
  }
  return r;
}
