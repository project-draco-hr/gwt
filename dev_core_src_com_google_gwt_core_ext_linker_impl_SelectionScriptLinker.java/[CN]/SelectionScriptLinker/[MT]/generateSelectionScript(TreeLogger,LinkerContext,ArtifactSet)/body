{
  StringBuffer selectionScript;
  try {
    selectionScript=new StringBuffer(Utility.getFileFromClassPath(getSelectionScriptTemplate(logger,context)));
  }
 catch (  IOException e) {
    logger.log(TreeLogger.ERROR,"Unable to read selection script template",e);
    throw new UnableToCompleteException();
  }
  replaceAll(selectionScript,"__MODULE_FUNC__",context.getModuleFunctionName());
  replaceAll(selectionScript,"__MODULE_NAME__",context.getModuleName());
  int startPos;
  startPos=selectionScript.indexOf("// __MODULE_STYLES_END__");
  if (startPos != -1) {
    for (    StylesheetReference resource : artifacts.find(StylesheetReference.class)) {
      String text=generateStylesheetInjector(resource.getSrc());
      selectionScript.insert(startPos,text);
      startPos+=text.length();
    }
  }
  startPos=selectionScript.indexOf("// __MODULE_SCRIPTS_END__");
  if (startPos != -1) {
    for (    ScriptReference resource : artifacts.find(ScriptReference.class)) {
      String text=generateScriptInjector(resource.getSrc());
      selectionScript.insert(startPos,text);
      startPos+=text.length();
    }
  }
  startPos=selectionScript.indexOf("// __PROPERTIES_END__");
  if (startPos != -1) {
    for (    SelectionProperty p : context.getProperties()) {
      String text=generatePropertyProvider(p);
      selectionScript.insert(startPos,text);
      startPos+=text.length();
    }
  }
  SortedSet<CompilationResult> compilations=artifacts.find(CompilationResult.class);
  startPos=selectionScript.indexOf("// __PERMUTATIONS_END__");
  if (startPos != -1) {
    StringBuffer text=new StringBuffer();
    if (compilations.size() == 0) {
      text.append("alert(\"GWT module '" + context.getModuleName() + "' may need to be (re)compiled\");");
      text.append("return;");
    }
 else     if (compilations.size() == 1) {
      Iterator<CompilationResult> iter=compilations.iterator();
      CompilationResult result=iter.next();
      text.append("strongName = '" + compilationStrongNames.get(result) + "';");
    }
 else {
      for (      CompilationResult r : compilations) {
        for (        Map<SelectionProperty,String> propertyMap : r.getPropertyMap()) {
          text.append("unflattenKeylistIntoAnswers([");
          boolean needsComma=false;
          for (          SelectionProperty p : context.getProperties()) {
            if (!propertyMap.containsKey(p)) {
              continue;
            }
            if (needsComma) {
              text.append(",");
            }
 else {
              needsComma=true;
            }
            text.append("'" + propertyMap.get(p) + "'");
          }
          text.append("], '").append(compilationStrongNames.get(r)).append("');\n");
        }
      }
      text.append("strongName = answers[");
      boolean needsIndexMarkers=false;
      for (      SelectionProperty p : context.getProperties()) {
        if (p.tryGetValue() != null) {
          continue;
        }
 else         if (p.isDerived()) {
          continue;
        }
        if (needsIndexMarkers) {
          text.append("][");
        }
 else {
          needsIndexMarkers=true;
        }
        text.append("computePropValue('" + p.getName() + "')");
      }
      text.append("];");
    }
    selectionScript.insert(startPos,text);
  }
  return selectionScript.toString();
}
