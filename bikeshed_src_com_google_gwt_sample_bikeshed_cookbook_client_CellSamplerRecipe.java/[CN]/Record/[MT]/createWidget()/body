{
  Images images=GWT.create(Images.class);
  final ProvidesKey<Record> keyProvider=new ProvidesKey<Record>(){
    public Object getKey(    Record item){
      return item.id;
    }
  }
;
  final ListViewAdapter<Record> adapter=new ListViewAdapter<Record>();
  adapter.setKeyProvider(keyProvider);
  for (int i=0; i < 10; ++i) {
    adapter.getList().add(new Record(i));
  }
  editableCells=new ArrayList<AbstractEditableCell<?,?>>();
  table=new CellTable<Record>(10);
  table.setKeyProvider(keyProvider);
  adapter.addView(table);
  addColumn(new CheckboxCell(),"CheckboxCell",new GetValue<Boolean>(){
    public Boolean getValue(    Record record){
      return Status.ACTIVE.equals(record.status);
    }
  }
,new FieldUpdater<Record,Boolean>(){
    public void update(    int index,    Record object,    Boolean value){
      if (value) {
        object.setStatus(Status.ACTIVE);
      }
 else {
        object.setStatus(Status.INACTIVE);
      }
    }
  }
);
  addColumn(new TextCell(),"TextCell",new GetValue<String>(){
    public String getValue(    Record record){
      return record.text;
    }
  }
,null);
  addColumn(new ActionCell<Record>("Click Me",new ActionCell.Delegate<Record>(){
    public void execute(    Record object){
      Window.alert("You clicked #" + object.id);
    }
  }
),"ActionCell",new GetValue<Record>(){
    public Record getValue(    Record record){
      return record;
    }
  }
,null);
  addColumn(new ButtonCell(),"ButtonCell",new GetValue<String>(){
    public String getValue(    Record record){
      return "Click " + record.id;
    }
  }
,new FieldUpdater<Record,String>(){
    public void update(    int index,    Record object,    String value){
      Window.alert("You clicked " + object.id);
    }
  }
);
  addColumn(new ClickableTextCell(),"ClickableTextCell",new GetValue<String>(){
    public String getValue(    Record record){
      return "Click " + record.id;
    }
  }
,new FieldUpdater<Record,String>(){
    public void update(    int index,    Record object,    String value){
      Window.alert("You clicked " + object.id);
    }
  }
);
  DateTimeFormat dateFormat=DateTimeFormat.getFormat(PredefinedFormat.DATE_MEDIUM);
  addColumn(new DateCell(dateFormat),"DateCell",new GetValue<Date>(){
    public Date getValue(    Record record){
      return record.date;
    }
  }
,null);
  addColumn(new DatePickerCell(dateFormat),"DatePickerCell",new GetValue<Date>(){
    public Date getValue(    Record record){
      return record.date;
    }
  }
,new FieldUpdater<Record,Date>(){
    public void update(    int index,    Record object,    Date value){
      object.setDate(value);
    }
  }
);
  addColumn(new EditTextCell(),"EditTextCell",new GetValue<String>(){
    public String getValue(    Record record){
      return record.text;
    }
  }
,new FieldUpdater<Record,String>(){
    public void update(    int index,    Record object,    String value){
      object.setText(value);
    }
  }
);
  addColumn(new IconCellDecorator<String>(images.gwtLogo(),new TextCell()),"IconCellDecorator",new GetValue<String>(){
    public String getValue(    Record record){
      return record.text;
    }
  }
,null);
  addColumn(new NumberCell(),"NumberCell",new GetValue<Number>(){
    public Number getValue(    Record record){
      return record.id;
    }
  }
,null);
  List<String> options=new ArrayList<String>();
  options.add(Status.ACTIVE.getDisplayName());
  options.add(Status.INACTIVE.getDisplayName());
  options.add(Status.ARCHIVED.getDisplayName());
  addColumn(new SelectionCell(options),"SelectionCell",new GetValue<String>(){
    public String getValue(    Record record){
      return record.status.getDisplayName();
    }
  }
,new FieldUpdater<Record,String>(){
    public void update(    int index,    Record object,    String value){
      if (Status.ACTIVE.getDisplayName().equals(value)) {
        object.setStatus(Status.ACTIVE);
      }
 else       if (Status.INACTIVE.getDisplayName().equals(value)) {
        object.setStatus(Status.INACTIVE);
      }
 else {
        object.setStatus(Status.ARCHIVED);
      }
    }
  }
);
  addColumn(new TextInputCell(),"TextInputCellCell",new GetValue<String>(){
    public String getValue(    Record record){
      return record.text;
    }
  }
,new FieldUpdater<Record,String>(){
    public void update(    int index,    Record object,    String value){
      object.setText(value);
    }
  }
);
  Button redrawButton=new Button("Redraw Table",new ClickHandler(){
    public void onClick(    ClickEvent event){
      table.redraw();
    }
  }
);
  Button commitButton=new Button("Commit Data",new ClickHandler(){
    public void onClick(    ClickEvent event){
      for (      Record record : adapter.getList()) {
        record.commit();
        Object key=keyProvider.getKey(record);
        for (        AbstractEditableCell<?,?> cell : editableCells) {
          cell.setViewData(key,null);
        }
      }
      adapter.refresh();
    }
  }
);
  FlowPanel fp=new FlowPanel();
  fp.add(table);
  fp.add(redrawButton);
  fp.add(commitButton);
  return fp;
}
