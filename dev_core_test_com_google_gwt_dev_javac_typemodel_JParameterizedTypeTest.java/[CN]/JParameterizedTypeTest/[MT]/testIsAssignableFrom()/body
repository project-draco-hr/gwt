{
  assertType("List").isAssignableFrom("List");
  assertType("List").isAssignableFrom("List<?>");
  assertType("List").isAssignableFrom("List<? extends Number>");
  assertType("List").isAssignableFrom("List<String>");
  assertType("List").isAssignableFrom("ExtendsRawList");
  assertType("List<?>").isAssignableFrom("List");
  assertType("List<?>").isAssignableFrom("List<?>");
  assertType("List<?>").isAssignableFrom("List<? extends Number>");
  assertType("List<?>").isAssignableFrom("List<String>");
  assertType("List<?>").isAssignableFrom("ExtendsRawList");
  assertType("List<? extends Number>").isAssignableFrom("List");
  assertType("List<? extends Number>").isAssignableFrom("List<Integer>");
  assertType("List<? extends Number>").isAssignableFrom("List<? extends Integer>");
  assertType("List<? extends Number>").isNOTAssignableFrom("List<?>");
  assertType("List<? extends Number>").isNOTAssignableFrom("List<Object>");
  assertType("List<? extends Integer>").isAssignableFrom("List<? extends Integer>");
  assertType("List<? extends Integer>").isNOTAssignableFrom("List<? extends Number>");
  assertType("List<? super Number>").isAssignableFrom("List");
  assertType("List<? super Number>").isAssignableFrom("List<Object>");
  assertType("List<? super Number>").isAssignableFrom("List<Number>");
  assertType("List<? super Number>").isAssignableFrom("List<? super Number>");
  assertType("List<? super Number>").isNOTAssignableFrom("List<Integer>");
  assertType("List<? super Number>").isNOTAssignableFrom("List<String>");
  assertType("List<? super Number>").isNOTAssignableFrom("List<?>");
  assertType("List<? super Number>").isNOTAssignableFrom("List<? super Integer>");
  assertType("List<? super Integer>").isAssignableFrom("List<? super Object>");
  assertType("List<? super Integer>").isAssignableFrom("List<? super Number>");
  assertType("List<Object>").isAssignableFrom("List");
  assertType("List<Object>").isAssignableFrom("List<Object>");
  assertType("List<String>").isAssignableFrom("ExtendsRawList");
  assertType("List<Object>").isNOTAssignableFrom("List<String>");
  assertType("List<String>").isNOTAssignableFrom("List<Object>");
  assertType("List<List>").isAssignableFrom("List");
  assertType("List<List>").isAssignableFrom("List<List>");
  assertType("List<List>").isNOTAssignableFrom("List<List<?>>");
  assertType("List<List>").isNOTAssignableFrom("List<List<String>>");
  assertType("List<List>").isNOTAssignableFrom("List<? extends List<String>>");
  assertType("List<List<?>>").isAssignableFrom("List");
  assertType("List<List<?>>").isAssignableFrom("List<List<?>>");
  assertType("List<List<?>>").isAssignableFrom("List<List<? extends Object>>");
  assertType("List<List<?>>").isNOTAssignableFrom("List<List>");
  assertType("List<List<?>>").isNOTAssignableFrom("List<List<String>>");
  assertType("List<List<String>>").isAssignableFrom("List");
  assertType("List<List<String>>").isAssignableFrom("List<List<String>>");
  assertType("List<List<String>>").isNOTAssignableFrom("List<List>");
  assertType("List<List<String>>").isNOTAssignableFrom("List<List<?>>");
  assertType("List<List<String>>").isNOTAssignableFrom("List<List<Object>>");
  assertType("List<Collection<String>>").isNOTAssignableFrom("List<List<String>>");
  assertType("List<? extends Collection<String>>").isAssignableFrom("List<List<String>>");
  assertType("List<List<? extends Number>>").isNOTAssignableFrom("List<List<Integer>>");
  assertType("Map<?, ?>").isAssignableFrom("Map");
  assertType("Map<?, ?>").isAssignableFrom("Map<String, String>");
  assertType("Map<?, ?>").isAssignableFrom("Map<String, Integer>");
  assertType("Map<?, String>").isAssignableFrom("Map");
  assertType("Map<?, String>").isAssignableFrom("Map<String, String>");
  assertType("Map<?, String>").isNOTAssignableFrom("Map<String, Integer>");
  assertType("Map<String, String>").isAssignableFrom("Map");
  assertType("Map<String, String>").isAssignableFrom("Map<String, String>");
  assertType("Map<String, String>").isNOTAssignableFrom("Map<String, Integer>");
}
