{
  for (int t=16; t < blockBuffer.length; t++) {
    blockBuffer[t]=enforceOverflow(sigma1(blockBuffer[t - 2]) + blockBuffer[t - 7] + sigma0(blockBuffer[t - 15])+ blockBuffer[t - 16]);
  }
  int a=hash[0];
  int b=hash[1];
  int c=hash[2];
  int d=hash[3];
  int e=hash[4];
  int f=hash[5];
  int g=hash[6];
  int h=hash[7];
  for (int t=0; t < 64; t++) {
    int t1=h + sum1(e) + ch(e,f,g)+ K[t]+ blockBuffer[t];
    int t2=sum0(a) + maj(a,b,c);
    h=g;
    g=f;
    f=e;
    e=enforceOverflow(d + t1);
    d=c;
    c=b;
    b=a;
    a=enforceOverflow(t1 + t2);
  }
  hash[0]=enforceOverflow(a + hash[0]);
  hash[1]=enforceOverflow(b + hash[1]);
  hash[2]=enforceOverflow(c + hash[2]);
  hash[3]=enforceOverflow(d + hash[3]);
  hash[4]=enforceOverflow(e + hash[4]);
  hash[5]=enforceOverflow(f + hash[5]);
  hash[6]=enforceOverflow(g + hash[6]);
  hash[7]=enforceOverflow(h + hash[7]);
  blockOff=0;
}
