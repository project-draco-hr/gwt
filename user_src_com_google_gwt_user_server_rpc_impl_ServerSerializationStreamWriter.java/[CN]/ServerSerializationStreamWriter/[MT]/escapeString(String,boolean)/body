{
  int length=toEscape.length();
  int capacityIncrement=Math.max(length,16);
  CharVector charVector=new CharVector(capacityIncrement * 2,capacityIncrement);
  charVector.add(JS_QUOTE_CHAR);
  int i=0;
  while (i < length) {
    int maxSegmentVectorSize=splitNodes ? (charVector.getSize() + MAX_STRING_NODE_LENGTH - 5) : Integer.MAX_VALUE;
    while (i < length && charVector.getSize() < maxSegmentVectorSize) {
      char c=toEscape.charAt(i++);
      if (needsUnicodeEscape(c)) {
        unicodeEscape(c,charVector);
      }
 else {
        charVector.add(c);
      }
    }
    if (splitNodes && i < length) {
      charVector.add(JS_QUOTE_CHAR);
      charVector.add('+');
      charVector.add(JS_QUOTE_CHAR);
    }
  }
  charVector.add(JS_QUOTE_CHAR);
  return String.valueOf(charVector.asArray(),0,charVector.getSize());
}
