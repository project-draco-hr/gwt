{
switch (op) {
case BIT_NOT:
{
      long value=toLong(exp);
      long res=~value;
      if (isTypeLong(exp)) {
        ctx.replaceMe(program.getLiteralLong(res));
      }
 else {
        ctx.replaceMe(program.getLiteralInt((int)res));
      }
      return true;
    }
case NEG:
  if (isTypeLong(exp)) {
    ctx.replaceMe(program.getLiteralLong(-toLong(exp)));
    return true;
  }
if (isTypeIntegral(exp)) {
  ctx.replaceMe(program.getLiteralInt(-toInt(exp)));
  return true;
}
if (isTypeDouble(exp)) {
ctx.replaceMe(program.getLiteralDouble(Ieee754_64_Arithmetic.neg(toDouble(exp))));
return true;
}
if (isTypeFloat(exp)) {
ctx.replaceMe(program.getLiteralFloat(Ieee754_64_Arithmetic.neg(toDouble(exp))));
return true;
}
return false;
case NOT:
{
JBooleanLiteral booleanLit=(JBooleanLiteral)exp;
ctx.replaceMe(program.getLiteralBoolean(!booleanLit.getValue()));
return true;
}
default :
return false;
}
}
