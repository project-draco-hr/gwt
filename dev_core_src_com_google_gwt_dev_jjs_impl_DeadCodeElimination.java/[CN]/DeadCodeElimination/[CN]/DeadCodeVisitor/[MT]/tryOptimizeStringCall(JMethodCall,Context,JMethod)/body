{
  if (method.getType() == program.getTypeVoid()) {
    return;
  }
  if (method.getOriginalParamTypes().size() != method.getParams().size()) {
    return;
  }
  if (method.getName().endsWith("hashCode")) {
    return;
  }
  boolean isStaticImplMethod=program.isStaticImpl(method);
  JExpression instance=isStaticImplMethod ? x.getArgs().get(0) : x.getInstance();
  List<JExpression> arguments=isStaticImplMethod ? x.getArgs().subList(1,x.getArgs().size()) : x.getArgs();
  if (method.getName().endsWith("toString")) {
    if (!instance.getType().canBeNull()) {
      ctx.replaceMe(instance);
    }
    return;
  }
  Object instanceLiteral=tryTranslateLiteral(instance,String.class);
  method=isStaticImplMethod ? program.instanceMethodForStaticImpl(method) : method;
  if (instanceLiteral == null && !method.isStatic()) {
    return;
  }
  int numberOfParameters=method.getOriginalParamTypes().size();
  Object[] argumentConstantValues=new Object[numberOfParameters];
  Class<?>[] parametersClasses=new Class<?>[numberOfParameters];
  for (int i=0; i < numberOfParameters; i++) {
    parametersClasses[i]=classObjectForType(method.getOriginalParamTypes().get(i));
    argumentConstantValues[i]=tryTranslateLiteral(arguments.get(i),parametersClasses[i]);
    if (parametersClasses[i] == null || argumentConstantValues[i] == null) {
      return;
    }
  }
  JLiteral resultValue=staticallyInvokeStringMethod(method.getName(),instanceLiteral,parametersClasses,argumentConstantValues);
  if (resultValue != null) {
    ctx.replaceMe(resultValue);
  }
}
