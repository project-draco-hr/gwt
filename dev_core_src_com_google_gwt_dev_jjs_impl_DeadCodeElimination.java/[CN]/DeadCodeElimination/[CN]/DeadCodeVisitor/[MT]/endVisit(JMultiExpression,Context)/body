{
  List<JExpression> exprs=x.exprs;
  if (exprs.size() > 0) {
    if (ignoringExpressionOutput.contains(x)) {
      ignoringExpressionOutput.removeAll(exprs);
    }
 else {
      List<JExpression> nonFinalChildren=exprs.subList(0,exprs.size() - 1);
      ignoringExpressionOutput.removeAll(nonFinalChildren);
    }
  }
  HashSet<JDeclaredType> clinitsCalled=new HashSet<JDeclaredType>();
  for (int i=0; i < numRemovableExpressions(x); ++i) {
    JExpression expr=x.exprs.get(i);
    if (!expr.hasSideEffects()) {
      x.exprs.remove(i);
      --i;
      madeChanges();
      continue;
    }
    if (expr instanceof JMultiExpression) {
      x.exprs.remove(i);
      x.exprs.addAll(i,((JMultiExpression)expr).exprs);
      i--;
      madeChanges();
      continue;
    }
    if (expr instanceof JMethodCall && JProgram.isClinit(((JMethodCall)expr).getTarget())) {
      JDeclaredType enclosingType=((JMethodCall)expr).getTarget().getEnclosingType();
      if (enclosingType.findSubtype(clinitsCalled) != null) {
        x.exprs.remove(i);
        --i;
        madeChanges();
        continue;
      }
 else {
        clinitsCalled.add(enclosingType);
      }
    }
  }
  if (x.exprs.size() == 1) {
    maybeReplaceMe(x,x.exprs.get(0),ctx);
  }
}
