{
  JBinaryOperator op=x.getOp();
  JExpression lhs=x.getLhs();
  JExpression rhs=x.getRhs();
  if (isNonEmptyMultiExpression(lhs)) {
    List<JExpression> expressions=((JMultiExpression)lhs).getExpressions();
    JMultiExpression result=new JMultiExpression(lhs.getSourceInfo(),expressions.subList(0,expressions.size() - 1));
    result.addExpressions(new JBinaryOperation(x.getSourceInfo(),x.getType(),x.getOp(),expressions.get(expressions.size() - 1),rhs));
    ctx.replaceMe(result);
    return;
  }
  if (isNonEmptyMultiExpression(rhs) && lhs instanceof JValueLiteral) {
    List<JExpression> expressions=((JMultiExpression)rhs).getExpressions();
    JMultiExpression result=new JMultiExpression(rhs.getSourceInfo(),expressions.subList(0,expressions.size() - 1));
    result.addExpressions(new JBinaryOperation(x.getSourceInfo(),x.getType(),x.getOp(),lhs,expressions.get(expressions.size() - 1)));
    ctx.replaceMe(result);
    return;
  }
  if ((lhs instanceof JValueLiteral) && (rhs instanceof JValueLiteral)) {
    if (evalOpOnLiterals(op,(JValueLiteral)lhs,(JValueLiteral)rhs,ctx)) {
      return;
    }
  }
switch (op) {
case AND:
    maybeReplaceMe(x,Simplifier.and(x),ctx);
  break;
case OR:
maybeReplaceMe(x,Simplifier.or(x),ctx);
break;
case BIT_XOR:
simplifyXor(lhs,rhs,ctx);
break;
case EQ:
simplifyEq(lhs,rhs,ctx,false);
break;
case NEQ:
simplifyEq(lhs,rhs,ctx,true);
break;
case ADD:
simplifyAdd(lhs,rhs,ctx,x.getType());
break;
case CONCAT:
evalConcat(x.getSourceInfo(),lhs,rhs,ctx);
break;
case SUB:
simplifySub(lhs,rhs,ctx,x.getType());
break;
case MUL:
simplifyMul(lhs,rhs,ctx,x.getType());
break;
case DIV:
simplifyDiv(lhs,rhs,ctx,x.getType());
break;
case SHL:
case SHR:
case SHRU:
if (isLiteralZero(rhs)) {
ctx.replaceMe(lhs);
}
break;
default :
if (op.isAssignment()) {
lvalues.remove(lhs);
}
break;
}
}
