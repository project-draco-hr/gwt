{
  TestObject[] origData=new TestObject[]{new TestObject(3),new TestObject(11),new TestObject(2),new TestObject(3),new TestObject(1),new TestObject(3),new TestObject(22)};
  int[] permutation=new int[origData.length];
  while (validPermutation(permutation,origData.length)) {
    TestObject[] permutedArray=getPermutation(origData,permutation);
    Arrays.sort(permutedArray,new Comparator<TestObject>(){
      public int compare(      TestObject a,      TestObject b){
        return a.getValue() - b.getValue();
      }
    }
);
    for (int i=1; i < permutedArray.length; ++i) {
      if (permutedArray[i - 1].getValue() > permutedArray[i].getValue() || (permutedArray[i - 1].getValue() == permutedArray[i].getValue() && permutedArray[i - 1].getIndex() > permutedArray[i].getIndex())) {
        String msg="Permutation " + Arrays.toString(permutation) + ": "+ Arrays.toString(permutedArray);
        permutedArray=getPermutation(origData,permutation);
        msg+=" (orig: " + Arrays.toString(permutedArray) + ")";
        fail(msg);
      }
    }
    nextPermutation(permutation);
  }
}
