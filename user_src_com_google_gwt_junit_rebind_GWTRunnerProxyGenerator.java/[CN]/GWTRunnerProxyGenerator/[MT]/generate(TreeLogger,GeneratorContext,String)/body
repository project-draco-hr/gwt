{
  if (!PROXY.equals(typeName)) {
    logger.log(TreeLogger.ERROR,"This generator may only be used with " + PROXY,null);
    throw new UnableToCompleteException();
  }
  JClassType requestedClass;
  try {
    requestedClass=context.getTypeOracle().getType(typeName);
  }
 catch (  NotFoundException e) {
    logger.log(TreeLogger.ERROR,"Could not find type '" + typeName + "'; please see the log, as this usually indicates a previous error ",e);
    throw new UnableToCompleteException();
  }
  String moduleName;
  try {
    ConfigurationProperty prop=context.getPropertyOracle().getConfigurationProperty("junit.moduleName");
    moduleName=prop.getValues().get(0);
  }
 catch (  BadPropertyValueException e) {
    logger.log(TreeLogger.ERROR,"Could not resolve junit.moduleName property",e);
    throw new UnableToCompleteException();
  }
  String userAgent;
  try {
    SelectionProperty prop=context.getPropertyOracle().getSelectionProperty(logger,"user.agent");
    userAgent=prop.getCurrentValue();
  }
 catch (  BadPropertyValueException e) {
    logger.log(TreeLogger.ERROR,"Could not resolve user.agent property",e);
    throw new UnableToCompleteException();
  }
  String packageName=requestedClass.getPackage().getName();
  String generatedBaseClass=requestedClass.getName().replace('.','_') + "Impl";
  SourceWriter sourceWriter=getSourceWriter(logger,context,packageName,generatedBaseClass,null,null);
  if (sourceWriter != null) {
    writeMethodCreateTestAccessor(sourceWriter,getTestClasses(logger,context,moduleName));
    sourceWriter.commit(logger);
  }
  String generatedClass=generatedBaseClass + userAgent;
  sourceWriter=getSourceWriter(logger,context,packageName,generatedClass,generatedBaseClass,PROXY);
  if (sourceWriter != null) {
    writeGetUserAgentPropertyMethod(userAgent,sourceWriter);
    sourceWriter.commit(logger);
  }
  return packageName + "." + generatedClass;
}
