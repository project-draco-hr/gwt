{
  currentMethod=x;
  if (!x.isStatic()) {
    Set<JMethod> overrides=program.typeOracle.getAllOverrides(x);
    if (overrides.isEmpty()) {
      return true;
    }
    for (int j=0, c=x.getParams().size(); j < c; ++j) {
      JParameter param=x.getParams().get(j);
      Set<JParameter> set=paramUpRefs.get(param);
      if (set == null) {
        set=new HashSet<JParameter>();
        paramUpRefs.put(param,set);
      }
      for (      JMethod baseMethod : overrides) {
        JParameter baseParam=baseMethod.getParams().get(j);
        set.add(baseParam);
      }
    }
  }
 else   if (program.isStaticImpl(x)) {
    JMethod staticImplFor=program.staticImplFor(x);
    if (staticImplFor == null || !staticImplFor.getEnclosingType().getMethods().contains(staticImplFor)) {
      return true;
    }
    assert(x.getParams().size() == staticImplFor.getParams().size() + 1);
    for (int j=0, c=x.getParams().size(); j < c; ++j) {
      JParameter param=x.getParams().get(j);
      Set<JParameter> set=paramUpRefs.get(param);
      if (set == null) {
        set=new HashSet<JParameter>();
        paramUpRefs.put(param,set);
      }
      if (j == 0) {
        assert(param.isThis());
        set.add(param);
      }
 else {
        JParameter baseParam=staticImplFor.getParams().get(j - 1);
        set.add(baseParam);
      }
    }
  }
  return true;
}
