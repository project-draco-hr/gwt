{
  delayTestFinish(TEST_TIMEOUT);
  final SimpleFooEditor editor=new SimpleFooEditor();
  final SimpleFooDriver driver=GWT.create(SimpleFooDriver.class);
  driver.initialize(req,editor);
  req.simpleFooRequest().findSimpleFooById(1L).with(driver.getPaths()).fire(new Receiver<SimpleFooProxy>(){
    @Override public void onSuccess(    SimpleFooProxy response){
      SimpleFooRequest context=req.simpleFooRequest();
      driver.edit(response,context);
      context.persistAndReturnSelf().using(response).with(driver.getPaths()).to(new Receiver<SimpleFooProxy>(){
        @Override public void onConstraintViolation(        Set<ConstraintViolation<?>> errors){
          assertEquals(1,errors.size());
          ConstraintViolation<?> v=errors.iterator().next();
          driver.setConstraintViolations(errors);
          assertEquals(1,editor.errors.size());
          EditorError error=editor.errors.get(0);
          assertEquals("userName",error.getAbsolutePath());
          assertSame(editor.userName,error.getEditor());
          assertTrue(error.getMessage().length() > 0);
          assertEquals("userName",error.getPath());
          assertSame(v,error.getUserData());
          assertNull(error.getValue());
          finishTestAndReset();
        }
        @Override public void onSuccess(        SimpleFooProxy response){
          fail("Expected errors. You may be missing jars, see " + "the comment in RequestFactoryTest.ShouldNotSucceedReceiver.onSuccess");
        }
      }
);
      editor.userName.setValue("");
      driver.flush().fire();
    }
  }
);
}
