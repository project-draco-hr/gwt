{
  Document d=createTestDocument();
  List textLikeNodes=Arrays.asList(new Node[]{d.createTextNode(""),d.createCDATASection(""),d.createComment("")});
  StringBuffer b=new StringBuffer();
  for (char i=32; i < 30000; i++) {
    b.append(i);
  }
  for (Iterator iter=textLikeNodes.iterator(); iter.hasNext(); ) {
    CharacterData textLike=(CharacterData)iter.next();
    textLike.setData(b.toString());
    assertEquals("initialLength type:" + textLike.getNodeType(),30000 - 32,textLike.getLength());
    assertEquals("initialEquals",textLike.getData(),b.toString());
  }
  for (int i=32; i < 29900; i+=100) {
    for (Iterator iter=textLikeNodes.iterator(); iter.hasNext(); ) {
      CharacterData textLike=(CharacterData)iter.next();
      assertEquals("substring type:" + textLike.getNodeType() + " count: "+ i,b.substring(i,i + 100),textLike.substringData(i,100));
    }
  }
  for (Iterator iter=textLikeNodes.iterator(); iter.hasNext(); ) {
    StringBuffer bTemp=new StringBuffer(b.toString());
    CharacterData textLike=(CharacterData)iter.next();
    textLike.deleteData(100,100);
    bTemp.delete(100,200);
    assertEquals("deleteLength type:" + textLike.getNodeType(),bTemp.length(),textLike.getData().length());
    assertEquals("deleteEquals type:" + textLike.getNodeType(),bTemp.toString(),textLike.getData());
    bTemp.setLength(0);
  }
  for (Iterator iter=textLikeNodes.iterator(); iter.hasNext(); ) {
    StringBuffer bTemp=new StringBuffer(b.toString());
    CharacterData textLike=(CharacterData)iter.next();
    textLike.setData(bTemp.toString());
    textLike.replaceData(50,100," ");
    bTemp.replace(50,150," ");
    assertEquals("replaceLength type:" + textLike.getNodeType(),bTemp.length(),textLike.getData().length());
    assertEquals("replaceEquals type:" + textLike.getNodeType(),bTemp.toString(),textLike.getData());
    bTemp.setLength(0);
  }
  for (Iterator iter=textLikeNodes.iterator(); iter.hasNext(); ) {
    CharacterData textLike=(CharacterData)iter.next();
    textLike.appendData("!!!");
    assertTrue("endswith!!!",textLike.getData().endsWith("!!!"));
    textLike.insertData(0,"!");
    textLike.insertData(1,"@@");
    assertTrue("startsWith !@@",textLike.getData().startsWith("!@@"));
  }
  Text t=(Text)d.getDocumentElement().getChildNodes().item(3);
  Text rightT=t.splitText(5);
  assertEquals("t and leftT parent equality",t.getParentNode(),rightT.getParentNode());
  assertEquals("leftT.getPreviousSibling",rightT.getPreviousSibling(),t);
  assertEquals("t.length",t.getData().length(),5);
  assertEquals("leftT.length",rightT.getData().length(),5);
  assertEquals("t data",t.getData(),"01234");
  assertEquals("LeftT data",rightT.getData(),"56789");
  CDATASection cd=(CDATASection)d.getDocumentElement().getChildNodes().item(5);
  Text rightCD=cd.splitText(5);
  assertEquals("cd and leftCd parent equality",cd.getParentNode(),rightCD.getParentNode());
  assertEquals("leftCD.getPreviousSibling",rightCD.getPreviousSibling(),cd);
  assertEquals("cd length",cd.getData().length(),5);
  assertEquals("leftCD.length",rightCD.getData().length(),5);
  assertEquals("cd data",cd.getData(),"abcde");
  assertEquals("leftCD data",rightCD.getData(),"fghij");
  d.getDocumentElement().normalize();
  if (XMLParser.supportsCDATASection()) {
    assertEquals("normalized t",d.getDocumentElement().getChildNodes().item(3).toString(),"0123456789");
  }
 else {
    assertEquals("normalized t",d.getDocumentElement().getChildNodes().item(3).toString(),"0123456789abcdefghij");
  }
}
