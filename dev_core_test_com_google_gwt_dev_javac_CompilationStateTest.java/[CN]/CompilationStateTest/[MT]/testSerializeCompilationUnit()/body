{
  MockJavaResource resource=new MockJavaResource("test.SerializationTest"){
    @Override public CharSequence getContent(){
      StringBuilder code=new StringBuilder();
      code.append("package test;\n");
      code.append("public abstract class SerializationTest {\n");
      code.append("  public static native boolean getTrue() /*-{ return true; }-*/;\n");
      code.append("  public abstract String methodArgsTest(int arg1, Object arg2);");
      code.append("  public final String toString() { return \"SerializationTest\"; }\n");
      code.append("}\n");
      return code;
    }
  }
;
  String resourceTypeName=Shared.getTypeName(resource);
  validateCompilationState();
  oracle.add(resource);
  rebuildCompilationState();
  validateCompilationState();
  Map<String,CompilationUnit> unitMap=state.getCompilationUnitMap();
  validateSerializedTestUnit(resource,unitMap.get(resourceTypeName));
  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
  for (  CompilationUnit unit : unitMap.values()) {
    Util.writeObjectToStream(outputStream,unitMap.get(unit.getTypeName()));
  }
  int numUnits=unitMap.size();
  byte[] streamData=outputStream.toByteArray();
  ByteArrayInputStream inputStream=new ByteArrayInputStream(streamData);
  Map<String,CompilationUnit> newUnitMap=new HashMap<String,CompilationUnit>();
  for (int i=0; i < numUnits; i++) {
    CompilationUnit unit=Util.readStreamAsObject(inputStream,CompilationUnit.class);
    newUnitMap.put(unit.getTypeName(),unit);
  }
  assertEquals(unitMap.size(),newUnitMap.size());
  for (  CompilationUnit unit : unitMap.values()) {
    CompilationUnit newUnit=newUnitMap.get(unit.getTypeName());
    validateSerializedUnit(unit,newUnit);
  }
  validateSerializedTestUnit(resource,newUnitMap.get(resourceTypeName));
}
