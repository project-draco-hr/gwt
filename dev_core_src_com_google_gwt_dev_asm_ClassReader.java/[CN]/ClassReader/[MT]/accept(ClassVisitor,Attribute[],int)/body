{
  int u=header;
  char[] c=new char[maxStringLength];
  Context context=new Context();
  context.attrs=attrs;
  context.flags=flags;
  context.buffer=c;
  int access=readUnsignedShort(u);
  String name=readClass(u + 2,c);
  String superClass=readClass(u + 4,c);
  String[] interfaces=new String[readUnsignedShort(u + 6)];
  u+=8;
  for (int i=0; i < interfaces.length; ++i) {
    interfaces[i]=readClass(u,c);
    u+=2;
  }
  String signature=null;
  String sourceFile=null;
  String sourceDebug=null;
  String enclosingOwner=null;
  String enclosingName=null;
  String enclosingDesc=null;
  int anns=0;
  int ianns=0;
  int innerClasses=0;
  Attribute attributes=null;
  u=getAttributes();
  for (int i=readUnsignedShort(u); i > 0; --i) {
    String attrName=readUTF8(u + 2,c);
    if ("SourceFile".equals(attrName)) {
      sourceFile=readUTF8(u + 8,c);
    }
 else     if ("InnerClasses".equals(attrName)) {
      innerClasses=u + 8;
    }
 else     if ("EnclosingMethod".equals(attrName)) {
      enclosingOwner=readClass(u + 8,c);
      int item=readUnsignedShort(u + 10);
      if (item != 0) {
        enclosingName=readUTF8(items[item],c);
        enclosingDesc=readUTF8(items[item] + 2,c);
      }
    }
 else     if (SIGNATURES && "Signature".equals(attrName)) {
      signature=readUTF8(u + 8,c);
    }
 else     if (ANNOTATIONS && "RuntimeVisibleAnnotations".equals(attrName)) {
      anns=u + 8;
    }
 else     if ("Deprecated".equals(attrName)) {
      access|=Opcodes.ACC_DEPRECATED;
    }
 else     if ("Synthetic".equals(attrName)) {
      access|=Opcodes.ACC_SYNTHETIC | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE;
    }
 else     if ("SourceDebugExtension".equals(attrName)) {
      int len=readInt(u + 4);
      sourceDebug=readUTF(u + 8,len,new char[len]);
    }
 else     if (ANNOTATIONS && "RuntimeInvisibleAnnotations".equals(attrName)) {
      ianns=u + 8;
    }
 else     if ("BootstrapMethods".equals(attrName)) {
      int[] bootstrapMethods=new int[readUnsignedShort(u + 8)];
      for (int j=0, v=u + 10; j < bootstrapMethods.length; j++) {
        bootstrapMethods[j]=v;
        v+=2 + readUnsignedShort(v + 2) << 1;
      }
      context.bootstrapMethods=bootstrapMethods;
    }
 else {
      Attribute attr=readAttribute(attrs,attrName,u + 8,readInt(u + 4),c,-1,null);
      if (attr != null) {
        attr.next=attributes;
        attributes=attr;
      }
    }
    u+=6 + readInt(u + 4);
  }
  classVisitor.visit(readInt(items[1] - 7),access,name,signature,superClass,interfaces);
  if ((flags & SKIP_DEBUG) == 0 && (sourceFile != null || sourceDebug != null)) {
    classVisitor.visitSource(sourceFile,sourceDebug);
  }
  if (enclosingOwner != null) {
    classVisitor.visitOuterClass(enclosingOwner,enclosingName,enclosingDesc);
  }
  if (ANNOTATIONS && anns != 0) {
    for (int i=readUnsignedShort(anns), v=anns + 2; i > 0; --i) {
      v=readAnnotationValues(v + 2,c,true,classVisitor.visitAnnotation(readUTF8(v,c),true));
    }
  }
  if (ANNOTATIONS && ianns != 0) {
    for (int i=readUnsignedShort(ianns), v=ianns + 2; i > 0; --i) {
      v=readAnnotationValues(v + 2,c,true,classVisitor.visitAnnotation(readUTF8(v,c),false));
    }
  }
  while (attributes != null) {
    Attribute attr=attributes.next;
    attributes.next=null;
    classVisitor.visitAttribute(attributes);
    attributes=attr;
  }
  if (innerClasses != 0) {
    int v=innerClasses + 2;
    for (int i=readUnsignedShort(innerClasses); i > 0; --i) {
      classVisitor.visitInnerClass(readClass(v,c),readClass(v + 2,c),readUTF8(v + 4,c),readUnsignedShort(v + 6));
      v+=8;
    }
  }
  u=header + 10 + 2 * interfaces.length;
  for (int i=readUnsignedShort(u - 2); i > 0; --i) {
    u=readField(classVisitor,context,u);
  }
  u+=2;
  for (int i=readUnsignedShort(u - 2); i > 0; --i) {
    u=readMethod(classVisitor,context,u);
  }
  classVisitor.visitEnd();
}
