{
  byte[] b=this.b;
  char[] c=context.buffer;
  int maxStack=readUnsignedShort(u);
  int maxLocals=readUnsignedShort(u + 2);
  int codeLength=readInt(u + 4);
  u+=8;
  int codeStart=u;
  int codeEnd=u + codeLength;
  Label[] labels=new Label[codeLength + 2];
  readLabel(codeLength + 1,labels);
  while (u < codeEnd) {
    int offset=u - codeStart;
    int opcode=b[u] & 0xFF;
switch (ClassWriter.TYPE[opcode]) {
case ClassWriter.NOARG_INSN:
case ClassWriter.IMPLVAR_INSN:
      u+=1;
    break;
case ClassWriter.LABEL_INSN:
  readLabel(offset + readShort(u + 1),labels);
u+=3;
break;
case ClassWriter.LABELW_INSN:
readLabel(offset + readInt(u + 1),labels);
u+=5;
break;
case ClassWriter.WIDE_INSN:
opcode=b[u + 1] & 0xFF;
if (opcode == Opcodes.IINC) {
u+=6;
}
 else {
u+=4;
}
break;
case ClassWriter.TABL_INSN:
u=u + 4 - (offset & 3);
readLabel(offset + readInt(u),labels);
for (int i=readInt(u + 8) - readInt(u + 4) + 1; i > 0; --i) {
readLabel(offset + readInt(u + 12),labels);
u+=4;
}
u+=12;
break;
case ClassWriter.LOOK_INSN:
u=u + 4 - (offset & 3);
readLabel(offset + readInt(u),labels);
for (int i=readInt(u + 4); i > 0; --i) {
readLabel(offset + readInt(u + 12),labels);
u+=8;
}
u+=8;
break;
case ClassWriter.VAR_INSN:
case ClassWriter.SBYTE_INSN:
case ClassWriter.LDC_INSN:
u+=2;
break;
case ClassWriter.SHORT_INSN:
case ClassWriter.LDCW_INSN:
case ClassWriter.FIELDORMETH_INSN:
case ClassWriter.TYPE_INSN:
case ClassWriter.IINC_INSN:
u+=3;
break;
case ClassWriter.ITFMETH_INSN:
case ClassWriter.INDYMETH_INSN:
u+=5;
break;
default :
u+=4;
break;
}
}
for (int i=readUnsignedShort(u); i > 0; --i) {
Label start=readLabel(readUnsignedShort(u + 2),labels);
Label end=readLabel(readUnsignedShort(u + 4),labels);
Label handler=readLabel(readUnsignedShort(u + 6),labels);
String type=readUTF8(items[readUnsignedShort(u + 8)],c);
mv.visitTryCatchBlock(start,end,handler,type);
u+=8;
}
u+=2;
int varTable=0;
int varTypeTable=0;
boolean zip=true;
boolean unzip=(context.flags & EXPAND_FRAMES) != 0;
int stackMap=0;
int stackMapSize=0;
int frameCount=0;
Context frame=null;
Attribute attributes=null;
for (int i=readUnsignedShort(u); i > 0; --i) {
String attrName=readUTF8(u + 2,c);
if ("LocalVariableTable".equals(attrName)) {
if ((context.flags & SKIP_DEBUG) == 0) {
varTable=u + 8;
for (int j=readUnsignedShort(u + 8), v=u; j > 0; --j) {
int label=readUnsignedShort(v + 10);
if (labels[label] == null) {
readLabel(label,labels).status|=Label.DEBUG;
}
label+=readUnsignedShort(v + 12);
if (labels[label] == null) {
readLabel(label,labels).status|=Label.DEBUG;
}
v+=10;
}
}
}
 else if ("LocalVariableTypeTable".equals(attrName)) {
varTypeTable=u + 8;
}
 else if ("LineNumberTable".equals(attrName)) {
if ((context.flags & SKIP_DEBUG) == 0) {
for (int j=readUnsignedShort(u + 8), v=u; j > 0; --j) {
int label=readUnsignedShort(v + 10);
if (labels[label] == null) {
readLabel(label,labels).status|=Label.DEBUG;
}
labels[label].line=readUnsignedShort(v + 12);
v+=4;
}
}
}
 else if (FRAMES && "StackMapTable".equals(attrName)) {
if ((context.flags & SKIP_FRAMES) == 0) {
stackMap=u + 10;
stackMapSize=readInt(u + 4);
frameCount=readUnsignedShort(u + 8);
}
}
 else if (FRAMES && "StackMap".equals(attrName)) {
if ((context.flags & SKIP_FRAMES) == 0) {
zip=false;
stackMap=u + 10;
stackMapSize=readInt(u + 4);
frameCount=readUnsignedShort(u + 8);
}
}
 else {
for (int j=0; j < context.attrs.length; ++j) {
if (context.attrs[j].type.equals(attrName)) {
Attribute attr=context.attrs[j].read(this,u + 8,readInt(u + 4),c,codeStart - 8,labels);
if (attr != null) {
attr.next=attributes;
attributes=attr;
}
}
}
}
u+=6 + readInt(u + 4);
}
u+=2;
if (FRAMES && stackMap != 0) {
frame=context;
frame.offset=-1;
frame.mode=0;
frame.localCount=0;
frame.localDiff=0;
frame.stackCount=0;
frame.local=new Object[maxLocals];
frame.stack=new Object[maxStack];
if (unzip) {
getImplicitFrame(context);
}
for (int i=stackMap; i < stackMap + stackMapSize - 2; ++i) {
if (b[i] == 8) {
int v=readUnsignedShort(i + 1);
if (v >= 0 && v < codeLength) {
if ((b[codeStart + v] & 0xFF) == Opcodes.NEW) {
readLabel(v,labels);
}
}
}
}
}
u=codeStart;
while (u < codeEnd) {
int offset=u - codeStart;
Label l=labels[offset];
if (l != null) {
mv.visitLabel(l);
if ((context.flags & SKIP_DEBUG) == 0 && l.line > 0) {
mv.visitLineNumber(l.line,l);
}
}
while (FRAMES && frame != null && (frame.offset == offset || frame.offset == -1)) {
if (frame.offset != -1) {
if (!zip || unzip) {
mv.visitFrame(Opcodes.F_NEW,frame.localCount,frame.local,frame.stackCount,frame.stack);
}
 else {
mv.visitFrame(frame.mode,frame.localDiff,frame.local,frame.stackCount,frame.stack);
}
}
if (frameCount > 0) {
stackMap=readFrame(stackMap,zip,unzip,labels,frame);
--frameCount;
}
 else {
frame=null;
}
}
int opcode=b[u] & 0xFF;
switch (ClassWriter.TYPE[opcode]) {
case ClassWriter.NOARG_INSN:
mv.visitInsn(opcode);
u+=1;
break;
case ClassWriter.IMPLVAR_INSN:
if (opcode > Opcodes.ISTORE) {
opcode-=59;
mv.visitVarInsn(Opcodes.ISTORE + (opcode >> 2),opcode & 0x3);
}
 else {
opcode-=26;
mv.visitVarInsn(Opcodes.ILOAD + (opcode >> 2),opcode & 0x3);
}
u+=1;
break;
case ClassWriter.LABEL_INSN:
mv.visitJumpInsn(opcode,labels[offset + readShort(u + 1)]);
u+=3;
break;
case ClassWriter.LABELW_INSN:
mv.visitJumpInsn(opcode - 33,labels[offset + readInt(u + 1)]);
u+=5;
break;
case ClassWriter.WIDE_INSN:
opcode=b[u + 1] & 0xFF;
if (opcode == Opcodes.IINC) {
mv.visitIincInsn(readUnsignedShort(u + 2),readShort(u + 4));
u+=6;
}
 else {
mv.visitVarInsn(opcode,readUnsignedShort(u + 2));
u+=4;
}
break;
case ClassWriter.TABL_INSN:
{
u=u + 4 - (offset & 3);
int label=offset + readInt(u);
int min=readInt(u + 4);
int max=readInt(u + 8);
Label[] table=new Label[max - min + 1];
u+=12;
for (int i=0; i < table.length; ++i) {
table[i]=labels[offset + readInt(u)];
u+=4;
}
mv.visitTableSwitchInsn(min,max,labels[label],table);
break;
}
case ClassWriter.LOOK_INSN:
{
u=u + 4 - (offset & 3);
int label=offset + readInt(u);
int len=readInt(u + 4);
int[] keys=new int[len];
Label[] values=new Label[len];
u+=8;
for (int i=0; i < len; ++i) {
keys[i]=readInt(u);
values[i]=labels[offset + readInt(u + 4)];
u+=8;
}
mv.visitLookupSwitchInsn(labels[label],keys,values);
break;
}
case ClassWriter.VAR_INSN:
mv.visitVarInsn(opcode,b[u + 1] & 0xFF);
u+=2;
break;
case ClassWriter.SBYTE_INSN:
mv.visitIntInsn(opcode,b[u + 1]);
u+=2;
break;
case ClassWriter.SHORT_INSN:
mv.visitIntInsn(opcode,readShort(u + 1));
u+=3;
break;
case ClassWriter.LDC_INSN:
mv.visitLdcInsn(readConst(b[u + 1] & 0xFF,c));
u+=2;
break;
case ClassWriter.LDCW_INSN:
mv.visitLdcInsn(readConst(readUnsignedShort(u + 1),c));
u+=3;
break;
case ClassWriter.FIELDORMETH_INSN:
case ClassWriter.ITFMETH_INSN:
{
int cpIndex=items[readUnsignedShort(u + 1)];
String iowner=readClass(cpIndex,c);
cpIndex=items[readUnsignedShort(cpIndex + 2)];
String iname=readUTF8(cpIndex,c);
String idesc=readUTF8(cpIndex + 2,c);
if (opcode < Opcodes.INVOKEVIRTUAL) {
mv.visitFieldInsn(opcode,iowner,iname,idesc);
}
 else {
mv.visitMethodInsn(opcode,iowner,iname,idesc);
}
if (opcode == Opcodes.INVOKEINTERFACE) {
u+=5;
}
 else {
u+=3;
}
break;
}
case ClassWriter.INDYMETH_INSN:
{
int cpIndex=items[readUnsignedShort(u + 1)];
int bsmIndex=context.bootstrapMethods[readUnsignedShort(cpIndex)];
Handle bsm=(Handle)readConst(readUnsignedShort(bsmIndex),c);
int bsmArgCount=readUnsignedShort(bsmIndex + 2);
Object[] bsmArgs=new Object[bsmArgCount];
bsmIndex+=4;
for (int i=0; i < bsmArgCount; i++) {
bsmArgs[i]=readConst(readUnsignedShort(bsmIndex),c);
bsmIndex+=2;
}
cpIndex=items[readUnsignedShort(cpIndex + 2)];
String iname=readUTF8(cpIndex,c);
String idesc=readUTF8(cpIndex + 2,c);
mv.visitInvokeDynamicInsn(iname,idesc,bsm,bsmArgs);
u+=5;
break;
}
case ClassWriter.TYPE_INSN:
mv.visitTypeInsn(opcode,readClass(u + 1,c));
u+=3;
break;
case ClassWriter.IINC_INSN:
mv.visitIincInsn(b[u + 1] & 0xFF,b[u + 2]);
u+=3;
break;
default :
mv.visitMultiANewArrayInsn(readClass(u + 1,c),b[u + 3] & 0xFF);
u+=4;
break;
}
}
if (labels[codeLength] != null) {
mv.visitLabel(labels[codeLength]);
}
if ((context.flags & SKIP_DEBUG) == 0 && varTable != 0) {
int[] typeTable=null;
if (varTypeTable != 0) {
u=varTypeTable + 2;
typeTable=new int[readUnsignedShort(varTypeTable) * 3];
for (int i=typeTable.length; i > 0; ) {
typeTable[--i]=u + 6;
typeTable[--i]=readUnsignedShort(u + 8);
typeTable[--i]=readUnsignedShort(u);
u+=10;
}
}
u=varTable + 2;
for (int i=readUnsignedShort(varTable); i > 0; --i) {
int start=readUnsignedShort(u);
int length=readUnsignedShort(u + 2);
int index=readUnsignedShort(u + 8);
String vsignature=null;
if (typeTable != null) {
for (int j=0; j < typeTable.length; j+=3) {
if (typeTable[j] == start && typeTable[j + 1] == index) {
vsignature=readUTF8(typeTable[j + 2],c);
break;
}
}
}
mv.visitLocalVariable(readUTF8(u + 4,c),readUTF8(u + 6,c),vsignature,labels[start],labels[start + length],index);
u+=10;
}
}
while (attributes != null) {
Attribute attr=attributes.next;
attributes.next=null;
mv.visitAttribute(attributes);
attributes=attr;
}
mv.visitMaxs(maxStack,maxLocals);
}
