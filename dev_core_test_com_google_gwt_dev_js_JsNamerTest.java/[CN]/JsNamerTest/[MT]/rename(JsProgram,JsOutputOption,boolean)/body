{
  JsSymbolResolver.exec(program);
  ConfigurationProperties config=props.makeConfig();
switch (outputOption) {
case PRETTY:
    if (persistent) {
      JsIncrementalNamer.exec(program,config,jsIncrementalNamerState,null,false);
    }
 else {
      JsPrettyNamer.exec(program,config);
    }
  break;
case OBFUSCATED:
if (persistent) {
  JsIncrementalNamer.exec(program,config,jsIncrementalNamerState,null,true);
}
 else {
  JsObfuscateNamer.exec(program,config);
}
break;
case DETAILED:
JsVerboseNamer.exec(program,config);
break;
}
TextOutput text=new DefaultTextOutput(true);
JsVisitor generator=new JsSourceGenerationVisitor(text);
generator.accept(program);
return text.toString();
}
