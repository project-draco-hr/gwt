{
  SpeedTracerLogger.Event codeSplitterEvent=SpeedTracerLogger.start(CompilerEventType.CODE_SPLITTER,"phase","pickInitialLoadSequence");
  TreeLogger branch=logger.branch(TreeLogger.TRACE,"Looking up initial load sequence for split points");
  LinkedHashSet<JRunAsync> asyncsInInitialLoadSequence=new LinkedHashSet<JRunAsync>();
  List<String> initialSequence=config.getStrings(PROP_INITIAL_SEQUENCE);
  for (  String runAsyncReference : initialSequence) {
    JRunAsync runAsync=findRunAsync(runAsyncReference,program,branch);
    if (asyncsInInitialLoadSequence.contains(runAsync)) {
      branch.log(TreeLogger.ERROR,"Split point specified more than once: " + runAsyncReference);
    }
    asyncsInInitialLoadSequence.add(runAsync);
  }
  logInitialLoadSequence(logger,asyncsInInitialLoadSequence);
  installInitialLoadSequenceField(program,asyncsInInitialLoadSequence);
  program.setInitialAsyncSequence(asyncsInInitialLoadSequence);
  codeSplitterEvent.end();
}
