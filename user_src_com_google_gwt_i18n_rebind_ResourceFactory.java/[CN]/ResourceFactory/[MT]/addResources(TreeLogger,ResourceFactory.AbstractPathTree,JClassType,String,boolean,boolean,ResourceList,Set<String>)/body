{
  String targetPath=tree.getPath();
  String localizedPath=targetPath;
  if (!DEFAULT_TOKEN.equals(locale)) {
    localizedPath=targetPath + LOCALE_SEPARATOR + locale;
  }
  if (seenPaths.contains(localizedPath)) {
    return;
  }
  seenPaths.add(localizedPath);
  ClassLoader loader=AbstractResource.class.getClassLoader();
  Map<String,JClassType> matchingClasses=null;
  if (clazz != null) {
    try {
      matchingClasses=LocalizableLinkageCreator.findDerivedClasses(logger,clazz);
      matchingClasses.put(ResourceFactory.DEFAULT_TOKEN,clazz);
    }
 catch (    UnableToCompleteException e) {
    }
  }
  if (matchingClasses == null) {
    matchingClasses=new HashMap<String,JClassType>();
  }
  if (locale == null || locale.length() == 0) {
    locale=DEFAULT_TOKEN;
  }
  String partialPath=localizedPath.replace('.','/');
  for (int i=0; i < loaders.size(); i++) {
    ResourceFactory element=loaders.get(i);
    String ext="." + element.getExt();
    String path=partialPath + ext;
    InputStream m=loader.getResourceAsStream(path);
    if (m == null && partialPath.contains("$")) {
      path=partialPath.replace('$','_') + ext;
      m=loader.getResourceAsStream(path);
    }
    if (m != null) {
      AbstractResource found=element.load(m);
      found.setPath(path);
      resources.add(found);
    }
  }
  JClassType currentClass=matchingClasses.get(locale);
  if (currentClass != null) {
    AnnotationsResource resource;
    try {
      resource=new AnnotationsResource(logger,currentClass,locale,isConstants);
      if (resource.notEmpty()) {
        resource.setPath(currentClass.getQualifiedSourceName());
        resources.add(resource);
      }
    }
 catch (    AnnotationsError e) {
      logger.log(TreeLogger.ERROR,e.getMessage(),e);
    }
  }
  addPrimaryParent(logger,tree,clazz,locale,isConstants,resources,seenPaths);
  if (useAlternateParents) {
    addAlternativeParents(logger,tree,clazz,locale,useAlternateParents,isConstants,resources,seenPaths);
  }
}
