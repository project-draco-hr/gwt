{
  String targetPath=tree.getPath();
  ClassLoader loader=AbstractResource.class.getClassLoader();
  Map<String,JClassType> matchingClasses=null;
  if (clazz != null) {
    try {
      matchingClasses=LocalizableLinkageCreator.findDerivedClasses(logger,clazz);
      matchingClasses.put(ResourceFactory.DEFAULT_TOKEN,clazz);
    }
 catch (    UnableToCompleteException e) {
    }
  }
  if (matchingClasses == null) {
    matchingClasses=new HashMap<String,JClassType>();
  }
  if (locale == null || locale.length() == 0) {
    locale=DEFAULT_TOKEN;
  }
  String localizedPath=targetPath;
  if (!DEFAULT_TOKEN.equals(locale)) {
    localizedPath=targetPath + LOCALE_SEPARATOR + locale;
  }
  AbstractResource result=cache.get(localizedPath);
  if (result != null) {
    if (result == NOT_FOUND) {
      return null;
    }
 else {
      return result;
    }
  }
  String partialPath=localizedPath.replace('.','/');
  AbstractResource parent=findPrimaryParent(logger,tree,clazz,locale,isConstants);
  List<AbstractResource> altParents=findAlternativeParents(logger,tree,clazz,locale,isConstants);
  AbstractResource found=null;
  JClassType currentClass=matchingClasses.get(locale);
  if (currentClass != null) {
    AnnotationsResource resource;
    try {
      resource=new AnnotationsResource(logger,currentClass,isConstants);
      if (resource.notEmpty()) {
        found=resource;
        found.setPath(currentClass.getQualifiedSourceName());
      }
    }
 catch (    AnnotationsError e) {
      logger.log(TreeLogger.ERROR,e.getMessage(),e);
    }
  }
  for (int i=0; found == null && i < loaders.size(); i++) {
    ResourceFactory element=loaders.get(i);
    String path=partialPath + "." + element.getExt();
    InputStream m=loader.getResourceAsStream(path);
    if (m != null) {
      found=element.load(m);
      found.setPath(path);
    }
  }
  if (found == null) {
    if (parent != null) {
      found=parent;
    }
 else {
      found=NOT_FOUND;
    }
  }
 else {
    found.setPrimaryParent(parent);
    found.setLocaleName(locale);
    for (int j=0; j < altParents.size(); j++) {
      AbstractResource altParent=altParents.get(j);
      found.addAlternativeParent(altParent);
    }
    found.checkKeys();
  }
  cache.put(localizedPath,found);
  if (found == NOT_FOUND) {
    if (required) {
      throw new MissingResourceException("Could not find any resource associated with " + tree.getPath(),null,null);
    }
 else {
      return null;
    }
  }
  return found;
}
