{
  this.typeVariables=Binding.NO_TYPE_VARIABLES;
  this.superInterfaces=Binding.NO_SUPERINTERFACES;
  this.memberTypes=Binding.NO_MEMBER_TYPES;
  IBinaryNestedType[] memberTypeStructures=binaryType.getMemberTypes();
  if (memberTypeStructures != null) {
    int size=memberTypeStructures.length;
    if (size > 0) {
      this.memberTypes=new ReferenceBinding[size];
      for (int i=0; i < size; i++)       this.memberTypes[i]=environment.getTypeFromConstantPoolName(memberTypeStructures[i].getName(),0,-1,false,null);
      this.tagBits|=TagBits.HasUnresolvedMemberTypes;
    }
  }
  long sourceLevel=environment.globalOptions.sourceLevel;
  char[] typeSignature=null;
  if (sourceLevel >= ClassFileConstants.JDK1_5) {
    typeSignature=binaryType.getGenericSignature();
    this.tagBits|=binaryType.getTagBits();
  }
  char[][][] missingTypeNames=binaryType.getMissingTypeNames();
  if (typeSignature == null) {
    char[] superclassName=binaryType.getSuperclassName();
    if (superclassName != null) {
      this.superclass=environment.getTypeFromConstantPoolName(superclassName,0,-1,false,missingTypeNames);
      this.tagBits|=TagBits.HasUnresolvedSuperclass;
    }
    this.superInterfaces=Binding.NO_SUPERINTERFACES;
    char[][] interfaceNames=binaryType.getInterfaceNames();
    if (interfaceNames != null) {
      int size=interfaceNames.length;
      if (size > 0) {
        this.superInterfaces=new ReferenceBinding[size];
        for (int i=0; i < size; i++)         this.superInterfaces[i]=environment.getTypeFromConstantPoolName(interfaceNames[i],0,-1,false,missingTypeNames);
        this.tagBits|=TagBits.HasUnresolvedSuperinterfaces;
      }
    }
  }
 else {
    SignatureWrapper wrapper=new SignatureWrapper(typeSignature);
    if (wrapper.signature[wrapper.start] == '<') {
      wrapper.start++;
      this.typeVariables=createTypeVariables(wrapper,true,missingTypeNames);
      wrapper.start++;
      this.tagBits|=TagBits.HasUnresolvedTypeVariables;
      this.modifiers|=ExtraCompilerModifiers.AccGenericSignature;
    }
    this.superclass=(ReferenceBinding)environment.getTypeFromTypeSignature(wrapper,Binding.NO_TYPE_VARIABLES,this,missingTypeNames);
    this.tagBits|=TagBits.HasUnresolvedSuperclass;
    this.superInterfaces=Binding.NO_SUPERINTERFACES;
    if (!wrapper.atEnd()) {
      java.util.ArrayList types=new java.util.ArrayList(2);
      do {
        types.add(environment.getTypeFromTypeSignature(wrapper,Binding.NO_TYPE_VARIABLES,this,missingTypeNames));
      }
 while (!wrapper.atEnd());
      this.superInterfaces=new ReferenceBinding[types.size()];
      types.toArray(this.superInterfaces);
      this.tagBits|=TagBits.HasUnresolvedSuperinterfaces;
    }
  }
  if (needFieldsAndMethods) {
    createFields(binaryType.getFields(),sourceLevel,missingTypeNames);
    createMethods(binaryType.getMethods(),sourceLevel,missingTypeNames);
  }
 else {
    this.fields=Binding.NO_FIELDS;
    this.methods=Binding.NO_METHODS;
  }
  if (this.environment.globalOptions.storeAnnotations)   setAnnotations(createAnnotations(binaryType.getAnnotations(),this.environment,missingTypeNames));
}
