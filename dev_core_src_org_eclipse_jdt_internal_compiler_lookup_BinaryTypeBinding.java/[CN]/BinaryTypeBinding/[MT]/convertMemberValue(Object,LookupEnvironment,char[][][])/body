{
  if (binaryValue == null)   return null;
  if (binaryValue instanceof Constant)   return binaryValue;
  if (binaryValue instanceof ClassSignature) {
    TypeBinding typeFromSignature=env.getTypeFromSignature(((ClassSignature)binaryValue).getTypeName(),0,-1,false,null,missingTypeNames);
    if (typeFromSignature.isBaseType()) {
      return typeFromSignature;
    }
    return resolveType((ReferenceBinding)typeFromSignature,env,false);
  }
  if (binaryValue instanceof IBinaryAnnotation)   return createAnnotation((IBinaryAnnotation)binaryValue,env,missingTypeNames);
  if (binaryValue instanceof EnumConstantSignature) {
    EnumConstantSignature ref=(EnumConstantSignature)binaryValue;
    ReferenceBinding enumType=(ReferenceBinding)env.getTypeFromSignature(ref.getTypeName(),0,-1,false,null,missingTypeNames);
    enumType=resolveType(enumType,env,false);
    return enumType.getField(ref.getEnumConstantName(),false);
  }
  if (binaryValue instanceof Object[]) {
    Object[] objects=(Object[])binaryValue;
    int length=objects.length;
    if (length == 0)     return objects;
    Object[] values=new Object[length];
    for (int i=0; i < length; i++)     values[i]=convertMemberValue(objects[i],env,missingTypeNames);
    return values;
  }
  throw new IllegalStateException();
}
