{
  logger=logger.branch(TreeLogger.TRACE,"Removing units with errors");
  boolean anyRemoved=false;
  for (  CompilationUnit unit : units) {
    if (unit.getState() != State.COMPILED) {
      continue;
    }
    CompilationResult result=unit.getJdtCud().compilationResult();
    if (result.hasProblems()) {
      TreeLogger branch=null;
      for (      CategorizedProblem problem : result.getProblems()) {
        TreeLogger.Type logLevel;
        if (problem.isError()) {
          logLevel=TreeLogger.ERROR;
        }
 else         if (problem.isWarning() && problem instanceof GWTProblem) {
          logLevel=TreeLogger.WARN;
        }
 else {
          continue;
        }
        StringBuffer msgBuf=new StringBuffer();
        int line=problem.getSourceLineNumber();
        if (line > 0) {
          msgBuf.append("Line ");
          msgBuf.append(line);
          msgBuf.append(": ");
        }
        msgBuf.append(problem.getMessage());
        HelpInfo helpInfo=null;
        if (problem instanceof GWTProblem) {
          GWTProblem gwtProblem=(GWTProblem)problem;
          helpInfo=gwtProblem.getHelpInfo();
        }
        if (branch == null) {
          Type branchType=result.hasErrors() ? TreeLogger.ERROR : TreeLogger.WARN;
          String branchString=result.hasErrors() ? "Errors" : "Warnings";
          branch=logger.branch(branchType,branchString + " in '" + unit.getDisplayLocation()+ "'",null);
        }
        branch.log(logLevel,msgBuf.toString(),null,helpInfo);
      }
      if (branch != null) {
        Util.maybeDumpSource(branch,unit.getDisplayLocation(),unit.getSource(),unit.getTypeName());
      }
      if (result.hasErrors()) {
        unit.setState(State.ERROR);
        anyRemoved=true;
      }
    }
  }
  return anyRemoved;
}
