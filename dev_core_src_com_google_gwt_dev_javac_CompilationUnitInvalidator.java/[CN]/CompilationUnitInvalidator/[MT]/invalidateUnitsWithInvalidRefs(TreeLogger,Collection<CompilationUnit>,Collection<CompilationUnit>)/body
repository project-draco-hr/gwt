{
  logger=logger.branch(TreeLogger.TRACE,"Removing invalidated units");
  Set<String> knownValidRefs=new HashSet<String>();
  for (  CompilationUnit unit : knownUnits) {
    if (unit.isCompiled()) {
      knownValidRefs.add(unit.getDisplayLocation());
    }
  }
  Set<CompilationUnit> currentlyValidUnitsToCheck=new HashSet<CompilationUnit>();
  for (  CompilationUnit unit : unitsToCheck) {
    if (unit.isCompiled()) {
      currentlyValidUnitsToCheck.add(unit);
      knownValidRefs.add(unit.getDisplayLocation());
    }
  }
  boolean changed;
  do {
    changed=false;
    for (Iterator<CompilationUnit> it=currentlyValidUnitsToCheck.iterator(); it.hasNext(); ) {
      CompilationUnit currentlyValidUnitToCheck=it.next();
      TreeLogger branch=null;
      for (      String ref : currentlyValidUnitToCheck.getFileNameRefs()) {
        if (!knownValidRefs.contains(ref)) {
          if (branch == null) {
            branch=logger.branch(TreeLogger.DEBUG,"Compilation unit '" + currentlyValidUnitToCheck + "' is removed due to invalid reference(s):");
            it.remove();
            knownValidRefs.remove(currentlyValidUnitToCheck.getDisplayLocation());
            currentlyValidUnitToCheck.setFresh();
            changed=true;
          }
          branch.log(TreeLogger.DEBUG,ref);
        }
      }
    }
  }
 while (changed);
}
