{
  logger=logger.branch(TreeLogger.TRACE,"Removing invalidated units");
  Set<CompilationUnit> currentlyValidUnits=new LinkedHashSet<CompilationUnit>();
  Set<ContentId> currentlyValidRefs=new HashSet<ContentId>(knownValidRefs);
  for (  CompilationUnit unit : units) {
    if (!unit.isError()) {
      currentlyValidUnits.add(unit);
      currentlyValidRefs.add(unit.getContentId());
    }
  }
  boolean changed;
  do {
    changed=false;
    for (Iterator<CompilationUnit> it=currentlyValidUnits.iterator(); it.hasNext(); ) {
      CompilationUnit unitToCheck=it.next();
      List<String> invalidRefs=Lists.create();
      for (      ContentId ref : unitToCheck.getDependencies()) {
        if (!currentlyValidRefs.contains(ref)) {
          invalidRefs=Lists.add(invalidRefs,ref.get());
        }
      }
      if (invalidRefs.size() > 0) {
        it.remove();
        currentlyValidRefs.remove(unitToCheck.getContentId());
        changed=true;
        TreeLogger branch=logger.branch(TreeLogger.DEBUG,"Compilation unit '" + unitToCheck + "' is removed due to invalid reference(s):");
        Lists.sort(invalidRefs);
        for (        String ref : invalidRefs) {
          branch.log(TreeLogger.DEBUG,ref);
        }
      }
    }
  }
 while (changed);
  units.retainAll(currentlyValidUnits);
}
