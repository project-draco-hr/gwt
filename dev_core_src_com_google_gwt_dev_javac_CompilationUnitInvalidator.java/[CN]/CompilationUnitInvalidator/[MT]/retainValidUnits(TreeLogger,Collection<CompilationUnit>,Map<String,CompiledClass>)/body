{
  logger=logger.branch(TreeLogger.TRACE,"Removing invalidated units");
  Multimap<String,CompilationUnit> depsNeeded=HashMultimap.create();
  Set<String> depsProvided=new HashSet<String>();
  Set<CompilationUnit> allBrokenUnits=new HashSet<CompilationUnit>();
  for (  CompilationUnit unit : units) {
    if (unit.isError()) {
      allBrokenUnits.add(unit);
    }
 else {
      for (      CompiledClass cc : unit.getCompiledClasses()) {
        depsProvided.add(cc.getSourceName());
      }
      for (      String ref : unit.getDependencies().getApiRefs()) {
        CompiledClass compiledClass=validClasses.get(ref);
        if ((compiledClass == null) || compiledClass.getUnit().isError()) {
          depsNeeded.put(ref,unit);
        }
      }
    }
  }
  Multimap<String,CompilationUnit> missing;
  do {
    missing=HashMultimap.create();
    missing.putAll(depsNeeded);
    missing.keySet().removeAll(depsProvided);
    for (    Map.Entry<String,CompilationUnit> brokenEntry : missing.entries()) {
      CompilationUnit brokenUnit=brokenEntry.getValue();
      if (allBrokenUnits.add(brokenUnit)) {
        for (        CompiledClass cc : brokenUnit.getCompiledClasses()) {
          depsProvided.remove(cc.getSourceName());
        }
        TreeLogger branch=logger.branch(TreeLogger.DEBUG,"Compilation unit '" + brokenUnit + "' is removed due to invalid reference(s):");
        branch.log(TreeLogger.DEBUG,brokenEntry.getKey());
      }
    }
    depsNeeded.keySet().removeAll(missing.keySet());
  }
 while (!missing.isEmpty());
  units.removeAll(allBrokenUnits);
}
