{
  this.baseClass=baseClass;
  this.implClassName=implClassName;
  this.oracle=oracle;
  this.logger=logger;
  this.templatePath=templatePath;
  this.fieldManager=fieldManager;
  this.messages=messagesWriter;
  this.designTime=designTime;
  this.uiBinderCtx=uiBinderCtx;
  this.useSafeHtmlTemplates=useSafeHtmlTemplates;
  this.useLazyWidgetBuilders=useLazyWidgetBuilders;
  this.binderUri=binderUri;
  this.resourceOracle=resourceOracle;
  this.htmlTemplates=new HtmlTemplatesWriter(fieldManager,logger);
  JClassType uibinderItself=oracle.findType(UiBinder.class.getCanonicalName());
  if (uibinderItself.equals(baseClass)) {
    die("You must use a subtype of UiBinder in GWT.create(). E.g.,\n" + "  interface Binder extends UiBinder<Widget, MyClass> {}\n" + "  GWT.create(Binder.class);");
  }
  JClassType[] uiBinderTypes=baseClass.getImplementedInterfaces();
  if (uiBinderTypes.length == 0) {
    throw new RuntimeException("No implemented interfaces for " + baseClass.getName());
  }
  JClassType uiBinderType=uiBinderTypes[0];
  JClassType[] typeArgs=uiBinderType.isParameterized() == null ? new JClassType[0] : uiBinderType.isParameterized().getTypeArgs();
  String binderType=uiBinderType.getName();
  JClassType uiRendererClass=getOracle().findType(UiRenderer.class.getName());
  if (uiBinderType.isAssignableTo(uibinderItself)) {
    if (typeArgs.length < 2) {
      throw new RuntimeException("Root and owner type parameters are required for type %s" + binderType);
    }
    uiRootType=typeArgs[0];
    uiOwnerType=typeArgs[1];
    isRenderer=false;
  }
 else   if (uiBinderType.isAssignableTo(uiRendererClass)) {
    if (typeArgs.length >= 1) {
      throw new RuntimeException("UiRenderer is not a parameterizable type in " + binderType);
    }
    if (!useSafeHtmlTemplates) {
      die("Configuration property UiBinder.useSafeHtmlTemplates\n" + "  must be set to true to generate a UiRenderer");
    }
    if (!useLazyWidgetBuilders) {
      die("Configuration property UiBinder.useLazyWidgetBuilders\n" + "  must be set to true to generate a UiRenderer");
    }
    uiOwnerType=uiBinderType;
    uiRootType=null;
    isRenderer=true;
  }
 else {
    die(baseClass.getName() + " must implement UiBinder or UiRenderer");
    throw new UnableToCompleteException();
  }
  isRenderableClassType=oracle.findType(IsRenderable.class.getCanonicalName());
  lazyDomElementClass=oracle.findType(LazyDomElement.class.getCanonicalName());
  ownerClass=new OwnerClass(uiOwnerType,logger,uiBinderCtx);
  bundleClass=new ImplicitClientBundle(baseClass.getPackage().getName(),this.implClassName,CLIENT_BUNDLE_FIELD,logger);
  handlerEvaluator=new HandlerEvaluator(ownerClass,logger,oracle,useLazyWidgetBuilders);
  attributeParsers=new AttributeParsers(oracle,fieldManager,logger);
}
