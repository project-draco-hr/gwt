{
  this.baseClass=baseClass;
  this.implClassName=implClassName;
  this.oracle=oracle;
  this.logger=logger;
  this.templatePath=templatePath;
  this.messages=new MessagesWriter(BINDER_URI,logger,templatePath,baseClass.getPackage().getName(),this.implClassName);
  JClassType uibinderItself=oracle.findType(UiBinder.class.getCanonicalName());
  if (uibinderItself.equals(baseClass)) {
    die("You must use a subtype of UiBinder in GWT.create(). E.g.,\n" + "  interface Binder extends UiBinder<Widget, MyClass> {}\n" + "  GWT.create(Binder.class);");
  }
  JClassType[] uiBinderTypes=baseClass.getImplementedInterfaces();
  if (uiBinderTypes.length == 0) {
    throw new RuntimeException("No implemented interfaces for " + baseClass.getName());
  }
  JClassType uiBinderType=uiBinderTypes[0];
  JClassType[] typeArgs=uiBinderType.isParameterized().getTypeArgs();
  if (typeArgs.length < 2) {
    throw new RuntimeException("Root and owner type parameters are required for type %s" + uiBinderType.getName());
  }
  uiRootType=typeArgs[0];
  uiOwnerType=typeArgs[1];
  ownerClass=new OwnerClass(uiOwnerType,logger);
  bundleClass=new ImplicitClientBundle(baseClass.getPackage().getName(),this.implClassName,CLIENT_BUNDLE_FIELD,logger);
  handlerEvaluator=new HandlerEvaluator(ownerClass,logger,oracle);
  fieldManager=new FieldManager(logger);
  attributeParsers=new AttributeParsers(oracle);
  bundleParsers=new BundleAttributeParsers(oracle,gwtPrefix,logger,getOwnerClass(),templatePath,uiOwnerType);
}
