{
  (new ScannerBase<Void>(){
    @Override public Void visitExecutable(    ExecutableElement x,    State state){
      checkForAnnotation(x);
      return null;
    }
    @Override public Void visitType(    TypeElement x,    State state){
      checkForAnnotation(x);
      if (!x.getSuperclass().getKind().equals(TypeKind.NONE)) {
        scan(state.types.asElement(x.getSuperclass()),state);
      }
      for (      TypeMirror intf : x.getInterfaces()) {
        scan(state.types.asElement(intf),state);
      }
      return null;
    }
    private void checkForAnnotation(    Element x){
      for (      AnnotationMirror mirror : x.getAnnotationMirrors()) {
        if (!types.isSameType(mirror.getAnnotationType(),extraTypesAnnotation)) {
          continue;
        }
        AnnotationValue value=mirror.getElementValues().values().iterator().next();
        @SuppressWarnings("unchecked") List<? extends AnnotationValue> valueList=(List<? extends AnnotationValue>)value.getValue();
        for (        AnnotationValue clazz : valueList) {
          TypeMirror type=(TypeMirror)clazz.getValue();
          maybeScanProxy((TypeElement)types.asElement(type));
        }
      }
    }
  }
).scan(x,this);
}
