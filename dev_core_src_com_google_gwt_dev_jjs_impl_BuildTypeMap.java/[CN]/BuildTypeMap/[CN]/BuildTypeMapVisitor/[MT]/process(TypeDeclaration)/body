{
  try {
    char[][] name=typeDeclaration.binding.compoundName;
    SourceTypeBinding binding=typeDeclaration.binding;
    if (binding instanceof LocalTypeBinding) {
      char[] localName=binding.constantPoolName();
      if (localName == null) {
        return false;
      }
      for (int i=0, c=localName.length; i < c; ++i) {
        if (localName[i] == '/') {
          localName[i]='.';
        }
      }
      name=new char[1][0];
      name[0]=localName;
    }
    SourceInfo info=makeSourceInfo(typeDeclaration);
    JDeclaredType newType;
    if (binding.isClass()) {
      newType=program.createClass(info,name,binding.isAbstract(),binding.isFinal());
    }
 else     if (binding.isInterface() || binding.isAnnotationType()) {
      newType=program.createInterface(info,name);
    }
 else     if (binding.isEnum()) {
      if (binding.isAnonymousType()) {
        newType=program.createClass(info,name,false,true);
      }
 else {
        newType=program.createEnum(info,name);
      }
    }
 else {
      assert(false);
      return false;
    }
    info.addCorrelation(program.getCorrelator().by(newType));
    JMethod clinit=program.createMethod(info.makeChild(BuildTypeMapVisitor.class,"Class initializer"),"$clinit".toCharArray(),newType,program.getTypeVoid(),false,true,true,true,false);
    clinit.freezeParamTypes();
    if (newType instanceof JClassType) {
      JMethod init=program.createMethod(info.makeChild(BuildTypeMapVisitor.class,"Instance initializer"),"$init".toCharArray(),newType,program.getTypeVoid(),false,false,true,true,false);
      init.freezeParamTypes();
    }
    typeMap.put(binding,newType);
    return true;
  }
 catch (  Throwable e) {
    throw translateException(typeDeclaration,e);
  }
}
