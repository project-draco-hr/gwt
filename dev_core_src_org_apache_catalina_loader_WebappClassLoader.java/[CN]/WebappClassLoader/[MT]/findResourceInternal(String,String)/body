{
  if (!started) {
    log.info(sm.getString("webappClassLoader.stopped"));
    return null;
  }
  if ((name == null) || (path == null))   return null;
  ResourceEntry entry=(ResourceEntry)resourceEntries.get(name);
  if (entry != null)   return entry;
  int contentLength=-1;
  InputStream binaryStream=null;
  int jarFilesLength=jarFiles.length;
  int repositoriesLength=repositories.length;
  int i;
  Resource resource=null;
  for (i=0; (entry == null) && (i < repositoriesLength); i++) {
    try {
      String fullPath=repositories[i] + path;
      Object lookupResult=resources.lookup(fullPath);
      if (lookupResult instanceof Resource) {
        resource=(Resource)lookupResult;
      }
      if (securityManager != null) {
        PrivilegedAction dp=new PrivilegedFindResource(files[i],path);
        entry=(ResourceEntry)AccessController.doPrivileged(dp);
      }
 else {
        entry=findResourceInternal(files[i],path);
      }
      ResourceAttributes attributes=(ResourceAttributes)resources.getAttributes(fullPath);
      contentLength=(int)attributes.getContentLength();
      entry.lastModified=attributes.getLastModified();
      if (resource != null) {
        try {
          binaryStream=resource.streamContent();
        }
 catch (        IOException e) {
          return null;
        }
synchronized (allPermission) {
          int j;
          long[] result2=new long[lastModifiedDates.length + 1];
          for (j=0; j < lastModifiedDates.length; j++) {
            result2[j]=lastModifiedDates[j];
          }
          result2[lastModifiedDates.length]=entry.lastModified;
          lastModifiedDates=result2;
          String[] result=new String[paths.length + 1];
          for (j=0; j < paths.length; j++) {
            result[j]=paths[j];
          }
          result[paths.length]=fullPath;
          paths=result;
        }
      }
    }
 catch (    NamingException e) {
    }
  }
  if ((entry == null) && (notFoundResources.containsKey(name)))   return null;
  JarEntry jarEntry=null;
synchronized (jarFiles) {
    openJARs();
    for (i=0; (entry == null) && (i < jarFilesLength); i++) {
      jarEntry=jarFiles[i].getJarEntry(path);
      if (jarEntry != null) {
        entry=new ResourceEntry();
        try {
          entry.codeBase=getURL(jarRealFiles[i]);
          String jarFakeUrl=getURI(jarRealFiles[i]).toString();
          jarFakeUrl="jar:" + jarFakeUrl + "!/"+ path;
          entry.source=new URL(jarFakeUrl);
          entry.lastModified=jarRealFiles[i].lastModified();
        }
 catch (        MalformedURLException e) {
          return null;
        }
        contentLength=(int)jarEntry.getSize();
        try {
          entry.manifest=jarFiles[i].getManifest();
          binaryStream=jarFiles[i].getInputStream(jarEntry);
        }
 catch (        IOException e) {
          return null;
        }
        if (!(path.endsWith(".class"))) {
          byte[] buf=new byte[1024];
          File resourceFile=new File(loaderDir,jarEntry.getName());
          if (!resourceFile.exists()) {
            Enumeration entries=jarFiles[i].entries();
            while (entries.hasMoreElements()) {
              JarEntry jarEntry2=(JarEntry)entries.nextElement();
              if (!(jarEntry2.isDirectory()) && (!jarEntry2.getName().endsWith(".class"))) {
                resourceFile=new File(loaderDir,jarEntry2.getName());
                resourceFile.getParentFile().mkdirs();
                FileOutputStream os=null;
                InputStream is=null;
                try {
                  is=jarFiles[i].getInputStream(jarEntry2);
                  os=new FileOutputStream(resourceFile);
                  while (true) {
                    int n=is.read(buf);
                    if (n <= 0) {
                      break;
                    }
                    os.write(buf,0,n);
                  }
                }
 catch (                IOException e) {
                }
 finally {
                  try {
                    if (is != null) {
                      is.close();
                    }
                  }
 catch (                  IOException e) {
                  }
                  try {
                    if (os != null) {
                      os.close();
                    }
                  }
 catch (                  IOException e) {
                  }
                }
              }
            }
          }
        }
      }
    }
    if (entry == null) {
synchronized (notFoundResources) {
        notFoundResources.put(name,name);
      }
      return null;
    }
    if (binaryStream != null) {
      byte[] binaryContent=new byte[contentLength];
      try {
        int pos=0;
        while (true) {
          int n=binaryStream.read(binaryContent,pos,binaryContent.length - pos);
          if (n <= 0)           break;
          pos+=n;
        }
        binaryStream.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
        return null;
      }
catch (      Exception e) {
        e.printStackTrace();
        return null;
      }
      entry.binaryContent=binaryContent;
      if (jarEntry != null) {
        entry.certificates=jarEntry.getCertificates();
      }
    }
  }
synchronized (resourceEntries) {
    ResourceEntry entry2=(ResourceEntry)resourceEntries.get(name);
    if (entry2 == null) {
      resourceEntries.put(name,entry);
    }
 else {
      entry=entry2;
    }
  }
  return entry;
}
