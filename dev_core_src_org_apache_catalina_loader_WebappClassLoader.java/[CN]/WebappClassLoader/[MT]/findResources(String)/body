{
  if (log.isDebugEnabled())   log.debug("    findResources(" + name + ")");
  Vector result=new Vector();
  int jarFilesLength=jarFiles.length;
  int repositoriesLength=repositories.length;
  int i;
  for (i=0; i < repositoriesLength; i++) {
    try {
      String fullPath=repositories[i] + name;
      resources.lookup(fullPath);
      try {
        result.addElement(getURI(new File(files[i],name)));
      }
 catch (      MalformedURLException e) {
      }
    }
 catch (    NamingException e) {
    }
  }
synchronized (jarFiles) {
    openJARs();
    for (i=0; i < jarFilesLength; i++) {
      JarEntry jarEntry=jarFiles[i].getJarEntry(name);
      if (jarEntry != null) {
        try {
          String jarFakeUrl=getURI(jarRealFiles[i]).toString();
          jarFakeUrl="jar:" + jarFakeUrl + "!/"+ name;
          result.addElement(new URL(jarFakeUrl));
        }
 catch (        MalformedURLException e) {
        }
      }
    }
  }
  if (hasExternalRepositories) {
    Enumeration otherResourcePaths=super.findResources(name);
    while (otherResourcePaths.hasMoreElements()) {
      result.addElement(otherResourcePaths.nextElement());
    }
  }
  return result.elements();
}
