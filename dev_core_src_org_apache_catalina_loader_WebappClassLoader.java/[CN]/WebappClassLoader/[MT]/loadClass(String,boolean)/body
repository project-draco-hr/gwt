{
  if (log.isDebugEnabled())   log.debug("loadClass(" + name + ", "+ resolve+ ")");
  Class clazz=null;
  if (!started) {
    log.info(sm.getString("webappClassLoader.stopped"));
    throw new ThreadDeath();
  }
  clazz=findLoadedClass0(name);
  if (clazz != null) {
    if (log.isDebugEnabled())     log.debug("  Returning class from cache");
    if (resolve)     resolveClass(clazz);
    return (clazz);
  }
  clazz=findLoadedClass(name);
  if (clazz != null) {
    if (log.isDebugEnabled())     log.debug("  Returning class from cache");
    if (resolve)     resolveClass(clazz);
    return (clazz);
  }
  try {
    clazz=system.loadClass(name);
    if (clazz != null) {
      if (resolve)       resolveClass(clazz);
      return (clazz);
    }
  }
 catch (  ClassNotFoundException e) {
  }
  if (securityManager != null) {
    int i=name.lastIndexOf('.');
    if (i >= 0) {
      try {
        securityManager.checkPackageAccess(name.substring(0,i));
      }
 catch (      SecurityException se) {
        String error="Security Violation, attempt to use " + "Restricted Class: " + name;
        log.info(error,se);
        throw new ClassNotFoundException(error,se);
      }
    }
  }
  boolean delegateLoad=delegate || filter(name);
  if (delegateLoad) {
    if (log.isDebugEnabled())     log.debug("  Delegating to parent classloader1 " + parent);
    ClassLoader loader=parent;
    if (loader == null)     loader=system;
    try {
      clazz=loader.loadClass(name);
      if (clazz != null) {
        if (log.isDebugEnabled())         log.debug("  Loading class from parent");
        if (resolve)         resolveClass(clazz);
        return (clazz);
      }
    }
 catch (    ClassNotFoundException e) {
      ;
    }
  }
  if (log.isDebugEnabled())   log.debug("  Searching local repositories");
  try {
    clazz=findClass(name);
    if (clazz != null) {
      if (log.isDebugEnabled())       log.debug("  Loading class from local repository");
      if (resolve)       resolveClass(clazz);
      return (clazz);
    }
  }
 catch (  ClassNotFoundException e) {
    ;
  }
  if (!delegateLoad) {
    if (log.isDebugEnabled())     log.debug("  Delegating to parent classloader at end: " + parent);
    ClassLoader loader=parent;
    if (loader == null)     loader=system;
    try {
      clazz=loader.loadClass(name);
      if (clazz != null) {
        if (log.isDebugEnabled())         log.debug("  Loading class from parent");
        if (resolve)         resolveClass(clazz);
        return (clazz);
      }
    }
 catch (    ClassNotFoundException e) {
      ;
    }
  }
  throw new ClassNotFoundException(name);
}
