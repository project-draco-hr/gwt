{
  if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {
    return Integer.toString((int)value,1 << shift);
  }
  final int bufSize=64 / shift;
  long bitMask=(1 << shift) - 1;
  char[] buf=new char[bufSize];
  char[] digits=__Digits.digits;
  int pos=bufSize - 1;
  if (value >= 0) {
    while (value > bitMask) {
      buf[pos--]=digits[(int)(value & bitMask)];
      value>>=shift;
    }
  }
 else {
    while (pos > 0) {
      buf[pos--]=digits[(int)(value & bitMask)];
      value>>=shift;
    }
  }
  buf[pos]=digits[(int)(value & bitMask)];
  return String.__valueOf(buf,pos,bufSize);
}
