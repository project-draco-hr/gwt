{
  try {
    super.process(cud,i);
  }
 catch (  AbortCompilation e) {
    abortCount++;
    String filename=new String(cud.getFileName());
    logger.log(TreeLogger.Type.ERROR,"JDT aborted: " + filename + ": "+ e.problem.getMessage());
    return;
  }
catch (  RuntimeException e) {
    logger.log(TreeLogger.Type.ERROR,"JDT died after " + abortCount + " previous errors",e);
    throw new AbortCompilation(cud.compilationResult,e);
  }
  ClassFile[] classFiles=cud.compilationResult().getClassFiles();
  Map<ClassFile,CompiledClass> results=new LinkedHashMap<ClassFile,CompiledClass>();
  for (  ClassFile classFile : classFiles) {
    createCompiledClass(classFile,results);
  }
  List<CompiledClass> compiledClasses=new ArrayList<CompiledClass>(results.values());
  addBinaryTypes(compiledClasses);
  ICompilationUnit icu=cud.compilationResult().compilationUnit;
  Adapter adapter=(Adapter)icu;
  CompilationUnitBuilder builder=adapter.getBuilder();
  processor.process(builder,cud,compiledClasses);
}
