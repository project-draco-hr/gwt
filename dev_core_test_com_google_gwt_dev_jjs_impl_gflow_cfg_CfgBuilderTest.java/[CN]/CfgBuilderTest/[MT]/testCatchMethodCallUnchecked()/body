{
  assertCfg("void","try {","  if (b) throwUncheckedException();","  k++;","} catch (UncheckedException1 e) {","  i++;","} catch (RuntimeException e) {","  l++;","}","j++;").is("BLOCK -> [*]","TRY -> [*]","BLOCK -> [*]","STMT -> [*]","READ(b) -> [*]","COND (EntryPoint.b) -> [THEN=*, ELSE=1]","STMT -> [*]","OPTTHROW(throwUncheckedException()) -> [NOTHROW=*, RE=2, RE=3]","CALL(throwUncheckedException) -> [*]","1: STMT -> [*]","READWRITE(k, null) -> [4]","2: BLOCK -> [*]","STMT -> [*]","READWRITE(i, null) -> [4]","3: BLOCK -> [*]","STMT -> [*]","READWRITE(l, null) -> [*]","4: STMT -> [*]","READWRITE(j, null) -> [*]","END");
}
