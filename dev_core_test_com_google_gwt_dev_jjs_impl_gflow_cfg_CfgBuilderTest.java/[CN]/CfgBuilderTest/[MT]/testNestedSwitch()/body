{
  assertCfg("void","switch(i) {","  case 1: ","    switch (j) {","      case 0: k = 1; break;","      case 1: k = 2; break;","    }","    break;","  case 2: ","    switch (j) {","      case 0: k = 3; break;","      case 1: k = 4; break;","    }","    break;","  case 3: ","    switch (j) {","      case 0: k = 5; break;","      case 1: k = 6; break;","    }","    break;","}").is("BLOCK -> [*]","STMT -> [*]","READ(i) -> [*]","STMT -> [*]","COND (EntryPoint.i == 1) -> [THEN=*, ELSE=3]","STMT -> [*]","READ(j) -> [*]","STMT -> [*]","COND (EntryPoint.j == 0) -> [THEN=*, ELSE=1]","STMT -> [*]","WRITE(k, 1) -> [*]","STMT -> [*]","GOTO -> [2]","1: STMT -> [*]","COND (EntryPoint.j == 1) -> [THEN=*, ELSE=2]","STMT -> [*]","WRITE(k, 2) -> [*]","STMT -> [*]","GOTO -> [*]","2: STMT -> [*]","GOTO -> [9]","3: STMT -> [*]","COND (EntryPoint.i == 2) -> [THEN=*, ELSE=6]","STMT -> [*]","READ(j) -> [*]","STMT -> [*]","COND (EntryPoint.j == 0) -> [THEN=*, ELSE=4]","STMT -> [*]","WRITE(k, 3) -> [*]","STMT -> [*]","GOTO -> [5]","4: STMT -> [*]","COND (EntryPoint.j == 1) -> [THEN=*, ELSE=5]","STMT -> [*]","WRITE(k, 4) -> [*]","STMT -> [*]","GOTO -> [*]","5: STMT -> [*]","GOTO -> [9]","6: STMT -> [*]","COND (EntryPoint.i == 3) -> [THEN=*, ELSE=9]","STMT -> [*]","READ(j) -> [*]","STMT -> [*]","COND (EntryPoint.j == 0) -> [THEN=*, ELSE=7]","STMT -> [*]","WRITE(k, 5) -> [*]","STMT -> [*]","GOTO -> [8]","7: STMT -> [*]","COND (EntryPoint.j == 1) -> [THEN=*, ELSE=8]","STMT -> [*]","WRITE(k, 6) -> [*]","STMT -> [*]","GOTO -> [*]","8: STMT -> [*]","GOTO -> [*]","9: END");
}
