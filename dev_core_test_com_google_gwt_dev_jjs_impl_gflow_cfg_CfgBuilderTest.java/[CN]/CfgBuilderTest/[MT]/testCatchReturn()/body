{
  assertCfg("void","try { try {","  if (b) return;","  k++;","} catch (RuntimeException e) {","  i++;","} } catch (UncheckedException1 e) { j++; }").is("BLOCK -> [*]","TRY -> [*]","BLOCK -> [*]","TRY -> [*]","BLOCK -> [*]","STMT -> [*]","READ(b) -> [*]","COND (EntryPoint.b) -> [THEN=*, ELSE=1]","STMT -> [*]","GOTO -> [2]","1: STMT -> [*]","READWRITE(k, null) -> [2]","BLOCK -> [*]","STMT -> [*]","READWRITE(i, null) -> [2]","BLOCK -> [*]","STMT -> [*]","READWRITE(j, null) -> [*]","2: END");
}
