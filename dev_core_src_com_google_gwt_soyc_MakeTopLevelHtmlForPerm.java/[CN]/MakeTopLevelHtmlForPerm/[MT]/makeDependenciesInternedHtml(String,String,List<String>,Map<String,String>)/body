{
  String depGraphDescription=inferDepGraphDescription(depGraphName);
  PrintWriter outFile=null;
  String curClassName="";
  HtmlInterner interner=new HtmlInterner();
  for (  String reportMethod : classesInPackage) {
    interner.intern(getPackageSubstring(reportMethod));
    interner.intern(getClassSubstring(reportMethod));
    interner.intern(getMethodSubstring(reportMethod));
    String depMethod=dependencies.get(reportMethod);
    while (depMethod != null) {
      interner.intern(getPackageSubstring(depMethod));
      interner.intern(getClassSubstring(depMethod));
      interner.intern(getMethodSubstring(depMethod));
      depMethod=dependencies.get(depMethod);
    }
  }
  String outFileName=dependenciesFileName(depGraphName,packageName);
  outFile=new PrintWriter(getOutFile(outFileName));
  String packageDescription=packageName.length() == 0 ? "the default package" : packageName;
  addStandardHtmlProlog(outFile,"Method Dependencies for " + depGraphDescription,"Method Dependencies for " + depGraphDescription,"Showing Package: " + packageDescription);
  outFile.println("<script language=\"javascript\">");
  outFile.println(interner.getJs());
  outFile.println("  function showC(packageRef, classRef) {");
  outFile.println("    var className = internedStrings[packageRef] + \".\" + internedStrings[classRef];");
  outFile.println("    document.write(\"<a name='\" + className + \"'>\");");
  outFile.println("    document.write(\"<h3 class='soyc-class-header'>Class: \" + className + \"</a></h3>\");");
  outFile.println("  }");
  outFile.println("  function showD(c, deps) {");
  outFile.println("    document.write(\"<div class='main'><a class='toggle soyc-call-stack-link' " + "onclick='toggle.call(this)'><span class='calledBy'> Call stack: </span>\");");
  outFile.println("    document.write(internedStrings[c[0]] + \".\" + internedStrings[c[1]] + \"::\" + " + "internedStrings[c[2]] + \"</a>\");");
  outFile.println("    document.write(\"<ul class='soyc-call-stack-list'>\");");
  outFile.println("    for (var i = 0; i < deps.length ; i++) {");
  outFile.println("      var s = deps[i];");
  outFile.println("      document.write(\"<li>\" + internedStrings[s[0]] + \".\" + internedStrings[s[1]] +" + "\"::\" + internedStrings[s[2]] + \"</li>\");");
  outFile.println("    }");
  outFile.println("    document.write(\"</ul></div>\");");
  outFile.println("  }");
  outFile.println("</script>");
  outFile.print("<script>");
  for (  String method : classesInPackage) {
    String className=method.replaceAll("::.*","");
    String depMethod=dependencies.get(method);
    if (curClassName.compareTo(className) != 0) {
      curClassName=className;
      outFile.print("showC(" + interner.get(getPackageSubstring(className)) + ","+ interner.get(getClassSubstring(className))+ ");");
    }
    String nameArray="[" + interner.get(getPackageSubstring(method)) + ","+ interner.get(getClassSubstring(method))+ ","+ interner.get(getMethodSubstring(method))+ "]";
    outFile.print("showD(" + nameArray + ",");
    outFile.print(" [");
    while (depMethod != null) {
      String nextDep=dependencies.get(depMethod);
      if (nextDep != null) {
        String packageString=getPackageSubstring(depMethod);
        String classString=getClassSubstring(depMethod);
        String methodString=getMethodSubstring(depMethod);
        outFile.print("[" + interner.get(packageString) + ","+ interner.get(classString)+ ","+ interner.get(methodString)+ "]");
      }
      depMethod=nextDep;
      if (nextDep != null) {
        outFile.print(",");
      }
    }
    outFile.print(" ]);");
  }
  outFile.println("</script>");
  addStandardHtmlEnding(outFile);
  outFile.close();
}
