{
  HashMap<String,CodeCollection> nameToCodeColl=breakdown.nameToCodeColl;
  for (  String codeType : nameToCodeColl.keySet()) {
    String outFileName=breakdown.getId() + "_" + codeType+ "-"+ getPermutationId()+ "Classes.html";
    float sumSize=0f;
    TreeMap<Integer,Set<String>> sortedClasses=new TreeMap<Integer,Set<String>>(Collections.reverseOrder());
    for (    String className : nameToCodeColl.get(codeType).classes) {
      if (breakdown.classToSize.containsKey(className)) {
        int curSize=0;
        if (breakdown.classToSize.containsKey(className)) {
          curSize=breakdown.classToSize.get(className);
        }
        if (curSize != 0) {
          if (sortedClasses.containsKey(curSize)) {
            Set<String> existingSet=sortedClasses.get(curSize);
            existingSet.add(className);
            sortedClasses.put(curSize,existingSet);
          }
 else {
            Set<String> newSet=new TreeSet<String>();
            newSet.add(className);
            sortedClasses.put(curSize,newSet);
          }
          sumSize+=curSize;
        }
      }
    }
    final PrintWriter outFile=new PrintWriter(getOutFile(outFileName));
    addStandardHtmlProlog(outFile,"Classes in package " + codeType,"Classes in package " + codeType,headerLineForBreakdown(breakdown));
    outFile.println("<table class=\"soyc-table\">");
    outFile.println("<colgroup>");
    outFile.println("<col id=\"soyc-splitpoint-type-col\">");
    outFile.println("<col id=\"soyc-splitpoint-size-col\">");
    outFile.println("</colgroup>");
    outFile.println("<thead>");
    outFile.println("<th>Code type</th>");
    outFile.println("<th>");
    outFile.println("<th class=\"soyc-numerical-col-header\">");
    outFile.println("Size <span class=\"soyc-th-units\">(Bytes)</span>");
    outFile.println("</th>");
    outFile.println("<th class=\"soyc-numerical-col-header\">% of total</th>");
    outFile.println("</thead>");
    NumberFormat bytesFormatter=NumberFormat.getInstance();
    bytesFormatter.setGroupingUsed(true);
    NumberFormat percentFormatter=NumberFormat.getPercentInstance();
    percentFormatter.setMinimumFractionDigits(1);
    percentFormatter.setMaximumFractionDigits(1);
    for (    Integer size : sortedClasses.keySet()) {
      Set<String> classNames=sortedClasses.get(size);
      for (      String className : classNames) {
        float perc=(float)size / sumSize;
        outFile.println("<tr>");
        outFile.println("<td>" + className + "</a></td>");
        outFile.println("<td class=\"soyc-bargraph-col\">");
        outFile.println("<div class=\"soyc-bar-graph goog-inline-block\">");
        outFile.println("<div style=\"width:" + (perc * 100.0) + "%;\" class=\"soyc-bar-graph-fill goog-inline-block\"></div>");
        outFile.println("</div>");
        outFile.println("</td>");
        outFile.println("<td class=\"soyc-numerical-col\">");
        outFile.println(bytesFormatter.format(size));
        outFile.println("</td>");
        outFile.println("<td class=\"soyc-percent-col\">" + percentFormatter.format(perc) + "</td>");
        outFile.println("</tr>");
      }
    }
    addStandardHtmlEnding(outFile);
    outFile.close();
  }
}
