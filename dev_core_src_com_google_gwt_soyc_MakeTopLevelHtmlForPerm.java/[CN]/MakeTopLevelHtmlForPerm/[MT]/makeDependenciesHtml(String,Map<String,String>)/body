{
  String curPackageName="";
  HtmlInterner interner=new HtmlInterner();
  for (  String reportMethod : dependencies.keySet()) {
    interner.intern(getPackageSubstring(reportMethod));
    interner.intern(getClassSubstring(reportMethod));
    interner.intern(getMethodSubstring(reportMethod));
    String depMethod=dependencies.get(reportMethod);
    while (depMethod != null) {
      interner.intern(getPackageSubstring(depMethod));
      interner.intern(getClassSubstring(depMethod));
      interner.intern(getMethodSubstring(depMethod));
      depMethod=dependencies.get(depMethod);
    }
  }
  interner.freeze();
  String jsFileName="methodDependencies-" + depGraphName + "-"+ getPermutationId()+ ".js";
  PrintWriter outFile=new PrintWriter(getOutFile(jsFileName));
  interner.printInternedDataAsJs(outFile);
  outFile.close();
  List<String> classesInPackage=new ArrayList<String>();
  for (  String method : dependencies.keySet()) {
    classesInPackage.add(method);
  }
  makeDependenciesInternedHtml(depGraphName,classesInPackage,dependencies,interner,jsFileName);
}
