{
  String outFileName=breakdown.getId() + "-" + getPermutationId()+ "-codeTypeBreakdown.html";
  int sumSize=0;
  TreeMap<Integer,Set<String>> sortedCodeTypes=new TreeMap<Integer,Set<String>>(Collections.reverseOrder());
  for (  String codeType : nameToCodeColl.keySet()) {
    int curSize=nameToCodeColl.get(codeType).getCumSize(breakdown);
    sumSize+=curSize;
    if (curSize != 0) {
      if (sortedCodeTypes.containsKey(curSize)) {
        Set<String> existingSet=sortedCodeTypes.get(curSize);
        existingSet.add(codeType);
        sortedCodeTypes.put(curSize,existingSet);
      }
 else {
        Set<String> newSet=new TreeSet<String>();
        newSet.add(codeType);
        sortedCodeTypes.put(curSize,newSet);
      }
    }
  }
  final PrintWriter outFile=new PrintWriter(getOutFile(outFileName));
  addSmallHtmlProlog(outFile,"Code breakdown");
  outFile.println("<body class=\"soyc-breakdown\">");
  outFile.println("<div class=\"g-doc\">");
  outFile.println("<table class=\"soyc-table\">");
  outFile.println("<colgroup>");
  outFile.println("<col id=\"soyc-splitpoint-type-col\">");
  outFile.println("<col id=\"soyc-splitpoint-size-col\">");
  outFile.println("</colgroup>");
  outFile.println("<thead>");
  outFile.println("<th>Type</th>");
  outFile.println("<th></th>");
  outFile.println("<th class=\"soyc-numerical-col-header\">");
  outFile.println("Size <span class=\"soyc-th-units\">(Bytes)</span>");
  outFile.println("</th>");
  outFile.println("<th class=\"soyc-numerical-col-header\">% of total</th>");
  outFile.println("</thead>");
  NumberFormat bytesFormatter=NumberFormat.getInstance();
  bytesFormatter.setGroupingUsed(true);
  NumberFormat percentFormatter=NumberFormat.getPercentInstance();
  percentFormatter.setMinimumFractionDigits(1);
  percentFormatter.setMaximumFractionDigits(1);
  for (  Integer size : sortedCodeTypes.keySet()) {
    Set<String> codeTypes=sortedCodeTypes.get(size);
    for (    String codeType : codeTypes) {
      String drillDownFileName=breakdown.getId() + "_" + codeType+ "-"+ getPermutationId()+ "Classes.html";
      float perc=(float)size / (float)sumSize;
      outFile.println("<tr>");
      outFile.println("<td><a href=\"" + drillDownFileName + "\" target=\"_top\">"+ codeType+ "</a></td>");
      outFile.println("<td class=\"soyc-bargraph-col\">");
      outFile.println("<div class=\"soyc-bar-graph goog-inline-block\">");
      outFile.println("<div style=\"width:" + (perc * 100.0) + "%;\" class=\"soyc-bar-graph-fill goog-inline-block\"></div>");
      outFile.println("</div>");
      outFile.println("</td>");
      outFile.println("<td class=\"soyc-numerical-col\">");
      outFile.println(bytesFormatter.format(size));
      outFile.println("</td>");
      outFile.println("<td class=\"soyc-percent-col\">" + percentFormatter.format(perc) + "</td>");
      outFile.println("</tr>");
    }
  }
  outFile.println("</table>");
  int stringSize=nameToLitColl.get("string").size;
  String drillDownFileName=breakdown.getId() + "_string-" + getPermutationId()+ "Lits.html";
  outFile.println("<p class=\"soyc-breakdown-strings\">" + stringSize + " bytes occupied by <a href=\""+ drillDownFileName+ "\" target=\"_top\">Strings</a></p>");
  int unaccountedForSize=breakdown.sizeAllCode - sumSize - stringSize;
  outFile.println("<p class=\"soyc-breakdown-strings\">" + unaccountedForSize + " bytes of the JavaScript output cannot be attributed to any package or code type.</p>");
  addStandardHtmlEnding(outFile);
  outFile.close();
  return outFileName;
}
