{
  String outFileName="CompilerMetrics-" + precompilationMetrics.getPermutationBase() + "-index.html";
  PrintWriter outFile=new PrintWriter(getOutFile(outFileName));
  String title="Compiler Metrics for Permutation " + compilationMetrics.getPermutationId();
  addStandardHtmlProlog(outFile,title,title,"Build Time Metrics");
  NumberFormat elapsedFormatter=NumberFormat.getInstance();
  elapsedFormatter.setGroupingUsed(true);
  elapsedFormatter.setMinimumFractionDigits(3);
  elapsedFormatter.setMaximumFractionDigits(3);
  outFile.println("<div id=\"bd\">");
  int permutationId=compilationMetrics.getPermutationId();
  outFile.println("<table class=\"soyc-table\">");
  outFile.println("<colgroup>");
  outFile.println("<col id=\"soyc-buildTimePhase-col\">");
  outFile.println("<col id=\"soyc-buildTimeElapsed-col\">");
  outFile.println("</colgroup>");
  outFile.println("<thead>");
  outFile.println("<th>Phase</th>");
  outFile.println("<th class=\"soyc-numerical-col-header\">Elapsed Time</th>");
  outFile.println("</thead>");
  outFile.println("<tr>");
  outFile.println("<td>");
  outFile.println("Module Analysis");
  outFile.println("</td>");
  outFile.println("<td class=\"soyc-numerical-col\">" + elapsedFormatter.format(moduleMetrics.getElapsedMilliseconds() / 1000.0) + " s");
  outFile.println("</td>");
  outFile.println("</tr>");
  outFile.println("<tr>");
  outFile.println("<td>");
  outFile.println("Precompile (may include Module Analysis)");
  outFile.println("</td>");
  outFile.println("<td class=\"soyc-numerical-col\">" + elapsedFormatter.format(precompilationMetrics.getElapsedMilliseconds() / 1000.0) + " s");
  outFile.println("</td>");
  outFile.println("</tr>");
  outFile.println("<tr>");
  outFile.println("<td>");
  outFile.println("Compile");
  outFile.println("</td>");
  outFile.println("<td class=\"soyc-numerical-col\">" + elapsedFormatter.format(compilationMetrics.getElapsedMilliseconds() / 1000.0) + " s");
  outFile.println("</td>");
  outFile.println("</tr>");
  outFile.println("</table>");
  NumberFormat referencesFormatter=NumberFormat.getInstance();
  referencesFormatter.setGroupingUsed(true);
  outFile.println("<p></p>");
  outFile.println("<h2>Source/Type Metrics</h2>");
  outFile.println("<table class=\"soyc-table\">");
  outFile.println("<colgroup>");
  outFile.println("<col id=\"soyc-typeList-col\">");
  outFile.println("<col id=\"soyc-typeReferences-col\">");
  outFile.println("</colgroup>");
  outFile.println("<thead>");
  outFile.println("<th>Description</th>");
  outFile.println("<th class=\"soyc-numerical-col-header\">References</th>");
  outFile.println("</thead>");
  String sourcesFileName="CompilerMetrics-sources.html";
  outFile.println("<tr>");
  outFile.println("<td>");
  String popupName="compilerMetricsSourceFiles";
  String popupTitle="Source files";
  String popupBody="All source files on the module source path.";
  addPopupLink(outFile,popupName,popupTitle,sourcesFileName);
  addPopup(outFile,popupName,popupTitle,popupBody);
  outFile.println("</td>");
  outFile.println("<td class=\"soyc-numerical-col\">");
  outFile.println(referencesFormatter.format(moduleMetrics.getSourceFiles().length));
  outFile.println("</td>");
  outFile.println("</tr>");
  makeCompilerMetricsSources(sourcesFileName,moduleMetrics,popupBody);
  String initialTypesFileName="CompilerMetrics-initialTypes-" + permutationId + ".html";
  outFile.println("<tr>");
  outFile.println("<td>");
  popupName="compilerMetricsInitialTypes";
  popupTitle="Initial Type Oracle Types";
  popupBody="All types in the type oracle after compiling sources on the source path.";
  addPopupLink(outFile,popupName,popupTitle,initialTypesFileName);
  addPopup(outFile,popupName,popupTitle,popupBody);
  outFile.println("</td>");
  outFile.println("<td class=\"soyc-numerical-col\">");
  outFile.println(referencesFormatter.format(moduleMetrics.getInitialTypes().length));
  outFile.println("</td>");
  outFile.println("</tr>");
  makeCompilerMetricsInitialTypeOracleTypes(initialTypesFileName,moduleMetrics,popupBody);
  String finalTypesFileName="CompilerMetrics-finalTypes-" + permutationId + ".html";
  outFile.println("<tr>");
  outFile.println("<td>");
  popupName="compilerMetricsFinalTypes";
  popupTitle="Final Type Oracle Types";
  popupBody="All types in the type oracle after constructing the Java AST.";
  addPopupLink(outFile,popupName,popupTitle,finalTypesFileName);
  addPopup(outFile,popupName,popupTitle,popupBody);
  outFile.println("</td>");
  outFile.println("<td class=\"soyc-numerical-col\">");
  outFile.println(referencesFormatter.format(precompilationMetrics.getFinalTypeOracleTypes().length));
  outFile.println("</td>");
  outFile.println("</tr>");
  makeCompilerMetricsFinalTypeOracleTypes(finalTypesFileName,precompilationMetrics,popupBody);
  String[] generatedTypes=getGeneratedTypes(moduleMetrics,precompilationMetrics);
  String generatedTypesFileName="CompilerMetrics-generatedTypes-" + permutationId + ".html";
  outFile.println("<tr>");
  outFile.println("<td>");
  popupName="compilerMetricsGeneratedTypes";
  popupTitle="GeneratedTypes";
  popupBody="Types that were added to the type oracle while running generators.";
  addPopupLink(outFile,popupName,popupTitle,generatedTypesFileName);
  addPopup(outFile,popupName,popupTitle,popupBody);
  outFile.println("</td>");
  outFile.println("<td class=\"soyc-numerical-col\">");
  outFile.println(referencesFormatter.format(generatedTypes.length));
  outFile.println("</td>");
  outFile.println("</tr>");
  makeCompilerMetricsGeneratedTypes(generatedTypesFileName,generatedTypes,popupBody);
  String astFileName="CompilerMetrics-ast-" + permutationId + ".html";
  outFile.println("<tr>");
  outFile.println("<td>");
  popupName="compilerMetricsAstTypes";
  popupTitle="AST Referenced Types";
  popupBody="All types referenced by the Java AST after performing " + "reachability analysis from the module EntryPoint.";
  addPopupLink(outFile,popupName,popupTitle,astFileName);
  addPopup(outFile,popupName,popupTitle,popupBody);
  outFile.println("</td>");
  outFile.println("<td class=\"soyc-numerical-col\">");
  outFile.println(referencesFormatter.format(precompilationMetrics.getAstTypes().length));
  outFile.println("</td>");
  outFile.println("</tr>");
  makeCompilerMetricsAstTypes(astFileName,precompilationMetrics,popupBody);
  String[] unreferencedTypes=getUnreferencedTypes(precompilationMetrics);
  String unreferencedFileName="CompilerMetrics-unreferencedTypes-" + permutationId + ".html";
  outFile.println("<tr>");
  outFile.println("<td>");
  popupName="compilerMetricsUnreferenceTypes";
  popupTitle="Unreferenced Types";
  popupBody="Types that were on the initial source path but never referenced in " + "the Java AST.";
  addPopupLink(outFile,popupName,popupTitle,unreferencedFileName);
  addPopup(outFile,popupName,popupTitle,popupBody);
  outFile.println("</td>");
  outFile.println("<td class=\"soyc-numerical-col\">");
  outFile.println(referencesFormatter.format(unreferencedTypes.length));
  outFile.println("</td>");
  outFile.println("</tr>");
  makeCompilerMetricsUnreferencedTypes(unreferencedFileName,unreferencedTypes,popupBody);
  outFile.println("</table>");
  addStandardHtmlEnding(outFile);
  outFile.close();
}
