{
  double negativeZero=makeNegativeZero();
  assertEquals(3.0,Math.copySign(3.0,2.0));
  assertEquals(3.0,Math.copySign(-3.0,2.0));
  assertEquals(-3.0,Math.copySign(3.0,-2.0));
  assertEquals(-3.0,Math.copySign(-3.0,-2.0));
  assertEquals(2.0,Math.copySign(2.0,0.0));
  assertEquals(2.0,Math.copySign(-2.0,0.0));
  assertEquals(-2.0,Math.copySign(2.0,negativeZero));
  assertEquals(-2.0,Math.copySign(-2.0,negativeZero));
  assertEquals(-2.0,Math.copySign(-2.0,Double.NEGATIVE_INFINITY));
  assertEquals(2.0,Math.copySign(-2.0,Double.POSITIVE_INFINITY));
  assertEquals(2.0,Math.copySign(-2.0,Double.NaN));
  assertPositiveZero(Math.copySign(0.0,4.0));
  assertPositiveZero(Math.copySign(negativeZero,4.0));
  assertNegativeZero(Math.copySign(0.0,-4.0));
  assertNegativeZero(Math.copySign(negativeZero,-4.0));
  assertPositiveZero(Math.copySign(0.0,0.0));
  assertPositiveZero(Math.copySign(negativeZero,0.0));
  assertNegativeZero(Math.copySign(0.0,negativeZero));
  assertNegativeZero(Math.copySign(negativeZero,negativeZero));
  assertEquals(Double.POSITIVE_INFINITY,Math.copySign(Double.POSITIVE_INFINITY,1));
  assertEquals(Double.NEGATIVE_INFINITY,Math.copySign(Double.POSITIVE_INFINITY,-1));
  assertEquals(Double.POSITIVE_INFINITY,Math.copySign(Double.NEGATIVE_INFINITY,1));
  assertEquals(Double.NEGATIVE_INFINITY,Math.copySign(Double.NEGATIVE_INFINITY,-1));
  assertEquals(Double.NaN,Math.copySign(Double.NaN,1),0);
  assertEquals(Double.NaN,Math.copySign(Double.NaN,-1),0);
}
