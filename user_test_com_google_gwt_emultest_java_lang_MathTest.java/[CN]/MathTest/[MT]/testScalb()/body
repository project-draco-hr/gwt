{
  for (int scaleFactor=-32; scaleFactor <= 32; scaleFactor++) {
    assertNaN(Math.scalb(Double.NaN,scaleFactor));
    assertEquals(Double.POSITIVE_INFINITY,Math.scalb(Double.POSITIVE_INFINITY,scaleFactor));
    assertEquals(Double.NEGATIVE_INFINITY,Math.scalb(Double.NEGATIVE_INFINITY,scaleFactor));
    assertPositiveZero(Math.scalb(0.0,scaleFactor));
    assertNegativeZero(Math.scalb(-0.0,scaleFactor));
  }
  assertEquals(40.0d,Math.scalb(5d,3));
  assertEquals(40.0f,Math.scalb(5f,3));
  assertEquals(64.0d,Math.scalb(64d,0));
  assertEquals(64.0f,Math.scalb(64f,0));
  assertEquals(2147483648.0d,Math.scalb(1d,31));
  assertEquals(4294967296.0d,Math.scalb(1d,32));
  assertEquals(2.3283064e-10d,Math.scalb(1d,-32),1e-7d);
  assertEquals(2147483648.0f,Math.scalb(1f,31));
  assertEquals(4294967296.0f,Math.scalb(1f,32));
  assertEquals(2.3283064e-10f,Math.scalb(1f,-32),1e-7f);
}
