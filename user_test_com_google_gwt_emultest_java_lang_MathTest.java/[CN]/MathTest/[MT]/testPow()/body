{
  assertEquals(1,Math.pow(2,0.0));
  assertEquals(1,Math.pow(2,-0.0));
  assertEquals(2,Math.pow(2,1));
  assertEquals(-2,Math.pow(-2,1));
  assertNaN(Math.pow(1,Double.NaN));
  assertNaN(Math.pow(Double.NaN,Double.NaN));
  assertNaN(Math.pow(Double.NaN,1));
  assertEquals(1,Math.pow(Double.NaN,0.0));
  assertEquals(1,Math.pow(Double.NaN,-0.0));
  assertEquals(Double.POSITIVE_INFINITY,Math.pow(1.1,Double.POSITIVE_INFINITY));
  assertEquals(Double.POSITIVE_INFINITY,Math.pow(-1.1,Double.POSITIVE_INFINITY));
  assertEquals(Double.POSITIVE_INFINITY,Math.pow(0.9,Double.NEGATIVE_INFINITY));
  assertEquals(Double.POSITIVE_INFINITY,Math.pow(-0.9,Double.NEGATIVE_INFINITY));
  assertPositiveZero(Math.pow(1.1,Double.NEGATIVE_INFINITY));
  assertPositiveZero(Math.pow(-1.1,Double.NEGATIVE_INFINITY));
  assertPositiveZero(Math.pow(0.9,Double.POSITIVE_INFINITY));
  assertPositiveZero(Math.pow(-0.9,Double.POSITIVE_INFINITY));
  assertNaN(Math.pow(1,Double.POSITIVE_INFINITY));
  assertNaN(Math.pow(-1,Double.POSITIVE_INFINITY));
  assertNaN(Math.pow(1,Double.NEGATIVE_INFINITY));
  assertNaN(Math.pow(-1,Double.NEGATIVE_INFINITY));
  assertPositiveZero(Math.pow(0.0,1));
  assertPositiveZero(Math.pow(Double.POSITIVE_INFINITY,-1));
  assertEquals(Double.POSITIVE_INFINITY,Math.pow(0.0,-1));
  assertEquals(Double.POSITIVE_INFINITY,Math.pow(Double.POSITIVE_INFINITY,1));
  assertPositiveZero(Math.pow(-0.0,2));
  assertPositiveZero(Math.pow(Double.NEGATIVE_INFINITY,-2));
  assertNegativeZero(Math.pow(-0.0,1));
  assertNegativeZero(Math.pow(Double.NEGATIVE_INFINITY,-1));
  assertEquals(Double.POSITIVE_INFINITY,Math.pow(-0.0,-2));
  assertEquals(Double.POSITIVE_INFINITY,Math.pow(Double.NEGATIVE_INFINITY,2));
  assertEquals(Double.NEGATIVE_INFINITY,Math.pow(-0.0,-1));
  assertEquals(Double.NEGATIVE_INFINITY,Math.pow(Double.NEGATIVE_INFINITY,1));
  assertEquals(9,Math.pow(3,2));
}
