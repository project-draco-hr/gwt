{
  assertEquals(Double.POSITIVE_INFINITY,Math.hypot(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));
  assertEquals(Double.POSITIVE_INFINITY,Math.hypot(Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY));
  assertEquals(Double.POSITIVE_INFINITY,Math.hypot(Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY));
  assertEquals(Double.POSITIVE_INFINITY,Math.hypot(Double.NEGATIVE_INFINITY,Double.NEGATIVE_INFINITY));
  assertEquals(Double.POSITIVE_INFINITY,Math.hypot(0,Double.POSITIVE_INFINITY));
  assertEquals(Double.POSITIVE_INFINITY,Math.hypot(0,Double.NEGATIVE_INFINITY));
  assertEquals(Double.POSITIVE_INFINITY,Math.hypot(Double.POSITIVE_INFINITY,0));
  assertEquals(Double.POSITIVE_INFINITY,Math.hypot(Double.NEGATIVE_INFINITY,0));
  assertEquals(Double.POSITIVE_INFINITY,Math.hypot(Double.NaN,Double.POSITIVE_INFINITY));
  assertEquals(Double.POSITIVE_INFINITY,Math.hypot(Double.NaN,Double.NEGATIVE_INFINITY));
  assertEquals(Double.POSITIVE_INFINITY,Math.hypot(Double.POSITIVE_INFINITY,Double.NaN));
  assertEquals(Double.POSITIVE_INFINITY,Math.hypot(Double.NEGATIVE_INFINITY,Double.NaN));
  assertNaN(Math.hypot(Double.NaN,0));
  assertNaN(Math.hypot(0,Double.NaN));
  assertEquals(1.414213562,Math.hypot(1,1),1e-7);
  assertEquals(5,Math.hypot(3,4));
}
