{
  assertNaN(Math.atan2(Double.NaN,1));
  assertNaN(Math.atan2(1,Double.NaN));
  assertNaN(Math.atan2(Double.NaN,Double.NaN));
  assertPositiveZero(Math.atan2(0.0,1.0));
  assertPositiveZero(Math.atan2(1.0,Double.POSITIVE_INFINITY));
  assertNegativeZero(Math.atan2(-0.0,1.0));
  assertNegativeZero(Math.atan2(-1.0,Double.POSITIVE_INFINITY));
  assertEquals(Math.PI,Math.atan2(0.0,-1.0),1e-7);
  assertEquals(Math.PI,Math.atan2(1.0,Double.NEGATIVE_INFINITY),1e-7);
  assertEquals(-Math.PI,Math.atan2(-0.0,-1.0),1e-7);
  assertEquals(-Math.PI,Math.atan2(-1.0,Double.NEGATIVE_INFINITY),1e-7);
  assertEquals(Math.PI / 2,Math.atan2(1.0,0.0),1e-7);
  assertEquals(Math.PI / 2,Math.atan2(1.0,-0.0),1e-7);
  assertEquals(Math.PI / 2,Math.atan2(Double.POSITIVE_INFINITY,1.0),1e-7);
  assertEquals(-Math.PI / 2,Math.atan2(-1.0,0.0),1e-7);
  assertEquals(-Math.PI / 2,Math.atan2(-1.0,-0.0),1e-7);
  assertEquals(-Math.PI / 2,Math.atan2(Double.NEGATIVE_INFINITY,1.0),1e-7);
  assertEquals(Math.PI / 4,Math.atan2(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY),1e-7);
  assertEquals(Math.PI * 3 / 4,Math.atan2(Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY),1e-7);
  assertEquals(-Math.PI / 4,Math.atan2(Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY),1e-7);
  assertEquals(-3 * Math.PI / 4,Math.atan2(Double.NEGATIVE_INFINITY,Double.NEGATIVE_INFINITY),1e-7);
  assertEquals(0.463647609,Math.atan2(1,2),1e-7);
}
