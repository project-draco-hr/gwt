{
  Map<Integer,Collection<ApiChange>> apiChangeMap=new HashMap<Integer,Collection<ApiChange>>();
  for (  ApiChange apiChange : originalCollection) {
    String apiChangeStr=apiChange.getApiElement().getRelativeSignature();
    Collection<ApiChange> apiChangesSameHashCode=apiChangeMap.get(apiChange.hashCodeForDuplication());
    if (apiChangesSameHashCode == null) {
      apiChangesSameHashCode=new HashSet<ApiChange>();
      apiChangeMap.put(apiChange.hashCodeForDuplication(),apiChangesSameHashCode);
    }
    Collection<ApiChange> apiChangesToRemove=new HashSet<ApiChange>();
    boolean addNewElement=true;
    for (    ApiChange oldApiChange : apiChangesSameHashCode) {
      String oldApiChangeStr=oldApiChange.getApiElement().getRelativeSignature();
      Relation relation=getRelationOfApiClassOfFirstArgToThatOfSecond(apiChange.getApiElement(),oldApiChange.getApiElement());
      if (relation == Relation.SUPERCLASS) {
        apiChangesToRemove.add(oldApiChange);
        if (ApiCompatibilityChecker.DEBUG_DUPLICATE_REMOVAL && oldApiChangeStr.indexOf(HAY_API_CHANGE) != -1) {
          System.out.println(oldApiChangeStr + " replaced by " + apiChangeStr+ ", status = "+ oldApiChange.getStatus());
        }
      }
 else       if (relation == Relation.SUBCLASS) {
        addNewElement=false;
        if (ApiCompatibilityChecker.DEBUG_DUPLICATE_REMOVAL && apiChangeStr.indexOf(HAY_API_CHANGE) != -1) {
          System.out.println(apiChangeStr + " replaced by " + oldApiChangeStr);
        }
      }
    }
    apiChangesSameHashCode.removeAll(apiChangesToRemove);
    if (addNewElement) {
      apiChangesSameHashCode.add(apiChange);
    }
  }
  Collection<ApiChange> prunedCollection=new HashSet<ApiChange>();
  for (  Collection<ApiChange> changes : apiChangeMap.values()) {
    prunedCollection.addAll(changes);
  }
  return prunedCollection;
}
