{
  LowLevelSaf.pushJsContext(jsContext);
  try {
    int dispId=classLoader.getDispId(name);
    if (dispId < 0) {
      return LowLevelSaf.getJsUndefined(jsContext);
    }
    if (javaDispatch.isField(dispId)) {
      Field field=javaDispatch.getField(dispId);
      JsValueSaf jsValue=new JsValueSaf();
      JsValueGlue.set(jsValue,classLoader,field.getType(),javaDispatch.getFieldValue(dispId));
      int jsval=jsValue.getJsValue();
      LowLevelSaf.gcProtect(jsContext,jsval);
      return jsval;
    }
 else {
      MethodAdaptor method=javaDispatch.getMethod(dispId);
      AccessibleObject obj=method.getUnderlyingObject();
      DispatchMethod dispMethod=(DispatchMethod)classLoader.getWrapperForObject(obj);
      if (dispMethod == null) {
        dispMethod=new MethodDispatch(classLoader,method);
        classLoader.putWrapperForObject(obj,dispMethod);
      }
      return LowLevelSaf.wrapDispatchMethod(jsContext,method.toString(),dispMethod);
    }
  }
  finally {
    LowLevelSaf.popJsContext(jsContext);
  }
}
