def import_idl_file(self, file_path, import_options=DatabaseBuilderOptions()):
    'Parses, loads into memory and cleans up and IDL file'
    idl_file = self._load_idl_file(file_path, import_options)
    self._strip_ext_attributes(idl_file)
    self._resolve_type_defs(idl_file)
    self._rename_types(idl_file, import_options)

    def enabled(idl_node):
        return self._is_node_enabled(idl_node, import_options.idl_defines)
    for module in idl_file.modules:
        for interface in module.interfaces:
            if (not self._is_node_enabled(interface, import_options.idl_defines)):
                _logger.info(('skipping interface %s/%s (source=%s file=%s)' % (module.id, interface.id, import_options.source, file_path)))
                continue
            _logger.info(('importing interface %s/%s (source=%s file=%s)' % (module.id, interface.id, import_options.source, file_path)))
            interface.attributes = filter(enabled, interface.attributes)
            interface.operations = filter(enabled, interface.operations)
            self._imported_interfaces.append((interface, module.id, import_options))
        for implStmt in module.implementsStatements:
            self._impl_stmts.append((implStmt, import_options))
