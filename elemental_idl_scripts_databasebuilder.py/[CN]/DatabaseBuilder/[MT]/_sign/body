def _sign(self, node):
    'Computes a unique signature for the node, for merging purposed, by\n    concatenating types and names in the declaration.'
    if isinstance(node, IDLType):
        res = node.id
        if res.startswith('unsigned '):
            res = res[len('unsigned '):]
        return res
    res = []
    if isinstance(node, IDLInterface):
        res = ['interface', node.id]
    elif isinstance(node, IDLParentInterface):
        res = ['parent', self._sign(node.type)]
    elif isinstance(node, IDLOperation):
        res = ['op']
        for special in node.specials:
            res.append(special)
        if (node.id is not None):
            res.append(node.id)
        for arg in node.arguments:
            res.append(self._sign(arg.type))
        res.append(self._sign(node.type))
    elif isinstance(node, IDLAttribute):
        res = []
        if node.is_fc_getter:
            res.append('getter')
        elif node.is_fc_setter:
            res.append('setter')
        res.append(node.id)
        res.append(self._sign(node.type))
    elif isinstance(node, IDLConstant):
        res = []
        res.append('const')
        res.append(node.id)
        res.append(node.value)
        res.append(self._sign(node.type))
    else:
        raise TypeError(("Can't sign input of type %s" % type(node)))
    return ':'.join(res)
