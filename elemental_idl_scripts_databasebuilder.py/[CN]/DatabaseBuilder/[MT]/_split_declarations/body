def _split_declarations(self, interface, optional_argument_whitelist):
    'Splits read-write attributes and operations with optional\n    arguments into multiple declarations'
    new_attributes = []
    for attribute in interface.attributes:
        if (attribute.is_fc_getter or attribute.is_fc_setter):
            new_attributes.append(attribute)
            continue
        getter_attr = copy.deepcopy(attribute)
        getter_attr.is_fc_getter = True
        new_attributes.append(getter_attr)
        if (not attribute.is_read_only):
            setter_attr = copy.deepcopy(attribute)
            setter_attr.is_fc_setter = True
            new_attributes.append(setter_attr)
    interface.attributes = new_attributes
    for op in interface.operations:
        for i in range(0, len(op.arguments)):
            argument = op.arguments[i]
            in_optional_whitelist = ((interface.id, op.id, argument.id) in optional_argument_whitelist)
            if (in_optional_whitelist or set(['Optional', 'Callback']).issubset(argument.ext_attrs.keys())):
                argument.is_optional = True
                argument.ext_attrs['RequiredCppParameter'] = None
                continue
            if argument.is_optional:
                if ('Optional' in argument.ext_attrs):
                    optional_value = argument.ext_attrs['Optional']
                    if optional_value:
                        argument.is_optional = False
                        del argument.ext_attrs['Optional']
    new_ops = []
    for op in interface.operations:
        for i in range(0, len(op.arguments)):
            if op.arguments[i].is_optional:
                op.arguments[i].is_optional = False
                new_op = copy.deepcopy(op)
                new_op.arguments = new_op.arguments[:i]
                new_ops.append(new_op)
        new_ops.append(op)
    interface.operations = new_ops
