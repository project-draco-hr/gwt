{
  if (knownCircularlyReferentModuleNames.contains(potentialDuplicateModuleName)) {
    return true;
  }
  if (!moduleReferencePath.contains(potentialDuplicateModuleName)) {
    return false;
  }
  List<String> circularModuleReferencePath=Lists.newArrayList(moduleReferencePath);
  circularModuleReferencePath.add(potentialDuplicateModuleName);
  List<String> annotatedCircularModuleReferencePath=Lists.newArrayList();
  for (int moduleNameIndex=0; moduleNameIndex < circularModuleReferencePath.size() - 1; moduleNameIndex++) {
    String thisModuleName=circularModuleReferencePath.get(moduleNameIndex);
    String nextModuleName=circularModuleReferencePath.get(moduleNameIndex + 1);
    annotatedCircularModuleReferencePath.add(thisModuleName + (thisModuleName.equals(potentialDuplicateModuleName) ? " <loop>" : ""));
    List<String> fileSetPath=rootModule.getFileSetPathBetween(thisModuleName,nextModuleName);
    if (fileSetPath != null) {
      for (      String fileSetModuleName : fileSetPath) {
        annotatedCircularModuleReferencePath.add(fileSetModuleName + " <fileset>");
      }
    }
  }
  annotatedCircularModuleReferencePath.add(potentialDuplicateModuleName + " <loop>");
  knownCircularlyReferentModuleNames.addAll(annotatedCircularModuleReferencePath);
  circularReferenceModuleNameLoops.add(annotatedCircularModuleReferencePath);
  return true;
}
