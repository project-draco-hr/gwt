{
  if (outputFreshness != OutputFreshness.UNKNOWN) {
    return;
  }
  for (  BuildTarget dependencyBuildTarget : dependencyBuildTargets) {
    dependencyBuildTarget.computeOutputFreshness(logger);
  }
  if (module == null) {
    logger.log(TreeLogger.SPAM,"Library " + canonicalModuleName + " is stale: the module hasn't been loaded yet");
    outputFreshness=OutputFreshness.STALE;
    return;
  }
  for (  BuildTarget dependencyBuildTarget : dependencyBuildTargets) {
    if (dependencyBuildTarget.outputFreshness == OutputFreshness.STALE) {
      logger.log(TreeLogger.SPAM,"Library " + canonicalModuleName + " is stale: has a stale dependency");
      outputFreshness=OutputFreshness.STALE;
      return;
    }
  }
  File libraryFile=new File(computeLibraryPath());
  if (!libraryFile.exists()) {
    logger.log(TreeLogger.SPAM,"Library " + canonicalModuleName + " is stale: the library file is missing");
    outputFreshness=OutputFreshness.STALE;
    return;
  }
  long libraryFileLastModified=libraryFile.lastModified();
  module.refresh();
  if (libraryFileLastModified < module.getResourceLastModified()) {
    Set<Resource> newerResources=module.getResourcesNewerThan(libraryFileLastModified);
    TreeLogger branch=logger.branch(TreeLogger.SPAM,"Library " + canonicalModuleName + " is stale: library is older than some resource(s)");
    for (    Resource newerResource : newerResources) {
      branch.log(TreeLogger.SPAM,newerResource.getPath() + " has changed");
    }
    outputFreshness=OutputFreshness.STALE;
    return;
  }
  logger.log(TreeLogger.SPAM,"Library " + canonicalModuleName + " is fresh");
  outputFreshness=OutputFreshness.FRESH;
}
