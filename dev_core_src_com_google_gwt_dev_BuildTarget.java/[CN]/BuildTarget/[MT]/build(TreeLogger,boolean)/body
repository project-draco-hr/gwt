{
  if (outputFreshness == OutputFreshness.FRESH_KNOWN_GOOD || outputFreshness == OutputFreshness.FRESH_KNOWN_BAD) {
    logger.log(TreeLogger.SPAM,formatReusingCachedLibraryMessage(canonicalModuleName));
    return outputFreshness == OutputFreshness.FRESH_KNOWN_GOOD;
  }
  boolean dependencyBuildsSucceeded=true;
  for (  BuildTarget dependencyBuildTarget : dependencyBuildTargets) {
    dependencyBuildsSucceeded&=dependencyBuildTarget.build(logger);
  }
  if (!dependencyBuildsSucceeded) {
    outputFreshness=OutputFreshness.FRESH_KNOWN_BAD;
    return false;
  }
  TreeLogger branch=logger.branch(TreeLogger.INFO,formatCompilingModuleMessage(canonicalModuleName));
  boolean thisBuildSucceeded;
  try {
    RuntimeRebindRuleGenerator.RUNTIME_REBIND_RULE_SOURCES_BY_SHORT_NAME.clear();
    LibraryCompiler libraryCompiler=new LibraryCompiler(computeCompileOptions(link));
    libraryCompiler.setResourceLoader(buildTargetOptions.getResourceLoader());
    thisBuildSucceeded=libraryCompiler.run(branch);
    module=libraryCompiler.getModule();
  }
 catch (  Throwable t) {
    logger.log(TreeLogger.ERROR,t.getMessage());
    outputFreshness=OutputFreshness.FRESH_KNOWN_BAD;
    return false;
  }
  outputFreshness=thisBuildSucceeded ? OutputFreshness.FRESH_KNOWN_GOOD : OutputFreshness.FRESH_KNOWN_BAD;
  return thisBuildSucceeded;
}
