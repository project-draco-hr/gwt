{
  Set<Library> exploredLibraries=Sets.newHashSet();
  LinkedList<Library> unexploredLibraries=Lists.newLinkedList();
  List<Library> librariesForGenerator=Lists.newArrayList();
  unexploredLibraries.addAll(rootLibraries);
  while (!unexploredLibraries.isEmpty()) {
    Library library=unexploredLibraries.removeFirst();
    exploredLibraries.add(library);
    boolean libraryHasAlreadyRunThisGenerator=library.getRanGeneratorNames().contains(generatorName);
    if (!gatherLibrariesThatHaveAlreadyRunThisGenerator && libraryHasAlreadyRunThisGenerator) {
      continue;
    }
    librariesForGenerator.add(library);
    for (    Library dependencyLibrary : asLibraries(library.getDependencyLibraryNames())) {
      if (exploredLibraries.contains(dependencyLibrary)) {
        continue;
      }
      unexploredLibraries.add(dependencyLibrary);
    }
  }
  return librariesForGenerator;
}
