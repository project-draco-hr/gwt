{
  Collections.sort(libraries,LIBRARY_NAME_COMPARATOR);
  librariesByName=Maps.newLinkedHashMap();
  for (  Library library : libraries) {
    if (librariesByName.containsKey(library.getLibraryName())) {
      throw new DuplicateLibraryNameException("More than one library is claiming the name \"" + library.getLibraryName() + "\", thus making library references ambiguous. "+ "Compilation can not proceed.");
    }
    librariesByName.put(library.getLibraryName(),library);
  }
  Multimap<Library,Library> parentLibrariesByChildLibrary=LinkedHashMultimap.create();
  Multimap<Library,Library> childLibrariesByParentLibrary=LinkedHashMultimap.create();
  for (  Library parentLibrary : libraries) {
    for (    String childLibraryName : parentLibrary.getDependencyLibraryNames()) {
      Library childLibrary=librariesByName.get(childLibraryName);
      boolean libraryIsMissing=childLibrary == null;
      if (libraryIsMissing && verifyLibraryReferences) {
        throw new UnresolvedLibraryException("Library " + parentLibrary.getLibraryName() + " references library "+ childLibraryName+ " but it is not available.");
      }
      parentLibrariesByChildLibrary.put(childLibrary,parentLibrary);
      childLibrariesByParentLibrary.put(parentLibrary,childLibrary);
    }
  }
  rootLibraries=Lists.newArrayList();
  for (  Library library : libraries) {
    boolean libraryHasParents=parentLibrariesByChildLibrary.containsKey(library);
    if (libraryHasParents) {
      continue;
    }
    rootLibraries.add(library);
  }
  List<Library> librariesInLinkOrder=Lists.newArrayList();
  Set<Library> maybeLeafLibraries=Sets.newLinkedHashSet(libraries);
  while (!maybeLeafLibraries.isEmpty()) {
    List<Library> leafLibraries=Lists.newArrayList();
    for (    Library maybeLeafLibrary : maybeLeafLibraries) {
      if (childLibrariesByParentLibrary.get(maybeLeafLibrary).isEmpty()) {
        leafLibraries.add(maybeLeafLibrary);
      }
    }
    librariesInLinkOrder.addAll(leafLibraries);
    maybeLeafLibraries.clear();
    for (    Library leafLibrary : leafLibraries) {
      Collection<Library> parentLibraries=parentLibrariesByChildLibrary.removeAll(leafLibrary);
      maybeLeafLibraries.addAll(parentLibraries);
      for (      Library parentLibrary : parentLibraries) {
        childLibrariesByParentLibrary.remove(parentLibrary,leafLibrary);
      }
    }
  }
  libraries=librariesInLinkOrder;
}
