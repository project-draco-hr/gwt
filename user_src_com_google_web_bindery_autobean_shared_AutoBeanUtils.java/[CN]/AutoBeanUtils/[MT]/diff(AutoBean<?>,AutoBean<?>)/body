{
  if (a.equals(b)) {
    return Collections.emptyMap();
  }
  final Map<String,Object> toReturn=getAllProperties(b);
  a.accept(new AutoBeanVisitor(){
    @Override public boolean visitReferenceProperty(    String propertyName,    AutoBean<?> previousValue,    PropertyContext ctx){
      if (toReturn.containsKey(propertyName)) {
        if (equal(propertyName,previousValue)) {
          toReturn.remove(propertyName);
        }
      }
 else {
        toReturn.put(propertyName,null);
      }
      return false;
    }
    @Override public boolean visitValueProperty(    String propertyName,    Object previousValue,    PropertyContext ctx){
      if (toReturn.containsKey(propertyName)) {
        if (equal(propertyName,previousValue)) {
          toReturn.remove(propertyName);
        }
      }
 else {
        toReturn.put(propertyName,null);
      }
      return false;
    }
    private boolean equal(    String propertyName,    AutoBean<?> previousValue){
      return previousValue == null && toReturn.get(propertyName) == null || previousValue != null && equal(propertyName,previousValue.as());
    }
    private boolean equal(    String propertyName,    Object previousValue){
      Object currentValue=toReturn.get(propertyName);
      return previousValue == null && currentValue == null || previousValue != null && previousValue.equals(currentValue);
    }
  }
);
  return toReturn;
}
