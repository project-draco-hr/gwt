{
  SpeedTracerLogger.start(CompilerEventType.CODE_SPLITTER,"phase","pickInitialLoadSequence");
  TreeLogger branch=logger.branch(TreeLogger.TRACE,"Looking up initial load sequence for split points");
  LinkedHashSet<Integer> initialLoadSequence=new LinkedHashSet<Integer>();
  ConfigurationProperty prop;
{
    Property p=properties.find(PROP_INITIAL_SEQUENCE);
    if (p == null) {
      throw new InternalCompilerException("Could not find configuration property " + PROP_INITIAL_SEQUENCE);
    }
    if (!(p instanceof ConfigurationProperty)) {
      throw new InternalCompilerException(PROP_INITIAL_SEQUENCE + " is not a configuration property");
    }
    prop=(ConfigurationProperty)p;
  }
  for (  String refString : prop.getValues()) {
    int splitPoint=findSplitPoint(refString,program,branch);
    if (initialLoadSequence.contains(splitPoint)) {
      branch.log(TreeLogger.ERROR,"Split point specified more than once: " + refString);
    }
    initialLoadSequence.add(splitPoint);
  }
  logInitialLoadSequence(logger,initialLoadSequence);
  installInitialLoadSequenceField(program,initialLoadSequence);
  program.setSplitPointInitialSequence(new ArrayList<Integer>(initialLoadSequence));
  SpeedTracerLogger.end(CompilerEventType.CODE_SPLITTER);
}
