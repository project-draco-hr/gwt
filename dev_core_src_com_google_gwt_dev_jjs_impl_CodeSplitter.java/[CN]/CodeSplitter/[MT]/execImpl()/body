{
  PerfLogger.start("CodeSplitter");
  FragmentMap fragmentMap=mapFragments();
  List<List<JsStatement>> fragmentStats=new ArrayList<List<JsStatement>>(3 * numEntries - 2);
{
    LivenessPredicate alreadyLoaded=new NothingAlivePredicate();
    LivenessPredicate liveNow=new CfaLivenessPredicate(initiallyLive);
    List<JsStatement> noStats=new ArrayList<JsStatement>();
    addFragment(alreadyLoaded,liveNow,noStats,fragmentStats);
  }
  for (int i=1; i < numEntries; i++) {
    LivenessPredicate alreadyLoaded=new FragmentMapLivenessPredicate(fragmentMap,0);
    LivenessPredicate liveNow=new FragmentMapLivenessPredicate(fragmentMap,i);
    List<JsStatement> statsToAppend=fragmentExtractor.createCallsToEntryMethods(i);
    addFragment(alreadyLoaded,liveNow,statsToAppend,fragmentStats);
  }
  for (int base=1; base < numEntries; base++) {
    ControlFlowAnalyzer baseCfa=new ControlFlowAnalyzer(initiallyLive);
    traverseEntry(baseCfa,base);
    LivenessPredicate baseLive=new CfaLivenessPredicate(baseCfa);
    List<JsStatement> baseStatsToAppend=fragmentExtractor.createCallsToEntryMethods(base);
    addFragment(new CfaLivenessPredicate(initiallyLive),baseLive,baseStatsToAppend,fragmentStats);
    LivenessPredicate globalLeftoversLive=new FragmentMapLivenessPredicate(fragmentMap,0);
    LivenessPredicate associatedExclusives=new FragmentMapLivenessPredicate(fragmentMap,base);
    LivenessPredicate leftoversLive=new UnionLivenessPredicate(globalLeftoversLive,associatedExclusives);
    List<JsStatement> statsToAppend=fragmentExtractor.createCallToLeftoversFragmentHasLoaded();
    addFragment(baseLive,leftoversLive,statsToAppend,fragmentStats);
  }
  jsprogram.setFragmentCount(fragmentStats.size());
  for (int i=0; i < fragmentStats.size(); i++) {
    JsBlock fragBlock=jsprogram.getFragmentBlock(i);
    fragBlock.getStatements().clear();
    fragBlock.getStatements().addAll(fragmentStats.get(i));
  }
  PerfLogger.end();
}
