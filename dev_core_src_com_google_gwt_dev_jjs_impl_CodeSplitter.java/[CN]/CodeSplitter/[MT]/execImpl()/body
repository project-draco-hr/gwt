{
  if (numEntries == 1) {
    return;
  }
  PerfLogger.start("CodeSplitter");
  FragmentMap fragmentMap=mapFragments();
  List<List<JsStatement>> fragmentStats=new ArrayList<List<JsStatement>>(numEntries);
  FragmentExtractor fragmentExtractor=new FragmentExtractor(jprogram,jsprogram,map);
  for (int i=0; i < numEntries; i++) {
    LivenessPredicate pred=new FragmentMapLivenessPredicate(fragmentMap,i);
    LivenessPredicate alreadyLoaded;
    if (i == 0) {
      alreadyLoaded=new NothingAlivePredicate();
    }
 else {
      alreadyLoaded=new FragmentMapLivenessPredicate(fragmentMap,0);
    }
    if (logging) {
      System.out.println();
      System.out.println("==== Fragment " + i + " ====");
      fragmentExtractor.setStatementLogger(new EchoStatementLogger());
    }
    List<JsStatement> entryStats=fragmentExtractor.extractStatements(pred,alreadyLoaded);
    if (i > 0) {
      fragmentExtractor.addCallsToEntryMethods(i,entryStats);
    }
    fragmentStats.add(entryStats);
  }
  jsprogram.setFragmentCount(numEntries);
  for (int i=0; i < fragmentStats.size(); i++) {
    JsBlock fragBlock=jsprogram.getFragmentBlock(i);
    fragBlock.getStatements().clear();
    fragBlock.getStatements().addAll(fragmentStats.get(i));
  }
  PerfLogger.end();
}
