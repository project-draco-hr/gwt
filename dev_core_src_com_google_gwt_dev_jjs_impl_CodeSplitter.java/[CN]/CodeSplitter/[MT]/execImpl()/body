{
  PerfLogger.start("CodeSplitter");
  Map<Integer,List<JsStatement>> fragmentStats=new HashMap<Integer,List<JsStatement>>();
{
    LivenessPredicate alreadyLoaded=new NothingAlivePredicate();
    LivenessPredicate liveNow=new CfaLivenessPredicate(initiallyLive);
    List<JsStatement> noStats=new ArrayList<JsStatement>();
    addFragment(0,alreadyLoaded,liveNow,noStats,fragmentStats);
  }
  liveAfterInitialSequence=new ControlFlowAnalyzer(initiallyLive);
  String extendsCfa="initial";
  for (  int sp : initialLoadSequence) {
    LivenessPredicate alreadyLoaded=new CfaLivenessPredicate(liveAfterInitialSequence);
    String depGraphName="sp" + sp;
    dependencyRecorder.startDependencyGraph(depGraphName,extendsCfa);
    extendsCfa=depGraphName;
    ControlFlowAnalyzer liveAfterSp=new ControlFlowAnalyzer(liveAfterInitialSequence);
    traverseEntry(liveAfterSp,sp);
    dependencyRecorder.endDependencyGraph();
    LivenessPredicate liveNow=new CfaLivenessPredicate(liveAfterSp);
    List<JsStatement> statsToAppend=fragmentExtractor.createCallsToEntryMethods(sp);
    addFragment(sp,alreadyLoaded,liveNow,statsToAppend,fragmentStats);
    liveAfterInitialSequence=liveAfterSp;
  }
  ExclusivityMap fragmentMap=determineExclusivity();
  for (int i=1; i < numEntries; i++) {
    if (isInitial(i)) {
      continue;
    }
    LivenessPredicate alreadyLoaded=new ExclusivityMapLivenessPredicate(fragmentMap,0);
    LivenessPredicate liveNow=new ExclusivityMapLivenessPredicate(fragmentMap,i);
    List<JsStatement> statsToAppend=fragmentExtractor.createCallsToEntryMethods(i);
    addFragment(i,alreadyLoaded,liveNow,statsToAppend,fragmentStats);
  }
{
    LivenessPredicate alreadyLoaded=new CfaLivenessPredicate(liveAfterInitialSequence);
    LivenessPredicate liveNow=new ExclusivityMapLivenessPredicate(fragmentMap,0);
    List<JsStatement> statsToAppend=fragmentExtractor.createCallToLeftoversFragmentHasLoaded();
    addFragment(numEntries,alreadyLoaded,liveNow,statsToAppend,fragmentStats);
  }
  jsprogram.setFragmentCount(fragmentStats.size());
  for (int i=0; i < fragmentStats.size(); i++) {
    JsBlock fragBlock=jsprogram.getFragmentBlock(i);
    fragBlock.getStatements().clear();
    fragBlock.getStatements().addAll(fragmentStats.get(i));
  }
  PerfLogger.end();
}
