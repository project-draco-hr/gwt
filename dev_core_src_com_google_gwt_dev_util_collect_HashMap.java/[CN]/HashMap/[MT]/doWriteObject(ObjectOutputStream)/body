{
  out.writeInt(keys.length);
  out.writeInt(size);
  if (stableWriteObject) {
    final Integer[] idx=new Integer[keys.length];
    for (int i=0; i < keys.length; i++) {
      idx[i]=i;
    }
    Arrays.sort(idx,new Comparator<Integer>(){
      @SuppressWarnings({"rawtypes","unchecked"}) @Override public int compare(      final Integer o1,      final Integer o2){
        Comparable c1=(Comparable)(keys[o1]);
        Comparable c2=(Comparable)(keys[o2]);
        if (c1 == null) {
          return (c2 == null) ? 0 : 1;
        }
        if (c2 == null) {
          return -1;
        }
        return c1.compareTo(c2);
      }
    }
);
    for (int i=0; i < keys.length; ++i) {
      int current=idx[i];
      Object key=keys[current];
      if (key != null) {
        out.writeObject(unmaskNullKey(key));
        out.writeObject(values[current]);
      }
    }
  }
 else {
    for (int i=0; i < keys.length; ++i) {
      Object key=keys[i];
      if (key != null) {
        out.writeObject(unmaskNullKey(key));
        out.writeObject(values[i]);
      }
    }
  }
}
