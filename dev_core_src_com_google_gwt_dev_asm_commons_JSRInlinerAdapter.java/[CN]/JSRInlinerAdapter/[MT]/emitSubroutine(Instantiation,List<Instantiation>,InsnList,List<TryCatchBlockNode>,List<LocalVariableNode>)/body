{
  LabelNode duplbl=null;
  if (LOGGING) {
    log("--------------------------------------------------------");
    log("Emitting instantiation of subroutine " + instant.subroutine);
  }
  for (int i=0, c=instructions.size(); i < c; i++) {
    AbstractInsnNode insn=instructions.get(i);
    Instantiation owner=instant.findOwner(i);
    if (insn.getType() == AbstractInsnNode.LABEL) {
      LabelNode ilbl=(LabelNode)insn;
      LabelNode remap=instant.rangeLabel(ilbl);
      if (LOGGING) {
        log("Translating lbl #" + i + ':'+ ilbl+ " to "+ remap);
      }
      if (remap != duplbl) {
        newInstructions.add(remap);
        duplbl=remap;
      }
      continue;
    }
    if (owner != instant) {
      continue;
    }
    if (LOGGING) {
      log("Emitting inst #" + i);
    }
    if (insn.getOpcode() == RET) {
      LabelNode retlabel=null;
      for (Instantiation p=instant; p != null; p=p.previous) {
        if (p.subroutine.get(i)) {
          retlabel=p.returnLabel;
        }
      }
      if (retlabel == null) {
        throw new RuntimeException("Instruction #" + i + " is a RET not owned by any subroutine");
      }
      newInstructions.add(new JumpInsnNode(GOTO,retlabel));
    }
 else     if (insn.getOpcode() == JSR) {
      LabelNode lbl=((JumpInsnNode)insn).label;
      BitSet sub=subroutineHeads.get(lbl);
      Instantiation newinst=new Instantiation(instant,sub);
      LabelNode startlbl=newinst.gotoLabel(lbl);
      if (LOGGING) {
        log(" Creating instantiation of subr " + sub);
      }
      newInstructions.add(new InsnNode(ACONST_NULL));
      newInstructions.add(new JumpInsnNode(GOTO,startlbl));
      newInstructions.add(newinst.returnLabel);
      worklist.add(newinst);
    }
 else {
      newInstructions.add(insn.clone(instant));
    }
  }
  for (Iterator<TryCatchBlockNode> it=tryCatchBlocks.iterator(); it.hasNext(); ) {
    TryCatchBlockNode trycatch=it.next();
    if (LOGGING) {
      log("try catch block original labels=" + trycatch.start + '-'+ trycatch.end+ "->"+ trycatch.handler);
    }
    final LabelNode start=instant.rangeLabel(trycatch.start);
    final LabelNode end=instant.rangeLabel(trycatch.end);
    if (start == end) {
      if (LOGGING) {
        log(" try catch block empty in this subroutine");
      }
      continue;
    }
    final LabelNode handler=instant.gotoLabel(trycatch.handler);
    if (LOGGING) {
      log(" try catch block new labels=" + start + '-'+ end+ "->"+ handler);
    }
    if (start == null || end == null || handler == null) {
      throw new RuntimeException("Internal error!");
    }
    newTryCatchBlocks.add(new TryCatchBlockNode(start,end,handler,trycatch.type));
  }
  for (Iterator<LocalVariableNode> it=localVariables.iterator(); it.hasNext(); ) {
    LocalVariableNode lvnode=it.next();
    if (LOGGING) {
      log("local var " + lvnode.name);
    }
    final LabelNode start=instant.rangeLabel(lvnode.start);
    final LabelNode end=instant.rangeLabel(lvnode.end);
    if (start == end) {
      if (LOGGING) {
        log("  local variable empty in this sub");
      }
      continue;
    }
    newLocalVariables.add(new LocalVariableNode(lvnode.name,lvnode.desc,lvnode.signature,start,end,lvnode.index));
  }
}
