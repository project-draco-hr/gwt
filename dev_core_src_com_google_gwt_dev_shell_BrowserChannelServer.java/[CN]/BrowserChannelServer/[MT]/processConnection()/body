{
  MessageType type=Message.readMessageType(getStreamFromOtherSide());
  String url=null;
  String tabKey=null;
  String sessionKey=null;
  byte[] iconBytes=null;
switch (type) {
case OLD_LOAD_MODULE:
    OldLoadModuleMessage oldLoadModule=OldLoadModuleMessage.receive(this);
  if (oldLoadModule.getProtoVersion() != 1) {
    throw new BrowserChannelException("Old LoadModule message used, but not v1 protocol");
  }
moduleName=oldLoadModule.getModuleName();
userAgent=oldLoadModule.getUserAgent();
protocolVersion=1;
HelpInfo helpInfo=new HelpInfo(){
@Override public String getAnchorText(){
return "UsingOOPHM wiki page";
}
@Override public URL getURL(){
try {
return new URL("http://code.google.com/p/google-web-toolkit/wiki/UsingOOPHM");
}
 catch (MalformedURLException e) {
return null;
}
}
}
;
logger.log(TreeLogger.WARN,"Connection from old browser plugin -- " + "please upgrade to a later version for full functionality",null,helpInfo);
break;
case CHECK_VERSIONS:
String connectError=null;
CheckVersionsMessage hello=CheckVersionsMessage.receive(this);
int minVersion=hello.getMinVersion();
int maxVersion=hello.getMaxVersion();
String hostedHtmlVersion=hello.getHostedHtmlVersion();
if (minVersion > PROTOCOL_VERSION_CURRENT || maxVersion < PROTOCOL_VERSION_OLDEST) {
connectError="Client supported protocol version range " + minVersion + " - "+ maxVersion+ "; server "+ PROTOCOL_VERSION_OLDEST+ " - "+ PROTOCOL_VERSION_CURRENT;
}
 else {
if (!HostedHtmlVersion.validHostedHtmlVersion(logger,hostedHtmlVersion)) {
new FatalErrorMessage(this,"Invalid hosted.html version - check log window").send();
return;
}
}
if (connectError != null) {
logger.log(TreeLogger.ERROR,"Connection error: " + connectError,null);
new FatalErrorMessage(this,connectError).send();
return;
}
protocolVersion=Math.min(PROTOCOL_VERSION_CURRENT,maxVersion);
new ProtocolVersionMessage(this,protocolVersion).send();
type=Message.readMessageType(getStreamFromOtherSide());
if (type == MessageType.CHOOSE_TRANSPORT) {
ChooseTransportMessage chooseTransport=ChooseTransportMessage.receive(this);
String transport=selectTransport(chooseTransport.getTransports());
String transportArgs=null;
if (transport != null) {
transportArgs=createTransport(transport);
}
new SwitchTransportMessage(this,transport,transportArgs).send();
type=Message.readMessageType(getStreamFromOtherSide());
}
if (type != MessageType.LOAD_MODULE) {
logger.log(TreeLogger.ERROR,"Unexpected message type " + type + "; expecting LoadModule");
return;
}
LoadModuleMessage loadModule=LoadModuleMessage.receive(this);
url=loadModule.getUrl();
tabKey=loadModule.getTabKey();
sessionKey=loadModule.getSessionKey();
moduleName=loadModule.getModuleName();
userAgent=loadModule.getUserAgent();
break;
case REQUEST_PLUGIN:
logger.log(TreeLogger.ERROR,"Plugin download not supported yet");
new FatalErrorMessage(this,"Plugin download not supported").send();
return;
default :
logger.log(TreeLogger.ERROR,"Unexpected message type " + type + "; expecting CheckVersions");
return;
}
if (protocolVersion >= PROTOCOL_VERSION_GET_ICON) {
synchronized (cacheLock) {
if (iconCache.containsKey(userAgent)) {
iconBytes=iconCache.get(userAgent);
}
 else {
RequestIconMessage.send(this);
type=Message.readMessageType(getStreamFromOtherSide());
if (type != MessageType.USER_AGENT_ICON) {
logger.log(TreeLogger.ERROR,"Unexpected message type " + type + "; expecting UserAgentIcon");
return;
}
UserAgentIconMessage uaIconMessage=UserAgentIconMessage.receive(this);
iconBytes=uaIconMessage.getIconBytes();
iconCache.put(userAgent,iconBytes);
}
}
}
Thread.currentThread().setName("Code server for " + moduleName + " from "+ userAgent+ " on "+ url+ " @ "+ sessionKey);
createDevModeSession();
logger=handler.loadModule(this,moduleName,userAgent,url,tabKey,sessionKey,iconBytes);
if (logger == null) {
try {
Value errMsg=new Value();
errMsg.setString("An error occurred loading the GWT module " + moduleName);
ReturnMessage.send(this,true,errMsg);
return;
}
 catch (IOException e) {
throw new RemoteDeathError(e);
}
}
try {
try {
ReturnMessage.send(this,false,new Value());
}
 catch (IOException e) {
throw new RemoteDeathError(e);
}
reactToMessages(handler);
}
 catch (RemoteDeathError e) {
if (!ignoreRemoteDeath) {
logger.log(TreeLogger.ERROR,e.getMessage(),e);
}
}
 finally {
handler.unloadModule(this,moduleName);
}
}
