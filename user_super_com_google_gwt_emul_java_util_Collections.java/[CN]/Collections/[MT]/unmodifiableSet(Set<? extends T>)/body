{
  return new Set<T>(){
    public boolean add(    T o){
      throw new UnsupportedOperationException("unmodifiableSet: add not permitted");
    }
    public boolean addAll(    Collection<? extends T> c){
      throw new UnsupportedOperationException("unmodifiableSet: addAll not permitted");
    }
    public void clear(){
      throw new UnsupportedOperationException("unmodifiableSet: clear not permitted");
    }
    public boolean contains(    Object o){
      return set.contains(o);
    }
    public boolean containsAll(    Collection<?> c){
      return set.containsAll(c);
    }
    public boolean isEmpty(){
      return set.isEmpty();
    }
    public Iterator<T> iterator(){
      final Iterator<? extends T> it=set.iterator();
      return new Iterator<T>(){
        public boolean hasNext(){
          return it.hasNext();
        }
        public T next(){
          return it.next();
        }
        public void remove(){
          throw new UnsupportedOperationException("unmodifiableCollection.iterator: remove not permitted");
        }
      }
;
    }
    public boolean remove(    Object o){
      throw new UnsupportedOperationException("unmodifiableSet: remove not permitted");
    }
    public boolean removeAll(    Collection<?> c){
      throw new UnsupportedOperationException("unmodifiableSet: removeAll not permitted");
    }
    public boolean retainAll(    Collection<?> c){
      throw new UnsupportedOperationException("unmodifiableSet: retainAll not permitted");
    }
    public int size(){
      return set.size();
    }
    public Object[] toArray(){
      return set.toArray();
    }
    public <OT>OT[] toArray(    OT[] a){
      return set.toArray(a);
    }
  }
;
}
