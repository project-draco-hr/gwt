{
  return new List<T>(){
    public void add(    int index,    T element){
      throw new UnsupportedOperationException("unmodifiableList: add not permitted");
    }
    public boolean add(    T o){
      throw new UnsupportedOperationException("unmodifiableList: add not permitted");
    }
    public boolean addAll(    Collection<? extends T> c){
      throw new UnsupportedOperationException("unmodifiableList: addAll not permitted");
    }
    public boolean addAll(    int index,    Collection<? extends T> c){
      throw new UnsupportedOperationException("unmodifiableList: addAll not permitted");
    }
    public void clear(){
      throw new UnsupportedOperationException("unmodifiableList: clear not permitted");
    }
    public boolean contains(    Object o){
      return list.contains(o);
    }
    public boolean containsAll(    Collection<?> c){
      return list.containsAll(c);
    }
    public T get(    int index){
      return list.get(index);
    }
    public int indexOf(    Object o){
      return list.indexOf(o);
    }
    public boolean isEmpty(){
      return list.isEmpty();
    }
    public Iterator<T> iterator(){
      return listIterator();
    }
    public int lastIndexOf(    Object o){
      return list.lastIndexOf(o);
    }
    public ListIterator<T> listIterator(){
      return new UnmodifiableListIterator<T>(list.listIterator());
    }
    public ListIterator<T> listIterator(    int from){
      return new UnmodifiableListIterator<T>(list.listIterator(from));
    }
    public T remove(    int index){
      throw new UnsupportedOperationException("unmodifiableList: remove not permitted");
    }
    public boolean remove(    Object o){
      throw new UnsupportedOperationException("unmodifiableList: remove not permitted");
    }
    public boolean removeAll(    Collection<?> c){
      throw new UnsupportedOperationException("unmodifiableList: removeAll not permitted");
    }
    public boolean retainAll(    Collection<?> c){
      throw new UnsupportedOperationException("unmodifiableList: retainAll not permitted");
    }
    public T set(    int index,    T element){
      throw new UnsupportedOperationException("unmodifiableList: set not permitted");
    }
    public int size(){
      return list.size();
    }
    public List<T> subList(    int fromIndex,    int toIndex){
      throw new UnsupportedOperationException("unmodifiableList: subList not permitted");
    }
    public Object[] toArray(){
      return list.toArray();
    }
    public <OT>OT[] toArray(    OT[] array){
      return list.toArray(array);
    }
  }
;
}
