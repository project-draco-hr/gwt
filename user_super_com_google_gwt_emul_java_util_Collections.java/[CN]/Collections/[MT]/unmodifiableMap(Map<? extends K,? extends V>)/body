{
  return new Map<K,V>(){
    public void clear(){
      throw new UnsupportedOperationException("unmodifiableMap: clear not permitted");
    }
    public boolean containsKey(    Object key){
      return map.containsKey(key);
    }
    public boolean containsValue(    Object value){
      return map.containsValue(value);
    }
    public Set<Map.Entry<K,V>> entrySet(){
      Set<? extends Map.Entry<? extends K,? extends V>> entrySet=map.entrySet();
      return (Set<Map.Entry<K,V>>)entrySet;
    }
    public V get(    Object key){
      return map.get(key);
    }
    public boolean isEmpty(){
      return map.isEmpty();
    }
    public Set<K> keySet(){
      return (Set<K>)map.keySet();
    }
    public V put(    K key,    V value){
      throw new UnsupportedOperationException("unmodifiableMap: put not permitted");
    }
    public void putAll(    Map<? extends K,? extends V> t){
      throw new UnsupportedOperationException("unmodifiableMap: putAll not permitted");
    }
    public V remove(    Object key){
      throw new UnsupportedOperationException("unmodifiableMap: remove not permitted");
    }
    public int size(){
      return map.size();
    }
    public Collection<V> values(){
      return (Collection<V>)map.values();
    }
  }
;
}
