{
  Map<String,CompilationUnit> unitMap=state.getCompilationUnitMap();
  Collection<CompilationUnit> units=state.getCompilationUnits();
  assertEquals(oracle.getResources().size() + generatedTypeNames.length,units.size());
  assertEquals(new HashSet<CompilationUnit>(unitMap.values()),new HashSet<CompilationUnit>(units));
  Set<String> resourcePathNames=new HashSet<String>(oracle.getPathNames());
  Set<String> generatedTypes=new HashSet<String>(Arrays.asList(generatedTypeNames));
  assertEquals(resourcePathNames.size() + generatedTypes.size(),units.size());
  for (  Entry<String,CompilationUnit> entry : unitMap.entrySet()) {
    String className=entry.getKey();
    CompilationUnit unit=entry.getValue();
    assertEquals(className,unit.getTypeName());
    if (generatedTypes.contains(className)) {
      assertNotNull(generatedTypes.remove(className));
    }
 else {
      String partialPath=className.replace('.','/') + ".java";
      assertTrue(resourcePathNames.contains(partialPath));
      assertNotNull(resourcePathNames.remove(partialPath));
    }
  }
  assertEquals(0,resourcePathNames.size());
  assertEquals(0,generatedTypes.size());
}
