{
  assertEquals(0f,Float.parseFloat("0"),0.0);
  assertEquals(-1.5f,Float.parseFloat("-1.5"),0.0);
  assertEquals(3.0f,Float.parseFloat("3."),0.0);
  assertEquals(0.5f,Float.parseFloat(".5"),0.0);
  assertEquals(1.0f,Float.parseFloat("1.0f"),0.0);
  assertEquals(1.0f,Float.parseFloat("1.0F"),0.0);
  assertEquals(1.0f,Float.parseFloat("1.0d"),0.0);
  assertEquals(1.0f,Float.parseFloat("1.0D"),0.0);
  assertTrue(Float.isNaN(Float.parseFloat("+NaN")));
  assertTrue(Float.isNaN(Float.parseFloat("NaN")));
  assertTrue(Float.isNaN(Float.parseFloat("-NaN")));
  assertEquals(Float.POSITIVE_INFINITY,Float.parseFloat("+Infinity"));
  assertEquals(Float.POSITIVE_INFINITY,Float.parseFloat("Infinity"));
  assertEquals(Float.NEGATIVE_INFINITY,Float.parseFloat("-Infinity"));
  try {
    Float.parseFloat("nan");
    fail("Expected NumberFormatException");
  }
 catch (  NumberFormatException expected) {
  }
  try {
    Float.parseFloat("infinity");
    fail("Expected NumberFormatException");
  }
 catch (  NumberFormatException expected) {
  }
  try {
    Float.parseFloat("1.2.3");
    fail("Expected NumberFormatException");
  }
 catch (  NumberFormatException expected) {
  }
  try {
    Float.parseFloat("+-1.2");
    fail("Expected NumberFormatException");
  }
 catch (  NumberFormatException expected) {
  }
  try {
    Float.parseFloat("1e");
    fail("Expected NumberFormatException");
  }
 catch (  NumberFormatException expected) {
  }
}
