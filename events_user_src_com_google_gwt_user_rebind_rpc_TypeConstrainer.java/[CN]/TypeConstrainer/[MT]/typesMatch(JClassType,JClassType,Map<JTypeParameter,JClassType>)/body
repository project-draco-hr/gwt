{
  JGenericType type1Generic=type1.isGenericType();
  if (type1Generic != null) {
    return typesMatch(type1Generic.asParameterizedByWildcards(),type2,constraints);
  }
  JGenericType type2Generic=type2.isGenericType();
  if (type2Generic != null) {
    return typesMatch(type1,type2Generic.asParameterizedByWildcards(),constraints);
  }
  JWildcardType type1Wild=type1.isWildcard();
  if (type1Wild != null) {
    return typesMatch(type1Wild.getUpperBound(),type2,constraints);
  }
  JWildcardType type2Wild=type2.isWildcard();
  if (type2Wild != null) {
    return typesMatch(type1,type2Wild.getUpperBound(),constraints);
  }
  JRawType type1Raw=type1.isRawType();
  if (type1Raw != null) {
    return typesMatch(type1Raw.asParameterizedByWildcards(),type2,constraints);
  }
  JRawType type2Raw=type2.isRawType();
  if (type2Raw != null) {
    return typesMatch(type1,type2Raw.asParameterizedByWildcards(),constraints);
  }
  assert(type1Generic == null);
  assert(type2Generic == null);
  assert(type1Wild == null);
  assert(type2Wild == null);
  assert(type1Raw == null);
  assert(type2Raw == null);
  if (type1 == type2) {
    return true;
  }
  if (constraints.containsKey(type1)) {
    JTypeParameter type1Parameter=(JTypeParameter)type1;
    JClassType type2Class=type2;
    JClassType type1Bound=constraints.get(type1Parameter);
    assert(!occurs(type1Parameter,type1Bound));
    if (!typesMatch(type1Bound,type2,constraints)) {
      return false;
    }
    if (type1Bound.isAssignableFrom(type2Class)) {
      constraints.put(type1Parameter,type2Class);
    }
  }
  if (type1 == typeOracle.getJavaLangObject()) {
    return true;
  }
  if (type2 == typeOracle.getJavaLangObject()) {
    return true;
  }
  JTypeParameter type1Param=type1.isTypeParameter();
  if (type1Param != null) {
    return true;
  }
  JTypeParameter type2Param=type2.isTypeParameter();
  if (type2Param != null) {
    return true;
  }
  JArrayType type1Array=type1.isArray();
  JArrayType type2Array=type2.isArray();
  if (type1Array != null && type2Array != null) {
    if (typesMatch(type1Array.getComponentType(),type2Array.getComponentType(),constraints)) {
      return true;
    }
  }
  if (isRealOrParameterized(type1) && isRealOrParameterized(type2)) {
    JClassType baseType1=getBaseType(type1);
    JClassType baseType2=getBaseType(type2);
    JParameterizedType type1Parameterized=type1.isParameterized();
    JParameterizedType type2Parameterized=type2.isParameterized();
    if (baseType1 == baseType2 && type1Parameterized != null && type2Parameterized != null) {
      JClassType[] args1=type1Parameterized.getTypeArgs();
      JClassType[] args2=type2Parameterized.getTypeArgs();
      boolean allMatch=true;
      for (int i=0; i < args1.length; i++) {
        if (!typesMatch(args1[i],args2[i],constraints)) {
          allMatch=false;
        }
      }
      if (allMatch) {
        return true;
      }
    }
 else {
      if (baseTypesOverlap(baseType1,baseType2)) {
        return true;
      }
    }
  }
  return false;
}
