{
  super.onLoad();
  this.reg=model.addListHandler(new ListHandler<T>(){
    public void onDataChanged(    ListEvent<T> event){
      int start=event.getStart();
      int len=event.getLength();
      List<T> values=event.getValues();
      StringBuilder sb=new StringBuilder();
      for (int i=0; i < len; i++) {
        sb.append("<div __idx='" + (start + i) + "' __seq='"+ seq+++ "'>");
        cell.render(values.get(i),null,sb);
        sb.append("</div>");
      }
      Element parent=getElement().getFirstChildElement();
      if (start == 0 && len == maxSize) {
        parent.setInnerHTML(sb.toString());
      }
 else {
        makeElements();
        tmpElem.setInnerHTML(sb.toString());
        for (int i=0; i < len; i++) {
          Element child=parent.getChild(start + i).cast();
          parent.replaceChild(tmpElem.getChild(0),child);
        }
      }
    }
    public void onSizeChanged(    SizeChangeEvent event){
      size=event.getSize();
      showOrHide(showMoreElem,size > maxSize);
      showOrHide(showFewerElem,maxSize > initialMaxSize);
    }
    private void makeElements(){
      Element parent=getElement().getFirstChildElement();
      int childCount=parent.getChildCount();
      int actualSize=Math.min(size,maxSize);
      if (actualSize > childCount) {
        StringBuilder sb=new StringBuilder();
        int newElements=actualSize - childCount;
        for (int i=0; i < newElements; i++) {
          sb.append("<div __idx='" + (childCount + i) + "'><i>loading...</i></div>");
        }
        if (childCount == 0) {
          parent.setInnerHTML(sb.toString());
        }
 else {
          tmpElem.setInnerHTML(sb.toString());
          for (int i=0; i < newElements; i++) {
            parent.appendChild(tmpElem.getChild(0));
          }
        }
      }
 else       if (actualSize < childCount) {
        while (actualSize < childCount) {
          parent.getChild(--childCount).removeFromParent();
        }
      }
    }
  }
);
  reg.setRangeOfInterest(0,maxSize);
}
