{
  boolean modified=false;
  Map<String,JsSwitchMember> seen=new HashMap<String,JsSwitchMember>();
  List<JsSwitchMember> cases=x.getCases();
  List<JsSwitchMember> newCases=new LinkedList<JsSwitchMember>();
  boolean hasPreviousFallthrough=false;
  for (  JsSwitchMember member : cases) {
    List<JsStatement> stmts=member.getStmts();
    if (!unconditionalControlBreak(stmts)) {
      hasPreviousFallthrough=true;
      newCases.add(member);
      continue;
    }
    String body=toSource(stmts);
    JsSwitchMember previousCase=seen.get(body);
    if (previousCase == null || hasPreviousFallthrough) {
      newCases.add(member);
      seen.put(body,member);
    }
 else {
      int index=newCases.indexOf(previousCase);
      member.getStmts().clear();
      newCases.add(index,member);
      modified=true;
    }
    hasPreviousFallthrough=false;
  }
  if (modified) {
    didChange=true;
    cases.clear();
    cases.addAll(newCases);
  }
  return true;
}
