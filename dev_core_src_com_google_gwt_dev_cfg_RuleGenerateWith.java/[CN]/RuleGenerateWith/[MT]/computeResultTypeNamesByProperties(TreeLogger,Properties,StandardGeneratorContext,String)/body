{
  try {
    Map<Map<String,String>,String> resultTypeNamesByProperties=Maps.newHashMap();
    DynamicPropertyOracle dynamicPropertyOracle=new DynamicPropertyOracle(moduleProperties);
    if (getGenerator().getAccessedPropertyNames() != null) {
      for (      String accessedPropertyName : getGenerator().getAccessedPropertyNames()) {
        try {
          dynamicPropertyOracle.getSelectionProperty(logger,accessedPropertyName);
        }
 catch (        BadPropertyValueException e) {
        }
      }
    }
    boolean needsAllTypesIfRun=getGenerator().contentDependsOnTypes() && context.isGlobalCompile();
    TypeOracle typeModelTypeOracle=(com.google.gwt.dev.javac.typemodel.TypeOracle)context.getTypeOracle();
    context.reset();
    context.setPropertyOracle(dynamicPropertyOracle);
    context.setCurrentGenerator(generatorClass);
    do {
      resultTypeNamesByProperties.clear();
      context.reset();
      Properties accessedProperties=new Properties();
      List<BindingProperty> accessedPropertiesList=new ArrayList<BindingProperty>(dynamicPropertyOracle.getAccessedProperties());
      for (      BindingProperty bindingProperty : accessedPropertiesList) {
        accessedProperties.addBindingProperty(bindingProperty);
      }
      PropertyPermutations permutationsOfAccessedProperties=new PropertyPermutations(accessedProperties,Sets.<String>newHashSet());
      for (int permutationId=0; permutationId < permutationsOfAccessedProperties.size(); permutationId++) {
        String[] orderedPropertyValues=permutationsOfAccessedProperties.getOrderedPropertyValues(permutationId);
        BindingProperty[] orderedProperties=permutationsOfAccessedProperties.getOrderedProperties();
        dynamicPropertyOracle.reset();
        for (int propertyIndex=0; propertyIndex < orderedPropertyValues.length; propertyIndex++) {
          dynamicPropertyOracle.prescribePropertyValue(orderedProperties[propertyIndex].getName(),orderedPropertyValues[propertyIndex]);
        }
        if (!isApplicable(logger,context,typeName)) {
          continue;
        }
        if (needsAllTypesIfRun) {
          typeModelTypeOracle.ensureAllLoaded();
        }
        String resultTypeName=getGenerator().generate(logger,context,typeName);
        if (resultTypeName != null) {
          resultTypeNamesByProperties.put(dynamicPropertyOracle.getPrescribedPropertyValuesByName(),resultTypeName);
        }
        if (dynamicPropertyOracle.haveAccessedPropertiesChanged()) {
          break;
        }
      }
    }
 while (dynamicPropertyOracle.haveAccessedPropertiesChanged());
    return resultTypeNamesByProperties;
  }
 catch (  UnableToCompleteException e) {
    throw new InternalCompilerException(e.getMessage());
  }
}
