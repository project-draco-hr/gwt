{
  String ident=x.getIdent();
  JsExpression q=x.getQualifier();
  if (ident.startsWith("@")) {
    int dispId=dispatchInfo.getDispId(ident);
    Member member;
    if (dispId < 0) {
      member=null;
    }
 else {
      member=dispatchInfo.getClassInfoByDispId(dispId).getMember(dispId);
    }
    if (member == null) {
      throw new HostedModeException("JSNI rewriter found reference to non-existent field in a field reference or java method tear-off: " + ident + " at "+ x.getSourceInfo());
    }
    if (member instanceof Field || member instanceof SyntheticClassMember) {
      if (q != null) {
        accept(q);
        out.print("[");
        out.print(String.valueOf(dispId));
        out.print("]");
      }
 else {
        out.print("__static[");
        out.print(String.valueOf(dispId));
        out.print("]");
      }
      return false;
    }
    int paramCount=0;
    if (member instanceof Method) {
      paramCount=((Method)member).getParameterTypes().length;
    }
 else     if (member instanceof Constructor<?>) {
      paramCount=((Constructor<?>)member).getParameterTypes().length;
    }
    SourceInfo newSourceInfo=x.getSourceInfo().makeChild(getClass(),"Replace JSNI ref for hosted mode");
    JsInvocation rewritten=new JsInvocation(newSourceInfo);
    rewritten.setQualifier(new JsNameRef(newSourceInfo,"__gwt_makeTearOff"));
    List<JsExpression> arguments=rewritten.getArguments();
    if (q == null) {
      q=JsNullLiteral.INSTANCE;
    }
    arguments.add(q);
    arguments.add(new JsNumberLiteral(newSourceInfo,dispId));
    arguments.add(new JsNumberLiteral(newSourceInfo,paramCount));
    accept(rewritten);
    return false;
  }
  return super.visit(x,ctx);
}
