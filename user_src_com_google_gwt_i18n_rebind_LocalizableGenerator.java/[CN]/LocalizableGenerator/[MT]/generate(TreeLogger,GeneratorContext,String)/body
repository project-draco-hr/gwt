{
  TypeOracle typeOracle=context.getTypeOracle();
  if (lastReloadCount != typeOracle.getReloadCount()) {
    ResourceFactory.clearCache();
    lastReloadCount=typeOracle.getReloadCount();
  }
  PropertyOracle propertyOracle=context.getPropertyOracle();
  Locale locale;
  try {
    String localeID=propertyOracle.getPropertyValue(logger,PROP_LOCALE);
    if ("default".equals(localeID)) {
      locale=null;
    }
 else {
      String[] localeChunks=localeID.split("_");
      if (localeChunks.length > 0) {
        if (!localeChunks[0].equals(localeChunks[0].toLowerCase())) {
          logger.log(TreeLogger.ERROR,localeID + "'s language code should be lower case",null);
          throw new UnableToCompleteException();
        }
      }
      if (localeChunks.length == 1) {
        locale=new Locale(localeChunks[0]);
      }
 else       if (localeChunks.length == 2) {
        locale=new Locale(localeChunks[0],localeChunks[1]);
      }
 else       if (localeChunks.length == 3) {
        locale=new Locale(localeChunks[0],localeChunks[1],localeChunks[2]);
      }
 else {
        logger.log(TreeLogger.ERROR,localeID + " is not a correctly formatted locale",null);
        throw new UnableToCompleteException();
      }
    }
  }
 catch (  BadPropertyValueException e) {
    logger.log(TreeLogger.ERROR,"Could not parse specified locale",e);
    throw new UnableToCompleteException();
  }
  JClassType targetClass;
  try {
    targetClass=typeOracle.getType(typeName);
  }
 catch (  NotFoundException e) {
    logger.log(TreeLogger.ERROR,"No such type",e);
    throw new UnableToCompleteException();
  }
  String generatedClass=AbstractLocalizableImplCreator.generateConstantOrMessageClass(logger,context,locale,targetClass);
  if (generatedClass != null) {
    return generatedClass;
  }
  return linkageCreator.linkWithImplClass(logger,targetClass,locale);
}
