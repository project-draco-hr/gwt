{
  CssTree cssTree=createAst(inputFile.toURI().toURL(),logger);
  Set<String> names=new TreeSet<String>(NAME_COMPARATOR);
  names.addAll(new ClassNamesCollector().getClassNames(cssTree));
  CollectConstantDefinitions collectConstantDefinitionsPass=new CollectConstantDefinitions(cssTree);
  collectConstantDefinitionsPass.runPass();
  Collection<String> renamedDefs=renameDefs(collectConstantDefinitionsPass.getConstantDefinitions().getConstantsNames());
  names.addAll(renamedDefs);
  Set<String> methodNames=new HashSet<String>();
  SourceWriter sw=new StringSourceWriter();
  int lastDot=interfaceName.lastIndexOf('.');
  if (standaloneFile) {
    sw.println("// DO NOT EDIT");
    sw.println("// Automatically generated by " + InterfaceGenerator.class.getName());
    sw.println("package " + interfaceName.substring(0,lastDot) + ";");
    sw.println("import " + CssResource.class.getCanonicalName() + ";");
    sw.println("import " + ClassName.class.getCanonicalName() + ";");
  }
  sw.println("interface " + interfaceName.substring(lastDot + 1) + " extends CssResource {");
  sw.indent();
  for (  String className : names) {
    String methodName=methodName(className);
    while (!methodNames.add(methodName)) {
      methodName+="_";
    }
    sw.println();
    if (!methodName.equals(className)) {
      sw.println("@ClassName(\"" + Generator.escape(className) + "\")");
    }
    sw.println("String " + methodName + "();");
  }
  sw.outdent();
  sw.println("}");
  return sw.toString();
}
