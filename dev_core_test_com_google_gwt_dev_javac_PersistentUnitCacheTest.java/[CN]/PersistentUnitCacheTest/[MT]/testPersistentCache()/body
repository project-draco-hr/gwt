{
  TreeLogger logger=TreeLogger.NULL;
  File cacheDir=null;
  lastCacheDir=cacheDir=File.createTempFile("persistentCacheTest","");
  assertNotNull(cacheDir);
  assertTrue(cacheDir.delete());
  assertTrue(cacheDir.mkdir());
  File unitCacheDir=new File(cacheDir,PersistentUnitCache.UNIT_CACHE_PREFIX);
  assertNull(unitCacheDir.list());
  PersistentUnitCache cache=new PersistentUnitCache(logger,cacheDir);
  MockCompilationUnit foo1=new MockCompilationUnit("com.example.Foo","Foo: source1");
  cache.add(foo1);
  MockCompilationUnit bar1=new MockCompilationUnit("com.example.Bar","Bar: source1");
  cache.add(bar1);
  CompilationUnit result;
  result=cache.find(foo1.getContentId());
  assertNotNull(result);
  assertEquals("com.example.Foo",result.getTypeName());
  result=cache.find(bar1.getContentId());
  assertNotNull(result);
  assertEquals("com.example.Bar",result.getTypeName());
  result=cache.find("/mock/com/example/Foo.java");
  assertNotNull(result);
  assertEquals("com.example.Foo",result.getTypeName());
  result=cache.find("/mock/com/example/Bar.java");
  assertNotNull(result);
  assertEquals("com.example.Bar",result.getTypeName());
  MockCompilationUnit foo2=new MockCompilationUnit("com.example.Foo","Foo: source2");
  cache.add(foo2);
  result=cache.find(foo1.getContentId());
  assertNull(result);
  result=cache.find(foo2.getContentId());
  assertNotNull(result);
  assertEquals("com.example.Foo",result.getTypeName());
  result=cache.find("/mock/com/example/Foo.java");
  assertNotNull(result);
  assertEquals("com.example.Foo",result.getTypeName());
  assertEquals(foo2.getContentId(),result.getContentId());
  cache.cleanup(logger);
  cache.shutdown();
  assertNumCacheFiles(unitCacheDir,1);
  cache=new PersistentUnitCache(logger,cacheDir);
  result=cache.find("/mock/com/example/Foo.java");
  assertNotNull(result);
  assertEquals("com.example.Foo",result.getTypeName());
  assertEquals(foo2.getContentId(),result.getContentId());
  result=cache.find("/mock/com/example/Bar.java");
  assertNotNull(result);
  assertEquals("com.example.Bar",result.getTypeName());
  assertEquals(bar1.getContentId(),result.getContentId());
  result=cache.find(foo1.getContentId());
  assertNull(result);
  result=cache.find(bar1.getContentId());
  assertNotNull(result);
  assertEquals(bar1.getTypeName(),result.getTypeName());
  assertEquals(bar1.getContentId(),result.getContentId());
  result=cache.find(foo2.getContentId());
  assertNotNull(result);
  assertEquals(foo2.getTypeName(),result.getTypeName());
  assertEquals(foo2.getContentId(),result.getContentId());
  cache.cleanup(logger);
  cache.shutdown();
  assertNumCacheFiles(unitCacheDir,2);
  MockCompilationUnit lastUnit=null;
  assertTrue(PersistentUnitCache.CACHE_FILE_THRESHOLD > 3);
  for (int i=3; i < PersistentUnitCache.CACHE_FILE_THRESHOLD; ++i) {
    cache=new PersistentUnitCache(logger,cacheDir);
    lastUnit=new MockCompilationUnit("com.example.Foo","Foo Source" + i);
    cache.add(lastUnit);
    cache.cleanup(logger);
    cache.shutdown();
    assertNumCacheFiles(unitCacheDir,i);
  }
  cache=new PersistentUnitCache(logger,cacheDir);
  result=cache.find(lastUnit.getContentId());
  assertNotNull(result);
  assertEquals("com.example.Foo",result.getTypeName());
  assertEquals(lastUnit.getContentId(),result.getContentId());
  result=cache.find(bar1.getContentId());
  assertNotNull(result);
  assertEquals("com.example.Bar",result.getTypeName());
  assertEquals(bar1.getContentId(),result.getContentId());
  result=cache.find("/mock/com/example/Foo.java");
  assertNotNull(result);
  assertEquals("com.example.Foo",result.getTypeName());
  assertEquals(lastUnit.getContentId(),result.getContentId());
  result=cache.find("/mock/com/example/Bar.java");
  assertNotNull(result);
  assertEquals("com.example.Bar",result.getTypeName());
  assertEquals(bar1.getContentId(),result.getContentId());
  lastUnit=new MockCompilationUnit("com.example.Foo","Foo Source");
  cache.add(lastUnit);
  cache.cleanup(logger);
  cache.shutdown();
  assertNumCacheFiles(unitCacheDir,1);
}
