{
  String methodName=method.getName();
  String normalizedTagName=null;
  try {
    int type=TYPE_NONE;
    if (methodName.startsWith("__")) {
      if (methodName.endsWith("_begin")) {
        type=TYPE_BEGIN;
        normalizedTagName=methodName.substring(0,methodName.length() - "_begin".length());
      }
 else       if (methodName.endsWith("_end")) {
        type=TYPE_END;
        normalizedTagName=methodName.substring(0,methodName.length() - "_end".length());
      }
 else       if (methodName.equals("__text")) {
        type=TYPE_TEXT;
      }
    }
    if (type == TYPE_NONE) {
      return null;
    }
    assert(type == TYPE_BEGIN || type == TYPE_END || type == TYPE_TEXT);
    Class returnType=method.getReturnType();
    boolean arbitraryChildren=false;
    if (type == TYPE_BEGIN) {
      if (Schema.class.isAssignableFrom(returnType)) {
        arbitraryChildren=false;
        ReflectiveParser.registerSchemaLevel(returnType);
      }
 else       if (returnType.equals(Void.TYPE)) {
        arbitraryChildren=true;
      }
 else {
        throw new IllegalArgumentException("The return type of begin handlers must be 'void' or assignable to 'SchemaLevel'");
      }
    }
 else     if (!Void.TYPE.equals(returnType)) {
      throw new IllegalArgumentException("Only 'void' may be specified as a return type for 'end' and 'text' handlers");
    }
    if (type == TYPE_TEXT) {
      Class[] paramTypes=method.getParameterTypes();
      if (paramTypes.length != 1 || !String.class.equals(paramTypes[0])) {
        throw new IllegalArgumentException("__text handlers must have exactly one String parameter");
      }
      return new HandlerMethod(method,type,false,EMPTY_HANDLERPARAMS);
    }
 else {
      Class[] paramTypes=method.getParameterTypes();
      List handlerParams=new ArrayList();
      for (int i=0, n=paramTypes.length; i < n; ++i) {
        HandlerParam handlerParam=HandlerParam.create(method,normalizedTagName,i);
        if (handlerParam != null) {
          handlerParams.add(handlerParam);
        }
 else {
          throw new IllegalArgumentException("In method '" + method.getName() + "', parameter "+ (i + 1)+ " is an unsupported type");
        }
      }
      HandlerParam[] hpa=(HandlerParam[])handlerParams.toArray(EMPTY_HANDLERPARAMS);
      return new HandlerMethod(method,type,arbitraryChildren,hpa);
    }
  }
 catch (  Exception e) {
    throw new RuntimeException("Unable to use method '" + methodName + "' as a handler",e);
  }
}
