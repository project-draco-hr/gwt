{
  StringBuilder bld=new StringBuilder();
  bld=new StringBuilder(100);
  bld=new StringBuilder("abc");
  assertEquals("abc",bld.toString());
  bld=new StringBuilder((CharSequence)"abc");
  assertEquals("abc",bld.toString());
  bld=new StringBuilder();
  bld.append(true);
  assertEquals("true",bld.toString());
  bld=new StringBuilder();
  bld.append('a');
  assertEquals("a",bld.toString());
  bld=new StringBuilder();
  char[] abcde={'a','b','c','d','e'};
  bld.append(abcde);
  assertEquals("abcde",bld.toString());
  bld=new StringBuilder();
  bld.append(abcde,1,3);
  assertEquals("bcd",bld.toString());
  bld=new StringBuilder();
  bld.append((CharSequence)"abcde");
  assertEquals("abcde",bld.toString());
  bld=new StringBuilder();
  bld.append("abcde",2,4);
  assertEquals("cd",bld.toString());
  bld=new StringBuilder();
  bld.append(1.5);
  assertEquals("1.5",bld.toString());
  bld=new StringBuilder();
  bld.append(1.5F);
  assertEquals("1.5",bld.toString());
  bld=new StringBuilder();
  bld.append(5);
  assertEquals("5",bld.toString());
  bld=new StringBuilder();
  bld.append(5L);
  assertEquals("5",bld.toString());
  bld=new StringBuilder();
  bld.append(new Object(){
    @Override public String toString(){
      return "obj";
    }
  }
);
  assertEquals("obj",bld.toString());
  bld=new StringBuilder();
  bld.append("abc");
  assertEquals("abc",bld.toString());
  bld=new StringBuilder();
  bld.append(new StringBuffer("abc"));
  assertEquals("abc",bld.toString());
  bld=new StringBuilder();
  bld.append("abcde");
  assertEquals('c',bld.charAt(2));
  bld=new StringBuilder();
  bld.append("abcde");
  bld.delete(1,2);
  assertEquals("acde",bld.toString());
  bld=new StringBuilder();
  bld.append("abcde");
  bld.deleteCharAt(2);
  assertEquals("abde",bld.toString());
  bld=new StringBuilder();
  assertTrue(bld.capacity() >= 0);
  bld.ensureCapacity(100);
  bld.trimToSize();
  bld=new StringBuilder();
  bld.append("abcde");
  char[] chars={'0','0','0','0','0'};
  bld.getChars(2,4,chars,2);
  assertEquals('0',chars[0]);
  assertEquals('0',chars[1]);
  assertEquals('c',chars[2]);
  assertEquals('d',chars[3]);
  assertEquals('0',chars[4]);
  bld=new StringBuilder("01234");
  assertEquals(2,bld.indexOf("23"));
  bld=new StringBuilder();
  bld.append("0123401234");
  assertEquals(5,bld.indexOf("0123",1));
  bld=new StringBuilder("01234");
  bld.insert(2,true);
  assertEquals("01true234",bld.toString());
  bld=new StringBuilder("01234");
  bld.insert(2,'X');
  assertEquals("01X234",bld.toString());
  bld=new StringBuilder("01234");
  char[] chars2={'a','b','c','d','e'};
  bld.insert(2,chars2,3,2);
  assertEquals("01de234",bld.toString());
  bld=new StringBuilder("01234");
  bld.insert(2,(CharSequence)"abcde");
  assertEquals("01abcde234",bld.toString());
  bld=new StringBuilder("01234");
  bld.insert(2,"abcde",2,4);
  assertEquals("01cd234",bld.toString());
  bld=new StringBuilder("01234");
  bld.insert(2,1.5);
  assertEquals("011.5234",bld.toString());
  bld=new StringBuilder("01234");
  bld.insert(2,1.5F);
  assertEquals("011.5234",bld.toString());
  bld=new StringBuilder("01234");
  bld.insert(2,99);
  assertEquals("0199234",bld.toString());
  bld=new StringBuilder("01234");
  bld.insert(2,99L);
  assertEquals("0199234",bld.toString());
  bld=new StringBuilder("01234");
  bld.insert(2,new Object(){
    @Override public String toString(){
      return "obj";
    }
  }
);
  assertEquals("01obj234",bld.toString());
  bld=new StringBuilder("01234");
  bld.insert(2,"XX");
  assertEquals("01XX234",bld.toString());
  bld=new StringBuilder("0123401234");
  assertEquals(5,bld.lastIndexOf("0123"));
  bld=new StringBuilder("0123401234");
  assertEquals(0,bld.lastIndexOf("0123",4));
  bld=new StringBuilder("01234");
  assertEquals(5,bld.length());
  bld=new StringBuilder("01234");
  bld.replace(2,3,"XYZ");
  assertEquals("01XYZ34",bld.toString());
  bld=new StringBuilder("01234");
  bld.setCharAt(2,'X');
  assertEquals("01X34",bld.toString());
  bld=new StringBuilder("01234");
  bld.setLength(2);
  assertEquals("01",bld.toString());
  bld=new StringBuilder("01234");
  assertEquals("23",bld.subSequence(2,4));
  bld=new StringBuilder("01234");
  assertEquals("234",bld.substring(2));
  bld=new StringBuilder("01234");
  assertEquals("23",bld.substring(2,4));
  bld=new StringBuilder("k");
  bld.append(new StringBuilder("lm"));
  assertEquals("klm",bld.toString());
}
