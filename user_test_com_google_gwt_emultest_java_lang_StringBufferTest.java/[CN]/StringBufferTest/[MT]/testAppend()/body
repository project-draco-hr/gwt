{
  StringBuffer x=new StringBuffer();
  x.append(C.FLOAT_VALUE);
  assertTrue(x.toString().startsWith(C.FLOAT_STRING));
  x=new StringBuffer();
  x.append(C.INT_VALUE);
  assertEquals(C.INT_STRING,x.toString());
  x=new StringBuffer();
  x.append(C.LONG_VALUE);
  assertTrue(x.toString().startsWith(C.LONG_STRING));
  x=new StringBuffer();
  x.append(C.DOUBLE_VALUE);
  assertTrue(x.toString().startsWith(C.DOUBLE_STRING));
  x=new StringBuffer();
  x.append(C.CHAR_VALUE);
  assertEquals(C.CHAR_STRING,x.toString());
  x=new StringBuffer();
  x.append(C.CHAR_ARRAY_VALUE);
  assertEquals(C.CHAR_ARRAY_STRING,x.toString());
  x=new StringBuffer();
  x.append(C.CHAR_ARRAY_VALUE,1,4);
  assertEquals(C.CHAR_ARRAY_STRING.substring(1,5),x.toString());
  x=new StringBuffer();
  x.append(C.FALSE_VALUE);
  assertEquals(C.FALSE_STRING,x.toString());
  x=new StringBuffer();
  x.append(C.TRUE_VALUE);
  assertEquals(C.TRUE_STRING,x.toString());
  x=new StringBuffer();
  x.append((String)null);
  assertEquals("null",x.toString());
  x=new StringBuffer();
  x.append((CharSequence)"abc");
  assertEquals("abc",x.toString());
  x=new StringBuffer();
  x.append("abcde",2,3);
  assertEquals("c",x.toString());
  x=new StringBuffer("k");
  x.append(new StringBuffer("lm"));
  assertEquals("klm",x.toString());
  final CharSequence nullCharSequence=null;
  x=new StringBuffer("!");
  x.append(nullCharSequence);
  assertEquals("!null",x.toString());
  x=new StringBuffer("!");
  x.append(nullCharSequence,0,3);
  assertEquals("!nul",x.toString());
}
