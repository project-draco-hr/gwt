{
switch (op) {
case MUL:
    return Token.MUL;
case DIV:
  return Token.DIV;
case MOD:
return Token.MOD;
case ADD:
return Token.ADD;
case SUB:
return Token.SUB;
case SHL:
return Token.LSH;
case SHR:
return Token.RSH;
case SHRU:
return Token.URSH;
case LT:
return Token.LT;
case LTE:
return Token.LE;
case GT:
return Token.GT;
case GTE:
return Token.GE;
case INSTANCEOF:
return Token.INSTANCEOF;
case INOP:
return Token.IN;
case EQ:
return Token.EQ;
case NEQ:
return Token.NE;
case REF_EQ:
return Token.SHEQ;
case REF_NEQ:
return Token.SHNE;
case BIT_AND:
return Token.BITAND;
case BIT_XOR:
return Token.BITXOR;
case BIT_OR:
return Token.BITOR;
case AND:
return Token.AND;
case OR:
return Token.OR;
case ASG:
return Token.ASSIGN;
case ASG_ADD:
return Token.ASSIGN_ADD;
case ASG_SUB:
return Token.ASSIGN_SUB;
case ASG_MUL:
return Token.ASSIGN_MUL;
case ASG_DIV:
return Token.ASSIGN_DIV;
case ASG_MOD:
return Token.ASSIGN_MOD;
case ASG_SHL:
return Token.ASSIGN_LSH;
case ASG_SHR:
return Token.ASSIGN_RSH;
case ASG_SHRU:
return Token.ASSIGN_URSH;
case ASG_BIT_AND:
return Token.ASSIGN_BITAND;
case ASG_BIT_OR:
return Token.ASSIGN_BITOR;
case ASG_BIT_XOR:
return Token.ASSIGN_BITXOR;
case COMMA:
return Token.COMMA;
}
return 0;
}
