{
  this.typeOracle=typeOracle;
  String categoryType=getBenchmarkCategory(benchmarkClass);
  Map<String,JMethod> zeroArgMethods=BenchmarkGenerator.getNotOverloadedTestMethods(benchmarkClass);
  Map<String,JMethod> parameterizedMethods=BenchmarkGenerator.getParameterizedTestMethods(benchmarkClass,TreeLogger.NULL);
  List<JMethod> testMethods=new ArrayList<JMethod>(zeroArgMethods.size() + parameterizedMethods.size());
  testMethods.addAll(zeroArgMethods.values());
  testMethods.addAll(parameterizedMethods.values());
  Map<String,MetaData> metaDataMap=testMetaData.get(benchmarkClass.toString());
  if (metaDataMap == null) {
    metaDataMap=new HashMap<String,MetaData>();
    testMetaData.put(benchmarkClass.toString(),metaDataMap);
  }
  for (  JMethod method : testMethods) {
    String methodName=method.getName();
    String methodCategoryType=getBenchmarkCategory(method);
    if (methodCategoryType == null) {
      methodCategoryType=categoryType;
    }
    CategoryImpl methodCategory=getCategory(methodCategoryType);
    String methodSource=parser.getMethod(method);
    StringBuffer sourceBuffer=(methodSource == null) ? null : new StringBuffer(methodSource);
    StringBuffer summary=new StringBuffer();
    StringBuffer comment=new StringBuffer();
    getComment(sourceBuffer,summary,comment);
    MetaData metaData=new MetaData(benchmarkClass.toString(),methodName,(sourceBuffer != null) ? sourceBuffer.toString() : null,methodCategory,methodName,summary.toString());
    metaDataMap.put(methodName,metaData);
  }
}
