{
  Map settings=new HashMap();
  settings.put(CompilerOptions.OPTION_Source,CompilerOptions.VERSION_1_4);
  settings.put(CompilerOptions.OPTION_TargetPlatform,CompilerOptions.VERSION_1_4);
  settings.put(CompilerOptions.OPTION_DocCommentSupport,CompilerOptions.ENABLED);
  CompilerOptions options=new CompilerOptions(settings);
  IProblemFactory problemFactory=new DefaultProblemFactory(Locale.getDefault());
  ISourceElementRequestor requestor=new SourceElementRequestorAdapter(){
    public void enterMethod(    MethodInfo methodInfo){
      String name=new String(methodInfo.name);
      if (name.startsWith("test")) {
        currentMethod=new MethodBody();
        currentMethod.declarationStart=methodInfo.declarationStart;
        methods.put(name,currentMethod);
      }
    }
    public void exitMethod(    int declarationEnd,    int defaultValueStart,    int defaultValueEnd){
      if (currentMethod != null) {
        currentMethod.declarationEnd=declarationEnd;
        currentMethod=null;
      }
    }
  }
;
  boolean reportLocalDeclarations=true;
  boolean optimizeStringLiterals=true;
  SourceElementParser parser=new SourceElementParser(requestor,problemFactory,options,reportLocalDeclarations,optimizeStringLiterals);
  File sourceFile=findSourceFile(klass);
  sourceContents=read(sourceFile);
  CompilationUnit unit=new CompilationUnit(sourceContents,sourceFile.getName(),null);
  parser.parseCompilationUnit(unit,true);
}
