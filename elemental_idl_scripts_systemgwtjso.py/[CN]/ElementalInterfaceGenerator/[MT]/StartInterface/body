def StartInterface(self):
    if self._super_interface:
        typename = self._super_interface
    else:
        typename = self._interface.id
    implements = []
    implements_raw = {}
    extends = ''
    suppressed_extends = []
    imports = {}
    alreadyImplemented = {}
    for p in self._interface.parents:
        self.getImplements(alreadyImplemented, p)
    for attr in self._interface.attributes:
        self.addImport(imports, attr.type.id)
    for oper in self._interface.operations:
        self.addImport(imports, oper.type.id)
        for arg in oper.arguments:
            self.addImport(imports, arg.type.id)
    for parent in self._interface.parents:
        if ((not (parent.type.id in alreadyImplemented)) or (parent.type.id == 'ElementalMixinBase')):
            self.addImport(imports, parent.type.id)
            rawtype = DartType(parent.type.id).split('<')[0]
            if (rawtype == 'Object'):
                continue
            if (MatchSourceFilter(self._source_filter, parent) and (DartType(parent.type.id) != 'Object') and (rawtype not in implements_raw)):
                implements.append(DartType(parent.type.id))
                implements_raw[rawtype] = 1
    comment = ' extends'
    implements_str = ''
    if (self._interface.id == 'ElementalMixinBase'):
        extends = ' extends JsElementalBase'
        filtered_mixins = []
        for mixin in self._mixins:
            filtered_mixins.append(DartType(mixin))
        implements.extend(filtered_mixins)
    else:
        extends = ' extends JsElementalMixinBase'
    rawtype = DartType(self._interface.id).split('<')[0]
    if ((rawtype not in implements_raw) and (rawtype != 'Object')):
        implements.insert(0, DartType(self._interface.id))
    self.addImport(imports, self._interface.id)
    if ((len(self._interface.parents) > 0) and (not (self._interface.parents[0].type.id in self._mixins))):
        extends = (' extends Js' + DartType(self._interface.parents[0].type.id))
        self.addImport(imports, self._interface.parents[0].type.id)
    if implements:
        implements_str += (' implements ' + ', '.join(implements))
        comment = ','
    factory_provider = None
    constructor_info = AnalyzeConstructor(self._interface)
    (self._members_emitter, self._top_level_emitter) = self._emitter.Emit((self._template + '$!TOP_LEVEL'), ID=('Js' + typename), IMPLEMENTS=implements_str, EXTENDS=extends, PACKAGE=('elemental.js.' + self._module), IMPORTS=''.join(imports.keys()))
