def InterfaceGenerator(self, interface, common_prefix, super_interface_name, source_filter):
    '.'
    module = getModule(interface.annotations)
    if (super_interface_name is not None):
        interface_name = super_interface_name
    else:
        interface_name = interface.id
    template_file = ('jso_impl_%s.darttemplate' % interface_name)
    template = self._templates.TryLoad(template_file)
    if (not template):
        template = self._templates.Load('jso_impl.darttemplate')
    if ((interface_name in self._mixins) or interface_name.endswith('Callback') or interface_name.endswith('Handler')):
        return NullInterfaceGenerator(module, self._database, interface, None, template, common_prefix, super_interface_name, source_filter)
    dart_interface_file_path = self._FilePathForElementalInterface(module, interface_name)
    self._dart_interface_file_paths.append(dart_interface_file_path)
    dart_interface_code = self._emitters.FileEmitter(dart_interface_file_path)
    return ElementalInterfaceGenerator(module, self._database, interface, dart_interface_code, template, common_prefix, super_interface_name, source_filter, self._mixins)
