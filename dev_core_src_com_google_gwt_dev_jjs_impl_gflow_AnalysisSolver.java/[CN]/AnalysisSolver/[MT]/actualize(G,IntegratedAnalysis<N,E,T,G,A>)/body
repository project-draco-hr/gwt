{
  TransformationFunction<N,E,T,G,A> function=new TransformationFunction<N,E,T,G,A>(){
    public Transformation<T,G> transform(    final N node,    final G graph,    AssumptionMap<E,A> assumptionMap){
      final boolean[] didAssumptionChange=new boolean[1];
      Transformation<T,G> transformation=analysis.getIntegratedFlowFunction().interpretOrReplace(node,graph,new AssumptionMap<E,A>(){
        public A getAssumption(        E edge){
          Preconditions.checkArgument(graph.getStart(edge) == node || graph.getEnd(edge) == node);
          return getEdgeAssumption(graph,edge);
        }
        public void setAssumption(        E edge,        A assumption){
          Preconditions.checkArgument(graph.getStart(edge) == node || graph.getEnd(edge) == node);
          didAssumptionChange[0]=true;
        }
      }
);
      Preconditions.checkArgument(transformation == null || !didAssumptionChange[0]);
      return transformation;
    }
  }
;
  return applyTransformation(graph,function);
}
