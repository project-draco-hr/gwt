{
  final JMethodBody body=(JMethodBody)method.getBody();
  new TempLocalVisitor(){
    private JMethodCall createClinitCall(    SourceInfo sourceInfo,    JDeclaredType targetType){
      JMethod clinit=targetType.getClinitTarget().getClinitMethod();
      assert(JProgram.isClinit(clinit));
      return new JMethodCall(sourceInfo,null,clinit);
    }
    private JMultiExpression createMultiExpressionForInstanceAndClinit(    JExpression x){
      JMultiExpression multi=new JMultiExpression(x.getSourceInfo());
      JMethodCall clinit=null;
      if (x instanceof JMethodCall) {
        JExpression instance=((JMethodCall)x).getInstance();
        if (instance != null) {
          multi.exprs.add(instance);
          JLocal var=createTempLocal(instance.getSourceInfo(),instance.getType());
          JLocalRef localRef=new JLocalRef(var.getSourceInfo(),var);
          instance=new JBinaryOperation(instance.getSourceInfo(),localRef.getType(),JBinaryOperator.ASG,localRef,instance);
        }
        clinit=createClinitCall(x.getSourceInfo(),((JMethodCall)x).getTarget().getEnclosingType());
      }
 else       if (x instanceof JFieldRef) {
        clinit=createClinitCall(x.getSourceInfo(),((JFieldRef)x).getEnclosingType());
      }
      if (clinit != null) {
        multi.exprs.add(clinit);
      }
      multi.exprs.add(x);
      return multi;
    }
    @Override public void endVisit(    JMethodCall x,    Context ctx){
      ctx.replaceMe(createMultiExpressionForInstanceAndClinit(x));
    }
    @Override public void endVisit(    JFieldRef x,    Context ctx){
      ctx.replaceMe(createMultiExpressionForInstanceAndClinit(x));
    }
  }
.accept(method);
}
