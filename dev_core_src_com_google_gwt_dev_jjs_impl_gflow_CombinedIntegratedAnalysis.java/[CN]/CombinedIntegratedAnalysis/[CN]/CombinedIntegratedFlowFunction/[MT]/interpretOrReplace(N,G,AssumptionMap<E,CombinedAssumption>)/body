{
  final Map<E,CombinedAssumption.CopyOnWrite> newAssumptions=new IdentityHashMap<E,CombinedAssumption.CopyOnWrite>();
  final int size=functions.size();
  for (int i=0; i < size; ++i) {
    final int slice=i;
    IntegratedFlowFunction function=functions.get(i);
    Transformation transformation=function.interpretOrReplace(node,graph,new AssumptionMap(){
      @Override public Assumption getAssumption(      Object edge){
        CombinedAssumption combinedAssumption=assumptionMap.getAssumption((E)edge);
        if (combinedAssumption == null) {
          return null;
        }
        return combinedAssumption.get(slice);
      }
      @Override public void setAssumption(      Object edge,      Assumption assumption){
        CombinedAssumption.CopyOnWrite newAssumption=newAssumptions.get(edge);
        if (newAssumption == null) {
          newAssumption=new CombinedAssumption.CopyOnWrite(assumptionMap.getAssumption((E)edge),size);
          newAssumptions.put((E)edge,newAssumption);
        }
        newAssumption.set(slice,assumption);
      }
      @Override public String toString(){
        return AssumptionUtil.toString(graph.getInEdges(node),graph.getOutEdges(node),this);
      }
    }
);
    if (transformation != null) {
      return transformation;
    }
  }
  for (  E e : newAssumptions.keySet()) {
    CombinedAssumption.CopyOnWrite newAssumption=newAssumptions.get(e);
    if (newAssumption.isCopied()) {
      assumptionMap.setAssumption(e,newAssumption.unwrap());
    }
  }
  return null;
}
