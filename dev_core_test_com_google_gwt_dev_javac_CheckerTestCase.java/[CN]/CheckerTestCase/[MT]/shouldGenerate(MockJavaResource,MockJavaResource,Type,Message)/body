{
  UnitTestTreeLogger.Builder b=new UnitTestTreeLogger.Builder();
  b.setLowestLogLevel(logLevel);
  Pass pass=providePass();
  String topLevelMessage=pass.getTopErrorMessage(logLevel,buggyCode);
  if (messages.length != 0 && topLevelMessage != null) {
    b.expect(logLevel,topLevelMessage,null);
  }
  for (  Message message : messages) {
    final String fullMessage="Line " + message.line + ": "+ message.message;
    b.expect(message.logLevel,fullMessage,null);
  }
  UnitTestTreeLogger logger=b.createLogger();
  boolean result=pass.run(logger,buggyCode,extraCode);
  logger.assertCorrectLogEntries();
  String className=buggyCode.getTypeName();
  if (messages.length != 0 && logLevel == TreeLogger.ERROR) {
    assertFalse("Compilation unit " + className + " not removed"+ " but should have been removed.",pass.classAvailable(className));
  }
 else {
    assertTrue("Compilation unit " + className + " was removed but shouldnt have.",pass.classAvailable(className));
  }
  boolean expectingErrors=messages.length != 0 && logLevel == Type.ERROR;
  assertEquals(!expectingErrors,result);
}
