{
  Event loadPersistentUnitEvent=SpeedTracerLogger.start(DevModeEventType.LOAD_PERSISTENT_UNIT_CACHE);
  if (logger.isLoggable(TreeLogger.TRACE)) {
    logger.log(TreeLogger.TRACE,"Looking for previously cached Compilation Units in " + cacheDir.getPath());
  }
  try {
    List<File> files=cacheDir.listCacheFilesToLoad();
    for (    File cacheFile : files) {
      FileInputStream fis=null;
      BufferedInputStream bis=null;
      ObjectInputStream inputStream=null;
      boolean deleteCacheFile=false;
      try {
        fis=new FileInputStream(cacheFile);
        bis=new BufferedInputStream(fis);
        inputStream=new StringInterningObjectInputStream(bis);
        while (true) {
          CachedCompilationUnit unit=(CachedCompilationUnit)inputStream.readObject();
          if (unit == null) {
            break;
          }
          if (unit.getTypesSerializedVersion() != GwtAstBuilder.getSerializationVersion()) {
            continue;
          }
          UnitCacheEntry entry=new UnitCacheEntry(unit,UnitOrigin.PERSISTENT);
          UnitCacheEntry existingEntry=unitMap.get(unit.getResourcePath());
          if (existingEntry != null && unit.getLastModified() >= existingEntry.getUnit().getLastModified()) {
            super.remove(existingEntry.getUnit());
            unitMap.put(unit.getResourcePath(),entry);
            unitMapByContentId.put(unit.getContentId(),entry);
          }
 else           if (existingEntry == null) {
            unitMap.put(unit.getResourcePath(),entry);
            unitMapByContentId.put(unit.getContentId(),entry);
          }
        }
      }
 catch (      EOFException ex) {
      }
catch (      IOException ex) {
        deleteCacheFile=true;
        if (logger.isLoggable(TreeLogger.TRACE)) {
          logger.log(TreeLogger.TRACE,"Ignoring and deleting cache log " + cacheFile.getAbsolutePath() + " due to read error.",ex);
        }
      }
catch (      ClassNotFoundException ex) {
        deleteCacheFile=true;
        if (logger.isLoggable(TreeLogger.TRACE)) {
          logger.log(TreeLogger.TRACE,"Ignoring and deleting cache log " + cacheFile.getAbsolutePath() + " due to deserialization error.",ex);
        }
      }
 finally {
        Utility.close(inputStream);
        Utility.close(bis);
        Utility.close(fis);
      }
      if (deleteCacheFile) {
        logger.log(Type.WARN,"Deleting " + cacheFile + " due to an exception");
        cacheDir.deleteUnlessOpen(cacheFile);
      }
 else {
        if (logger.isLoggable(TreeLogger.TRACE)) {
          logger.log(TreeLogger.TRACE,cacheFile.getName() + ": Load complete");
        }
      }
    }
  }
  finally {
    loadPersistentUnitEvent.end();
  }
}
