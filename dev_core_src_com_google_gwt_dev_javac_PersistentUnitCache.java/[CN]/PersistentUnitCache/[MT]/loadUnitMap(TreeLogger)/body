{
  Event loadPersistentUnitEvent=SpeedTracerLogger.start(DevModeEventType.LOAD_PERSISTENT_UNIT_CACHE);
  logger.log(TreeLogger.TRACE,"Looking for previously cached Compilation Units in " + cacheDirectory.getAbsolutePath());
  try {
    if (cacheDirectory.isDirectory() && cacheDirectory.canRead()) {
      File[] files=getCacheFiles();
      for (      File cacheFile : files) {
        FileInputStream fis=null;
        BufferedInputStream bis=null;
        ObjectInputStream inputStream=null;
        if (cacheFile.equals(currentCacheFile)) {
          continue;
        }
        try {
          fis=new FileInputStream(cacheFile);
          bis=new BufferedInputStream(fis);
          inputStream=new ObjectInputStream(bis);
          while (true) {
            CompilationUnit unit=(CompilationUnit)inputStream.readObject();
            if (unit == null) {
              break;
            }
            UnitCacheEntry entry=new UnitCacheEntry(unit,UnitOrigin.PERSISTENT);
            UnitCacheEntry oldEntry=unitMap.get(unit.getResourceLocation());
            if (oldEntry != null && unit.getLastModified() > oldEntry.getUnit().getLastModified()) {
              super.remove(oldEntry.getUnit());
              unitMap.put(unit.getResourceLocation(),entry);
              unitMapByContentId.put(unit.getContentId(),entry);
            }
 else             if (oldEntry == null) {
              unitMap.put(unit.getResourceLocation(),entry);
              unitMapByContentId.put(unit.getContentId(),entry);
            }
          }
        }
 catch (        EOFException ex) {
        }
catch (        IOException ex) {
          logger.log(TreeLogger.WARN,"Error reading cache file: " + cacheFile.getAbsolutePath(),ex);
        }
catch (        ClassNotFoundException ex) {
          logger.log(TreeLogger.ERROR,"Error deserializing CompilationUnit in " + cacheFile.getAbsolutePath(),ex);
        }
 finally {
          Utility.close(inputStream);
          Utility.close(bis);
          Utility.close(fis);
          logger.log(TreeLogger.TRACE,cacheFile.getName() + ": Load complete");
        }
      }
    }
 else {
      logger.log(TreeLogger.TRACE,"Starting with empty Cache: CompilationUnit cache directory does " + "not exist or is not readable.");
    }
  }
  finally {
    loadPersistentUnitEvent.end();
  }
}
