{
  if (!(container instanceof Context))   return;
  ServletContext servletContext=((Context)container).getServletContext();
  if (servletContext == null)   return;
  if (container instanceof StandardContext) {
    String baseClasspath=((StandardContext)container).getCompilerClasspath();
    if (baseClasspath != null) {
      servletContext.setAttribute(Globals.CLASS_PATH_ATTR,baseClasspath);
      return;
    }
  }
  StringBuffer classpath=new StringBuffer();
  ClassLoader loader=getClassLoader();
  int layers=0;
  int n=0;
  while (loader != null) {
    if (!(loader instanceof URLClassLoader)) {
      String cp=getClasspath(loader);
      if (cp == null) {
        log.info("Unknown loader " + loader + " "+ loader.getClass());
        break;
      }
 else {
        if (n > 0)         classpath.append(File.pathSeparator);
        classpath.append(cp);
        n++;
      }
      break;
    }
    URL repositories[]=((URLClassLoader)loader).getURLs();
    for (int i=0; i < repositories.length; i++) {
      String repository=repositories[i].toString();
      if (repository.startsWith("file://"))       repository=repository.substring(7);
 else       if (repository.startsWith("file:"))       repository=repository.substring(5);
 else       if (repository.startsWith("jndi:"))       repository=servletContext.getRealPath(repository.substring(5));
 else       continue;
      if (repository == null)       continue;
      if (n > 0)       classpath.append(File.pathSeparator);
      classpath.append(repository);
      n++;
    }
    loader=loader.getParent();
    layers++;
  }
  this.classpath=classpath.toString();
  servletContext.setAttribute(Globals.CLASS_PATH_ATTR,classpath.toString());
}
