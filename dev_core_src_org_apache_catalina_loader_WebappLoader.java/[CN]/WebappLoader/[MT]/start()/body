{
  if (!initialized)   init();
  if (started)   throw new LifecycleException(sm.getString("webappLoader.alreadyStarted"));
  if (log.isDebugEnabled())   log.debug(sm.getString("webappLoader.starting"));
  lifecycle.fireLifecycleEvent(START_EVENT,null);
  started=true;
  if (container.getResources() == null) {
    log.info("No resources for " + container);
    return;
  }
  URLStreamHandlerFactory streamHandlerFactory=new DirContextURLStreamHandlerFactory();
  if (first) {
    first=false;
    try {
      URL.setURLStreamHandlerFactory(streamHandlerFactory);
    }
 catch (    Exception e) {
      log.error("Error registering jndi stream handler",e);
    }
catch (    Throwable t) {
      log.info("Dual registration of jndi stream handler: " + t.getMessage());
    }
  }
  try {
    classLoader=createClassLoader();
    classLoader.setResources(container.getResources());
    classLoader.setDebug(this.debug);
    classLoader.setDelegate(this.delegate);
    for (int i=0; i < repositories.length; i++) {
      classLoader.addRepository(repositories[i]);
    }
    setRepositories();
    setClassPath();
    setPermissions();
    if (classLoader instanceof Lifecycle)     ((Lifecycle)classLoader).start();
    DirContextURLStreamHandler.bind((ClassLoader)classLoader,this.container.getResources());
    StandardContext ctx=(StandardContext)container;
    Engine eng=(Engine)ctx.getParent().getParent();
    String path=ctx.getPath();
    if (path.equals("")) {
      path="/";
    }
    ObjectName cloname=new ObjectName(ctx.getEngineName() + ":type=WebappClassLoader,path=" + path+ ",host="+ ctx.getParent().getName());
    Registry.getRegistry(null,null).registerComponent(classLoader,cloname,null);
  }
 catch (  Throwable t) {
    log.error("LifecycleException ",t);
    throw new LifecycleException("start: ",t);
  }
}
