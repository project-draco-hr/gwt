{
  closureOutputFormat=true;
  StringBuilder code=new StringBuilder();
  code.append("package test;\n");
  code.append("import com.google.gwt.core.client.GWT;\n");
  code.append("import com.google.gwt.core.client.RunAsyncCallback;\n");
  code.append("public class EntryPoint {\n");
  code.append("static class Foo {");
  code.append("  int x; String y;\n");
  code.append("  public Foo(int x) { this.x = x; }\n");
  code.append("  public Foo(String y) { this.y = y; }\n");
  code.append("};");
  code.append(functionAllocateFooInt);
  code.append(functionAllocateFooString);
  code.append("  public static void onModuleLoad() {\n");
  code.append("functionAllocateFooInt();");
  code.append(createRunAsync("functionAllocateFooString();"));
  code.append("  }\n");
  code.append("}\n");
  expectedFragmentCount=3;
  compileSnippetToJS(code.toString());
  assertFragmentCount(3);
  assertInFragment("functionAllocateFooInt",0);
  assertClosureTypeCtorInFragment("EntryPoint$Foo",0);
  assertClosureMethodInFragment("EntryPoint$Foo",0,JPrimitiveType.INT);
  assertNotInFragment("functionAllocateFooString",0);
  JClassType stringType=jProgram.getTypeJavaLangString();
  assertClosureFunctionNotInFragment("EntryPoint$Foo",0,stringType);
  assertPrototypeAssignmentStatementInFragment("EntryPoint$Foo",0,JPrimitiveType.INT);
  assertPrototypeAssignmentStatementNotInFragment("EntryPoint$Foo",0,stringType);
  assertInFragment("functionAllocateFooString",1);
  assertClosureMethodInFragment("EntryPoint$Foo",1,stringType);
  assertPrototypeAssignmentStatementInFragment("EntryPoint$Foo",1,stringType);
  assertPrototypeAssignmentStatementNotInFragment("EntryPoint$Foo",1,JPrimitiveType.INT);
  assertClosureTypeCtorNotInFragment("EntryPoint$Foo",1);
  assertNotInFragment("functionAllocateFooInt",1);
  assertClosureFunctionNotInFragment("EntryPoint$Foo",1,JPrimitiveType.INT);
  assertNotInFragment("functionAllocateFooInt",2);
  assertNotInFragment("functionAllocateFooString",2);
  assertClosureFunctionNotInFragment("EntryPoint$Foo",2,JPrimitiveType.INT);
  assertClosureFunctionNotInFragment("EntryPoint$Foo",2,stringType);
  assertClosureTypeCtorNotInFragment("EntryPoint$Foo",2);
  assertPrototypeAssignmentStatementNotInFragment("EntryPoint$Foo",2,JPrimitiveType.INT);
  assertPrototypeAssignmentStatementNotInFragment("EntryPoint$Foo",2,stringType);
}
