{
  addBuiltinClassesToGenerateJavaScriptAST(sourceOracle);
  sourceOracle.addOrReplace(new MockJavaResource("com.google.gwt.core.client.GWT"){
    @Override public CharSequence getContent(){
      return "package com.google.gwt.core.client; public class GWT {" + "public static void runAsync(RunAsyncCallback cb){}" + "public static void runAsync(Class<?> clazz, RunAsyncCallback cb){}}";
    }
  }
);
  sourceOracle.addOrReplace(new MockJavaResource("test.EntryPoint"){
    @Override public CharSequence getContent(){
      return code;
    }
  }
);
  PrecompileTaskOptions options=new PrecompileTaskOptionsImpl();
  options.setOutput(JsOutputOption.PRETTY);
  CompilerContext compilerContext=new CompilerContext.Builder().options(options).build();
  CompilationState state=CompilationStateBuilder.buildFrom(logger,compilerContext,sourceOracle.getResources(),getAdditionalTypeProviderDelegate());
  Properties properties=createPropertiesObject(configProps);
  jProgram=JavaAstConstructor.construct(logger,state,properties,"test.EntryPoint","com.google.gwt.lang.Exceptions");
  jProgram.addEntryMethod(findMethod(jProgram,"onModuleLoad"));
  ComputeCastabilityInformation.exec(jProgram,false);
  ImplementCastsAndTypeChecks.exec(jProgram,false);
  ArrayNormalizer.exec(jProgram,false);
  TypeTightener.exec(jProgram);
  MethodCallTightener.exec(jProgram);
  Map<JType,JLiteral> typeIdsByType=ResolveRuntimeTypeReferences.IntoIntLiterals.exec(jProgram);
  Map<StandardSymbolData,JsName> symbolTable=new TreeMap<StandardSymbolData,JsName>(new SymbolData.ClassIdentComparator());
  JavaToJavaScriptMap map=GenerateJavaScriptAST.exec(jProgram,jsProgram,compilerContext,typeIdsByType,symbolTable,new PropertyOracle[]{new StaticPropertyOracle(orderedProps,orderedPropValues,configProps)}).getLeft();
  CodeSplitter.exec(logger,jProgram,jsProgram,map,expectedFragmentCount,leftOverMergeSize,NULL_RECORDER);
}
