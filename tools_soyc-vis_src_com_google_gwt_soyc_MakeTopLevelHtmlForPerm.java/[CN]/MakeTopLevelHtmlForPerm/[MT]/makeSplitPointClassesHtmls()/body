{
  TreeSet<String> sortedClassesAndMethodsAllOtherFragments=new TreeSet<String>();
  for (  Integer fragmentName : GlobalInformation.fragmentToStories.keySet()) {
    if ((fragmentName != 0) && (!GlobalInformation.splitPointToLocation.containsKey(fragmentName))) {
      for (      String storyName : GlobalInformation.fragmentToStories.get(fragmentName)) {
        if ((!GlobalInformation.nameToLitColl.get("string").storyToLocations.containsKey(storyName)) && (GlobalInformation.storiesToCorrClassesAndMethods.containsKey(storyName))) {
          for (          String className : GlobalInformation.storiesToCorrClassesAndMethods.get(storyName)) {
            sortedClassesAndMethodsAllOtherFragments.add(className);
          }
        }
      }
    }
 else {
      String curSplitPointLocation;
      if (fragmentName == 0) {
        curSplitPointLocation="initialDownload";
      }
 else {
        curSplitPointLocation=GlobalInformation.splitPointToLocation.get(fragmentName);
      }
      String outFileName="splitPoint" + curSplitPointLocation + "Classes.html";
      final PrintWriter outFile=new PrintWriter(outFileName);
      outFile.println("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"");
      outFile.println("\"http://www.w3.org/TR/html4/strict.dtd\">");
      outFile.println("<html>");
      outFile.println("<head>");
      outFile.println("<meta http-equiv=\"content-type\" content=\"text/html;charset=ISO-8859-1\">");
      outFile.println("<title>Classes and methods in exclusives fragment for runAsync split point \"" + curSplitPointLocation + "\" </title>");
      outFile.println("</head>");
      outFile.println("<style type=\"text/css\">");
      outFile.println("body {background-color: #728FCE}");
      outFile.println("h2 {background-color: transparent}");
      outFile.println("p {background-color: fuchsia}");
      outFile.println(".tablediv {");
      outFile.println("display:  table;");
      outFile.println("width:100%;");
      outFile.println("background-color:#eee;");
      outFile.println("border:1px solid  #666666;");
      outFile.println("border-spacing:5px;");
      outFile.println("border-collapse:separate;");
      outFile.println("}");
      outFile.println(".celldiv {");
      outFile.println("float:left;");
      outFile.println("display:  table-cell;");
      outFile.println("width:49.5%;");
      outFile.println("font-size: 14px;");
      outFile.println("background-color:white;");
      outFile.println("}");
      outFile.println(".rowdiv  {");
      outFile.println("display:  table-row;");
      outFile.println("width:100%;");
      outFile.println("}");
      outFile.println("</style>");
      outFile.println("<body>");
      outFile.println("<center>");
      outFile.println("<h2>Classes and methods in exclusives fragment for runAsync split point \"" + curSplitPointLocation + "\"</h2>");
      outFile.println("</center>");
      outFile.println("<hr>");
      outFile.println("<div style=\"width:90%; height:80%; overflow-y:auto; overflow-x:auto; top: 30px; left:60px; position:relative; background-color:white\"");
      outFile.println("<div  class=\"tablediv\">");
      TreeSet<String> sortedClassesAndMethods=new TreeSet<String>();
      for (      String storyName : GlobalInformation.fragmentToStories.get(fragmentName)) {
        if ((!GlobalInformation.nameToLitColl.get("string").storyToLocations.containsKey(storyName)) && (GlobalInformation.storiesToCorrClassesAndMethods.containsKey(storyName))) {
          for (          String className : GlobalInformation.storiesToCorrClassesAndMethods.get(storyName)) {
            sortedClassesAndMethods.add(className);
          }
        }
      }
      for (      String classOrMethod : sortedClassesAndMethods) {
        if ((GlobalInformation.displayDependencies == true) && (classOrMethod.contains("(")) && (classOrMethod.contains(")"))) {
          String packageName=classOrMethod;
          packageName=packageName.replaceAll("\\.\\p{Upper}.*","");
          String noParamMethod=classOrMethod;
          noParamMethod=noParamMethod.replaceAll("\\(.*","");
          outFile.println("<div  class=\"rowdiv\"><a href=\"methodDependencies-" + packageName + ".html#"+ noParamMethod+ "\">"+ classOrMethod+ "</a></div>");
        }
 else {
          outFile.println("<div  class=\"rowdiv\">" + classOrMethod + "</div>");
        }
      }
      outFile.println("</div>");
      outFile.println("</body>");
      outFile.println("</html>");
      outFile.close();
    }
  }
  String outFileName="splitPointAllOtherFragmentsClasses.html";
  final PrintWriter outFile=new PrintWriter(outFileName);
  outFile.println("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"");
  outFile.println("\"http://www.w3.org/TR/html4/strict.dtd\">");
  outFile.println("<html>");
  outFile.println("<head>");
  outFile.println("<meta http-equiv=\"content-type\" content=\"text/html;charset=ISO-8859-1\">");
  outFile.println("<title>Classes and methods in exclusives fragment for runAsync split point \"allOtherFragments\" </title>");
  outFile.println("</head>");
  outFile.println("<style type=\"text/css\">");
  outFile.println("body {background-color: #728FCE}");
  outFile.println("h2 {background-color: transparent}");
  outFile.println("p {background-color: fuchsia}");
  outFile.println(".tablediv {");
  outFile.println("display:  table;");
  outFile.println("width:100%;");
  outFile.println("background-color:#eee;");
  outFile.println("border:1px solid  #666666;");
  outFile.println("border-spacing:5px;/*cellspacing:poor IE support for  this*/");
  outFile.println("border-collapse:separate;");
  outFile.println("}");
  outFile.println(".celldiv {");
  outFile.println("float:left;/*fix for  buggy browsers*/");
  outFile.println("display:  table-cell;");
  outFile.println("width:49.5%;");
  outFile.println("font-size: 14px;");
  outFile.println("background-color:white;");
  outFile.println("}");
  outFile.println(".rowdiv  {");
  outFile.println("display:  table-row;");
  outFile.println("width:100%;");
  outFile.println("}");
  outFile.println("</style>");
  outFile.println("<body>");
  outFile.println("<center>");
  outFile.println("<h2>Classes and methods in exclusives fragment for runAsync split point \"allOtherFragments\"</h2>");
  outFile.println("</center>");
  outFile.println("<hr>");
  outFile.println("<div style=\"width:90%; height:80%; overflow-y:auto; overflow-x:auto; top: 30px; left:60px; position:relative; background-color:white\"");
  outFile.println("<div  class=\"tablediv\">");
  for (  String classOrMethod : sortedClassesAndMethodsAllOtherFragments) {
    if ((GlobalInformation.displayDependencies == true) && (classOrMethod.contains("(")) && (classOrMethod.contains(")"))) {
      String packageName=classOrMethod;
      packageName=packageName.replaceAll("\\.\\p{Upper}.*","");
      String noParamMethod=classOrMethod;
      noParamMethod=noParamMethod.replaceAll("\\(.*","");
      outFile.println("<div  class=\"rowdiv\"><a href=\"methodDependencies-" + packageName + ".html#"+ noParamMethod+ "\">"+ classOrMethod+ "</a></div>");
    }
 else {
      outFile.println("<div  class=\"rowdiv\">" + classOrMethod + "</div>");
    }
  }
  outFile.println("</div>");
  outFile.println("</body>");
  outFile.println("</html>");
  outFile.close();
}
