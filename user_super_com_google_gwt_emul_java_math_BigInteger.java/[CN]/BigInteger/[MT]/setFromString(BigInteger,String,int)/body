{
  int sign;
  int[] digits;
  int numberLength;
  int stringLength=val.length();
  int startChar;
  int endChar=stringLength;
  if (val.charAt(0) == '-') {
    sign=-1;
    startChar=1;
    stringLength--;
  }
 else {
    sign=1;
    startChar=0;
  }
  int charsPerInt=Conversion.digitFitInInt[radix];
  int bigRadixDigitsLength=stringLength / charsPerInt;
  int topChars=stringLength % charsPerInt;
  if (topChars != 0) {
    bigRadixDigitsLength++;
  }
  digits=new int[bigRadixDigitsLength];
  int bigRadix=Conversion.bigRadices[radix - 2];
  int digitIndex=0;
  int substrEnd=startChar + ((topChars == 0) ? charsPerInt : topChars);
  int newDigit;
  for (int substrStart=startChar; substrStart < endChar; substrStart=substrEnd, substrEnd=substrStart + charsPerInt) {
    int bigRadixDigit=Integer.parseInt(val.substring(substrStart,substrEnd),radix);
    newDigit=Multiplication.multiplyByInt(digits,digitIndex,bigRadix);
    newDigit+=Elementary.inplaceAdd(digits,digitIndex,bigRadixDigit);
    digits[digitIndex++]=newDigit;
  }
  numberLength=digitIndex;
  bi.sign=sign;
  bi.numberLength=numberLength;
  bi.digits=digits;
  bi.cutOffLeadingZeroes();
}
