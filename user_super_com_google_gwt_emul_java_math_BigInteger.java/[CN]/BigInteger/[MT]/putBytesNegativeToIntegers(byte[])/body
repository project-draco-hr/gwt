{
  int bytesLen=byteValues.length;
  int highBytes=bytesLen & 3;
  numberLength=(bytesLen >> 2) + ((highBytes == 0) ? 0 : 1);
  digits=new int[numberLength];
  int i=0;
  digits[numberLength - 1]=-1;
  while (bytesLen > highBytes) {
    digits[i]=(byteValues[--bytesLen] & 0xFF) | (byteValues[--bytesLen] & 0xFF) << 8 | (byteValues[--bytesLen] & 0xFF) << 16 | (byteValues[--bytesLen] & 0xFF) << 24;
    if (digits[i] != 0) {
      digits[i]=-digits[i];
      firstNonzeroDigit=i;
      i++;
      while (bytesLen > highBytes) {
        digits[i]=(byteValues[--bytesLen] & 0xFF) | (byteValues[--bytesLen] & 0xFF) << 8 | (byteValues[--bytesLen] & 0xFF) << 16 | (byteValues[--bytesLen] & 0xFF) << 24;
        digits[i]=~digits[i];
        i++;
      }
      break;
    }
    i++;
  }
  if (highBytes != 0) {
    if (firstNonzeroDigit != -2) {
      for (int j=0; j < bytesLen; j++) {
        digits[i]=(digits[i] << 8) | (byteValues[j] & 0xFF);
      }
      digits[i]=~digits[i];
    }
 else {
      for (int j=0; j < bytesLen; j++) {
        digits[i]=(digits[i] << 8) | (byteValues[j] & 0xFF);
      }
      digits[i]=-digits[i];
    }
  }
}
