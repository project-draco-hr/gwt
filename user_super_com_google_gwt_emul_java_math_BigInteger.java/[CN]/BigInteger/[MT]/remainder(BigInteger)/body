{
  if (divisor.sign == 0) {
    throw new ArithmeticException("BigInteger divide by zero");
  }
  int thisLen=numberLength;
  int divisorLen=divisor.numberLength;
  if (((thisLen != divisorLen) ? ((thisLen > divisorLen) ? 1 : -1) : Elementary.compareArrays(digits,divisor.digits,thisLen)) == LESS) {
    return this;
  }
  int resLength=divisorLen;
  int resDigits[]=new int[resLength];
  if (resLength == 1) {
    resDigits[0]=Division.remainderArrayByInt(digits,thisLen,divisor.digits[0]);
  }
 else {
    int qLen=thisLen - divisorLen + 1;
    resDigits=Division.divide(null,qLen,digits,thisLen,divisor.digits,divisorLen);
  }
  BigInteger result=new BigInteger(sign,resLength,resDigits);
  result.cutOffLeadingZeroes();
  return result;
}
