{
  Class<?> enclosing=requestContextMethod.getDeclaringClass();
  Class<?> searchIn=null;
  Service s=enclosing.getAnnotation(Service.class);
  if (s != null) {
    searchIn=s.value();
  }
  ServiceName sn=enclosing.getAnnotation(ServiceName.class);
  if (sn != null) {
    searchIn=forName(sn.value());
  }
  if (searchIn == null) {
    die(null,"The %s type %s did not specify a service type",RequestContext.class.getSimpleName(),enclosing.getCanonicalName());
  }
  Class<?>[] parameterTypes=requestContextMethod.getParameterTypes();
  Class<?>[] domainArgs=new Class<?>[parameterTypes.length];
  for (int i=0, j=domainArgs.length; i < j; i++) {
    if (BaseProxy.class.isAssignableFrom(parameterTypes[i])) {
      domainArgs[i]=getDomainClass(parameterTypes[i].asSubclass(BaseProxy.class));
    }
 else     if (EntityProxyId.class.isAssignableFrom(parameterTypes[i])) {
      domainArgs[i]=TypeUtils.ensureBaseType(TypeUtils.getSingleParameterization(EntityProxyId.class,requestContextMethod.getGenericParameterTypes()[i]));
    }
 else {
      domainArgs[i]=parameterTypes[i];
    }
  }
  Throwable ex;
  try {
    return searchIn.getMethod(requestContextMethod.getName(),domainArgs);
  }
 catch (  SecurityException e) {
    ex=e;
  }
catch (  NoSuchMethodException e) {
    return report("Could not locate domain method %s",requestContextMethod.getName());
  }
  return die(ex,"Could not get domain method %s in type %s",requestContextMethod.getName(),searchIn.getCanonicalName());
}
