{
  NavigableSet<E> sortedSet=createNavigableSet();
  sortedSet.add(getKeys()[0]);
  Set<E> tailSet=sortedSet.tailSet(getKeys()[0]);
  assertEquals(1,tailSet.size());
  Set<E> exclusiveTailMap=sortedSet.tailSet(getKeys()[0],false);
  assertEquals(0,exclusiveTailMap.size());
  Set<E> inclusiveTailMap=sortedSet.tailSet(getKeys()[0],true);
  assertEquals(1,inclusiveTailMap.size());
  sortedSet.add(getKeys()[1]);
  tailSet=sortedSet.tailSet(getKeys()[1]);
  assertEquals(1,tailSet.size());
  exclusiveTailMap=sortedSet.tailSet(getKeys()[1],false);
  assertEquals(0,exclusiveTailMap.size());
  inclusiveTailMap=sortedSet.tailSet(getKeys()[1],true);
  assertEquals(1,inclusiveTailMap.size());
  tailSet=sortedSet.tailSet(getKeys()[0]);
  assertEquals(2,tailSet.size());
  assertEquals(getKeys()[0],tailSet.toArray()[0]);
  assertEquals(getKeys()[1],tailSet.toArray()[1]);
  exclusiveTailMap=sortedSet.tailSet(getKeys()[0],false);
  assertEquals(1,exclusiveTailMap.size());
  assertEquals(getKeys()[1],exclusiveTailMap.toArray()[0]);
  inclusiveTailMap=sortedSet.tailSet(getKeys()[0],true);
  assertEquals(2,inclusiveTailMap.size());
  assertEquals(getKeys()[0],inclusiveTailMap.toArray()[0]);
  assertEquals(getKeys()[1],inclusiveTailMap.toArray()[1]);
}
