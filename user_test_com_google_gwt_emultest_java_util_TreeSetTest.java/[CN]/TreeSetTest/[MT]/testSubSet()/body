{
  NavigableSet<E> sortedSet=createNavigableSet();
  assertEquals(0,sortedSet.subSet(getKeys()[0],getKeys()[0]).size());
  assertEquals(0,sortedSet.subSet(getKeys()[0],false,getKeys()[0],false).size());
  assertEquals(0,sortedSet.subSet(getKeys()[0],true,getKeys()[0],false).size());
  assertEquals(0,sortedSet.subSet(getKeys()[0],false,getKeys()[0],true).size());
  assertEquals(0,sortedSet.subSet(getKeys()[0],true,getKeys()[0],true).size());
  sortedSet.add(getKeys()[0]);
  assertEquals(0,sortedSet.subSet(getKeys()[0],getKeys()[0]).size());
  assertEquals(1,sortedSet.subSet(getLessThanMinimumKey(),getGreaterThanMaximumKey()).size());
  assertEquals(1,sortedSet.subSet(getLessThanMinimumKey(),false,getGreaterThanMaximumKey(),false).size());
  assertEquals(1,sortedSet.subSet(getLessThanMinimumKey(),true,getGreaterThanMaximumKey(),false).size());
  assertEquals(1,sortedSet.subSet(getLessThanMinimumKey(),false,getGreaterThanMaximumKey(),true).size());
  assertEquals(1,sortedSet.subSet(getLessThanMinimumKey(),true,getGreaterThanMaximumKey(),true).size());
  sortedSet.add(getKeys()[1]);
  assertEquals(1,sortedSet.subSet(getKeys()[0],getKeys()[1]).size());
  assertEquals(getKeys()[0],sortedSet.subSet(getKeys()[0],getKeys()[1]).toArray()[0]);
  assertEquals(0,sortedSet.subSet(getKeys()[0],false,getKeys()[1],false).size());
  assertEquals(1,sortedSet.subSet(getKeys()[0],false,getKeys()[1],true).size());
  assertEquals(getKeys()[1],sortedSet.subSet(getKeys()[0],false,getKeys()[1],true).toArray()[0]);
  assertEquals(1,sortedSet.subSet(getKeys()[0],true,getKeys()[1],false).size());
  assertEquals(getKeys()[0],sortedSet.subSet(getKeys()[0],true,getKeys()[1],false).toArray()[0]);
  assertEquals(2,sortedSet.subSet(getKeys()[0],true,getKeys()[1],true).size());
  assertEquals(getKeys()[0],sortedSet.subSet(getKeys()[0],true,getKeys()[1],true).toArray()[0]);
  assertEquals(getKeys()[1],sortedSet.subSet(getKeys()[0],true,getKeys()[1],true).toArray()[1]);
  SortedSet<E> subSet=sortedSet.subSet(getLessThanMinimumKey(),getGreaterThanMaximumKey());
  assertEquals(2,subSet.size());
  assertEquals(2,sortedSet.subSet(getLessThanMinimumKey(),false,getGreaterThanMaximumKey(),false).size());
  assertEquals(1,sortedSet.subSet(getKeys()[0],false,getGreaterThanMaximumKey(),false).size());
  assertEquals(0,sortedSet.subSet(getKeys()[0],false,getKeys()[1],false).size());
  assertEquals(2,sortedSet.subSet(getKeys()[0],true,getGreaterThanMaximumKey(),false).size());
  assertEquals(1,sortedSet.subSet(getKeys()[0],true,getKeys()[1],false).size());
  assertEquals(2,sortedSet.subSet(getKeys()[0],true,getGreaterThanMaximumKey(),true).size());
  assertEquals(2,sortedSet.subSet(getKeys()[0],true,getKeys()[1],true).size());
}
