{
  addSnippetClassDecl("static int foo(int i) { return i; }");
  addSnippetClassDecl("static void unusedMethod() { }");
  addSnippetClassDecl("static void usedMethod() { }");
  addSnippetClassDecl("static class UnusedClass { }");
  addSnippetClassDecl("static class UninstantiatedClass { " + "int field; native int method() /*-{ return 1; }-*/; }");
  addSnippetClassDecl("static UninstantiatedClass uninstantiatedField;");
  addSnippetClassDecl("static int unusedField;");
  addSnippetClassDecl("static int unreadField;");
  addSnippetClassDecl("static int unassignedField;");
  addSnippetClassDecl("static UninstantiatedClass returnUninstantiatedClass() { return null; }");
  addSnippetClassDecl("interface UsedInterface {","  int unusedConstant = 2;","  int usedConstant = 3;","  void method2();","}");
  addSnippetClassDecl("static class UsedClass implements UsedInterface {","  int field2;","  public void method2() { field2 = usedConstant; }","  UsedClass(UninstantiatedClass c) { }","  UsedClass(UninstantiatedClass c1, UninstantiatedClass c2) { }","  UsedClass(UninstantiatedClass c1, int i, UninstantiatedClass c2) { field2 = i; }","  UsedClass(UninstantiatedClass c1, int i, UninstantiatedClass c2, int j) " + "{ field2 = i + j; }","}");
  addSnippetClassDecl("static native void usedNativeMethod(UninstantiatedClass c, UsedClass c2)","/*-{","  c.@test.EntryPoint.UninstantiatedClass::field = 2;","  c.@test.EntryPoint.UninstantiatedClass::method();","  c2.@test.EntryPoint.UsedClass::field2++;","  c2.@test.EntryPoint.UsedClass::method2();","}-*/;");
  addSnippetClassDecl("static native void unusedNativeMethod()","/*-{","}-*/;");
  addSnippetClassDecl("static void methodWithUninstantiatedParam(UninstantiatedClass c) { }");
  addSnippetClassDecl("interface UnusedInterface { void foo(); }");
  addSnippetClassDecl("interface Callback { void go(); }");
  addSnippetImport("jsinterop.annotations.JsType");
  addSnippetImport("jsinterop.annotations.JsConstructor");
  addSnippetClassDecl("@JsType interface Js { void doIt(Callback cb); }");
  addSnippetClassDecl("@JsType(isNative=true) static class JsProto { ","public JsProto(int arg) {}","}");
  addSnippetClassDecl("static class JsProtoImpl extends JsProto {","public JsProtoImpl() { super(10); }","}");
  addSnippetClassDecl("static class JsProtoImpl2 extends JsProto {","@JsConstructor public JsProtoImpl2() { super(10); }","}");
  addSnippetClassDecl("static class JsProtoImpl3 extends JsProto {","public JsProtoImpl3() { super(10); }","}");
  Result result;
  (result=optimize("void","usedMethod();","unreadField = 1;","foo(unassignedField);","returnUninstantiatedClass();","usedNativeMethod(null, null);","foo(uninstantiatedField.field);","uninstantiatedField.method();","methodWithUninstantiatedParam(null);","new UsedClass(null);","new UsedClass(returnUninstantiatedClass(), returnUninstantiatedClass());","new UsedClass(returnUninstantiatedClass(), 3, returnUninstantiatedClass());","new UsedClass(returnUninstantiatedClass(), 3, returnUninstantiatedClass(), 4);","UninstantiatedClass localUninstantiated = null;","JsProtoImpl jsp = new JsProtoImpl();")).intoString("EntryPoint.usedMethod();","EntryPoint.foo(EntryPoint.unassignedField);","EntryPoint.returnUninstantiatedClass();","EntryPoint.usedNativeMethod(null, null);","EntryPoint.foo(null.nullField);","null.nullMethod();","EntryPoint.methodWithUninstantiatedParam();","new EntryPoint$UsedClass();","EntryPoint.returnUninstantiatedClass();","EntryPoint.returnUninstantiatedClass();","new EntryPoint$UsedClass();","int lastArg;","new EntryPoint$UsedClass((lastArg = (EntryPoint.returnUninstantiatedClass(), 3), EntryPoint.returnUninstantiatedClass(), lastArg));","new EntryPoint$UsedClass((EntryPoint.returnUninstantiatedClass(), 3), (EntryPoint.returnUninstantiatedClass(), 4));","new EntryPoint$JsProtoImpl();");
  assertNotNull(result.findMethod("usedMethod"));
  assertNotNull(result.findField("unassignedField"));
  assertNotNull(result.findMethod("usedNativeMethod"));
  assertNotNull(result.findMethod("returnUninstantiatedClass"));
  assertNotNull(result.findMethod("methodWithUninstantiatedParam"));
  assertNotNull(result.findClass("EntryPoint$UsedClass"));
  assertNotNull(result.findClass("EntryPoint$UsedInterface"));
  assertNull(result.findMethod("unusedMethod"));
  assertNull(result.findField("unusedField"));
  assertNull(result.findField("unreadField"));
  assertNull(result.findClass("EntryPoint$UnusedClass"));
  assertNull(result.findMethod("unusedNativeMethod"));
  assertNull(result.findField("uninstantiatedField"));
  assertNull(result.findClass("EntryPoint$UnusedInterface"));
  assertNull(result.findClass("UninstantiatedClass"));
  assertEquals("static null returnUninstantiatedClass(){\n" + "  return null;\n" + "}",result.findMethod("returnUninstantiatedClass").toSource());
  assertEquals("static void methodWithUninstantiatedParam(){\n" + "}",result.findMethod("methodWithUninstantiatedParam").toSource());
  assertEquals("[final null nullField, int field2]",((JsniMethodBody)result.findMethod("usedNativeMethod").getBody()).getJsniFieldRefs().toString());
  assertEquals("[public final null nullMethod(), public void method2()]",((JsniMethodBody)result.findMethod("usedNativeMethod").getBody()).getJsniMethodRefs().toString());
  assertEquals("interface EntryPoint$UsedInterface {\n" + "  final static int usedConstant\n\n" + "  private static final void $clinit(){\n"+ "    final static int usedConstant = 3;\n"+ "  }\n"+ "\n"+ "}",result.findClass("EntryPoint$UsedInterface").toSource());
  assertEquals("public EntryPoint$JsProtoImpl(){\n" + "  super(10);\n" + "  this.$init();\n"+ "}",findMethod(result.findClass("EntryPoint$JsProtoImpl"),"EntryPoint$JsProtoImpl").toSource());
  assertNull(result.findClass("EntryPoint$JsProtoImpl3"));
  assertNotNull(result.findClass("EntryPoint$JsProtoImpl2"));
}
