{
  boolean compilationFailed=false;
  if (cuds.length == 0) {
    compilationFailed=true;
  }
  Set<IProblem> problemSet=new HashSet<IProblem>();
  for (  CompilationUnitDeclaration cud : cuds) {
    CompilationResult result=cud.compilationResult();
    if (result.hasErrors()) {
      compilationFailed=true;
      if (!itemizeErrors) {
        break;
      }
      TreeLogger branch=logger.branch(TreeLogger.ERROR,"Errors in " + String.valueOf(result.getFileName()),null);
      IProblem[] errors=result.getErrors();
      for (      IProblem problem : errors) {
        if (problemSet.contains(problem)) {
          continue;
        }
        problemSet.add(problem);
        String msg=problem.toString();
        msg=msg.substring(msg.indexOf(' '));
        int line=problem.getSourceLineNumber();
        StringBuffer msgBuf=new StringBuffer();
        msgBuf.append("Line ");
        msgBuf.append(line);
        msgBuf.append(": ");
        msgBuf.append(msg);
        branch.log(TreeLogger.ERROR,msgBuf.toString(),null);
      }
    }
  }
  if (compilationFailed) {
    logger.log(TreeLogger.ERROR,"Cannot proceed due to previous errors",null);
    throw new UnableToCompleteException();
  }
}
