{
  boolean isNull=false;
  int[] keyCode=new int[1];
  OS.GetEventParameter(theEvent,OS.kEventParamKeyCode,OS.typeUInt32,null,keyCode.length * 4,null,keyCode);
  event.keyCode=Display.translateKey(keyCode[0]);
switch (event.keyCode) {
case SWT.LF:
{
      event.keyCode=SWT.KEYPAD_CR;
      event.character='\r';
      break;
    }
case SWT.BS:
  event.character='\b';
break;
case SWT.CR:
event.character='\r';
break;
case SWT.DEL:
event.character=0x7F;
break;
case SWT.ESC:
event.character=0x1B;
break;
case SWT.TAB:
event.character='\t';
break;
default :
{
if (event.keyCode == 0 || (SWT.KEYPAD_MULTIPLY <= event.keyCode && event.keyCode <= SWT.KEYPAD_CR)) {
int[] length=new int[1];
int status=OS.GetEventParameter(theEvent,OS.kEventParamKeyUnicodes,OS.typeUnicodeText,null,4,length,(char[])null);
if (status == OS.noErr && length[0] != 0) {
char[] chars=new char[1];
OS.GetEventParameter(theEvent,OS.kEventParamKeyUnicodes,OS.typeUnicodeText,null,2,null,chars);
event.character=chars[0];
}
}
if (event.keyCode == 0) {
int kchrPtr=OS.GetScriptManagerVariable((short)OS.smKCHRCache);
if (display.kchrPtr != kchrPtr) {
display.kchrPtr=kchrPtr;
display.kchrState[0]=0;
}
int result=OS.KeyTranslate(display.kchrPtr,(short)keyCode[0],display.kchrState);
if (result <= 0x7f) {
event.keyCode=result & 0x7f;
}
 else {
int[] encoding=new int[1];
short keyScript=(short)OS.GetScriptManagerVariable((short)OS.smKeyScript);
short regionCode=(short)OS.GetScriptManagerVariable((short)OS.smRegionCode);
if (OS.UpgradeScriptInfoToTextEncoding(keyScript,(short)OS.kTextLanguageDontCare,regionCode,null,encoding) == OS.paramErr) {
if (OS.UpgradeScriptInfoToTextEncoding(keyScript,(short)OS.kTextLanguageDontCare,(short)OS.kTextRegionDontCare,null,encoding) == OS.paramErr) {
encoding[0]=OS.kTextEncodingMacRoman;
}
}
int[] encodingInfo=new int[1];
OS.CreateTextToUnicodeInfoByEncoding(encoding[0],encodingInfo);
if (encodingInfo[0] != 0) {
char[] chars=new char[1];
int[] nchars=new int[1];
byte[] buffer=new byte[2];
buffer[0]=1;
buffer[1]=(byte)(result & 0xFF);
OS.ConvertFromPStringToUnicode(encodingInfo[0],buffer,chars.length * 2,nchars,chars);
OS.DisposeTextToUnicodeInfo(encodingInfo);
event.keyCode=chars[0];
}
}
}
break;
}
}
if (event.keyCode == 0 && event.character == 0) {
if (!isNull) return false;
}
int[] chord=new int[1];
OS.GetEventParameter(theEvent,OS.kEventParamMouseChord,OS.typeUInt32,null,4,null,chord);
int[] modifiers=new int[1];
OS.GetEventParameter(theEvent,OS.kEventParamKeyModifiers,OS.typeUInt32,null,4,null,modifiers);
return setInputState(event,type,chord[0],modifiers[0]);
}
