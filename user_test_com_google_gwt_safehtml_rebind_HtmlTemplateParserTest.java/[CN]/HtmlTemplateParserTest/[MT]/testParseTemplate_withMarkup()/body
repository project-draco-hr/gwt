{
  assertParseTemplateResult("[L(<b>foo</b>)]","<b>foo</b>");
  assertParseTemplateResult("[L(<span>foo<b>), P((TEXT,null,null),0), L(</b></span>)]","<span>foo<b>{0}</b></span>");
  assertParseTemplateResult(("[L(<span>foo<b>), P((TEXT,null,null),1), L(</b>), " + "P((TEXT,null,null),0), L(</span>)]"),"<span>foo<b>{1}</b>{0}</span>");
  assertParseTemplateResult("[L(<B Id=\"bAr\">fOo</B>)]","<B Id=\"bAr\">fOo</B>");
  assertParseTemplateResult(("[L(<span>foo&amp;bar<b>), P((TEXT,null,null),1), " + "L(</b><![CDATA[foo-cdata <baz>]]>), P((TEXT,null,null),0), " + "L(</span>)]"),"<span>foo&amp;bar<b>{1}</b><![CDATA[foo-cdata <baz>]]>{0}</span>");
  assertParseTemplateResult(("[L(<a href=\"), P((URL_START,a,href),0), " + "L(\">), P((TEXT,null,null),1), L(</a>)]"),"<a href=\"{0}\">{1}</a>");
  assertParseTemplateResult(("[L(<a href=\"http://), P((ATTRIBUTE_VALUE,a,href),0), " + "L(\">), P((TEXT,null,null),1), L(</a>)]"),"<a href=\"http://{0}\">{1}</a>");
  assertParseTemplateResult(("[L(<a href=\"), P((URL_START,a,href),0), " + "L(/), P((ATTRIBUTE_VALUE,a,href),1), " + "L(\">), P((TEXT,null,null),2), L(</a>)]"),"<a href=\"{0}/{1}\">{2}</a>");
  assertParseTemplateResult(("[L(<a href=\"http://...&amp;), " + "P((ATTRIBUTE_VALUE,a,href),0), " + "L(=), P((ATTRIBUTE_VALUE,a,href),1), "+ "L(\">), P((TEXT,null,null),2), L(</a>)]"),"<a href=\"http://...&amp;{0}={1}\">{2}</a>");
  assertParseTemplateResult("[L(<div class=\"), P((ATTRIBUTE_VALUE,div,class),0), L(\" style=\"), " + "P((CSS_ATTRIBUTE,div,style),2), L(\">Hello ), " + "P((TEXT,null,null),1)]","<div class=\"{0}\" style=\"{2}\">Hello {1}");
  assertParseTemplateResult("[L(<div>), P((TEXT,null,null),0), L(<style>foo ), " + "P((CSS,null,null),1), L(</style>)]","<div>{0}<style>foo {1}</style>");
  assertParseTemplateResult("[L(<div onClick=alert() class=\"), " + "P((ATTRIBUTE_VALUE,div,class),0), L(\">)]","<div onClick=alert() class=\"{0}\">");
}
