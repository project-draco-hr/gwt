{
  return new AbstractSet<Map.Entry<String,T>>(){
    @Override public boolean contains(    Object key){
      Map.Entry<?,?> s=(Map.Entry<?,?>)key;
      Object value=get(s.getKey());
      if (value == null) {
        return value == s.getValue();
      }
 else {
        return value.equals(s.getValue());
      }
    }
    @Override public Iterator<Map.Entry<String,T>> iterator(){
      Iterator<Map.Entry<String,T>> custom=new Iterator<Map.Entry<String,T>>(){
        Iterator<String> keys=keySet().iterator();
        public boolean hasNext(){
          return keys.hasNext();
        }
        public Map.Entry<String,T> next(){
          String key=keys.next();
          return new ImplMapEntry<T>(key,get(key));
        }
        public void remove(){
          keys.remove();
        }
      }
;
      return custom;
    }
    @Override public int size(){
      return FastStringMap.this.size();
    }
  }
;
}
