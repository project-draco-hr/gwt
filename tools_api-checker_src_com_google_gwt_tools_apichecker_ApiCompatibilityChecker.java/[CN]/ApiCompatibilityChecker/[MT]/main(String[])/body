{
  try {
    ApiCompatibilityChecker checker=new ApiCompatibilityChecker();
    if (checker.processArgs(args)) {
      ApiContainer newApi=null, existingApi=null;
      AbstractTreeLogger logger=new PrintWriterTreeLogger();
      logger.setMaxDetail(checker.type);
      logger.log(TreeLogger.INFO,"gwtDevJar = " + checker.gwtDevJar + ", userJar = "+ checker.gwtUserJar+ ", refjars = "+ Arrays.toString(checker.refJars)+ ", logLevel = "+ checker.type+ ", printAllApi = "+ checker.printAllApi,null);
      Set<String> excludedPackages=checker.getSetOfExcludedPackages(checker.configProperties);
      if (PROCESS_NEW_API) {
        Set<CompilationUnit> units=new HashSet<CompilationUnit>();
        units.addAll(new SourceFileCompilationUnits(checker.configProperties.getProperty("dirRoot_new"),checker.getConfigPropertyAsSet("sourceFiles_new"),checker.getConfigPropertyAsSet("excludedFiles_new"),logger).getCompilationUnits());
        units.addAll(checker.getGwtCompilationUnits(logger));
        newApi=new ApiContainer(checker.configProperties.getProperty("name_new"),units,excludedPackages,logger);
        if (checker.printAllApi) {
          logger.log(TreeLogger.INFO,newApi.getApiAsString());
        }
      }
      if (PROCESS_EXISTING_API) {
        Set<CompilationUnit> units=new HashSet<CompilationUnit>();
        if (checker.refJars == null) {
          units.addAll(new SourceFileCompilationUnits(checker.configProperties.getProperty("dirRoot_old"),checker.getConfigPropertyAsSet("sourceFiles_old"),checker.getConfigPropertyAsSet("excludedFiles_old"),logger).getCompilationUnits());
        }
 else {
          units.addAll(new JarFileCompilationUnits(checker.refJars,checker.getConfigPropertyAsSet("sourceFiles_old"),checker.getConfigPropertyAsSet("excludedFiles_old"),logger).getCompilationUnits());
        }
        units.addAll(checker.getGwtCompilationUnits(logger));
        existingApi=new ApiContainer(checker.configProperties.getProperty("name_old"),units,excludedPackages,logger);
        if (checker.printAllApi) {
          logger.log(TreeLogger.INFO,existingApi.getApiAsString());
        }
      }
      if (PROCESS_NEW_API && PROCESS_EXISTING_API) {
        Collection<ApiChange> apiDifferences=getApiDiff(newApi,existingApi,checker.whiteList);
        for (        ApiChange apiChange : apiDifferences) {
          System.out.println(apiChange);
        }
        if (apiDifferences.size() == 0) {
          System.out.println("API compatibility check SUCCESSFUL");
        }
 else {
          System.out.println("API compatibility check FAILED");
        }
        System.exit(apiDifferences.size() == 0 ? 0 : 1);
      }
    }
  }
 catch (  Throwable t) {
    try {
      t.printStackTrace();
      System.err.println("To view the help for this tool, execute this tool without any arguments");
    }
  finally {
      System.exit(-1);
    }
  }
}
