{
  super.printHelp();
  StringBuffer sb=new StringBuffer();
  sb.append("\n");
  sb.append("The config file must specify two repositories of java source files: ");
  sb.append("'_old' and '_new', which are to be compared for API source compatibility.\n");
  sb.append("An optional whitelist is present at the end of ");
  sb.append("the config file. The format of the whitelist is same as the output of ");
  sb.append("the tool without the whitelist.\n");
  sb.append("Each repository is specified by the following four properties:\n");
  sb.append("name             specifies how the api should be refered to in the output\n");
  sb.append("dirRoot          optional argument that specifies the base directory of all other file/directory names\n");
  sb.append("sourceFiles      a colon-separated list of files/directories that specify the roots of the the filesystem trees to be included.\n");
  sb.append("excludeFiles     a colon-separated lists of ant patterns to exclude");
  sb.append("\n\n");
  sb.append("Example api.conf file:\n");
  sb.append("name_old         gwtEmulator");
  sb.append("\n");
  sb.append("dirRoot_old      ./");
  sb.append("\n");
  sb.append("sourceFiles_old  dev/core/super:user/super:user/src");
  sb.append("\n");
  sb.append("excludeFiles_old user/super/com/google/gwt/junit/*.java");
  sb.append("\n\n");
  sb.append("name_new         gwtEmulatorCopy");
  sb.append("\n");
  sb.append("dirRoot_new      ../gwt-14/");
  sb.append("\n");
  sb.append("sourceFiles_new  dev/core:user/super:user/src");
  sb.append("\n");
  sb.append("excludeFiles_new user/super/com/google/gwt/junit/*.java");
  sb.append("\n\n");
  System.err.println(sb.toString());
}
