{
  System.out.println("java ApiCompatibilityChecker configFile\n");
  System.out.println("The ApiCompatibilityChecker tool requires a config file as an argument. " + "The config file must specify two repositories of java source files " + "that must be compared for API source compatibility. Each repository "+ "must specify three properties: 'name', 'sourceFiles', and 'excludeFiles.' "+ "A suffix of '_old' is attached to properties of the first repository, "+ "while a suffix of '_new' is attached to properties of the second "+ "repository. An optional whitelist can also be present at the end of "+ "the config file. The format of the whitelist is same as the output of "+ "the tool without the whitelist.");
  System.out.println();
  System.out.println("The name property specifies the api name that should " + "be used in the output. The sourceFiles property, a colon-separated " + "list of files/directories, specifies the roots of the the filesystem "+ "trees that must be included. The excludeFiles property, "+ "a colon-separated lists of files/directories specifies the roots of "+ "the filesystem trees that must be excluded.");
  System.out.println();
  System.out.println();
  System.out.println("Example api.conf file:\n" + "name_old gwtEmulator\n" + "sourceFiles_old dev/core/super/com/google/gwt/dev/jjs/intrinsic/:user/super/com/google/gwt/emul/:user/src/com/google/gwt/core/client\n"+ "excludeFiles_old \n\n"+ "name_new gwtEmulatorCopy\n"+ "sourceFiles_new dev/core/super/com/google/gwt/dev/jjs/intrinsic/:user/super/com/google/gwt/emul/:user/src/com/google/gwt/core/client\n"+ "excludeFiles_new \n\n");
}
