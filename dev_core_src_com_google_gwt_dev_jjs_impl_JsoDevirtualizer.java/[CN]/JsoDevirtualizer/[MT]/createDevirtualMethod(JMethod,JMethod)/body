{
  JClassType jsoType=program.getJavaScriptObject();
  SourceInfo sourceInfo=jsoType.getSourceInfo().makeChild(SourceOrigin.UNKNOWN);
  String name=objectMethod.getName() + "__devirtual$";
  JMethod newMethod=program.createMethod(sourceInfo,name,jsoType,objectMethod.getType(),false,true,true,false,false);
  newMethod.setSynthetic();
  JParameter thisParam=JProgram.createParameter(sourceInfo,"this$static",program.getTypeJavaLangObject(),true,true,newMethod);
  for (  JParameter oldParam : objectMethod.getParams()) {
    JProgram.createParameter(sourceInfo,oldParam.getName(),oldParam.getType(),true,false,newMethod);
  }
  newMethod.freezeParamTypes();
  newMethod.addThrownExceptions(objectMethod.getThrownExceptions());
  sourceInfo.addCorrelation(program.getCorrelator().by(newMethod));
  JMethodCall condition=new JMethodCall(sourceInfo,null,isJavaObjectMethod);
  condition.addArg(new JParameterRef(sourceInfo,thisParam));
  JMethodCall thenValue=new JMethodCall(sourceInfo,new JParameterRef(sourceInfo,thisParam),objectMethod);
  for (  JParameter param : newMethod.getParams()) {
    if (param != thisParam) {
      thenValue.addArg(new JParameterRef(sourceInfo,param));
    }
  }
  JMethodCall elseValue=new JMethodCall(sourceInfo,null,jsoImpl);
  for (  JParameter param : newMethod.getParams()) {
    elseValue.addArg(new JParameterRef(sourceInfo,param));
  }
  JConditional conditional=new JConditional(sourceInfo,objectMethod.getType(),condition,thenValue,elseValue);
  JReturnStatement returnStatement=new JReturnStatement(sourceInfo,conditional);
  ((JMethodBody)newMethod.getBody()).getBlock().addStmt(returnStatement);
  return newMethod;
}
