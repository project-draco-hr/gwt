{
  if (methodByDevirtualMethod.containsKey(method)) {
    return methodByDevirtualMethod.get(method);
  }
  JClassType jsoType=program.getJavaScriptObject();
  SourceInfo sourceInfo=method.getSourceInfo().makeChild();
  String prefix;
  Integer methodCount;
  methodCount=jsoMethodInstances.get(method.getSignature());
  if (methodCount == null) {
    prefix=method.getName();
    methodCount=0;
  }
 else {
    prefix=method.getName() + methodCount;
    methodCount++;
  }
  jsoMethodInstances.put(method.getSignature(),methodCount);
  String devirtualName=prefix + "__devirtual$";
  JMethod devirtualMethod=new JMethod(sourceInfo,devirtualName,jsoType,method.getType(),false,true,true,AccessModifier.PUBLIC);
  devirtualMethod.setBody(new JMethodBody(sourceInfo));
  jsoType.addMethod(devirtualMethod);
  devirtualMethod.setSynthetic();
  JParameter thisParam=JProgram.createParameter(sourceInfo,"this$static",program.getTypeJavaLangObject(),true,true,devirtualMethod);
  for (  JParameter oldParam : method.getParams()) {
    JProgram.createParameter(sourceInfo,oldParam.getName(),oldParam.getType(),true,false,devirtualMethod);
  }
  devirtualMethod.freezeParamTypes();
  devirtualMethod.addThrownExceptions(method.getThrownExceptions());
  sourceInfo.addCorrelation(sourceInfo.getCorrelator().by(devirtualMethod));
  JLocal temp=JProgram.createLocal(sourceInfo,"maybeJsoInvocation",thisParam.getType(),true,(JMethodBody)devirtualMethod.getBody());
  JMultiExpression multi=new JMultiExpression(sourceInfo);
  multi.addExpressions(JProgram.createAssignmentStmt(sourceInfo,new JLocalRef(sourceInfo,temp),new JParameterRef(sourceInfo,thisParam)).getExpr());
  JMethodCall isJavaObjectCheck=new JMethodCall(sourceInfo,null,isJavaObjectMethod);
  isJavaObjectCheck.addArg(new JLocalRef(sourceInfo,temp));
  JMethodCall thenValue=new JMethodCall(sourceInfo,new JLocalRef(sourceInfo,temp),method);
  for (  JParameter param : devirtualMethod.getParams()) {
    if (param != thisParam) {
      thenValue.addArg(new JParameterRef(sourceInfo,param));
    }
  }
  JMethodCall elseValue=new JMethodCall(sourceInfo,null,jsoImpl);
  elseValue.addArg(new JLocalRef(sourceInfo,temp));
  for (  JParameter param : devirtualMethod.getParams()) {
    if (param != thisParam) {
      elseValue.addArg(new JParameterRef(sourceInfo,param));
    }
  }
  JConditional conditional=new JConditional(sourceInfo,method.getType(),isJavaObjectCheck,thenValue,elseValue);
  multi.addExpressions(conditional);
  JReturnStatement returnStatement=new JReturnStatement(sourceInfo,multi);
  ((JMethodBody)devirtualMethod.getBody()).getBlock().addStmt(returnStatement);
  methodByDevirtualMethod.put(method,devirtualMethod);
  return devirtualMethod;
}
