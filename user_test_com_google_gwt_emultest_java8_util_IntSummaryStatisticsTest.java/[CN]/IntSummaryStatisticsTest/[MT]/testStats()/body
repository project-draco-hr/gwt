{
  assertEquals(0L,stats.getCount());
  assertEquals(0d,stats.getAverage());
  assertEquals(MIN_VALUE,stats.getMax());
  assertEquals(MAX_VALUE,stats.getMin());
  assertEquals(0L,stats.getSum());
  int[][] testData={{1,1,1,1},{-1,1,-1,0},{2,2,-1,2},{-2,2,-2,0},{MAX_VALUE,MAX_VALUE,-2,MAX_VALUE},{MIN_VALUE,MAX_VALUE,MIN_VALUE,-1}};
  for (int i=0; i < testData.length; ++i) {
    long expectedCount=i + 1;
    int anInt=testData[i][0];
    int expectedMax=testData[i][1];
    int expectedMin=testData[i][2];
    long expectedSum=testData[i][3];
    double expectedAverage=expectedSum / (double)expectedCount;
    stats.accept(anInt);
    assertEquals(expectedAverage,stats.getAverage());
    assertEquals(expectedCount,stats.getCount());
    assertEquals(expectedMax,stats.getMax());
    assertEquals(expectedMin,stats.getMin());
    assertEquals(expectedSum,stats.getSum());
  }
}
