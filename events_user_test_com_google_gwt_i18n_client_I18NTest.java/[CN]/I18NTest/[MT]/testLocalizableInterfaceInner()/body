{
  Inners inner=new Inners();
  SimpleInner simpleInner=(SimpleInner)GWT.create(Inners.SimpleInner.class);
  assertEquals(0,simpleInner.intZero());
  assertEquals("Simple Inner",simpleInner.simpleInner());
  assertTrue(inner.testProtectedInner());
  HasInner hasInner=(HasInner)GWT.create(Inners.HasInner.class);
  assertEquals("Has Inner",hasInner.hasInner());
  assertEquals(0,hasInner.floatZero(),.0001);
  IsInner isInner=(IsInner)GWT.create(IsInner.class);
  assertEquals(2,isInner.isInner());
  InnerInner innerInner=(InnerInner)GWT.create(InnerInner.class);
  assertEquals(4.321,innerInner.innerInner(),.0001);
  assertEquals("outer",innerInner.outer());
  InnerInnerMessages innerInnerMessages=(InnerInnerMessages)GWT.create(InnerInnerMessages.class);
  assertEquals("I am a person",innerInnerMessages.innerClassMessages("person"));
  ExtendsInnerInner extendsInnerInner=(ExtendsInnerInner)GWT.create(ExtendsInnerInner.class);
  assertEquals("Extends Inner Inner",extendsInnerInner.extendsInnerInner());
  InnerClass innerClass=new Inners.InnerClass();
  String extendsAnotherInner=innerClass.testExtendsAnotherInner();
  assertEquals("{innerInner=4.321, outer=outer}",extendsAnotherInner);
  String extendProtectedInner=innerClass.testExtendsProtectedInner();
  assertEquals("Extend Protected Inner",extendProtectedInner);
}
