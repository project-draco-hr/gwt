{
  JProgram.RECORDED_ANNOTATION_PACKAGES.add("com.google.gwt.dev.jjs");
  JProgram.RECORDED_ANNOTATION_PACKAGES.add("test");
  sourceOracle.addOrReplace(new MockJavaResource("test.SourceClassAnnotation"){
    @Override protected CharSequence getContent(){
      StringBuffer code=new StringBuffer();
      code.append("package test;\n");
      code.append("public @interface SourceClassAnnotation {\n");
      code.append("  Class<?> value();\n");
      code.append("}\n");
      return code;
    }
  }
);
  sourceOracle.addOrReplace(new MockJavaResource("test.Tag"){
    @Override protected CharSequence getContent(){
      StringBuffer code=new StringBuffer();
      code.append("package test;\n");
      code.append("@Tag\n");
      code.append("public @interface Tag {\n");
      code.append("}\n");
      return code;
    }
  }
);
  sourceOracle.addOrReplace(new MockJavaResource("test.WithTag"){
    @Override protected CharSequence getContent(){
      StringBuffer code=new StringBuffer();
      code.append("package test;\n");
      code.append("@Tag\n");
      code.append("public class WithTag {\n");
      code.append("  @Tag String field;\n");
      code.append("  @Tag WithTag(){}\n");
      code.append("  @Tag void method(@Tag String p) {@Tag String local;}\n");
      code.append("}\n");
      return code;
    }
  }
);
  sourceOracle.addOrReplace(new MockJavaResource("test.WithBinary"){
    @Override protected CharSequence getContent(){
      StringBuffer code=new StringBuffer();
      code.append("package test;\n");
      code.append("import " + BinaryAnnotation.class.getCanonicalName() + ";\n");
      code.append("import " + ClassAnnotation.class.getCanonicalName() + ";\n");
      code.append("import " + OtherAnnotation.class.getCanonicalName() + ";\n");
      code.append("public class WithBinary {\n");
      code.append("  public static final String EXPR = \"Expression\";\n");
      code.append("  @ClassAnnotation(" + JAnnotationTest.class.getCanonicalName() + ".class)\n");
      code.append("  void useBinaryClassReference() {}\n");
      code.append("  @BinaryAnnotation\n");
      code.append("  void useDefaults() {}\n");
      code.append("  @SourceClassAnnotation(" + JAnnotationTest.class.getCanonicalName() + ".class)\n");
      code.append("  void useSourceClassAnnotation() {}\n");
      code.append("  @BinaryAnnotation(c=Tag.class, i=42, s=\"foo\", o= @OtherAnnotation(\"Hello \" + EXPR))\n");
      code.append("  void useValues() {}\n");
      code.append("}\n");
      return code;
    }
  }
);
}
