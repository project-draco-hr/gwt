{
  if (encodedRequest == null) {
    throw new NullPointerException("encodedRequest cannot be null");
  }
  if (encodedRequest.length() == 0) {
    throw new IllegalArgumentException("encodedRequest cannot be empty");
  }
  ServerSerializationStreamReader streamReader=new ServerSerializationStreamReader(serializableTypeOracle);
  streamReader.prepareToRead(encodedRequest);
  String serviceIntfName=streamReader.readString();
  if (type != null) {
    if (!implementsInterface(type,serviceIntfName)) {
      throw new SecurityException("Blocked attempt to access interface '" + serviceIntfName + "', which is not implemented by '"+ printTypeName(type)+ "'; this is either misconfiguration or a hack attempt");
    }
  }
  Class serviceIntf;
  try {
    serviceIntf=getClassFromSerializedName(serviceIntfName);
    if (!RemoteService.class.isAssignableFrom(serviceIntf)) {
      throw new SecurityException("Blocked attempt to access interface '" + printTypeName(serviceIntf) + "', which doesn't extend RemoteService; this is either misconfiguration or a hack attempt");
    }
  }
 catch (  ClassNotFoundException e) {
    SecurityException securityException=new SecurityException("Could not locate requested interface '" + serviceIntfName + "' in default classloader");
    securityException.initCause(e);
    throw securityException;
  }
  String serviceMethodName=streamReader.readString();
  int paramCount=streamReader.readInt();
  Class[] parameterTypes=new Class[paramCount];
  for (int i=0; i < parameterTypes.length; i++) {
    String paramClassName=streamReader.readString();
    try {
      parameterTypes[i]=getClassFromSerializedName(paramClassName);
    }
 catch (    ClassNotFoundException e) {
      throw new SerializationException("Unknown parameter " + i + " type '"+ paramClassName+ "'",e);
    }
  }
  Method method=findInterfaceMethod(serviceIntf,serviceMethodName,parameterTypes,true);
  if (method == null) {
    throw new SecurityException(formatMethodNotFoundErrorMessage(serviceIntf,serviceMethodName,parameterTypes));
  }
  Object[] parameterValues=new Object[parameterTypes.length];
  for (int i=0; i < parameterValues.length; i++) {
    parameterValues[i]=streamReader.deserializeValue(parameterTypes[i]);
  }
  return new RPCRequest(method,parameterValues);
}
