{
  super(parent,SWT.NONE);
  setLayout(new FillLayout());
  SashForm sash=new SashForm(this,SWT.VERTICAL);
  tree=new Tree(sash,SWT.BORDER | SWT.SHADOW_IN);
  tree.setLinesVisible(false);
  tree.addSelectionListener(this);
  tree.addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
      openHelpOnSelection(tree);
    }
  }
);
  tree.setFocus();
  tree.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
switch (e.keyCode) {
case 'c':
        if (e.stateMask == SWT.CTRL) {
          copyTreeSelectionToClipboard(tree);
        }
      break;
case '\r':
case '\n':
    openHelpOnSelection(tree);
}
}
}
);
uiLogger=new TreeItemLogger();
AbstractTreeLogger bestLogger=uiLogger;
if (logFile != null) {
try {
PrintWriterTreeLogger fileLogger=new PrintWriterTreeLogger(logFile);
bestLogger=new CompositeTreeLogger(uiLogger,fileLogger);
fileLogger.setMaxDetail(logLevel);
uiLogger.setMaxDetail(logLevel);
}
 catch (IOException ex) {
uiLogger.log(TreeLogger.ERROR,"Can't log to " + logFile.getAbsolutePath(),ex);
}
}
logger=bestLogger;
logger.setMaxDetail(logLevel);
details=new Text(sash,SWT.MULTI | SWT.WRAP | SWT.READ_ONLY| SWT.BORDER| SWT.V_SCROLL);
final Color detailsBgColor=new Color(null,255,255,255);
details.setBackground(detailsBgColor);
details.addDisposeListener(new DisposeListener(){
public void widgetDisposed(DisposeEvent arg0){
detailsBgColor.dispose();
}
}
);
sash.setWeights(new int[]{80,20});
initLogFlushTimer(parent.getDisplay());
}
