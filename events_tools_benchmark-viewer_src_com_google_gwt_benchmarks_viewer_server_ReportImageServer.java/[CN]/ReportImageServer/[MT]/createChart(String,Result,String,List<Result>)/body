{
  double maxTime=0;
  for (  Result r : comparativeResults) {
    for (    Trial t : r.getTrials()) {
      maxTime=Math.max(maxTime,t.getRunTimeMillis());
    }
  }
  List<Trial> trials=result.getTrials();
  Trial firstTrial=new Trial();
  int numVariables=0;
  if (trials.size() > 0) {
    firstTrial=trials.get(0);
    numVariables=firstTrial.getVariables().size();
  }
  String domainVariable=null;
  String seriesVariable=null;
  Map<String,Set<String>> variableValues=null;
  if (numVariables == 1) {
    domainVariable=firstTrial.getVariables().keySet().iterator().next();
  }
 else {
    variableValues=new HashMap<String,Set<String>>();
    for (int i=0; i < trials.size(); ++i) {
      Trial trial=trials.get(i);
      Map<String,String> variables=trial.getVariables();
      for (      Map.Entry<String,String> entry : variables.entrySet()) {
        String variable=entry.getKey();
        Set<String> set=variableValues.get(variable);
        if (set == null) {
          set=new TreeSet<String>();
          variableValues.put(variable,set);
        }
        set.add(entry.getValue());
      }
    }
    TreeMap<Integer,List<String>> numValuesMap=new TreeMap<Integer,List<String>>();
    for (    Map.Entry<String,Set<String>> entry : variableValues.entrySet()) {
      Integer numValues=new Integer(entry.getValue().size());
      List<String> variables=numValuesMap.get(numValues);
      if (variables == null) {
        variables=new ArrayList<String>();
        numValuesMap.put(numValues,variables);
      }
      variables.add(entry.getKey());
    }
    if (numValuesMap.values().size() > 0) {
      domainVariable=numValuesMap.get(numValuesMap.lastKey()).get(0);
      seriesVariable=numValuesMap.get(numValuesMap.firstKey()).get(0);
    }
  }
  String valueTitle="time (ms)";
  if (numVariables == 0) {
    DefaultCategoryDataset data=new DefaultCategoryDataset();
    data.addValue(firstTrial.getRunTimeMillis(),"result","result");
    JFreeChart chart=ChartFactory.createBarChart(title,testName,valueTitle,data,PlotOrientation.VERTICAL,false,false,false);
    CategoryPlot p=chart.getCategoryPlot();
    ValueAxis axis=p.getRangeAxis();
    axis.setUpperBound(maxTime + maxTime * 0.1);
    return chart;
  }
 else   if (numVariables == 1) {
    XYSeriesCollection data=new XYSeriesCollection();
    XYSeries series=new XYSeries(domainVariable);
    for (    Trial trial : trials) {
      double time=trial.getRunTimeMillis();
      String domainValue=trial.getVariables().get(domainVariable);
      series.add(Double.parseDouble(domainValue),time);
    }
    data.addSeries(series);
    JFreeChart chart=ChartFactory.createXYLineChart(title,domainVariable,valueTitle,data,PlotOrientation.VERTICAL,false,false,false);
    XYPlot plot=chart.getXYPlot();
    plot.getRangeAxis().setUpperBound(maxTime + maxTime * 0.1);
    double maxDomainValue=getMaxValue(comparativeResults,domainVariable);
    plot.getDomainAxis().setUpperBound(maxDomainValue + maxDomainValue * 0.1);
    return chart;
  }
 else   if (numVariables == 2) {
    XYSeriesCollection data=new XYSeriesCollection();
    Set<String> seriesValues=variableValues.get(seriesVariable);
    for (    String seriesValue : seriesValues) {
      XYSeries series=new XYSeries(seriesValue);
      for (      Trial trial : trials) {
        Map<String,String> variables=trial.getVariables();
        if (variables.get(seriesVariable).equals(seriesValue)) {
          double time=trial.getRunTimeMillis();
          String domainValue=trial.getVariables().get(domainVariable);
          series.add(Double.parseDouble(domainValue),time);
        }
      }
      data.addSeries(series);
    }
    JFreeChart chart=ChartFactory.createXYLineChart(title,domainVariable,valueTitle,data,PlotOrientation.VERTICAL,true,true,false);
    XYPlot plot=chart.getXYPlot();
    plot.getRangeAxis().setUpperBound(maxTime + maxTime * 0.1);
    double maxDomainValue=getMaxValue(comparativeResults,domainVariable);
    plot.getDomainAxis().setUpperBound(maxDomainValue + maxDomainValue * 0.1);
    return chart;
  }
  throw new RuntimeException("The ReportImageServer is not yet able to " + "create charts for benchmarks with more than two variables.");
}
