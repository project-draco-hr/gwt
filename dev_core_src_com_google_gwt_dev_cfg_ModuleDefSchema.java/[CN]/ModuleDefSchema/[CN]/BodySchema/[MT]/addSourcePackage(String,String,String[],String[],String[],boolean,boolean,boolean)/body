{
  String normChildDir=normalizePathEntry(relDir);
  if (normChildDir.startsWith("/")) {
    logger.log(TreeLogger.WARN,"Non-relative source package: " + normChildDir,null);
    return;
  }
  if (normChildDir.startsWith("./") || normChildDir.indexOf("/./") >= 0) {
    logger.log(TreeLogger.WARN,"Non-canonical source package: " + normChildDir,null);
    return;
  }
  if (normChildDir.startsWith("../") || normChildDir.indexOf("/../") >= 0) {
    logger.log(TreeLogger.WARN,"Non-canonical source package: " + normChildDir,null);
    return;
  }
  String fullPackagePath=modulePackagePath + normChildDir;
  if (isSuperSource) {
    moduleDef.addSuperSourcePackage(fullPackagePath,includeList,excludeList,skipList,defaultExcludes,caseSensitive);
  }
 else {
    addPrefix(includeList,fullPackagePath);
    addPrefix(excludeList,fullPackagePath);
    addPrefix(skipList,fullPackagePath);
    moduleDef.addSourcePackage(fullPackagePath,includeList,excludeList,skipList,defaultExcludes,caseSensitive);
  }
}
