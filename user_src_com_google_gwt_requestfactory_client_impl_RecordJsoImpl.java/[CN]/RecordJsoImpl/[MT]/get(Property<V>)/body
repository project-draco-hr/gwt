{
  if (isNullOrUndefined(property.getName())) {
    return null;
  }
  try {
    if (Boolean.class.equals(property.getType())) {
      return (V)Boolean.valueOf(getBoolean(property.getName()));
    }
    if (Character.class.equals(property.getType())) {
      return (V)Character.valueOf(String.valueOf(get(property.getName())).charAt(0));
    }
    if (Byte.class.equals(property.getType())) {
      return (V)Byte.valueOf((byte)getInt(property.getName()));
    }
    if (Short.class.equals(property.getType())) {
      return (V)Short.valueOf((short)getInt(property.getName()));
    }
    if (Float.class.equals(property.getType())) {
      return (V)Float.valueOf((float)getDouble(property.getName()));
    }
    if (BigInteger.class.equals(property.getType())) {
      return (V)new BigDecimal((String)get(property.getName())).toBigInteger();
    }
    if (BigDecimal.class.equals(property.getType())) {
      return (V)new BigDecimal((String)get(property.getName()));
    }
    if (Integer.class.equals(property.getType())) {
      return (V)Integer.valueOf(getInt(property.getName()));
    }
    if (Long.class.equals(property.getType())) {
      return (V)Long.valueOf((String)get(property.getName()));
    }
    if (Double.class.equals(property.getType())) {
      if (!isDefined(property.getName())) {
        return (V)new Double(0.0);
      }
      return (V)Double.valueOf(getDouble(property.getName()));
    }
    if (Date.class.equals(property.getType())) {
      double millis=new Date().getTime();
      if (isDefined(property.getName())) {
        millis=Double.parseDouble((String)get(property.getName()));
      }
      if (GWT.isScript()) {
        return (V)dateForDouble(millis);
      }
 else {
        return (V)new Date((long)millis);
      }
    }
  }
 catch (  final Exception ex) {
    throw new IllegalStateException("Property  " + property.getName() + " has invalid "+ " value "+ get(property.getName())+ " for type "+ property.getType());
  }
  if (property instanceof EnumProperty) {
    EnumProperty<V> eProperty=(EnumProperty<V>)property;
    Enum<?>[] values=(Enum[])eProperty.getValues();
    int ordinal=getInt(property.getName());
    for (    Enum<?> value : values) {
      if (ordinal == value.ordinal()) {
        return (V)value;
      }
    }
  }
  if (String.class == property.getType()) {
    return (V)get(property.getName());
  }
  String relatedId=(String)get(property.getName());
  if (relatedId == null) {
    return null;
  }
 else {
    String schemaAndId[]=relatedId.split("-");
    return (V)getValueStore().getRecordBySchemaAndId(getRequestFactory().getSchema(schemaAndId[0]),Long.valueOf(schemaAndId[1]));
  }
}
