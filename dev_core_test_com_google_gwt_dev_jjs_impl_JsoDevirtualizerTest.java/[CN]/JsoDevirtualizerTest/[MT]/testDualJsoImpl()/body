{
  sourceOracle.addOrReplace(new MockJavaResource("com.google.gwt.lang.Cast"){
    @Override public CharSequence getContent(){
      StringBuffer code=new StringBuffer();
      code.append("package com.google.gwt.lang;");
      code.append("public class Cast {");
      code.append("  public static boolean isJavaObject(Object o) { return true; };");
      code.append("  public static boolean isJavaScriptObject(Object o) { return true; };");
      code.append("}");
      return code;
    }
  }
);
  addSnippetImport("com.google.gwt.lang.Cast");
  addSnippetImport("com.google.gwt.core.client.JavaScriptObject");
  addSnippetClassDecl("interface Iface1 { int a(); int b(); }","static class J1 implements Iface1 {","  public int a() { return 1; }","  public int b() { return 1; }","}","static class Jso1 extends JavaScriptObject implements Iface1 {","  protected Jso1() { }","  public final int a() { return 2; }","  public final int b() { return 2; }","  public static native Jso1 create() /*-{ return {} }-*/;","}","static interface Iface2 { int a(); int b(); }","static class J2 implements Iface2 {","  public int a() { return 3; }","  public int b() { return 3; }","}","static class Jso2 extends JavaScriptObject implements Iface2 {","  protected Jso2() { }","  public final int a() { return 4; }","  public final int b() { return 4; }","  public static native Jso2 create() /*-{ return {} }-*/;","}","static Iface1 val1 = new J1();","static Iface1 val2 = Jso1.create();","static Iface2 val3 = new J2();","static Iface2 val4 = Jso2.create();");
  StringBuilder code=new StringBuilder();
  code.append("int result = val1.a() + val2.a() + val3.a() + val4.a();");
  StringBuffer expected=new StringBuffer();
  expected.append("int result = ");
  expected.append("JavaScriptObject.a__devirtual$(EntryPoint.val1) + ");
  expected.append("JavaScriptObject.a__devirtual$(EntryPoint.val2) + ");
  expected.append("JavaScriptObject.a0__devirtual$(EntryPoint.val3) + ");
  expected.append("JavaScriptObject.a0__devirtual$(EntryPoint.val4);");
  Result result=optimize("void",code.toString());
  result.intoString(expected.toString());
  result.classHasMethodSnippets("EntryPoint$Jso1",Lists.newArrayList("public final int a();","public final int b();","public static final int $a(EntryPoint$Jso1 this$static);","public static final int $b(EntryPoint$Jso1 this$static);"));
}
