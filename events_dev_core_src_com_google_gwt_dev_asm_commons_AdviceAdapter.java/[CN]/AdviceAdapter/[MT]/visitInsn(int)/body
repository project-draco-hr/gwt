{
  if (constructor) {
    int s;
switch (opcode) {
case RETURN:
      onMethodExit(opcode);
    break;
case IRETURN:
case FRETURN:
case ARETURN:
case ATHROW:
  popValue();
onMethodExit(opcode);
break;
case LRETURN:
case DRETURN:
popValue();
popValue();
onMethodExit(opcode);
break;
case NOP:
case LALOAD:
case DALOAD:
case LNEG:
case DNEG:
case FNEG:
case INEG:
case L2D:
case D2L:
case F2I:
case I2B:
case I2C:
case I2S:
case I2F:
case ARRAYLENGTH:
break;
case ACONST_NULL:
case ICONST_M1:
case ICONST_0:
case ICONST_1:
case ICONST_2:
case ICONST_3:
case ICONST_4:
case ICONST_5:
case FCONST_0:
case FCONST_1:
case FCONST_2:
case F2L:
case F2D:
case I2L:
case I2D:
pushValue(OTHER);
break;
case LCONST_0:
case LCONST_1:
case DCONST_0:
case DCONST_1:
pushValue(OTHER);
pushValue(OTHER);
break;
case IALOAD:
case FALOAD:
case AALOAD:
case BALOAD:
case CALOAD:
case SALOAD:
case POP:
case IADD:
case FADD:
case ISUB:
case LSHL:
case LSHR:
case LUSHR:
case L2I:
case L2F:
case D2I:
case D2F:
case FSUB:
case FMUL:
case FDIV:
case FREM:
case FCMPL:
case FCMPG:
case IMUL:
case IDIV:
case IREM:
case ISHL:
case ISHR:
case IUSHR:
case IAND:
case IOR:
case IXOR:
case MONITORENTER:
case MONITOREXIT:
popValue();
break;
case POP2:
case LSUB:
case LMUL:
case LDIV:
case LREM:
case LADD:
case LAND:
case LOR:
case LXOR:
case DADD:
case DMUL:
case DSUB:
case DDIV:
case DREM:
popValue();
popValue();
break;
case IASTORE:
case FASTORE:
case AASTORE:
case BASTORE:
case CASTORE:
case SASTORE:
case LCMP:
case DCMPL:
case DCMPG:
popValue();
popValue();
popValue();
break;
case LASTORE:
case DASTORE:
popValue();
popValue();
popValue();
popValue();
break;
case DUP:
pushValue(peekValue());
break;
case DUP_X1:
s=stackFrame.size();
stackFrame.add(s - 2,stackFrame.get(s - 1));
break;
case DUP_X2:
s=stackFrame.size();
stackFrame.add(s - 3,stackFrame.get(s - 1));
break;
case DUP2:
s=stackFrame.size();
stackFrame.add(s - 2,stackFrame.get(s - 1));
stackFrame.add(s - 2,stackFrame.get(s - 1));
break;
case DUP2_X1:
s=stackFrame.size();
stackFrame.add(s - 3,stackFrame.get(s - 1));
stackFrame.add(s - 3,stackFrame.get(s - 1));
break;
case DUP2_X2:
s=stackFrame.size();
stackFrame.add(s - 4,stackFrame.get(s - 1));
stackFrame.add(s - 4,stackFrame.get(s - 1));
break;
case SWAP:
s=stackFrame.size();
stackFrame.add(s - 2,stackFrame.get(s - 1));
stackFrame.remove(s);
break;
}
}
 else {
switch (opcode) {
case RETURN:
case IRETURN:
case FRETURN:
case ARETURN:
case LRETURN:
case DRETURN:
case ATHROW:
onMethodExit(opcode);
break;
}
}
mv.visitInsn(opcode);
}
