{
  Map<String,Collection<JMethod>> allSetters;
  JClassType superClass=fieldType.getSuperclass();
  if (superClass != null) {
    allSetters=findAllSetters(superClass);
  }
 else {
    allSetters=new HashMap<String,Collection<JMethod>>();
  }
  JMethod[] methods=fieldType.getMethods();
  for (  JMethod method : methods) {
    if (!isSetterMethod(method)) {
      continue;
    }
    String propertyName=method.getName().substring(3);
    propertyName=propertyName.substring(0,1).toLowerCase() + propertyName.substring(1);
    Collection<JMethod> propertyMethods=allSetters.get(propertyName);
    if (propertyMethods == null) {
      propertyMethods=new ArrayList<JMethod>();
      allSetters.put(propertyName,propertyMethods);
    }
    propertyMethods.add(method);
  }
  return allSetters;
}
