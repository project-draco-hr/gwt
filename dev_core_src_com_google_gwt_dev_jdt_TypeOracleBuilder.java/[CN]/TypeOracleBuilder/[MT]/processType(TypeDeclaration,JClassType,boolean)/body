{
  TypeOracle oracle=cacheManager.getTypeOracle();
  SourceTypeBinding binding=typeDecl.binding;
  if (binding.constantPoolName() == null) {
    return;
  }
  String qname=getQualifiedName(binding);
  String jclassName;
  if (binding instanceof LocalTypeBinding) {
    jclassName=qname.substring(qname.lastIndexOf('.') + 1);
  }
 else {
    jclassName=getSimpleName(typeDecl);
  }
  if (oracle.findType(qname) != null) {
    return;
  }
  String jpkgName=getPackage(typeDecl);
  JPackage pkg=oracle.getOrCreatePackage(jpkgName);
  final boolean jclassIsIntf=isInterface(typeDecl);
  boolean jclassIsAnnonation=isAnnotation(typeDecl);
  CompilationUnitProvider cup=getCup(typeDecl);
  int declStart=typeDecl.declarationSourceStart;
  int declEnd=typeDecl.declarationSourceEnd;
  int bodyStart=typeDecl.bodyStart;
  int bodyEnd=typeDecl.bodyEnd;
  JRealClassType type;
  if (jclassIsAnnonation) {
    type=new JAnnotationType(oracle,cup,pkg,enclosingType,isLocalType,jclassName,declStart,declEnd,bodyStart,bodyEnd,jclassIsIntf);
  }
 else   if (maybeGeneric(typeDecl,enclosingType)) {
    type=new JGenericType(oracle,cup,pkg,enclosingType,isLocalType,jclassName,declStart,declEnd,bodyStart,bodyEnd,jclassIsIntf);
  }
 else   if (binding.isEnum()) {
    type=new JEnumType(oracle,cup,pkg,enclosingType,isLocalType,jclassName,declStart,declEnd,bodyStart,bodyEnd,jclassIsIntf);
  }
 else {
    type=new JRealClassType(oracle,cup,pkg,enclosingType,isLocalType,jclassName,declStart,declEnd,bodyStart,bodyEnd,jclassIsIntf);
  }
  cacheManager.setTypeForBinding(binding,type);
}
