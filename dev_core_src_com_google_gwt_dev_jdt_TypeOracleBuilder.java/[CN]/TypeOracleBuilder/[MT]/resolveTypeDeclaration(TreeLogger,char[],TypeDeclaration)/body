{
  SourceTypeBinding binding=clazz.binding;
  if (binding.constantPoolName() == null) {
    return true;
  }
  String qname=String.valueOf(binding.qualifiedSourceName());
  logger=logger.branch(TreeLogger.SPAM,"Found type '" + qname + "'",null);
  if (isPackageInfoTypeName(qname)) {
    return resolvePackage(logger,clazz);
  }
  JRealClassType jtype=(JRealClassType)resolveType(logger,binding);
  if (jtype == null) {
    return false;
  }
  jtype.addModifierBits(Shared.bindingToModifierBits(clazz.binding));
  Map<Class<? extends java.lang.annotation.Annotation>,java.lang.annotation.Annotation> declaredAnnotations=newAnnotationMap();
  resolveAnnotations(logger,clazz.annotations,declaredAnnotations);
  jtype.addAnnotations(declaredAnnotations);
  JGenericType jGenericType=jtype.isGenericType();
  if (jGenericType != null && !resolveBoundsForTypeParameters(logger,jtype.isGenericType(),clazz.typeParameters)) {
    return false;
  }
  if (jtype.isInterface() == null) {
    ReferenceBinding superclassRef=binding.superclass;
    if (superclassRef != null) {
      JClassType jsuperClass=(JClassType)resolveType(logger,superclassRef);
      if (jsuperClass == null) {
        return false;
      }
      jtype.setSuperclass(jsuperClass);
    }
  }
  ReferenceBinding[] superintfRefs=binding.superInterfaces;
  for (int i=0; i < superintfRefs.length; i++) {
    ReferenceBinding superintfRef=superintfRefs[i];
    JClassType jinterface=(JClassType)resolveType(logger,superintfRef);
    if (jinterface == null) {
      return false;
    }
    jtype.addImplementedInterface(jinterface);
  }
  FieldDeclaration[] fields=clazz.fields;
  if (!resolveFields(logger,unitSource,jtype,fields)) {
    return false;
  }
  AbstractMethodDeclaration[] methods=clazz.methods;
  if (!resolveMethods(logger,unitSource,jtype,methods)) {
    return false;
  }
  if (clazz.javadoc != null) {
    if (!parseMetaDataTags(unitSource,jtype,clazz.javadoc)) {
      return false;
    }
  }
  return true;
}
