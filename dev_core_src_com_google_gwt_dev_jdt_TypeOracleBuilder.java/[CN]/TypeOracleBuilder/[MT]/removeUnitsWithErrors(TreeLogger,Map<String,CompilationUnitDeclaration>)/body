{
  boolean anyRemoved=false;
  for (Iterator<CompilationUnitDeclaration> iter=cudsByFileName.values().iterator(); iter.hasNext(); ) {
    CompilationUnitDeclaration cud=iter.next();
    CompilationResult result=cud.compilationResult;
    IProblem[] errors=result.getErrors();
    if (errors != null && errors.length > 0) {
      anyRemoved=true;
      iter.remove();
      String fileName=CharOperation.charToString(cud.getFileName());
      char[] source=cud.compilationResult.compilationUnit.getContents();
      Util.maybeDumpSource(logger,fileName,source,null);
      logger.log(TreeLogger.TRACE,"Removing problematic compilation unit '" + fileName + "'",null);
    }
  }
  if (anyRemoved) {
    removeInfectedUnits(logger,cudsByFileName);
  }
}
