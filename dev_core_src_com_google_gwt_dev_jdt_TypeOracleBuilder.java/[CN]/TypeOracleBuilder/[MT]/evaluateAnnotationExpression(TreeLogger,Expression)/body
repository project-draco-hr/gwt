{
  Annotation annotation=(Annotation)expression;
  TypeBinding resolvedType=annotation.resolvedType;
  Class<? extends java.lang.annotation.Annotation> clazz=(Class<? extends java.lang.annotation.Annotation>)getClassLiteral(logger,resolvedType);
  if (clazz == null) {
    return null;
  }
  Map<String,Object> identifierToValue=new HashMap<String,Object>();
  for (  MemberValuePair mvp : annotation.memberValuePairs()) {
    String identifier=String.valueOf(mvp.name);
    Expression expressionValue=mvp.value;
    Object value=evaluateExpression(logger,expressionValue);
    if (value == null) {
      return null;
    }
    identifierToValue.put(identifier,value);
  }
  JClassType annotationType=(JClassType)resolveType(logger,resolvedType);
  if (annotationType == null) {
    return null;
  }
  return AnnotationProxyFactory.create(clazz,annotationType,identifierToValue);
}
