{
  Annotation annotation=(Annotation)expression;
  TypeBinding resolvedType=annotation.resolvedType;
  Class<?> classLiteral=getClassLiteral(logger,resolvedType);
  if (classLiteral == null) {
    return null;
  }
  Class<? extends java.lang.annotation.Annotation> clazz=classLiteral.asSubclass(java.lang.annotation.Annotation.class);
  Map<String,Object> identifierToValue=new HashMap<String,Object>();
  for (  MemberValuePair mvp : annotation.memberValuePairs()) {
    String identifier=String.valueOf(mvp.name);
    Expression expressionValue=mvp.value;
    Object value=evaluateConstantExpression(logger,expressionValue);
    if (value == null) {
      return null;
    }
    try {
      Method method=clazz.getMethod(identifier,new Class[0]);
      Class<?> expectedClass=method.getReturnType();
      Class<? extends Object> actualClass=value.getClass();
      if (expectedClass.isArray() && !actualClass.isArray()) {
        assert(expression instanceof SingleMemberAnnotation);
        Object array=Array.newInstance(expectedClass.getComponentType(),1);
        Array.set(array,0,value);
        value=array;
      }
    }
 catch (    SecurityException e) {
      return null;
    }
catch (    NoSuchMethodException e) {
      return null;
    }
    identifierToValue.put(identifier,value);
  }
  JClassType annotationType=(JClassType)resolveType(logger,resolvedType);
  if (annotationType == null) {
    return null;
  }
  return AnnotationProxyFactory.create(clazz,annotationType,identifierToValue);
}
