{
  String packageName=targetClass.getPackage().getName();
  String className=targetClass.getName().replace('.','_') + "_" + locale.getAsString();
  PrintWriter pw=context.tryCreate(logger,packageName,className);
  if (pw != null) {
    ClassSourceFileComposerFactory factory=new ClassSourceFileComposerFactory(packageName,className);
    factory.setSuperclass(superClassName);
    factory.addImport(CURRENCY_DATA);
    factory.addImport(JAVASCRIPTOBJECT);
    factory.addImport(HASHMAP);
    SourceWriter writer=factory.createSourceWriter(context,pw);
    if (defCurrencyCode != null) {
      CurrencyInfo currencyInfo=allCurrencyData.get(defCurrencyCode);
      if (currencyInfo == null) {
        currencyInfo=new CurrencyInfo(defCurrencyCode,null,null);
        allCurrencyData.put(defCurrencyCode,currencyInfo);
      }
      writer.println();
      writer.println("@Override");
      writer.println("protected CurrencyData getDefaultJava() {");
      writer.println("  return " + currencyInfo.getJava() + ";");
      writer.println("}");
      writer.println();
      writer.println("@Override");
      writer.println("protected native CurrencyData getDefaultNative() /*-{");
      writer.println("  return " + currencyInfo.getJson() + ";");
      writer.println("}-*/;");
    }
    if (currencies.length > 0) {
      writeCurrencyMethodJava(writer,currencies,allCurrencyData);
      writeCurrencyMethodNative(writer,currencies,allCurrencyData);
      writeNamesMethodJava(writer,currencies,allCurrencyData);
      writeNamesMethodNative(writer,currencies,allCurrencyData);
    }
    writer.commit(logger);
  }
  return packageName + "." + className;
}
