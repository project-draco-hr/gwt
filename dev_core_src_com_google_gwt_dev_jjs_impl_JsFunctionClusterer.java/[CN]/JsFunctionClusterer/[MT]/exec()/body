{
  LinkedList<Integer> functionIndices=new LinkedList<Integer>();
  for (int i=0; i < statementRanges.numStatements(); i++) {
    String code=getJsForRange(i);
    if (isFunctionDeclaration(code)) {
      functionIndices.add(i);
    }
  }
  if (functionIndices.size() < 2) {
    return;
  }
  Collections.sort(functionIndices,new Comparator<Integer>(){
    public int compare(    Integer index1,    Integer index2){
      return stmtSize(index1) - (stmtSize(index2));
    }
  }
);
  int[] clusteredIndices=new int[functionIndices.size()];
  int currentFunction=0;
  clusteredIndices[currentFunction]=functionIndices.get(0);
  functionIndices.remove(0);
  while (!functionIndices.isEmpty()) {
    String currentCode=getJsForRange(clusteredIndices[currentFunction]);
    final GeneralEditDistance editDistance=GeneralEditDistances.getLevenshteinDistance(currentCode);
    int bestIndex=0;
    int bestFunction=functionIndices.getFirst();
    int bestDistance=MAX_DISTANCE_LIMIT;
    int count=0;
    for (    int functionIndex : functionIndices) {
      if (count >= SEARCH_LIMIT) {
        break;
      }
      String testCode=getJsForRange(functionIndex);
      int dist=editDistance.getDistance(testCode,bestDistance);
      if (dist < bestDistance) {
        bestDistance=dist;
        bestIndex=count;
        bestFunction=functionIndex;
      }
      count++;
    }
    currentFunction++;
    clusteredIndices[currentFunction]=bestFunction;
    functionIndices.remove(bestIndex);
  }
  recomputeJsAndStatementRanges(clusteredIndices);
}
