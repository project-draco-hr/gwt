{
  List<JClassType> subtypeList=new ArrayList<JClassType>();
  JClassType[] genericSubtypes=getBaseType().getSubtypes();
  for (  JClassType subtype : genericSubtypes) {
    Map<JTypeParameter,JClassType> substitutions=findSubtypeSubstitution(subtype);
    if (substitutions != null) {
      JGenericType genericType=subtype.isGenericType();
      if (genericType != null) {
        subtype=createParameterizedTypeRecursive(genericType,substitutions);
      }
 else {
        assert(substitutions.isEmpty());
      }
      subtypeList.add(subtype);
    }
  }
  return subtypeList.toArray(TypeOracle.NO_JCLASSES);
}
