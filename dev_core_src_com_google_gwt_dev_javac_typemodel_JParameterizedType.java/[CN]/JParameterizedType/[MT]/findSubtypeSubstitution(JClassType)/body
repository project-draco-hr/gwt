{
  Map<JTypeParameter,JClassType> substitutions=new IdentityHashMap<JTypeParameter,JClassType>();
  Set<JClassType> supertypeHierarchy=getFlattenedSuperTypeHierarchy(subtype);
  if (supertypeHierarchy.contains(this)) {
    return substitutions;
  }
  for (  JClassType candidate : supertypeHierarchy) {
    JParameterizedType parameterizedCandidate=candidate.isParameterized();
    if (parameterizedCandidate == null) {
      continue;
    }
    if (parameterizedCandidate.getBaseType() != getBaseType()) {
      continue;
    }
    JClassType[] candidateTypeArgs=parameterizedCandidate.getTypeArgs();
    JClassType[] myTypeArgs=getTypeArgs();
    for (int i=0; i < myTypeArgs.length; ++i) {
      JClassType otherTypeArg=candidateTypeArgs[i];
      JClassType myTypeArg=myTypeArgs[i];
      if (myTypeArg == otherTypeArg) {
        continue;
      }
      JTypeParameter otherTypeParameter=otherTypeArg.isTypeParameter();
      if (otherTypeParameter == null) {
        return null;
      }
      if (!otherTypeParameter.isAssignableFrom(myTypeArg)) {
        return null;
      }
      substitutions.put(otherTypeParameter,myTypeArg);
    }
  }
  return substitutions;
}
