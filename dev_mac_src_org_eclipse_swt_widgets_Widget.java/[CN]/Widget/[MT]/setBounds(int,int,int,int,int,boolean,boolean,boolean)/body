{
  boolean sameOrigin=true, sameExtent=true;
  if (OS.HIVIEW) {
    CGRect oldBounds=new CGRect();
    OS.HIViewGetFrame(control,oldBounds);
    Rect inset=getInset();
    oldBounds.x-=inset.left;
    oldBounds.y-=inset.top;
    oldBounds.width+=inset.left + inset.right;
    oldBounds.height+=inset.top + inset.bottom;
    if (!move) {
      x=(int)oldBounds.x;
      y=(int)oldBounds.y;
    }
    if (!resize) {
      width=(int)oldBounds.width;
      height=(int)oldBounds.height;
    }
    CGRect newBounds=new CGRect();
    newBounds.x=x + inset.left;
    newBounds.y=y + inset.top;
    newBounds.width=width - inset.right - inset.left;
    newBounds.height=height - inset.bottom - inset.top;
    sameOrigin=newBounds.x == oldBounds.x && newBounds.y == oldBounds.y;
    sameExtent=newBounds.width == oldBounds.width && newBounds.height == oldBounds.height;
    if (sameOrigin && sameExtent)     return 0;
    OS.HIViewSetFrame(control,newBounds);
    invalidateVisibleRegion(control);
  }
 else {
    Rect oldBounds=new Rect();
    OS.GetControlBounds(control,oldBounds);
    int[] theRoot=new int[1];
    int window=OS.GetControlOwner(control);
    OS.GetRootControl(window,theRoot);
    int[] parentHandle=new int[1];
    OS.GetSuperControl(control,parentHandle);
    Rect parentRect=new Rect();
    if (parentHandle[0] != theRoot[0]) {
      OS.GetControlBounds(parentHandle[0],parentRect);
      OS.OffsetRect(oldBounds,(short)-parentRect.left,(short)-parentRect.top);
    }
    Rect inset=getInset();
    oldBounds.left-=inset.left;
    oldBounds.top-=inset.top;
    oldBounds.right+=inset.right;
    oldBounds.bottom+=inset.bottom;
    if (!move) {
      x=oldBounds.left;
      y=oldBounds.top;
    }
    if (!resize) {
      width=oldBounds.right - oldBounds.left;
      height=oldBounds.bottom - oldBounds.top;
    }
    Rect newBounds=new Rect();
    newBounds.left=(short)(parentRect.left + x + inset.left);
    newBounds.top=(short)(parentRect.top + y + inset.top);
    newBounds.right=(short)(newBounds.left + width - inset.right - inset.left);
    newBounds.bottom=(short)(newBounds.top + height - inset.bottom - inset.top);
    if (newBounds.bottom < newBounds.top)     newBounds.bottom=newBounds.top;
    if (newBounds.right < newBounds.left)     newBounds.right=newBounds.left;
    OS.GetControlBounds(control,oldBounds);
    sameOrigin=newBounds.left == oldBounds.left && newBounds.top == oldBounds.top;
    sameExtent=(newBounds.right - newBounds.left) == (oldBounds.right - oldBounds.left) && (newBounds.bottom - newBounds.top) == (oldBounds.bottom - oldBounds.top);
    if (sameOrigin && sameExtent)     return 0;
    int tempRgn=0;
    boolean visible=OS.IsControlVisible(control);
    if (visible) {
      tempRgn=OS.NewRgn();
      OS.GetControlRegion(control,(short)OS.kControlStructureMetaPart,tempRgn);
      invalWindowRgn(window,tempRgn);
    }
    OS.SetControlBounds(control,newBounds);
    invalidateVisibleRegion(control);
    if (visible) {
      OS.GetControlRegion(control,(short)OS.kControlStructureMetaPart,tempRgn);
      invalWindowRgn(window,tempRgn);
      OS.DisposeRgn(tempRgn);
    }
  }
  int result=0;
  if (move && !sameOrigin) {
    if (events)     sendEvent(SWT.Move);
    result|=MOVED;
  }
  if (resize && !sameExtent) {
    if (events)     sendEvent(SWT.Resize);
    result|=RESIZED;
  }
  return result;
}
