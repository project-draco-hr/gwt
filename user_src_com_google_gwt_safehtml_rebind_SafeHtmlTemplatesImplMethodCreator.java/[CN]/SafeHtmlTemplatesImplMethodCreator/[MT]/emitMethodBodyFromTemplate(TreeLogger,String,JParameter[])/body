{
  println("StringBuilder sb = new java.lang.StringBuilder()");
  indent();
  indent();
  HtmlTemplateParser parser=new HtmlTemplateParser(logger);
  parser.parseTemplate(template);
  for (  TemplateChunk chunk : parser.getParsedTemplate().getChunks()) {
    if (chunk.getKind() == TemplateChunk.Kind.LITERAL) {
      emitStringLiteral(((LiteralChunk)chunk).getLiteral());
    }
 else     if (chunk.getKind() == TemplateChunk.Kind.PARAMETER) {
      ParameterChunk parameterChunk=(ParameterChunk)chunk;
      int formalParameterIndex=parameterChunk.getParameterIndex();
      if (formalParameterIndex < 0 || formalParameterIndex >= params.length) {
        throw error(logger,"Argument " + formalParameterIndex + " beyond range of arguments: "+ template);
      }
      String formalParameterName="arg" + formalParameterIndex;
      JType paramType=params[formalParameterIndex].getType();
      emitParameterExpression(logger,parameterChunk.getContext(),formalParameterName,paramType);
    }
 else {
      throw error(logger,"Unexpected chunk kind in parsed template " + template);
    }
  }
  println(";");
  outdent();
  outdent();
  println("return new " + BLESSED_STRING_FQCN + "(sb.toString());");
}
