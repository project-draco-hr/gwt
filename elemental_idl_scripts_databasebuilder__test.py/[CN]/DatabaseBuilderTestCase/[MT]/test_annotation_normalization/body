def test_annotation_normalization(self):
    file_name = self._create_input('input.idl', '\n      module M {\n        interface I : J{\n          const int C = 0;\n          readonly attribute int a;\n          int op();\n        };\n      };')
    self._builder.import_idl_file(file_name, DatabaseBuilderOptions(source='Src', source_attributes={'x': 'y', }))
    self._builder.merge_imported_interfaces([])
    interface = self._db.GetInterface('I')
    interface.parents[0].annotations['Src']['x'] = 'u'
    interface.constants[0].annotations['Src']['z'] = 'w'
    interface.attributes[0].annotations['Src']['x'] = 'u'
    self._db.Save()
    self._assert_content_equals('I.idl', '\n      @Src(module=M, x=y)\n      interface I : @Src(x=u) J {\n        /* Constants */\n        @Src(x=y, z=w) const int C = 0;\n        /* Attributes */\n        @Src(x=u) getter attribute int a;\n        /* Operations */\n        @Src(x=y) int op();\n      };')
    self._builder.normalize_annotations(['Src'])
    self._db.Save()
    self._assert_content_equals('I.idl', '\n      @Src(module=M, x=y)\n      interface I : @Src(x=u) J {\n        /* Constants */\n        @Src(z=w) const int C = 0;\n        /* Attributes */\n        @Src(x=u) getter attribute int a;\n        /* Operations */\n        @Src int op();\n      };')
