{
  PerfLogger.start("compile");
  boolean tempWorkDir=false;
  try {
    if (options.getWorkDir() == null) {
      options.setWorkDir(Utility.makeTemporaryDirectory(null,"gwtc"));
      tempWorkDir=true;
    }
    for (    String moduleName : options.getModuleNames()) {
      ModuleDef module=ModuleDefLoader.loadFromClassPath(logger,moduleName,true);
      File compilerWorkDir=options.getCompilerWorkDir(moduleName);
      if (options.isValidateOnly()) {
        if (!Precompile.validate(logger,options,module,options.getGenDir(),compilerWorkDir,options.getDumpSignatureFile())) {
          return false;
        }
      }
 else {
        long compileStart=System.currentTimeMillis();
        TreeLogger branch=logger.branch(TreeLogger.INFO,"Compiling module " + moduleName);
        options.setOptimizePrecompile(true);
        Precompilation precompilation=Precompile.precompile(branch,options,module,options.getGenDir(),compilerWorkDir,options.getDumpSignatureFile());
        if (precompilation == null) {
          return false;
        }
        Permutation[] allPerms=precompilation.getPermutations();
        List<FileBackedObject<PermutationResult>> resultFiles=CompilePerms.makeResultFiles(options.getCompilerWorkDir(moduleName),allPerms);
        CompilePerms.compile(branch,precompilation,allPerms,options.getLocalWorkers(),resultFiles);
        ArtifactSet generatedArtifacts=precompilation.getGeneratedArtifacts();
        JJSOptions precompileOptions=precompilation.getUnifiedAst().getOptions();
        precompilation=null;
        Link.link(logger.branch(TreeLogger.INFO,"Linking into " + options.getWarDir().getPath()),module,generatedArtifacts,allPerms,resultFiles,options.getWarDir(),options.getExtraDir(),precompileOptions);
        long compileDone=System.currentTimeMillis();
        long delta=compileDone - compileStart;
        branch.log(TreeLogger.INFO,"Compilation succeeded -- " + String.format("%.3f",delta / 1000d) + "s");
      }
    }
  }
 catch (  IOException e) {
    logger.log(TreeLogger.ERROR,"Unable to create compiler work directory",e);
    return false;
  }
 finally {
    PerfLogger.end();
    if (tempWorkDir) {
      Util.recursiveDelete(options.getWorkDir(),false);
    }
  }
  return true;
}
