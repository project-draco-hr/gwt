{
  boolean tempWorkDir=false;
  try {
    if (options.getWorkDir() == null) {
      options.setWorkDir(Utility.makeTemporaryDirectory(null,"gwtc"));
      tempWorkDir=true;
    }
    if (options.isSoycEnabled() && options.getExtraDir() == null) {
      options.setExtraDir(new File("extras"));
    }
    CompilationStateBuilder.init(logger,new File(options.getWarDir(),"WEB-INF"));
    for (    ModuleDef module : modules) {
      String moduleName=module.getCanonicalName();
      if (options.isValidateOnly()) {
        if (!Precompile.validate(logger,options,module,options.getGenDir())) {
          return false;
        }
      }
 else {
        long compileStart=System.currentTimeMillis();
        TreeLogger branch=logger.branch(TreeLogger.INFO,"Compiling module " + moduleName);
        options.setOptimizePrecompile(true);
        Precompilation precompilation=Precompile.precompile(branch,options,module,options.getGenDir());
        if (precompilation == null) {
          return false;
        }
        Event compilePermutationsEvent=SpeedTracerLogger.start(CompilerEventType.COMPILE_PERMUTATIONS);
        Permutation[] allPerms=precompilation.getPermutations();
        List<FileBackedObject<PermutationResult>> resultFiles=CompilePerms.makeResultFiles(options.getCompilerWorkDir(moduleName),allPerms);
        CompilePerms.compile(branch,precompilation,allPerms,options.getLocalWorkers(),resultFiles);
        compilePermutationsEvent.end();
        ArtifactSet generatedArtifacts=precompilation.getGeneratedArtifacts();
        JJSOptions precompileOptions=precompilation.getUnifiedAst().getOptions();
        precompilation=null;
        Event linkEvent=SpeedTracerLogger.start(CompilerEventType.LINK);
        File absPath=new File(options.getWarDir(),module.getName());
        absPath=absPath.getAbsoluteFile();
        String logMessage="Linking into " + absPath;
        if (options.getExtraDir() != null) {
          File absExtrasPath=new File(options.getExtraDir(),module.getName());
          absExtrasPath=absExtrasPath.getAbsoluteFile();
          logMessage+="; Writing extras to " + absExtrasPath;
        }
        Link.link(logger.branch(TreeLogger.TRACE,logMessage),module,generatedArtifacts,allPerms,resultFiles,options.getWarDir(),options.getDeployDir(),options.getExtraDir(),precompileOptions);
        linkEvent.end();
        long compileDone=System.currentTimeMillis();
        long delta=compileDone - compileStart;
        branch.log(TreeLogger.INFO,"Compilation succeeded -- " + String.format("%.3f",delta / 1000d) + "s");
      }
    }
  }
 catch (  IOException e) {
    logger.log(TreeLogger.ERROR,"Unable to create compiler work directory",e);
    return false;
  }
 finally {
    if (tempWorkDir) {
      Util.recursiveDelete(options.getWorkDir(),false);
    }
  }
  return true;
}
