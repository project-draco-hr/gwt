{
  int begin=0;
  int offset=0;
  int last=val.length();
  String scaleString=null;
  StringBuilder unscaledBuffer;
  unscaledBuffer=new StringBuilder(val.length());
  if ((offset < last) && (val.charAt(offset) == '+')) {
    offset++;
    begin++;
    if ((offset < last) && (val.charAt(offset) == '+' || val.charAt(offset) == '-')) {
      throw new NumberFormatException("For input string: \"" + val + "\"");
    }
  }
  while ((offset < last) && (val.charAt(offset) != '.') && (val.charAt(offset) != 'e')&& (val.charAt(offset) != 'E')) {
    offset++;
  }
  unscaledBuffer.append(val,begin,offset);
  if ((offset < last) && (val.charAt(offset) == '.')) {
    offset++;
    begin=offset;
    while ((offset < last) && (val.charAt(offset) != 'e') && (val.charAt(offset) != 'E')) {
      offset++;
    }
    scale=offset - begin;
    unscaledBuffer.append(val,begin,offset);
  }
 else {
    scale=0;
  }
  if ((offset < last) && ((val.charAt(offset) == 'e') || (val.charAt(offset) == 'E'))) {
    offset++;
    begin=offset;
    if ((offset < last) && (val.charAt(offset) == '+')) {
      offset++;
      if ((offset < last) && (val.charAt(offset) != '-')) {
        begin++;
      }
    }
    scaleString=val.substring(begin,last);
    scale=scale - Integer.parseInt(scaleString);
    if (scale != (int)scale) {
      throw new NumberFormatException("Scale out of range.");
    }
  }
  String unscaled=unscaledBuffer.toString();
  if (unscaled.length() < 16) {
    smallValue=parseUnscaled(unscaled);
    if (Double.isNaN(smallValue)) {
      throw new NumberFormatException("For input string: \"" + val + "\"");
    }
    bitLength=bitLength(smallValue);
  }
 else {
    setUnscaledValue(new BigInteger(unscaled));
  }
  precision=unscaledBuffer.length();
  for (int i=0; i < unscaledBuffer.length(); ++i) {
    char ch=unscaledBuffer.charAt(i);
    if (ch != '-' && ch != '0') {
      break;
    }
    --precision;
  }
  if (precision == 0) {
    precision=1;
  }
}
