{
  logger=logger.branch(TreeLogger.INFO,String.format("Generating implementation of %s",interfaceType.getName()));
  ClassSourceFileComposerFactory f=new ClassSourceFileComposerFactory(packageName,implName);
  f.addImport(RequestFactoryJsonImpl.class.getName());
  f.addImport(interfaceType.getQualifiedSourceName());
  f.addImplementedInterface(interfaceType.getName());
  f.setSuperclass(RequestFactoryJsonImpl.class.getSimpleName());
  SourceWriter sw=f.createSourceWriter(generatorContext,out);
  sw.println();
  Set<JClassType> requestSelectors=new LinkedHashSet<JClassType>();
  for (  JMethod methodType : interfaceType.getMethods()) {
    JType returnType=methodType.getReturnType();
    if (null == returnType) {
      logger.log(TreeLogger.ERROR,String.format("Illegal return type for %s. Methods of %s must return interfaces",methodType.getName(),interfaceType.getName()));
      throw new UnableToCompleteException();
    }
    JClassType asInterface=returnType.isInterface();
    if (null == asInterface) {
      logger.log(TreeLogger.ERROR,String.format("Illegal return type for %s. Methods of %s must return interfaces",methodType.getName(),interfaceType.getName()));
      throw new UnableToCompleteException();
    }
    requestSelectors.add(asInterface);
  }
  for (  JClassType requestSelector : requestSelectors) {
    String simpleSourceName=requestSelector.getSimpleSourceName();
    sw.println("public " + simpleSourceName + " "+ getMethodName(simpleSourceName)+ "() {");
    sw.indent();
    sw.println("return new " + simpleSourceName + "Impl(this);");
    sw.outdent();
    sw.println("}");
    sw.println();
  }
  sw.outdent();
  sw.println("}");
  for (  JClassType nestedInterface : requestSelectors) {
    String nestedImplName=nestedInterface.getName() + "Impl";
    PrintWriter pw=printWriters.makePrintWriterFor(nestedImplName);
    if (pw != null) {
      generateRequestSelectorImplementation(logger,generatorContext,printWriters,pw,nestedInterface,interfaceType,packageName,nestedImplName);
    }
  }
  printWriters.commit();
}
