{
  DefaultStringValue dsv=msg.getAnnotation(DefaultStringValue.class);
  if (dsv != null) {
    return dsv.value();
  }
  DefaultIntValue div=msg.getAnnotation(DefaultIntValue.class);
  if (div != null) {
    return String.valueOf(div.value());
  }
  DefaultBooleanValue dbv=msg.getAnnotation(DefaultBooleanValue.class);
  if (dbv != null) {
    return String.valueOf(dbv.value());
  }
  DefaultDoubleValue ddv=msg.getAnnotation(DefaultDoubleValue.class);
  if (ddv != null) {
    return String.valueOf(ddv.value());
  }
  DefaultFloatValue dfv=msg.getAnnotation(DefaultFloatValue.class);
  if (dfv != null) {
    return String.valueOf(dfv.value());
  }
  DefaultStringArrayValue dsav=msg.getAnnotation(DefaultStringArrayValue.class);
  if (dsav != null) {
    StringBuilder buf=new StringBuilder();
    boolean needComma=false;
    for (    String value : dsav.value()) {
      if (needComma) {
        buf.append(',');
      }
 else {
        needComma=true;
      }
      buf.append(MessageUtils.quoteComma(value));
    }
    return buf.toString();
  }
  DefaultStringMapValue dsmv=msg.getAnnotation(DefaultStringMapValue.class);
  if (dsmv != null) {
    String[] values=dsmv.value();
    StringBuilder buf=new StringBuilder();
    boolean needComma=false;
    for (int i=0; i < values.length; i+=2) {
      if (needComma) {
        buf.append(',');
      }
 else {
        needComma=true;
      }
      buf.append(MessageUtils.quoteComma(values[i]));
    }
    return buf.toString();
  }
  return null;
}
