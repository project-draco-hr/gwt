{
  logger=logger.branch(TreeLogger.DEBUG,"Considering query " + query);
  int size=typePatterns.size();
  for (int idx=size - 1; idx >= 0; idx--) {
    if (logger.isLoggable(TreeLogger.DEBUG)) {
      logger.log(TreeLogger.DEBUG,"Considering filter rule " + values.get(idx) + " for query "+ query);
    }
    boolean include=includeType.get(idx);
    Pattern pattern=typePatterns.get(idx);
    if (pattern.matcher(query).matches()) {
      if (include) {
        if (logger.isLoggable(TreeLogger.DEBUG)) {
          logger.log(TreeLogger.DEBUG,"Whitelisting " + query + " according to rule "+ values.get(idx));
        }
        return true;
      }
 else {
        if (logger.isLoggable(TreeLogger.DEBUG)) {
          logger.log(TreeLogger.DEBUG,"Blacklisting " + query + " according to rule "+ values.get(idx));
        }
        return false;
      }
    }
  }
  return acceptByDefault();
}
