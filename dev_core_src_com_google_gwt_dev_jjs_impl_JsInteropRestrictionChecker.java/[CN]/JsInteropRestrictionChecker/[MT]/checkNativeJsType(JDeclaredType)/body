{
  if (type.isEnumOrSubclass() != null) {
    logError("Enum '%s' cannot be a native JsType.",type);
    return false;
  }
  if (type.getClassDisposition() == NestedClassDisposition.INNER) {
    logError("Non static inner class '%s' cannot be a native JsType.",type);
    return false;
  }
  JClassType superClass=type.getSuperClass();
  if (superClass != null && superClass != jprogram.getTypeJavaLangObject() && !superClass.isJsNative()) {
    logError("Native JsType '%s' can only extend native JsType classes.",type);
  }
  for (  JInterfaceType interfaceType : type.getImplements()) {
    if (!interfaceType.isJsNative()) {
      logError(type,"Native JsType '%s' can only %s native JsType interfaces.",getDescription(type),type instanceof JInterfaceType ? "extend" : "implement");
    }
  }
  if (!isClinitEmpty(type)) {
    logError("Native JsType '%s' cannot have static initializer.",type);
  }
  for (  JConstructor constructor : type.getConstructors()) {
    if (!isConstructorEmpty(constructor)) {
      logError(constructor,"Native JsType constructor %s cannot have non-empty method body.",getMemberDescription(constructor));
    }
  }
  return true;
}
