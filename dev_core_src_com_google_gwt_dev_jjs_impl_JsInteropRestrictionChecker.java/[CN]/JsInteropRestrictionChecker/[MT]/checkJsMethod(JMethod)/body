{
  if (method.isSynthetic() && !method.isForwarding()) {
    return;
  }
  String jsMemberName=method.getJsName();
  String qualifiedMethodName=method.getQualifiedName();
  String typeName=method.getEnclosingType().getName();
  JsPropertyAccessorType accessorType=method.getJsPropertyAccessorType();
  if (jsMemberName == null) {
    logError("'%s' can't be exported because the method overloads multiple methods with " + "different names.",qualifiedMethodName);
  }
  if (accessorType == JsPropertyAccessorType.GETTER) {
    if (!method.getParams().isEmpty() || method.getType() == JPrimitiveType.VOID) {
      logError("There can't be void return type or any parameters for the JsProperty getter" + " '%s'.",qualifiedMethodName);
      return;
    }
    if (method.getType() != JPrimitiveType.BOOLEAN && method.getName().startsWith("is")) {
      logError("There can't be non-boolean return for the JsProperty 'is' getter '%s'.",qualifiedMethodName);
      return;
    }
    if (currentJsMethodNameByGetterNames.put(jsMemberName,qualifiedMethodName) != null) {
      logError("There can't be more than one getter for JsProperty '%s' in type '%s'.",jsMemberName,typeName);
      return;
    }
    checkNameCollisionForGetterAndRegular(jsMemberName,typeName);
    checkJsPropertyType(jsMemberName,typeName,method.getOriginalReturnType());
  }
 else   if (accessorType == JsPropertyAccessorType.SETTER) {
    if (method.getParams().size() != 1 || method.getType() != JPrimitiveType.VOID) {
      logError("There needs to be single parameter and void return type for the JsProperty setter" + " '%s'.",qualifiedMethodName);
      return;
    }
    if (currentJsMethodNameBySetterNames.put(jsMemberName,qualifiedMethodName) != null) {
      logError("There can't be more than one setter for JsProperty '%s' in type '%s'.",jsMemberName,typeName);
      return;
    }
    checkNameCollisionForSetterAndRegular(jsMemberName,typeName);
    checkJsPropertyType(jsMemberName,typeName,Iterables.getOnlyElement(method.getParams()).getType());
  }
 else   if (accessorType == JsPropertyAccessorType.UNDEFINED) {
    logError("JsProperty '%s' doesn't follow Java Bean naming conventions.",qualifiedMethodName);
  }
 else {
    checkLocalName(method);
    checkNameCollisionForGetterAndRegular(jsMemberName,typeName);
    checkNameCollisionForSetterAndRegular(jsMemberName,typeName);
  }
}
