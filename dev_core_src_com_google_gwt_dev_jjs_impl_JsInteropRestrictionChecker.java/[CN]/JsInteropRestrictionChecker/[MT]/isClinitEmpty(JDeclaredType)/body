{
  JMethod clinit=type.getClinitMethod();
  List<JStatement> statements=FluentIterable.from(((JMethodBody)clinit.getBody()).getStatements()).filter(new Predicate<JStatement>(){
    @Override public boolean apply(    JStatement statement){
      if (!(statement instanceof JDeclarationStatement)) {
        return true;
      }
      JDeclarationStatement declarationStatement=(JDeclarationStatement)statement;
      JField field=(JField)declarationStatement.getVariableRef().getTarget();
      return !field.isCompileTimeConstant();
    }
  }
).toList();
  if (statements.isEmpty()) {
    return true;
  }
  return statements.size() == 1 && isClinitCall(statements.get(0),type.getSuperClass());
}
