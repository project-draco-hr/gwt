{
  if (root.isDirectory()) {
    File[] subFiles=root.listFiles();
    for (int i=0; i < subFiles.length; i++) {
      generateStyleFiles(subFiles[i]);
    }
  }
 else   if (root.isFile()) {
    if (!isFileType(root,"java")) {
      return;
    }
    String fileContents=getFileContents(root);
    if (fileContents == "") {
      return;
    }
    List<String> styleNames=new ArrayList<String>();
    int tagIndex=fileContents.indexOf(TAG_CSS);
    while (tagIndex >= 0) {
      int beginIndex=fileContents.indexOf(" ",tagIndex);
      int endIndex=fileContents.indexOf("\n",tagIndex);
      String styleName=fileContents.substring(beginIndex,endIndex).trim();
      styleNames.add(styleName);
      tagIndex=fileContents.indexOf(TAG_CSS,tagIndex + 1);
    }
    Map<String,String> styleDefs=new LinkedHashMap<String,String>();
    for (    String styleName : styleNames) {
      boolean foundStyle=false;
      int start=cssFileContents.indexOf("\n" + styleName);
      while (start >= 0) {
        int end=cssFileContents.indexOf("{",start);
        String matchedName=cssFileContents.substring(start,end).trim();
        end=cssFileContents.indexOf("}",start) + 1;
        String styleDef="<pre>" + cssFileContents.substring(start,end) + "</pre>";
        styleDefs.put(matchedName,styleDef);
        foundStyle=true;
        start=cssFileContents.indexOf("\n" + styleName,end);
      }
      if (!foundStyle) {
        styleDefs.put(styleName,"<pre>" + styleName + " {\n}</pre>");
      }
    }
    String formattedStyle="";
    for (    String styleDef : styleDefs.values()) {
      formattedStyle+=styleDef;
    }
    String saveFile=root.getPath().substring(FILE_ROOT.length());
    saveFile=saveFile.replaceAll(".java",".html");
    saveFile=saveFile.replace('/','.');
    saveFile=DST_STYLE + saveFile;
    setFileContents(saveFile,formattedStyle);
  }
}
