{
  this.listener=listener;
  this.requestFactory=requestFactory;
  this.employee=employee;
  EntityProxyKeyProvider<ReportProxy> keyProvider=new EntityProxyKeyProvider<ReportProxy>();
  reportDataProvider=new AsyncDataProvider<ReportProxy>(keyProvider){
    @Override protected void onRangeChanged(    HasData<ReportProxy> view){
      requestReports();
    }
  }
;
  reportList=new CellList<ReportProxy>(new AbstractCell<ReportProxy>(){
    @Override public void render(    Context context,    ReportProxy value,    SafeHtmlBuilder sb){
      sb.appendHtmlConstant("<div class='item'>");
      sb.appendEscaped(value.getPurpose());
      sb.appendHtmlConstant("</div>");
    }
  }
);
  reportList.setKeyboardSelectionPolicy(KeyboardSelectionPolicy.DISABLED);
  reportSelection=new NoSelectionModel<ReportProxy>(keyProvider);
  reportSelection.addSelectionChangeHandler(new SelectionChangeEvent.Handler(){
    public void onSelectionChange(    SelectionChangeEvent event){
      listener.onReportSelected(reportSelection.getLastSelectedObject());
    }
  }
);
  reportList.setSelectionModel(reportSelection);
  reportDataProvider.addDataDisplay(reportList);
  initWidget(reportList);
  onRefresh(false);
}
