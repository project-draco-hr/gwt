{
  if (fastFail(binaryName)) {
    return;
  }
  Type requestContextType=Type.getObjectType(BinaryName.toInternalName(binaryName));
  final ErrorContext logger=parentLogger.setType(requestContextType);
  if (!isAssignable(logger,requestContextIntf,requestContextType)) {
    logger.poison("%s is not a %s",print(requestContextType),RequestContext.class.getSimpleName());
    return;
  }
  Type domainServiceType=getDomainType(logger,requestContextType);
  if (domainServiceType == errorType) {
    logger.poison("The type %s must be annotated with a @%s or @%s annotation",BinaryName.toSourceName(binaryName),Service.class.getSimpleName(),ServiceName.class.getSimpleName());
    return;
  }
  for (  RFMethod method : getMethodsInHierarchy(logger,requestContextType)) {
    if (findCompatibleMethod(logger,requestContextIntf,method,false,true,true) != null) {
      continue;
    }
    Method found=checkClientMethodInDomain(logger,method,domainServiceType,!clientToLocatorMap.containsKey(requestContextType));
    if (found != null) {
      OperationKey key=new OperationKey(binaryName,method.getName(),method.getDescriptor());
      OperationData data=new OperationData.Builder().setClientMethodDescriptor(method.getDescriptor()).setDomainMethodDescriptor(found.getDescriptor()).setMethodName(method.getName()).setRequestContext(requestContextType.getClassName()).build();
      operationData.put(key,data);
    }
    maybeCheckReferredProxies(logger,method);
  }
  checkUnresolvedKeyTypes(logger);
}
