{
  if (objectType.equals(domainType)) {
    return;
  }
  logger=logger.setType(domainType);
  String findMethodName="find" + BinaryName.getShortClassName(domainType.getClassName());
  Type keyType=null;
  RFMethod findMethod=null;
  boolean foundFind=false;
  boolean foundId=false;
  boolean foundVersion=false;
  for (  RFMethod method : getMethodsInHierarchy(logger,domainType)) {
    if ("getId".equals(method.getName()) && method.getArgumentTypes().length == 0) {
      foundId=true;
      keyType=method.getReturnType();
      if (!isResolvedKeyType(logger,keyType)) {
        unresolvedKeyTypes.put(domainType,keyType);
      }
    }
 else     if ("getVersion".equals(method.getName()) && method.getArgumentTypes().length == 0) {
      foundVersion=true;
      if (!isResolvedKeyType(logger,method.getReturnType())) {
        unresolvedKeyTypes.put(domainType,method.getReturnType());
      }
    }
 else     if (findMethodName.equals(method.getName()) && method.getArgumentTypes().length == 1) {
      foundFind=true;
      findMethod=method;
    }
    if (foundFind && foundId && foundVersion) {
      break;
    }
  }
  if (!foundId) {
    logger.poison("There is no getId() method in type %s",print(domainType));
  }
  if (!foundVersion) {
    logger.poison("There is no getVersion() method in type %s",print(domainType));
  }
  if (foundFind) {
    if (keyType != null && !isAssignable(logger,findMethod.getArgumentTypes()[0],keyType)) {
      logger.poison("The key type returned by %s getId()" + " cannot be used as the argument to %s(%s)",print(keyType),findMethod.getName(),print(findMethod.getArgumentTypes()[0]));
    }
    if (!findMethod.isDeclaredStatic()) {
      logger.poison("The %s method must be static",findMethodName);
    }
  }
 else {
    logger.poison("There is no %s method in type %s that returns %2$s",findMethodName,print(domainType));
  }
}
