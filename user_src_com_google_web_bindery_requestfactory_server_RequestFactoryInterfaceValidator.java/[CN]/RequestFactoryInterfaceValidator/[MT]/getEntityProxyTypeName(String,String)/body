{
  Type key=Type.getObjectType(BinaryName.toInternalName(domainTypeBinaryName));
  SortedSet<Type> found=domainToClientType.get(key);
  if (found == null || found.isEmpty()) {
    List<Type> types=getSupertypes(parentLogger,key);
    for (    Type type : types) {
      if (objectType.equals(type)) {
        break;
      }
      found=domainToClientType.get(type);
      if (found != null && !found.isEmpty()) {
        break;
      }
    }
  }
  if (found == null || found.isEmpty()) {
    return null;
  }
  Type typeToReturn=null;
  if (found.size() == 1) {
    typeToReturn=found.first();
  }
 else {
    Type assignableTo=Type.getObjectType(BinaryName.toInternalName(clientTypeBinaryName));
    for (    Type t : found) {
      if (isAssignable(parentLogger,assignableTo,t)) {
        typeToReturn=t;
        break;
      }
    }
  }
  return typeToReturn == null ? null : typeToReturn.getClassName();
}
