{
  SourceInfo info=makeSourceInfo(x);
  JMethod ctor=(JMethod)typeMap.get(x.binding);
  JExpression trueQualifier=createThisRef(info,currentClass);
  JMethodCall call=new JMethodCall(program,info,trueQualifier,ctor);
  addCallArgs(x.arguments,call,x.binding);
  ReferenceBinding superClass=x.binding.declaringClass;
  if (superClass.isNestedType() && !superClass.isStatic()) {
    ReferenceBinding myBinding=currentClassScope.referenceType().binding;
    ReferenceBinding superBinding=superClass;
    if (superBinding.syntheticEnclosingInstanceTypes() != null) {
      JExpression qualifier=dispProcessExpression(x.qualification);
      for (      ReferenceBinding arg : superBinding.syntheticEnclosingInstanceTypes()) {
        JClassType classType=(JClassType)typeMap.get(arg);
        if (qualifier == null) {
          List<JExpression> workList=new ArrayList<JExpression>();
          Iterator<JParameter> paramIt=getSyntheticsIterator();
          for (          ReferenceBinding b : myBinding.syntheticEnclosingInstanceTypes()) {
            workList.add(createVariableRef(info,paramIt.next()));
          }
          call.addArg(createThisRef(classType,workList));
        }
 else {
          call.addArg(createThisRef(classType,qualifier));
        }
      }
    }
    if (superBinding.syntheticOuterLocalVariables() != null) {
      for (      SyntheticArgumentBinding arg : superBinding.syntheticOuterLocalVariables()) {
        JType varType=(JType)typeMap.get(arg.type);
        String varName=String.valueOf(arg.name);
        JParameter param=null;
        for (int i=0; i < currentMethod.getParams().size(); ++i) {
          JParameter paramIt=currentMethod.getParams().get(i);
          if (varType == paramIt.getType() && varName.equals(paramIt.getName())) {
            param=paramIt;
          }
        }
        if (param == null) {
          throw new InternalCompilerException("Could not find matching local arg for explicit super ctor call.");
        }
        call.addArg(createVariableRef(info,param));
      }
    }
  }
  return call;
}
