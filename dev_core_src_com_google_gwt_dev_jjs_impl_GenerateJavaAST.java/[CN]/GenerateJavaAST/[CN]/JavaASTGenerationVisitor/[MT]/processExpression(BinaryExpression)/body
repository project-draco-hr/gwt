{
  JBinaryOperator op;
  int binOp=(x.bits & ASTNode.OperatorMASK) >> ASTNode.OperatorSHIFT;
switch (binOp) {
case OperatorIds.LEFT_SHIFT:
    op=JBinaryOperator.SHL;
  break;
case OperatorIds.RIGHT_SHIFT:
op=JBinaryOperator.SHR;
break;
case OperatorIds.UNSIGNED_RIGHT_SHIFT:
op=JBinaryOperator.SHRU;
break;
case OperatorIds.PLUS:
if (program.isJavaLangString((JType)typeMap.get(x.resolvedType))) {
op=JBinaryOperator.CONCAT;
}
 else {
op=JBinaryOperator.ADD;
}
break;
case OperatorIds.MINUS:
op=JBinaryOperator.SUB;
break;
case OperatorIds.REMAINDER:
op=JBinaryOperator.MOD;
break;
case OperatorIds.XOR:
op=JBinaryOperator.BIT_XOR;
break;
case OperatorIds.AND:
op=JBinaryOperator.BIT_AND;
break;
case OperatorIds.MULTIPLY:
op=JBinaryOperator.MUL;
break;
case OperatorIds.OR:
op=JBinaryOperator.BIT_OR;
break;
case OperatorIds.DIVIDE:
op=JBinaryOperator.DIV;
break;
case OperatorIds.LESS_EQUAL:
op=JBinaryOperator.LTE;
break;
case OperatorIds.GREATER_EQUAL:
op=JBinaryOperator.GTE;
break;
case OperatorIds.GREATER:
op=JBinaryOperator.GT;
break;
case OperatorIds.LESS:
op=JBinaryOperator.LT;
break;
default :
throw new InternalCompilerException("Unexpected operator for BinaryExpression");
}
JType type=(JType)typeMap.get(x.resolvedType);
SourceInfo info=makeSourceInfo(x);
return processBinaryOperation(info,op,type,x.left,x.right);
}
