{
  SourceInfo info=program.createSourceInfoSynthetic(GenerateJavaAST.class,"bridge method");
  JMethod bridgeMethod=program.createMethod(info,interfmeth.getName().toCharArray(),clazz,interfmeth.getType(),false,false,true,false,false);
  for (  JParameter param : interfmeth.params) {
    program.createParameter(program.createSourceInfoSynthetic(GenerateJavaAST.class,"part of a bridge method"),param.getName().toCharArray(),param.getType(),true,false,bridgeMethod);
  }
  bridgeMethod.freezeParamTypes();
  JMethodCall call=new JMethodCall(program,program.createSourceInfoSynthetic(GenerateJavaAST.class,"call to inherited method"),program.getExprThisRef(program.createSourceInfoSynthetic(GenerateJavaAST.class,"part of a bridge method"),clazz),implmeth);
  for (int i=0; i < bridgeMethod.params.size(); i++) {
    JParameter param=bridgeMethod.params.get(i);
    JParameterRef paramRef=new JParameterRef(program,program.createSourceInfoSynthetic(GenerateJavaAST.class,"part of a bridge method"),param);
    call.getArgs().add(maybeCast(implmeth.params.get(i).getType(),paramRef));
  }
  JStatement callOrReturn;
  if (bridgeMethod.getType() == program.getTypeVoid()) {
    callOrReturn=call.makeStatement();
  }
 else {
    callOrReturn=new JReturnStatement(program,program.createSourceInfoSynthetic(GenerateJavaAST.class,"part of a bridge method"),call);
  }
  JMethodBody body=(JMethodBody)bridgeMethod.getBody();
  body.getStatements().add(callOrReturn);
  bridgeMethod.overrides.add(interfmeth);
  bridgeMethod.overrides.addAll(interfmeth.overrides);
}
