{
  SourceInfo info=makeSourceInfo(x);
  JBlock body;
  JStatement action=dispProcessStatement(x.action);
  if (action instanceof JBlock) {
    body=(JBlock)action;
  }
 else {
    body=new JBlock(info);
    body.addStmt(action);
  }
  JLocal elementVar=(JLocal)typeMap.get(x.elementVariable.binding);
  String elementVarName=elementVar.getName();
  JDeclarationStatement elementDecl=(JDeclarationStatement)processStatement(x.elementVariable);
  assert(elementDecl.initializer == null);
  JForStatement result;
  if (x.collection.resolvedType.isArrayType()) {
    JLocal arrayVar=JProgram.createLocal(info,elementVarName + "$array",((JType)typeMap.get(x.collection.resolvedType)),true,currentMethodBody);
    JLocal indexVar=JProgram.createLocal(info,elementVarName + "$index",program.getTypePrimitiveInt(),false,currentMethodBody);
    JLocal maxVar=JProgram.createLocal(info,elementVarName + "$max",program.getTypePrimitiveInt(),true,currentMethodBody);
    List<JStatement> initializers=new ArrayList<JStatement>(3);
    initializers.add(createDeclaration(info,arrayVar,dispProcessExpression(x.collection)));
    initializers.add(createDeclaration(info,indexVar,program.getLiteralInt(0)));
    initializers.add(createDeclaration(info,maxVar,new JFieldRef(info,createVariableRef(info,arrayVar),program.getIndexedField("Array.length"),currentClass)));
    JExpression condition=new JBinaryOperation(info,program.getTypePrimitiveBoolean(),JBinaryOperator.LT,createVariableRef(info,indexVar),createVariableRef(info,maxVar));
    List<JExpressionStatement> increments=new ArrayList<JExpressionStatement>(1);
    increments.add(new JPrefixOperation(info,JUnaryOperator.INC,createVariableRef(info,indexVar)).makeStatement());
    elementDecl.initializer=new JArrayRef(info,createVariableRef(info,arrayVar),createVariableRef(info,indexVar));
    body.addStmt(0,elementDecl);
    result=new JForStatement(info,initializers,condition,increments,body);
  }
 else {
    JLocal iteratorVar=JProgram.createLocal(info,(elementVarName + "$iterator"),program.getIndexedType("Iterator"),false,currentMethodBody);
    List<JStatement> initializers=new ArrayList<JStatement>(1);
    initializers.add(createDeclaration(info,iteratorVar,new JMethodCall(info,dispProcessExpression(x.collection),program.getIndexedMethod("Iterable.iterator"))));
    JExpression condition=new JMethodCall(info,createVariableRef(info,iteratorVar),program.getIndexedMethod("Iterator.hasNext"));
    elementDecl.initializer=new JMethodCall(info,createVariableRef(info,iteratorVar),program.getIndexedMethod("Iterator.next"));
    if (elementVar.getType() != program.getTypeJavaLangObject()) {
      TypeBinding collectionType;
      try {
        Field privateField=ForeachStatement.class.getDeclaredField("collectionElementType");
        privateField.setAccessible(true);
        collectionType=(TypeBinding)privateField.get(x);
      }
 catch (      Exception e) {
        throw new InternalCompilerException(elementDecl,"Failed to retreive collectionElementType through reflection",e);
      }
      JType toType=(JType)typeMap.get(collectionType);
      assert(toType instanceof JReferenceType);
      elementDecl.initializer=maybeCast(toType,elementDecl.initializer);
    }
    body.addStmt(0,elementDecl);
    result=new JForStatement(info,initializers,condition,Collections.<JExpressionStatement>emptyList(),body);
  }
  if (x.elementVariableImplicitWidening != -1) {
    if ((x.elementVariableImplicitWidening & TypeIds.BOXING) != 0) {
      elementDecl.initializer=autoboxUtils.box(elementDecl.initializer,((JPrimitiveType)elementDecl.initializer.getType()));
    }
 else     if ((x.elementVariableImplicitWidening & TypeIds.UNBOXING) != 0) {
      elementDecl.initializer=unbox(elementDecl.initializer,(JClassType)elementDecl.initializer.getType());
    }
  }
  return result;
}
