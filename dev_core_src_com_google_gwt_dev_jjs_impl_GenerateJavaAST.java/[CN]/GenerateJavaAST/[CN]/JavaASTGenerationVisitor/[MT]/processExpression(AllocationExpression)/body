{
  SourceInfo info=makeSourceInfo(x);
  SourceTypeBinding typeBinding=erasure(x.resolvedType);
  if (typeBinding.constantPoolName() == null) {
    return program.getLiteralNull();
  }
  JClassType newType=(JClassType)typeMap.get(typeBinding);
  MethodBinding b=x.binding;
  JConstructor ctor=(JConstructor)typeMap.get(b);
  JMethodCall call;
  JClassType javaLangString=program.getTypeJavaLangString();
  if (newType == javaLangString) {
    int ctorArgc=ctor.getParams().size();
    JMethod targetMethod=null;
    outer:     for (    JMethod method : javaLangString.getMethods()) {
      if (method.getName().equals("_String") && method.getParams().size() == ctorArgc) {
        for (int i=0; i < ctorArgc; ++i) {
          JParameter mparam=method.getParams().get(i);
          JParameter cparam=ctor.getParams().get(i);
          if (mparam.getType() != cparam.getType()) {
            continue outer;
          }
        }
        targetMethod=method;
        break;
      }
    }
    if (targetMethod == null) {
      throw new InternalCompilerException("String constructor error; no matching implementation.");
    }
    call=new JMethodCall(makeSourceInfo(x),null,targetMethod);
  }
 else {
    call=new JNewInstance(info,ctor,currentClass);
  }
  if (x.enumConstant != null) {
    call.addArgs(program.getLiteralString(info,x.enumConstant.name),program.getLiteralInt(x.enumConstant.binding.original().id));
  }
  ReferenceBinding targetBinding=b.declaringClass;
  if (targetBinding.isNestedType() && !targetBinding.isStatic()) {
    NestedTypeBinding nestedBinding=(NestedTypeBinding)erasure(targetBinding);
    if (nestedBinding.enclosingInstances != null) {
      for (      SyntheticArgumentBinding arg : nestedBinding.enclosingInstances) {
        JClassType syntheticThisType=(JClassType)typeMap.get(arg.type);
        call.addArg(createThisRef(info,syntheticThisType));
      }
    }
  }
  addCallArgs(x.arguments,call,b);
  if (targetBinding.isNestedType() && !targetBinding.isStatic()) {
    NestedTypeBinding nestedBinding=(NestedTypeBinding)erasure(targetBinding);
    if (nestedBinding.outerLocalVariables != null) {
      for (      SyntheticArgumentBinding arg : nestedBinding.outerLocalVariables) {
        JVariable variable=(JVariable)typeMap.get(arg.actualOuterLocalVariable);
        call.addArg(createVariableRef(info,variable,arg.actualOuterLocalVariable));
      }
    }
  }
  return call;
}
