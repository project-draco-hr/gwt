{
  String[] parts=ident.substring(1).split("::");
  assert(parts.length == 2);
  String className=parts[0];
  JReferenceType type=null;
  if (!className.equals("null")) {
    type=program.getFromTypeMap(className);
    if (type == null) {
      reportJsniError(info,methodDecl,"Unresolvable native reference to type '" + className + "'");
      return null;
    }
  }
  String rhs=parts[1];
  int parenPos=rhs.indexOf('(');
  if (parenPos < 0) {
    if (type == null) {
      if (rhs.equals("nullField")) {
        return program.getNullField();
      }
    }
 else {
      for (int i=0; i < type.fields.size(); ++i) {
        JField field=type.fields.get(i);
        if (field.getName().equals(rhs)) {
          return field;
        }
      }
    }
    reportJsniError(info,methodDecl,"Unresolvable native reference to field '" + rhs + "' in type '"+ className+ "'");
  }
 else {
    String almostMatches=null;
    String methodName=rhs.substring(0,parenPos);
    if (type == null) {
      if (rhs.equals("nullMethod()")) {
        return program.getNullMethod();
      }
    }
 else {
      for (int i=0; i < type.methods.size(); ++i) {
        JMethod method=type.methods.get(i);
        if (method.getName().equals(methodName)) {
          String jsniSig=JProgram.getJsniSig(method);
          if (jsniSig.equals(rhs)) {
            return method;
          }
 else           if (almostMatches == null) {
            almostMatches="'" + jsniSig + "'";
          }
 else {
            almostMatches+=", '" + jsniSig + "'";
          }
        }
      }
    }
    if (almostMatches == null) {
      reportJsniError(info,methodDecl,"Unresolvable native reference to method '" + methodName + "' in type '"+ className+ "'");
    }
 else {
      reportJsniError(info,methodDecl,"Unresolvable native reference to method '" + methodName + "' in type '"+ className+ "' (did you mean "+ almostMatches+ "?)");
    }
  }
  return null;
}
