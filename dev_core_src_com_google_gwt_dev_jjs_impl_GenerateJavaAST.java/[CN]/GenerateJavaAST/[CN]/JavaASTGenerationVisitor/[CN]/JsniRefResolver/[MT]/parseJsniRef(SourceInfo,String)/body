{
  JsniRef parsed=JsniRef.parse(ident);
  if (parsed == null) {
    reportJsniError(info,methodDecl,"Badly formatted native reference '" + ident + "'");
    return null;
  }
  String className=parsed.className();
  JReferenceType type=null;
  if (!className.equals("null")) {
    type=program.getFromTypeMap(className);
    if (type == null) {
      reportJsniError(info,methodDecl,"Unresolvable native reference to type '" + className + "'");
      return null;
    }
  }
  if (!parsed.isMethod()) {
    String fieldName=parsed.memberName();
    if (type == null) {
      if (fieldName.equals("nullField")) {
        return program.getNullField();
      }
    }
 else {
      for (int i=0; i < type.fields.size(); ++i) {
        JField field=type.fields.get(i);
        if (field.getName().equals(fieldName)) {
          return field;
        }
      }
    }
    reportJsniError(info,methodDecl,"Unresolvable native reference to field '" + fieldName + "' in type '"+ className+ "'");
    return null;
  }
 else {
    String almostMatches=null;
    String methodName=parsed.memberName();
    String jsniSig=methodName + "(" + parsed.paramTypesString()+ ")";
    if (type == null) {
      if (jsniSig.equals("nullMethod()")) {
        return program.getNullMethod();
      }
    }
 else {
      for (int i=0; i < type.methods.size(); ++i) {
        JMethod method=type.methods.get(i);
        if (method.getName().equals(methodName)) {
          String sig=JProgram.getJsniSig(method);
          if (sig.equals(jsniSig)) {
            return method;
          }
 else           if (almostMatches == null) {
            almostMatches="'" + sig + "'";
          }
 else {
            almostMatches+=", '" + sig + "'";
          }
        }
      }
    }
    if (almostMatches == null) {
      reportJsniError(info,methodDecl,"Unresolvable native reference to method '" + methodName + "' in type '"+ className+ "'");
      return null;
    }
 else {
      reportJsniError(info,methodDecl,"Unresolvable native reference to method '" + methodName + "' in type '"+ className+ "' (did you mean "+ almostMatches+ "?)");
      return null;
    }
  }
}
