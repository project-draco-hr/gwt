{
  JsniRef parsed=JsniRef.parse(ident);
  if (parsed == null) {
    reportJsniError(info,methodDecl,"Badly formatted native reference '" + ident + "'");
    return null;
  }
  String className=parsed.className();
  JType type=null;
  if (!className.equals("null")) {
    type=program.getTypeFromJsniRef(className);
    if (type == null) {
      reportJsniError(info,methodDecl,"Unresolvable native reference to type '" + className + "'");
      return null;
    }
  }
  if (!parsed.isMethod()) {
    String fieldName=parsed.memberName();
    if (type == null) {
      if (fieldName.equals("nullField")) {
        return program.getNullField();
      }
    }
 else     if (fieldName.equals("class")) {
      JClassLiteral lit=program.getLiteralClass(type);
      return lit.getField();
    }
 else     if (type instanceof JPrimitiveType) {
      reportJsniError(info,methodDecl,"May not refer to fields on primitive types");
      return null;
    }
 else     if (type instanceof JArrayType) {
      reportJsniError(info,methodDecl,"May not refer to fields on array types");
      return null;
    }
 else {
      for (int i=0; i < ((JReferenceType)type).fields.size(); ++i) {
        JField field=((JReferenceType)type).fields.get(i);
        if (field.getName().equals(fieldName)) {
          return field;
        }
      }
    }
    reportJsniError(info,methodDecl,"Unresolvable native reference to field '" + fieldName + "' in type '"+ className+ "'");
    return null;
  }
 else   if (type instanceof JPrimitiveType) {
    reportJsniError(info,methodDecl,"May not refer to methods on primitive types");
    return null;
  }
 else {
    TreeSet<String> almostMatches=new TreeSet<String>();
    String methodName=parsed.memberName();
    String jsniSig=parsed.memberSignature();
    if (type == null) {
      if (jsniSig.equals("nullMethod()")) {
        return program.getNullMethod();
      }
    }
 else {
      Queue<JReferenceType> workList=new LinkedList<JReferenceType>();
      workList.add((JReferenceType)type);
      while (!workList.isEmpty()) {
        JReferenceType cur=workList.poll();
        for (int i=0; i < cur.methods.size(); ++i) {
          JMethod method=cur.methods.get(i);
          if (method.getName().equals(methodName)) {
            String sig=JProgram.getJsniSig(method);
            if (sig.equals(jsniSig)) {
              return method;
            }
 else             if (sig.startsWith(jsniSig) && jsniSig.endsWith(")")) {
              return method;
            }
 else {
              almostMatches.add(sig);
            }
          }
        }
        if (cur.extnds != null) {
          workList.add(cur.extnds);
        }
        workList.addAll(cur.implments);
      }
    }
    if (almostMatches.isEmpty()) {
      reportJsniError(info,methodDecl,"Unresolvable native reference to method '" + methodName + "' in type '"+ className+ "'");
      return null;
    }
 else {
      StringBuilder suggestList=new StringBuilder();
      String comma="";
      for (      String almost : almostMatches) {
        suggestList.append(comma + "'" + almost+ "'");
        comma=", ";
      }
      reportJsniError(info,methodDecl,"Unresolvable native reference to method '" + methodName + "' in type '"+ className+ "' (did you mean "+ suggestList.toString()+ "?)");
      return null;
    }
  }
}
