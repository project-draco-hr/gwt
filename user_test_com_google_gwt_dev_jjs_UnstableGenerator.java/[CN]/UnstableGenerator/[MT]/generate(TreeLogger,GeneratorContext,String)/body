{
  try {
    ++counter;
    TypeOracle typeOracle=context.getTypeOracle();
    JClassType inputType=typeOracle.getType(typeName);
    JClassType intfType=typeOracle.getType(UnstableGeneratorTest.UnstableResult.class.getName().replace('$','.'));
    String packageName=inputType.getPackage().getName();
    String className=inputType.getName().replace('.','_') + "Impl" + counter;
    PrintWriter writer=context.tryCreate(logger,packageName,className);
    if (writer == null) {
      return null;
    }
    writer.println("package " + packageName + ";");
    writer.println("public class " + className + " implements "+ intfType.getQualifiedSourceName()+ " {");
    writer.println("  public String get() { return \"foo" + counter + "\"; }");
    writer.println("}");
    context.commit(logger,writer);
    return (packageName.length() == 0) ? className : (packageName + "." + className);
  }
 catch (  NotFoundException e) {
    logger.log(TreeLogger.ERROR,"Unable to find required client type",e);
    throw new UnableToCompleteException();
  }
}
