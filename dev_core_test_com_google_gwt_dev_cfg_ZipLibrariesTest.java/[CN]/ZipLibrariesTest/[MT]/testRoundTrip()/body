{
  File zipFile=File.createTempFile("Test",".gwtlib");
  zipFile.deleteOnExit();
  String expectedLibraryName="BazLib";
  final String expectedResourceContents="<html><head><title>Index</title></head><body>Hi</body></html>";
  Set<String> expectedRanGeneratorNames=Sets.newHashSet("UiBinderGenerator","PlatinumGenerator");
  Set<String> expectedUserAgentConfigurationValues=Sets.newHashSet("webkit");
  Set<String> expectedLocaleConfigurationValues=Sets.newHashSet("en,default,en_US","fr");
  Set<String> expectedDependencyLibraryNames=Sets.newHashSet("FooLib","BarLib");
  oracle.add(BAR,SUPER_FOO,JdtCompilerTest.OUTER_INNER);
  rebuildCompilationState();
  List<CompilationUnit> compilationUnits=Lists.newArrayList(state.getCompilationUnitMap().values());
  ZipLibraryWriter zipLibraryWriter=new ZipLibraryWriter(zipFile.getPath());
  zipLibraryWriter.setLibraryName(expectedLibraryName);
  zipLibraryWriter.addPublicResource(new SimpleMockResource("ui:binder:com.foo.baz.TableView"));
  zipLibraryWriter.addPublicResource(new MockResource("index.html"){
    @Override public CharSequence getContent(){
      return expectedResourceContents;
    }
  }
);
  zipLibraryWriter.addNewConfigurationPropertyValuesByName("user.agent",expectedUserAgentConfigurationValues);
  zipLibraryWriter.addNewConfigurationPropertyValuesByName("locale",expectedLocaleConfigurationValues);
  for (  String generatorName : expectedRanGeneratorNames) {
    zipLibraryWriter.addRanGeneratorName(generatorName);
  }
  zipLibraryWriter.addDependencyLibraryNames(expectedDependencyLibraryNames);
  for (  CompilationUnit compilationUnit : compilationUnits) {
    zipLibraryWriter.addCompilationUnit(compilationUnit);
  }
  zipLibraryWriter.write();
  ZipLibrary zipLibrary=new ZipLibrary(zipFile.getPath());
  CompilationUnit barCompilationUnit=zipLibrary.getCompilationUnitByTypeSourceName(BAR.getTypeName());
  CompilationUnit superFooCompilationUnit=zipLibrary.getCompilationUnitByTypeSourceName(SUPER_FOO.getTypeName());
  assertEquals(expectedLibraryName,zipLibrary.getLibraryName());
  assertEquals(expectedResourceContents,Util.readStreamAsString(zipLibrary.getPublicResourceByPath("index.html").openContents()));
  assertEquals(expectedRanGeneratorNames,zipLibrary.getRanGeneratorNames());
  assertEquals(expectedUserAgentConfigurationValues,zipLibrary.getNewConfigurationPropertyValuesByName().get("user.agent"));
  assertEquals(expectedLocaleConfigurationValues,zipLibrary.getNewConfigurationPropertyValuesByName().get("locale"));
  assertEquals(expectedDependencyLibraryNames,zipLibrary.getDependencyLibraryNames());
  List<JDeclaredType> barTypes=barCompilationUnit.getTypes();
  assertEquals(1,barTypes.size());
  assertEquals(BAR.getTypeName(),barTypes.get(0).getName());
  assertEquals(BAR.getLocation(),barCompilationUnit.getResourceLocation());
  assertEquals(BAR.getTypeName(),barCompilationUnit.getTypeName());
  List<JDeclaredType> superFoo=superFooCompilationUnit.getTypes();
  assertEquals(1,superFoo.size());
  assertEquals(SUPER_FOO.getTypeName(),superFoo.get(0).getName());
  assertEquals(SUPER_FOO.getLocation(),superFooCompilationUnit.getResourceLocation());
  assertEquals(SUPER_FOO.getTypeName(),superFooCompilationUnit.getTypeName());
  assertTrue(zipLibrary.getNestedSourceNamesByCompilationUnitName().get(JdtCompilerTest.OUTER_INNER.getTypeName()).contains(JdtCompilerTest.OUTER_INNER.getTypeName() + ".Inner"));
  assertTrue(zipLibrary.getNestedBinaryNamesByCompilationUnitName().get(JdtCompilerTest.OUTER_INNER.getTypeName()).contains(JdtCompilerTest.OUTER_INNER.getTypeName() + "$Inner"));
}
