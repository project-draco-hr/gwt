{
  int resLengthInChars;
  int currentChar;
  char result[];
  boolean negNumber=value < 0;
  if (negNumber) {
    value=-value;
  }
  if (value == 0) {
switch (scale) {
case 0:
      return "0";
case 1:
    return "0.0";
case 2:
  return "0.00";
case 3:
return "0.000";
case 4:
return "0.0000";
case 5:
return "0.00000";
case 6:
return "0.000000";
default :
StringBuilder result1=new StringBuilder();
if (scale < 0) {
result1.append("0E+");
}
 else {
result1.append("0E");
}
result1.append((scale == Integer.MIN_VALUE) ? "2147483648" : Integer.toString(-scale));
return result1.toString();
}
}
resLengthInChars=18;
result=new char[resLengthInChars + 1];
currentChar=resLengthInChars;
long v=value;
do {
long prev=v;
v/=10;
result[--currentChar]=(char)(0x0030 + (prev - v * 10));
}
 while (v != 0);
long exponent=(long)resLengthInChars - (long)currentChar - scale- 1L;
if (scale == 0) {
if (negNumber) {
result[--currentChar]='-';
}
return new String(result,currentChar,resLengthInChars - currentChar);
}
if (scale > 0 && exponent >= -6) {
if (exponent >= 0) {
int insertPoint=currentChar + (int)exponent;
for (int j=resLengthInChars - 1; j >= insertPoint; j--) {
result[j + 1]=result[j];
}
result[++insertPoint]='.';
if (negNumber) {
result[--currentChar]='-';
}
return new String(result,currentChar,resLengthInChars - currentChar + 1);
}
for (int j=2; j < -exponent + 1; j++) {
result[--currentChar]='0';
}
result[--currentChar]='.';
result[--currentChar]='0';
if (negNumber) {
result[--currentChar]='-';
}
return new String(result,currentChar,resLengthInChars - currentChar);
}
int startPoint=currentChar + 1;
int endPoint=resLengthInChars;
StringBuilder result1=new StringBuilder(16 + endPoint - startPoint);
if (negNumber) {
result1.append('-');
}
if (endPoint - startPoint >= 1) {
result1.append(result[currentChar]);
result1.append('.');
result1.append(result,currentChar + 1,resLengthInChars - currentChar - 1);
}
 else {
result1.append(result,currentChar,resLengthInChars - currentChar);
}
result1.append('E');
if (exponent > 0) {
result1.append('+');
}
result1.append(Long.toString(exponent));
return result1.toString();
}
