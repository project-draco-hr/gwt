{
  writer.getDesignTime().handleUIObject(writer,elem,fieldName);
  final Map<String,String> setterValues=new HashMap<String,String>();
  final Map<String,String> localizedValues=fetchLocalizedAttributeValues(elem,writer);
  final Map<String,String[]> adderValues=new HashMap<>();
  final Map<String,String> requiredValues=new HashMap<String,String>();
  final Map<String,JType> unfilledRequiredParams=new HashMap<String,JType>();
  final OwnerFieldClass ownerFieldClass=OwnerFieldClass.getFieldClass(type,writer.getLogger(),context);
  JAbstractMethod creator=null;
  OwnerField uiField=writer.getOwnerClass().getUiField(fieldName);
  if ((uiField == null) || (!uiField.isProvided())) {
    creator=writer.getOwnerClass().getUiFactoryMethod(type);
    if (creator == null) {
      creator=ownerFieldClass.getUiConstructor();
    }
    if (creator != null) {
      for (      JParameter param : creator.getParameters()) {
        unfilledRequiredParams.put(param.getName(),param.getType());
      }
    }
  }
  for (  Entry<String,String> property : localizedValues.entrySet()) {
    String key=property.getKey();
    String value=property.getValue();
    JType paramType=unfilledRequiredParams.get(key);
    if (paramType != null) {
      if (!isString(writer,paramType)) {
        writer.die(elem,"In %s, cannot apply message attribute to non-string " + "constructor argument %s.",paramType.getSimpleSourceName(),key);
      }
      requiredValues.put(key,value);
      unfilledRequiredParams.remove(key);
    }
 else {
      JMethod setter=ownerFieldClass.getSetter(key);
      JParameter[] params=setter == null ? null : setter.getParameters();
      if (setter == null || !(params.length == 1) || !isString(writer,params[0].getType())) {
        writer.die(elem,"No method found to apply message attribute %s",key);
      }
 else {
        setterValues.put(key,value);
      }
    }
  }
  for (int i=elem.getAttributeCount() - 1; i >= 0; i--) {
    XMLAttribute attribute=elem.getAttribute(i);
    if (attribute.getName().startsWith("xmlns:")) {
      continue;
    }
    String propertyName=attribute.getLocalName();
    if (setterValues.keySet().contains(propertyName) || requiredValues.containsKey(propertyName)) {
      writer.die(elem,"Duplicate attribute name: %s",propertyName);
    }
    if (unfilledRequiredParams.keySet().contains(propertyName)) {
      JType paramType=unfilledRequiredParams.get(propertyName);
      String value=elem.consumeAttributeWithDefault(attribute.getName(),null,paramType);
      if (value == null) {
        writer.die(elem,"Unable to parse %s as constructor argument " + "of type %s",attribute,paramType.getSimpleSourceName());
      }
      requiredValues.put(propertyName,value);
      unfilledRequiredParams.remove(propertyName);
    }
 else {
      JMethod setter=ownerFieldClass.getSetter(propertyName);
      if (setter != null) {
        String n=attribute.getName();
        String value=elem.consumeAttributeWithDefault(n,null,getParamTypes(setter));
        if (value == null) {
          writer.die(elem,"Unable to parse %s.",attribute);
        }
        setterValues.put(propertyName,value);
      }
 else       if (ADD_PROPERTY_TO_SETTER_MAP.containsKey(propertyName)) {
        String addMethod=ADD_PROPERTY_TO_SETTER_MAP.get(propertyName);
        JType stringType=writer.getOracle().findType(String.class.getName());
        if (ownerFieldClass.getRawType().findMethod(addMethod,new JType[]{stringType}) != null) {
          String n=attribute.getName();
          String[] value=elem.consumeStringArrayAttribute(n);
          if (value == null) {
            writer.die(elem,"Unable to parse %s.",attribute);
          }
          adderValues.put(addMethod,value);
        }
 else {
          writer.die(elem,"Class %s has no appropriate %s() method",elem.getLocalName(),addMethod);
        }
      }
 else {
        writer.die(elem,"Class %s has no appropriate set%s() method",elem.getLocalName(),initialCap(propertyName));
      }
    }
  }
  if (!unfilledRequiredParams.isEmpty()) {
    StringBuilder b=new StringBuilder(String.format("%s missing required attribute(s):",elem));
    for (    String name : unfilledRequiredParams.keySet()) {
      b.append(" ").append(name);
    }
    writer.die(elem,b.toString());
  }
  if (creator != null) {
    String[] args=makeArgsList(requiredValues,creator);
    if (creator instanceof JMethod) {
      JMethod factoryMethod=(JMethod)creator;
      String initializer;
      if (writer.getDesignTime().isDesignTime()) {
        String typeName=factoryMethod.getReturnType().getQualifiedSourceName();
        initializer=writer.getDesignTime().getProvidedFactory(typeName,factoryMethod.getName(),UiBinderWriter.asCommaSeparatedList(args));
      }
 else {
        initializer=String.format("owner.%s(%s)",factoryMethod.getName(),UiBinderWriter.asCommaSeparatedList(args));
      }
      writer.setFieldInitializer(fieldName,initializer);
    }
 else {
      writer.setFieldInitializerAsConstructor(fieldName,args);
    }
  }
  for (  Map.Entry<String,String> entry : setterValues.entrySet()) {
    String propertyName=entry.getKey();
    String value=entry.getValue();
    writer.addStatement("%s.set%s(%s);",fieldName,initialCap(propertyName),value);
  }
  for (  Map.Entry<String,String[]> entry : adderValues.entrySet()) {
    String addMethodName=entry.getKey();
    for (    String s : entry.getValue()) {
      writer.addStatement("%s.%s(%s);",fieldName,addMethodName,s);
    }
  }
}
