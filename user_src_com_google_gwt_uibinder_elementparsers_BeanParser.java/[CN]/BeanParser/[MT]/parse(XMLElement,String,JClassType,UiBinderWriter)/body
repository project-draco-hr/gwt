{
  final Map<String,String> setterValues=new HashMap<String,String>();
  final Map<String,String> localizedValues=fetchLocalizedAttributeValues(elem,writer);
  final Map<String,String> requiredValues=new HashMap<String,String>();
  final Map<String,JType> unfilledRequiredParams=new HashMap<String,JType>();
  final OwnerFieldClass ownerFieldClass=OwnerFieldClass.getFieldClass(type,writer.getLogger());
  JAbstractMethod creator=writer.getOwnerClass().getUiFactoryMethod(type);
  if (creator == null) {
    creator=ownerFieldClass.getUiConstructor();
  }
  if (creator != null) {
    for (    JParameter param : creator.getParameters()) {
      unfilledRequiredParams.put(param.getName(),param.getType());
    }
  }
  for (  Entry<String,String> property : localizedValues.entrySet()) {
    String key=property.getKey();
    String value=property.getValue();
    JType paramType=unfilledRequiredParams.get(key);
    if (paramType != null) {
      if (!isString(writer,paramType)) {
        writer.die(elem,"In %s, cannot apply message attribute to non-string " + "constructor argument %s.",paramType.getSimpleSourceName(),key);
      }
      requiredValues.put(key,value);
      unfilledRequiredParams.remove(key);
    }
 else {
      JMethod setter=ownerFieldClass.getSetter(key);
      JParameter[] params=setter == null ? null : setter.getParameters();
      if (setter == null || !(params.length == 1) || !isString(writer,params[0].getType())) {
        writer.die(elem,"No method found to apply message attribute %s",key);
      }
 else {
        setterValues.put(key,value);
      }
    }
  }
  for (int i=elem.getAttributeCount() - 1; i >= 0; i--) {
    XMLAttribute attribute=elem.getAttribute(i);
    if (attribute.getName().startsWith("xmlns:")) {
      continue;
    }
    String propertyName=attribute.getLocalName();
    if (setterValues.keySet().contains(propertyName) || requiredValues.containsKey(propertyName)) {
      writer.die(elem,"Duplicate attribute name: %s",propertyName);
    }
    if (unfilledRequiredParams.keySet().contains(propertyName)) {
      JType paramType=unfilledRequiredParams.get(propertyName);
      String value=elem.consumeAttributeWithDefault(attribute.getName(),null,paramType);
      if (value == null) {
        writer.die(elem,"Unable to parse %s as constructor argument " + "of type %s",attribute,paramType.getSimpleSourceName());
      }
      requiredValues.put(propertyName,value);
      unfilledRequiredParams.remove(propertyName);
    }
 else {
      JMethod setter=ownerFieldClass.getSetter(propertyName);
      if (setter == null) {
        writer.die(elem,"Class %s has no appropriate set%s() method",elem.getLocalName(),initialCap(propertyName));
      }
      String n=attribute.getName();
      String value=elem.consumeAttributeWithDefault(n,null,getParamTypes(setter));
      if (value == null) {
        writer.die(elem,"Unable to parse %s.",attribute);
      }
      setterValues.put(propertyName,value);
    }
  }
  if (!unfilledRequiredParams.isEmpty()) {
    StringBuilder b=new StringBuilder(String.format("%s missing required attribute(s):",elem));
    for (    String name : unfilledRequiredParams.keySet()) {
      b.append(" ").append(name);
    }
    writer.die(elem,b.toString());
  }
  if (creator != null) {
    String[] args=makeArgsList(requiredValues,creator);
    if (creator instanceof JMethod) {
      String factoryMethod=String.format("owner.%s(%s)",creator.getName(),UiBinderWriter.asCommaSeparatedList(args));
      writer.setFieldInitializer(fieldName,factoryMethod);
    }
 else {
      writer.setFieldInitializerAsConstructor(fieldName,type,args);
    }
  }
  for (  String propertyName : setterValues.keySet()) {
    writer.addStatement("%s.set%s(%s);",fieldName,initialCap(propertyName),setterValues.get(propertyName));
  }
}
