{
  int resLength;
  int resDigits[];
  int limit;
  int digit;
  int iNeg=negative.getFirstNonzeroDigit();
  int iPos=positive.getFirstNonzeroDigit();
  if (iNeg >= positive.numberLength) {
    return negative;
  }
  resLength=Math.max(negative.numberLength,positive.numberLength);
  int i=iNeg;
  if (iPos > iNeg) {
    resDigits=new int[resLength];
    limit=Math.min(negative.numberLength,iPos);
    for (; i < limit; i++) {
      resDigits[i]=negative.digits[i];
    }
    if (i == negative.numberLength) {
      for (i=iPos; i < positive.numberLength; i++) {
        resDigits[i]=positive.digits[i];
      }
    }
  }
 else {
    digit=-negative.digits[i] & ~positive.digits[i];
    if (digit == 0) {
      limit=Math.min(positive.numberLength,negative.numberLength);
      for (i++; i < limit && (digit=~(negative.digits[i] | positive.digits[i])) == 0; i++) {
      }
      if (digit == 0) {
        for (; i < positive.numberLength && (digit=~positive.digits[i]) == 0; i++) {
        }
        for (; i < negative.numberLength && (digit=~negative.digits[i]) == 0; i++) {
        }
        if (digit == 0) {
          resLength++;
          resDigits=new int[resLength];
          resDigits[resLength - 1]=1;
          BigInteger result=new BigInteger(-1,resLength,resDigits);
          return result;
        }
      }
    }
    resDigits=new int[resLength];
    resDigits[i]=-digit;
    i++;
  }
  limit=Math.min(positive.numberLength,negative.numberLength);
  for (; i < limit; i++) {
    resDigits[i]=negative.digits[i] | positive.digits[i];
  }
  for (; i < negative.numberLength; i++) {
    resDigits[i]=negative.digits[i];
  }
  for (; i < positive.numberLength; i++) {
    resDigits[i]=positive.digits[i];
  }
  BigInteger result=new BigInteger(-1,resLength,resDigits);
  return result;
}
