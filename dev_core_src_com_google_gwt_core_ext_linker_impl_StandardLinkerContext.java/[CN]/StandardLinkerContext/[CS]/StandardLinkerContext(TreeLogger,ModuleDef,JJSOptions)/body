{
  logger=logger.branch(TreeLogger.DEBUG,"Constructing StandardLinkerContext",null);
  this.jjsOptions=jjsOptions;
  this.moduleFunctionName=module.getFunctionName();
  this.moduleName=module.getName();
  this.moduleLastModified=module.lastModified();
  List<Class<? extends Linker>> sortedLinkers=new ArrayList<Class<? extends Linker>>();
  for (  Class<? extends Linker> linkerClass : module.getActiveLinkers()) {
    Order order=linkerClass.getAnnotation(LinkerOrder.class).value();
    assert(order != null);
    if (order == Order.PRE) {
      sortedLinkers.add(linkerClass);
    }
  }
  Class<? extends Linker> primary=module.getActivePrimaryLinker();
  if (primary == null) {
    logger.log(logger.ERROR,"Primary linker is null.  Does your module " + "inherit from com.google.gwt.core.Core or com.google.gwt.user.User?");
  }
 else {
    sortedLinkers.add(module.getActivePrimaryLinker());
  }
{
    List<Class<? extends Linker>> postLinkerClasses=new ArrayList<Class<? extends Linker>>();
    for (    Class<? extends Linker> linkerClass : module.getActiveLinkers()) {
      Order order=linkerClass.getAnnotation(LinkerOrder.class).value();
      assert(order != null);
      if (order == Order.POST) {
        postLinkerClasses.add(linkerClass);
      }
    }
    Collections.reverse(postLinkerClasses);
    sortedLinkers.addAll(postLinkerClasses);
  }
  linkers=new Linker[sortedLinkers.size()];
  int i=0;
  for (  Class<? extends Linker> linkerClass : sortedLinkers) {
    try {
      linkers[i++]=linkerClass.newInstance();
    }
 catch (    InstantiationException e) {
      logger.log(TreeLogger.ERROR,"Unable to create Linker",e);
      throw new UnableToCompleteException();
    }
catch (    IllegalAccessException e) {
      logger.log(TreeLogger.ERROR,"Unable to create Linker",e);
      throw new UnableToCompleteException();
    }
  }
  for (  Map.Entry<String,Class<? extends Linker>> entry : module.getLinkers().entrySet()) {
    linkerShortNames.put(entry.getValue(),entry.getKey());
  }
  linkerShortNames.put(this.getClass(),"");
{
    SortedSet<ConfigurationProperty> mutableConfigurationProperties=new TreeSet<ConfigurationProperty>(CONFIGURATION_PROPERTY_COMPARATOR);
    SortedSet<SelectionProperty> mutableSelectionProperties=new TreeSet<SelectionProperty>(SELECTION_PROPERTY_COMPARATOR);
    for (    Property p : module.getProperties()) {
      if (p instanceof com.google.gwt.dev.cfg.ConfigurationProperty) {
        StandardConfigurationProperty newProp=new StandardConfigurationProperty((com.google.gwt.dev.cfg.ConfigurationProperty)p);
        mutableConfigurationProperties.add(newProp);
        logger.log(TreeLogger.SPAM,"Added configuration property " + newProp,null);
      }
 else       if (p instanceof BindingProperty) {
        StandardSelectionProperty newProp=new StandardSelectionProperty((BindingProperty)p);
        mutableSelectionProperties.add(newProp);
        propertiesByName.put(newProp.getName(),newProp);
        logger.log(TreeLogger.SPAM,"Added selection property " + newProp,null);
      }
 else {
        logger.log(TreeLogger.ERROR,"Unknown property type " + p.getClass().getName());
      }
    }
    selectionProperties=Collections.unmodifiableSortedSet(mutableSelectionProperties);
    configurationProperties=Collections.unmodifiableSortedSet(mutableConfigurationProperties);
  }
  for (  String path : module.getAllPublicFiles()) {
    String partialPath=path.replace(File.separatorChar,'/');
    PublicResource resource=new StandardPublicResource(partialPath,module.findPublicFile(path));
    artifacts.add(resource);
    logger.log(TreeLogger.SPAM,"Added public resource " + resource,null);
  }
  recordStaticReferences(logger,module);
}
