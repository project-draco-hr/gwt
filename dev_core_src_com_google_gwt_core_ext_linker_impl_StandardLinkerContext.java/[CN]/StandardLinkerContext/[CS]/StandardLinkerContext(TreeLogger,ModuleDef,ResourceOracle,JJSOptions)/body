{
  logger=logger.branch(TreeLogger.DEBUG,"Constructing StandardLinkerContext",null);
  this.moduleFunctionName=module.getFunctionName();
  this.moduleName=module.getName();
  this.moduleLastModified=module.lastModified();
  this.publicResourceOracle=publicResourceOracle;
  this.jjsOptions=jjsOptions;
  linkerClasses=new ArrayList<Class<? extends Linker>>();
  for (  Class<? extends Linker> linkerClass : module.getActiveLinkers()) {
    Order order=linkerClass.getAnnotation(LinkerOrder.class).value();
    assert(order != null);
    if (order == Order.PRE) {
      linkerClasses.add(linkerClass);
    }
  }
  Class<? extends Linker> primary=module.getActivePrimaryLinker();
  if (primary == null) {
    logger.log(TreeLogger.ERROR,"Primary linker is null.  Does your module " + "inherit from com.google.gwt.core.Core or com.google.gwt.user.User?");
  }
 else {
    linkerClasses.add(module.getActivePrimaryLinker());
  }
{
    List<Class<? extends Linker>> postLinkerClasses=new ArrayList<Class<? extends Linker>>();
    for (    Class<? extends Linker> linkerClass : module.getActiveLinkers()) {
      Order order=linkerClass.getAnnotation(LinkerOrder.class).value();
      assert(order != null);
      if (order == Order.POST) {
        postLinkerClasses.add(linkerClass);
      }
    }
    Collections.reverse(postLinkerClasses);
    linkerClasses.addAll(postLinkerClasses);
  }
  resetLinkers(logger);
  for (  Map.Entry<String,Class<? extends Linker>> entry : module.getLinkers().entrySet()) {
    linkerShortNames.put(entry.getValue(),entry.getKey());
  }
  linkerShortNames.put(this.getClass(),"");
{
    SortedSet<ConfigurationProperty> mutableConfigurationProperties=new TreeSet<ConfigurationProperty>(CONFIGURATION_PROPERTY_COMPARATOR);
    SortedSet<SelectionProperty> mutableSelectionProperties=new TreeSet<SelectionProperty>(SELECTION_PROPERTY_COMPARATOR);
    for (    Property p : module.getProperties()) {
      if (p instanceof com.google.gwt.dev.cfg.ConfigurationProperty) {
        StandardConfigurationProperty newProp=new StandardConfigurationProperty((com.google.gwt.dev.cfg.ConfigurationProperty)p);
        mutableConfigurationProperties.add(newProp);
        if (logger.isLoggable(TreeLogger.SPAM)) {
          logger.log(TreeLogger.SPAM,"Added configuration property " + newProp,null);
        }
      }
 else       if (p instanceof BindingProperty) {
        StandardSelectionProperty newProp=new StandardSelectionProperty((BindingProperty)p);
        mutableSelectionProperties.add(newProp);
        propertiesByName.put(newProp.getName(),newProp);
        if (logger.isLoggable(TreeLogger.SPAM)) {
          logger.log(TreeLogger.SPAM,"Added selection property " + newProp,null);
        }
      }
 else {
        logger.log(TreeLogger.ERROR,"Unknown property type " + p.getClass().getName());
      }
    }
    selectionProperties=Collections.unmodifiableSortedSet(mutableSelectionProperties);
    configurationProperties=Collections.unmodifiableSortedSet(mutableConfigurationProperties);
  }
}
