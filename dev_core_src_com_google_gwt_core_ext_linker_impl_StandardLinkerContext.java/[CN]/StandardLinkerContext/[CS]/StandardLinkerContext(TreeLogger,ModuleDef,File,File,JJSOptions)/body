{
  logger=logger.branch(TreeLogger.DEBUG,"Constructing StandardLinkerContext",null);
  this.jjsOptions=jjsOptions;
  this.moduleFunctionName=module.getFunctionName();
  this.moduleName=module.getName();
  this.moduleOutDir=moduleOutDir;
  this.linkerClasses=new ArrayList<Class<? extends Linker>>(module.getActiveLinkers());
  linkerClasses.add(module.getActivePrimaryLinker());
  if (moduleOutDir != null) {
    compilationsDir=new File(moduleOutDir.getParentFile(),GWTCompiler.GWT_COMPILER_DIR + File.separator + moduleName+ File.separator+ "compilations");
    Util.recursiveDelete(compilationsDir,true);
    compilationsDir.mkdirs();
    logger.log(TreeLogger.SPAM,"compilationsDir: " + compilationsDir.getPath(),null);
  }
 else {
    compilationsDir=null;
  }
  SortedSet<SelectionProperty> mutableProperties=new TreeSet<SelectionProperty>(SELECTION_PROPERTY_COMPARATOR);
  for (  Property p : module.getProperties()) {
    StandardSelectionProperty newProp=new StandardSelectionProperty(p);
    mutableProperties.add(newProp);
    propertiesByName.put(newProp.getName(),newProp);
    logger.log(TreeLogger.SPAM,"Added property " + newProp,null);
  }
  properties=Collections.unmodifiableSortedSet(mutableProperties);
  for (  Script script : module.getScripts()) {
    artifacts.add(new StandardScriptReference(script.getSrc(),module.findPublicFile(script.getSrc())));
    logger.log(TreeLogger.SPAM,"Added script " + script.getSrc(),null);
  }
  for (  String style : module.getStyles()) {
    artifacts.add(new StandardStylesheetReference(style,module.findPublicFile(style)));
    logger.log(TreeLogger.SPAM,"Added style " + style,null);
  }
  if (generatorDir != null) {
    for (    String path : Util.recursiveListPartialPaths(generatorDir,false)) {
      String partialPath=path.replace(File.separatorChar,'/');
      try {
        GeneratedResource resource=new StandardGeneratedResource(partialPath,(new File(generatorDir,path)).toURL());
        artifacts.add(resource);
        logger.log(TreeLogger.SPAM,"Added generated resource " + resource,null);
      }
 catch (      MalformedURLException e) {
        logger.log(TreeLogger.ERROR,"Unable to convert generated resource to URL",e);
      }
    }
  }
  for (  String path : module.getAllPublicFiles()) {
    String partialPath=path.replace(File.separatorChar,'/');
    PublicResource resource=new StandardPublicResource(partialPath,module.findPublicFile(path));
    artifacts.add(resource);
    logger.log(TreeLogger.SPAM,"Added public resource " + resource,null);
  }
}
