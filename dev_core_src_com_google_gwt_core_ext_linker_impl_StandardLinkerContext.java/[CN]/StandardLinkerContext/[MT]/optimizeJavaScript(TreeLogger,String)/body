{
  logger=logger.branch(TreeLogger.DEBUG,"Attempting to optimize JS",null);
  Reader r=new StringReader(program);
  JsProgram jsProgram=new JsProgram();
  JsScope topScope=jsProgram.getScope();
  topScope.declareUnobfuscatableName(getModuleFunctionName());
  try {
    SourceInfo sourceInfo=jsProgram.createSourceInfo(1,"StandardLinkerContext.optimizeJavaScript");
    JsParser.parseInto(sourceInfo,topScope,jsProgram.getGlobalBlock(),r);
  }
 catch (  IOException e) {
    throw new RuntimeException("Unexpected error reading in-memory stream",e);
  }
catch (  JsParserException e) {
    logger.log(TreeLogger.ERROR,"Unable to parse JavaScript",e);
    throw new UnableToCompleteException();
  }
  JsSymbolResolver.exec(jsProgram);
  JsUnusedFunctionRemover.exec(jsProgram);
  try {
switch (outputOption) {
case OBFUSCATED:
      TopFunctionStringInterner.exec(jsProgram);
    JsObfuscateNamer.exec(jsProgram,null);
  break;
case PRETTY:
JsPrettyNamer.exec(jsProgram,null);
break;
case DETAILED:
TopFunctionStringInterner.exec(jsProgram);
JsVerboseNamer.exec(jsProgram,null);
break;
default :
throw new InternalCompilerException("Unknown output mode");
}
}
 catch (IllegalNameException e) {
logger.log(TreeLogger.ERROR,e.getMessage(),e);
throw new UnableToCompleteException();
}
DefaultTextOutput out=new DefaultTextOutput(outputOption.shouldMinimize());
JsSourceGenerationVisitor v=new JsSourceGenerationVisitor(out);
v.accept(jsProgram);
return out.toString();
}
