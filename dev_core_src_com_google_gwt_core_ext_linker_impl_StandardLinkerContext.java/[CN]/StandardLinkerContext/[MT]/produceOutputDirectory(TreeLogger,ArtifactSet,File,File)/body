{
  outputPath=outputPath.getAbsoluteFile();
  if (extraPath != null) {
    extraPath=extraPath.getAbsoluteFile();
  }
  logger=logger.branch(TreeLogger.TRACE,"Linking compilation into " + outputPath.getPath(),null);
  Set<String> createdDirs=new HashSet<String>();
  for (  EmittedArtifact artifact : artifacts.find(EmittedArtifact.class)) {
    TreeLogger artifactLogger=logger.branch(TreeLogger.DEBUG,"Emitting resource " + artifact.getPartialPath(),null);
    File outFile;
    if (artifact.isPrivate()) {
      if (extraPath == null) {
        continue;
      }
      outFile=new File(getExtraPathForLinker(extraPath,artifact.getLinker()),artifact.getPartialPath());
    }
 else {
      outFile=new File(outputPath,artifact.getPartialPath());
    }
    if (!outFile.exists() || (outFile.lastModified() <= artifact.getLastModified())) {
      mkdirs(outFile.getParentFile(),createdDirs);
      try {
        FileOutputStream out=new FileOutputStream(outFile);
        artifact.writeTo(artifactLogger,out);
        out.close();
      }
 catch (      IOException e) {
        artifactLogger.log(TreeLogger.ERROR,"Unable to create file '" + outFile.getAbsolutePath() + "'",e);
        throw new UnableToCompleteException();
      }
      outFile.setLastModified(artifact.getLastModified());
    }
  }
}
