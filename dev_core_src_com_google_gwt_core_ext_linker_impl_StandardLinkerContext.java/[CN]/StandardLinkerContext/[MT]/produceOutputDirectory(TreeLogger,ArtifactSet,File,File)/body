{
  logger=logger.branch(TreeLogger.TRACE,"Linking compilation into " + outputPath.getPath(),null);
  for (  EmittedArtifact artifact : artifacts.find(EmittedArtifact.class)) {
    TreeLogger artifactLogger=logger.branch(TreeLogger.DEBUG,"Emitting resource " + artifact.getPartialPath(),null);
    File outFile;
    if (artifact.isPrivate()) {
      if (extraPath == null) {
        continue;
      }
      outFile=new File(getExtraPathForLinker(extraPath,artifact.getLinker()),artifact.getPartialPath());
    }
 else {
      outFile=new File(outputPath,artifact.getPartialPath());
    }
    if (!outFile.exists() || (outFile.lastModified() <= artifact.getLastModified())) {
      Util.copy(artifactLogger,artifact.getContents(artifactLogger),outFile);
      outFile.setLastModified(artifact.getLastModified());
    }
  }
  for (  StandardCompilationAnalysis soycFiles : artifacts.find(StandardCompilationAnalysis.class)) {
    TreeLogger artifactLogger=logger.branch(TreeLogger.DEBUG,"Emitting soyc resources.",null);
    File depFile=new File(extraPath + "/soycReport",soycFiles.getDepFile().getName());
    Util.copy(artifactLogger,soycFiles.getDepFile(),depFile);
    File storiesFile=new File(extraPath + "/soycReport",soycFiles.getStoriesFile().getName());
    Util.copy(artifactLogger,soycFiles.getStoriesFile(),storiesFile);
    File splitPointsFile=new File(extraPath + "/soycReport",soycFiles.getSplitPointsFile().getName());
    Util.copy(artifactLogger,soycFiles.getSplitPointsFile(),splitPointsFile);
  }
}
