{
  logger=logger.branch(TreeLogger.TRACE,"Adding image '" + imageName + "'",null);
  BufferedImage image=null;
  boolean lossy=true;
  try {
    MemoryCacheImageInputStream input=new MemoryCacheImageInputStream(imageUrl.openStream());
    Iterator<ImageReader> it=ImageIO.getImageReaders(input);
    readers:     while (it.hasNext()) {
      ImageReader reader=it.next();
      reader.setInput(input);
      int numImages=reader.getNumImages(true);
      if (numImages == 0) {
      }
 else       if (numImages == 1) {
        try {
          image=reader.read(0);
          IIOMetadata metadata=reader.getImageMetadata(0);
          if (metadata != null && metadata.isStandardMetadataFormatSupported()) {
            Node data=metadata.getAsTree(IIOMetadataFormatImpl.standardMetadataFormatName);
            metadata:             for (int i=0, j=data.getChildNodes().getLength(); i < j; i++) {
              Node child=data.getChildNodes().item(i);
              if (child.getLocalName().equalsIgnoreCase("compression")) {
                for (int k=0, l=child.getChildNodes().getLength(); k < l; k++) {
                  Node child2=child.getChildNodes().item(k);
                  if (child2.getLocalName().equalsIgnoreCase("lossless")) {
                    Node value=child2.getAttributes().getNamedItem("value");
                    if (value == null) {
                      lossy=false;
                    }
 else {
                      lossy=!Boolean.parseBoolean(value.getNodeValue());
                    }
                    break metadata;
                  }
                }
              }
            }
          }
        }
 catch (        Exception e) {
          continue readers;
        }
      }
 else {
        BufferedImage[] images=new BufferedImage[numImages];
        try {
          for (int i=0; i < numImages; i++) {
            images[i]=reader.read(i);
          }
        }
 catch (        Exception e) {
          continue readers;
        }
        ImageRect rect=new ImageRect(imageName,images);
        throw new UnsuitableForStripException(rect);
      }
    }
  }
 catch (  IllegalArgumentException iex) {
    if (StringCase.toLower(imageName).endsWith("png") && iex.getMessage() != null && iex.getStackTrace()[0].getClassName().equals("javax.imageio.ImageTypeSpecifier$Indexed")) {
      logger.log(TreeLogger.ERROR,"Unable to read image. The image may not be in valid PNG format. " + "This problem may also be due to a bug in versions of the " + "JRE prior to 1.6. See "+ "http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5098176 "+ "for more information. If this bug is the cause of the "+ "error, try resaving the image using a different image "+ "program, or upgrade to a newer JRE.",null);
      throw new UnableToCompleteException();
    }
 else {
      throw iex;
    }
  }
catch (  IOException e) {
    logger.log(TreeLogger.ERROR,"Unable to read image resource",e);
    throw new UnableToCompleteException();
  }
  if (image == null) {
    logger.log(TreeLogger.ERROR,"Unrecognized image file format",null);
    throw new UnableToCompleteException();
  }
  ImageRect toReturn=new ImageRect(imageName,image);
  toReturn.setLossy(lossy);
  if (lossy || toReturn.getHeight() > IMAGE_MAX_SIZE || toReturn.getWidth() > IMAGE_MAX_SIZE) {
    throw new UnsuitableForStripException(toReturn);
  }
  return toReturn;
}
