{
  assertEquals(0,BarReferencesFooGenerator.runCount);
  CompilerOptions compilerOptions=new CompilerOptionsImpl();
  List<MockResource> sharedResources=Lists.newArrayList(barReferencesFooGeneratorModuleResource,generatorEntryPointResource);
  JsOutputOption output=JsOutputOption.PRETTY;
  List<MockResource> originalResources=Lists.newArrayList(sharedResources);
  originalResources.add(fooResource);
  MinimalRebuildCache relinkMinimalRebuildCache=new MinimalRebuildCache();
  File relinkApplicationDir=Files.createTempDir();
  compileToJs(compilerOptions,relinkApplicationDir,"com.foo.SimpleModule",originalResources,relinkMinimalRebuildCache,emptySet,output);
  assertEquals(1,BarReferencesFooGenerator.runCount);
  compileToJs(compilerOptions,relinkApplicationDir,"com.foo.SimpleModule",Lists.<MockResource>newArrayList(),relinkMinimalRebuildCache,emptySet,output);
  assertEquals(1,BarReferencesFooGenerator.runCount);
  compileToJs(compilerOptions,relinkApplicationDir,"com.foo.SimpleModule",Lists.<MockResource>newArrayList(fooResource),relinkMinimalRebuildCache,stringSet("com.foo.TestEntryPoint","com.foo.Foo","com.foo.Bar"),output);
  assertEquals(2,BarReferencesFooGenerator.runCount);
}
