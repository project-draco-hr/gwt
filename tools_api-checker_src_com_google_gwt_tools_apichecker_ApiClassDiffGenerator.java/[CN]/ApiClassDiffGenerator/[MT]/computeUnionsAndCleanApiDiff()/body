{
  if (allMissingMethods.size() > 0) {
    return;
  }
  ApiClassDiffGenerator other=getSuperclassApiClassDiffGenerator();
  if (other != null) {
    other.computeUnionsAndCleanApiDiff();
  }
  for (  ApiClass.MethodType methodType : ApiClass.MethodType.values()) {
    if (other != null) {
      removeAll(intersectingMethods.get(methodType.getId()),other.allIntersectingMethods.get(methodType.getId()));
      missingMethods.get(methodType.getId()).removeAll(other.allMissingMethods.get(methodType.getId()));
    }
    HashSet<JAbstractMethod> tempSet1=new HashSet<JAbstractMethod>(intersectingMethods.get(methodType.getId()).keySet());
    HashSet<JAbstractMethod> tempSet2=new HashSet<JAbstractMethod>(missingMethods.get(methodType.getId()));
    if (other != null) {
      tempSet1.addAll(other.allIntersectingMethods.get(methodType.getId()));
      tempSet2.addAll(other.allMissingMethods.get(methodType.getId()));
    }
    allIntersectingMethods.add(methodType.getId(),tempSet1);
    allMissingMethods.add(methodType.getId(),tempSet2);
  }
  if (other != null) {
    removeAll(intersectingFields,other.allIntersectingFields);
    missingFields.removeAll(other.allMissingFields);
  }
  allIntersectingFields=new HashSet<JField>(intersectingFields.keySet());
  allMissingFields=new HashSet<JField>(missingFields);
  if (other != null) {
    allIntersectingFields.addAll(other.allIntersectingFields);
    allMissingFields.addAll(other.allMissingFields);
  }
}
