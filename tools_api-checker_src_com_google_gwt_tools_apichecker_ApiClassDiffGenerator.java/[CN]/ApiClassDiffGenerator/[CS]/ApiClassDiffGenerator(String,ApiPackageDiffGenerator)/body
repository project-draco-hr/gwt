{
  this.className=className;
  apiDiffGenerator=apiPackageDiffGenerator.getApiDiffGenerator();
  this.newClass=apiPackageDiffGenerator.getNewApiPackage().getApiClass(className);
  this.oldClass=apiPackageDiffGenerator.getOldApiPackage().getApiClass(className);
  if (newClass == null || oldClass == null) {
    throw new NotFoundException("for class " + className + ", one of the class objects is null");
  }
  intersectingFields=new HashMap<ApiField,Set<ApiChange.Status>>();
  intersectingMethods=new EnumMap<ApiClass.MethodType,Map<ApiAbstractMethod,Set<ApiChange>>>(ApiClass.MethodType.class);
  missingMethods=new EnumMap<ApiClass.MethodType,Set<ApiAbstractMethod>>(ApiClass.MethodType.class);
  for (  ApiClass.MethodType methodType : ApiClass.MethodType.values()) {
    intersectingMethods.put(methodType,new HashMap<ApiAbstractMethod,Set<ApiChange>>());
  }
}
