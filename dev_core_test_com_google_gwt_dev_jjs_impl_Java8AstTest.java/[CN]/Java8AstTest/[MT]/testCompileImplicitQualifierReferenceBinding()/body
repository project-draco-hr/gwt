{
  String lambda="new AcceptsLambda<String>().accept2(String::equalsIgnoreCase);";
  String generatedInnerClassName="test.EntryPoint$0methodref$equalsIgnoreCase$Type";
  String simpleLambdaInnerClassName=generatedInnerClassName.substring("test.".length());
  assertEqualBlock("(new AcceptsLambda()).accept2(new " + simpleLambdaInnerClassName + " ());",lambda);
  JProgram program=compileSnippet("void",lambda,false);
  JClassType lambdaInnerClass=(JClassType)getType(program,generatedInnerClassName);
  assertNotNull(lambdaInnerClass);
  JMethod ctor=findMethod(lambdaInnerClass,simpleLambdaInnerClassName);
  assertTrue(ctor instanceof JConstructor);
  assertEquals(0,ctor.getParams().size());
  assertEquals(0,lambdaInnerClass.getFields().size());
  assertTrue(lambdaInnerClass.getImplements().contains(program.getFromTypeMap("test.Lambda2")));
  JMethod samMethod=findMethod(lambdaInnerClass,"run");
  assertEquals("public final boolean run(Object arg0,Object arg1)" + "{return((String)arg0).equalsIgnoreCase((String)arg1);}",formatSource(samMethod.toSource()));
}
