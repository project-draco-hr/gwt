{
  addSnippetClassDecl("static class TestMF_A {","  public static String getId() {","    return \"A\";","  }","}","static class TestMF_B {","  public static String getId() {","    return \"B\";","  }","}","interface Function<T> {","  T apply();","}","private String f(Function<String> arg) {","    return arg.apply();","  }");
  String reference="f(TestMF_A::getId);\n" + "f(TestMF_B::getId);";
  String generatedInnerClassNameForA=JjsUtils.classNamePrefixForMethodReference("test","test.EntryPoint","test.EntryPoint$Function","test.EntryPoint$TestMF_A","getId",false) + "__Ljava_lang_String_2$Type";
  String simpleLambdaInnerClassNameForA=generatedInnerClassNameForA.substring("test.".length());
  String generatedInnerClassNameForB=JjsUtils.classNamePrefixForMethodReference("test","test.EntryPoint","test.EntryPoint$Function","test.EntryPoint$TestMF_B","getId",false) + "__Ljava_lang_String_2$Type";
  String simpleLambdaInnerClassNameForB=generatedInnerClassNameForB.substring("test.".length());
  assertEqualBlock("this.f(new " + simpleLambdaInnerClassNameForA + "());"+ "this.f(new "+ simpleLambdaInnerClassNameForB+ "());",reference);
  JProgram program=compileSnippet("void",reference,false);
  JClassType innerClassA=(JClassType)getType(program,generatedInnerClassNameForA);
  JClassType innerClassB=(JClassType)getType(program,generatedInnerClassNameForB);
  assertNotNull(innerClassA);
  assertNotNull(innerClassB);
  assertTrue(innerClassA.getImplements().contains(program.getFromTypeMap("test.EntryPoint$Function")));
  assertTrue(innerClassB.getImplements().contains(program.getFromTypeMap("test.EntryPoint$Function")));
  JMethod samMethodA=findMethod(innerClassA,"apply");
  assertEquals("public final Object apply(){return EntryPoint$TestMF_A.getId();}",formatSource(samMethodA.toSource()));
  JMethod samMethodB=findMethod(innerClassB,"apply");
  assertEquals("public final Object apply(){return EntryPoint$TestMF_B.getId();}",formatSource(samMethodB.toSource()));
}
