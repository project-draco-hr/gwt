{
  addSnippetClassDecl("static class TestMF_A {\n" + "    public static String getId() {\n" + "      return \"A\";\n"+ "    }\n"+ "  }");
  addSnippetClassDecl("  static class TestMF_B {\n" + "    public static String getId() {\n" + "      return \"B\";\n"+ "    }\n"+ "  }");
  addSnippetClassDecl("interface Function<T> {\n" + "    T apply();\n" + "  }");
  addSnippetClassDecl("  private String f(Function<String> arg) {\n" + "    return arg.apply();\n" + "  }");
  String reference="f(TestMF_A::getId);\n" + "f(TestMF_B::getId);";
  assertEqualBlock("this.f(new " + "EntryPoint$Function$$test$EntryPoint$TestMF_A$getId__Ljava_lang_String_2$Type());" + "this.f(new "+ "EntryPoint$Function$$test$EntryPoint$TestMF_B$getId__Ljava_lang_String_2$Type());",reference);
  JProgram program=compileSnippet("void",reference,false);
  JClassType innerClassA=(JClassType)getType(program,"test.EntryPoint$Function$$test$EntryPoint$TestMF_A$getId__Ljava_lang_String_2$Type");
  JClassType innerClassB=(JClassType)getType(program,"test.EntryPoint$Function$$test$EntryPoint$TestMF_B$getId__Ljava_lang_String_2$Type");
  assertNotNull(innerClassA);
  assertNotNull(innerClassB);
  assertTrue(innerClassA.getImplements().contains(program.getFromTypeMap("test.EntryPoint$Function")));
  assertTrue(innerClassB.getImplements().contains(program.getFromTypeMap("test.EntryPoint$Function")));
  JMethod samMethodA=findMethod(innerClassA,"apply");
  assertEquals("public final Object apply(){return EntryPoint$TestMF_A.getId();}",formatSource(samMethodA.toSource()));
  JMethod samMethodB=findMethod(innerClassB,"apply");
  assertEquals("public final Object apply(){return EntryPoint$TestMF_B.getId();}",formatSource(samMethodB.toSource()));
}
