{
  addSnippetClassDecl("interface Inner {\n" + "    void f();\n" + "  }\n");
  addSnippetClassDecl("  interface Outer {\n" + "     void accept(Inner t);\n" + "   }\n");
  addSnippetClassDecl("  static class A {\n" + "    public boolean[] success = new boolean[] {false};\n" + "    public void call(Outer a) {\n"+ "      a.accept(() -> {});\n"+ "    }\n"+ "  }\n");
  String nestedLambda="A a = new A();\n" + "a.call( sam1 -> { a.call(sam2 -> {a.success[0] = true;}); });";
  assertEqualBlock("EntryPoint$A a=new EntryPoint$A();a.call(new EntryPoint$lambda$0$Type(a));",nestedLambda);
  JProgram program=compileSnippet("void",nestedLambda,false);
  JClassType lambdaInnerClass1=(JClassType)getType(program,"test.EntryPoint$lambda$0$Type");
  JClassType lambdaInnerClass2=(JClassType)getType(program,"test.EntryPoint$lambda$1$Type");
  assertNotNull(lambdaInnerClass1);
  assertNotNull(lambdaInnerClass2);
  JMethod ctor1=findMethod(lambdaInnerClass1,"EntryPoint$lambda$0$Type");
  assertTrue(ctor1 instanceof JConstructor);
  assertEquals(1,ctor1.getParams().size());
  assertEquals("test.EntryPoint$A",ctor1.getOriginalParamTypes().get(0).getName());
  JMethod ctor2=findMethod(lambdaInnerClass2,"EntryPoint$lambda$1$Type");
  assertTrue(ctor2 instanceof JConstructor);
  assertEquals(1,ctor2.getParams().size());
  assertEquals("test.EntryPoint$A",ctor2.getOriginalParamTypes().get(0).getName());
  assertEquals(1,lambdaInnerClass1.getFields().size());
  assertEquals("test.EntryPoint$A",lambdaInnerClass2.getFields().get(0).getType().getName());
  assertEquals(1,lambdaInnerClass2.getFields().size());
  assertEquals("test.EntryPoint$A",lambdaInnerClass2.getFields().get(0).getType().getName());
  assertEquals("{this.a_0=a_0;}",formatSource(ctor2.getBody().toSource()));
  assertEquals("{this.a_0=a_0;}",formatSource(ctor2.getBody().toSource()));
  assertTrue(lambdaInnerClass1.getImplements().contains(program.getFromTypeMap("test.EntryPoint$Outer")));
  assertTrue(lambdaInnerClass2.getImplements().contains(program.getFromTypeMap("test.EntryPoint$Outer")));
  JMethod samMethod1=findMethod(lambdaInnerClass1,"accept");
  JMethod samMethod2=findMethod(lambdaInnerClass2,"accept");
  assertEquals("public final void accept(EntryPoint$Inner t){EntryPoint.lambda$0(this.a_0,t);}",formatSource(samMethod1.toSource()));
  assertEquals("public final void accept(EntryPoint$Inner t){EntryPoint.lambda$1(this.a_0,t);}",formatSource(samMethod2.toSource()));
  JMethod lambdaMethod1=findMethod(program,"lambda$0");
  JMethod lambdaMethod2=findMethod(program,"lambda$1");
  assertEquals("private static void lambda$0(EntryPoint$A a_0,EntryPoint$Inner sam1_1)" + "{{a_0.call(new EntryPoint$lambda$1$Type(a_0));}}",formatSource(lambdaMethod1.toSource()));
  assertEquals("private static void lambda$1(EntryPoint$A a_0,EntryPoint$Inner sam2_1)" + "{{a_0.success[0]=true;}}",formatSource(lambdaMethod2.toSource()));
}
