{
  addSnippetClassDecl("static class TestMF_A {\n" + "    public String getId() {\n" + "      return \"A\";\n"+ "    }\n"+ "  }");
  addSnippetClassDecl("  static class TestMF_B {\n" + "    public String getId() {\n" + "      return \"B\";\n"+ "    }\n"+ "  }");
  addSnippetClassDecl("interface Function<T> {\n" + "    T apply();\n" + "  }");
  addSnippetClassDecl("  private String f(Function<String> arg) {\n" + "    return arg.apply();\n" + "  }");
  String reference="TestMF_A a = new TestMF_A();\n" + "TestMF_B b = new TestMF_B();\n" + "f(a::getId);\n"+ "f(b::getId);";
  assertEqualBlock("EntryPoint$TestMF_A a=new EntryPoint$TestMF_A();" + "EntryPoint$TestMF_B b=new EntryPoint$TestMF_B();" + "this.f(new "+ "EntryPoint$Function$test$EntryPoint$TestMF_A$getId__Ljava_lang_String_2$Type(a));"+ "this.f(new "+ "EntryPoint$Function$test$EntryPoint$TestMF_B$getId__Ljava_lang_String_2$Type(b));",reference);
  JProgram program=compileSnippet("void",reference,false);
  JClassType innerClassA=(JClassType)getType(program,"test.EntryPoint$Function$test$EntryPoint$TestMF_A$getId__Ljava_lang_String_2$Type");
  JClassType innerClassB=(JClassType)getType(program,"test.EntryPoint$Function$test$EntryPoint$TestMF_B$getId__Ljava_lang_String_2$Type");
  assertNotNull(innerClassA);
  assertNotNull(innerClassB);
  JMethod ctorA=findMethod(innerClassA,"EntryPoint$Function$test$EntryPoint$TestMF_A$getId__Ljava_lang_String_2$Type");
  assertTrue(ctorA instanceof JConstructor);
  assertEquals(1,ctorA.getParams().size());
  assertEquals("test.EntryPoint$TestMF_A",ctorA.getOriginalParamTypes().get(0).getName());
  JMethod ctorB=findMethod(innerClassB,"EntryPoint$Function$test$EntryPoint$TestMF_B$getId__Ljava_lang_String_2$Type");
  assertTrue(ctorB instanceof JConstructor);
  assertEquals(1,ctorB.getParams().size());
  assertEquals("test.EntryPoint$TestMF_B",ctorB.getOriginalParamTypes().get(0).getName());
  assertEquals(1,innerClassA.getFields().size());
  assertEquals("test.EntryPoint$TestMF_A",innerClassA.getFields().get(0).getType().getName());
  assertEquals(1,innerClassB.getFields().size());
  assertEquals("test.EntryPoint$TestMF_B",innerClassB.getFields().get(0).getType().getName());
  assertTrue(innerClassA.getImplements().contains(program.getFromTypeMap("test.EntryPoint$Function")));
  assertTrue(innerClassB.getImplements().contains(program.getFromTypeMap("test.EntryPoint$Function")));
  JMethod samMethodA=findMethod(innerClassA,"apply");
  assertEquals("public final Object apply(){return this.$$outer_0.getId();}",formatSource(samMethodA.toSource()));
  JMethod samMethodB=findMethod(innerClassB,"apply");
  assertEquals("public final Object apply(){return this.$$outer_0.getId();}",formatSource(samMethodB.toSource()));
}
