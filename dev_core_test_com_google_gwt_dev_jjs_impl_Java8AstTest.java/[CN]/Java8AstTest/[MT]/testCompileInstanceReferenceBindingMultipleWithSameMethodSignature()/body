{
  addSnippetClassDecl("static class TestMF_A {","  public String getId() {","    return \"A\";","  }","}","static class TestMF_B {","  public String getId() {","    return \"B\";","  }","}","interface Function<T> {","  T apply();","}","private String f(Function<String> arg) {","    return arg.apply();","  }");
  String reference=Joiner.on('\n').join("TestMF_A a = new TestMF_A();","TestMF_B b = new TestMF_B();","f(a::getId);","f(b::getId);");
  String generatedInnerClassNameForA="test.EntryPoint$0methodref$getId$Type";
  String simpleLambdaInnerClassNameForA=generatedInnerClassNameForA.substring("test.".length());
  String generatedInnerClassNameForB="test.EntryPoint$1methodref$getId$Type";
  String simpleLambdaInnerClassNameForB=generatedInnerClassNameForB.substring("test.".length());
  assertEqualBlock("EntryPoint$TestMF_A a=new EntryPoint$TestMF_A();" + "EntryPoint$TestMF_B b=new EntryPoint$TestMF_B();" + "this.f(new " + simpleLambdaInnerClassNameForA + "(a));"+ "this.f(new "+ simpleLambdaInnerClassNameForB+ "(b));",reference);
  JProgram program=compileSnippet("void",reference,false);
  JClassType innerClassA=(JClassType)getType(program,generatedInnerClassNameForA);
  JClassType innerClassB=(JClassType)getType(program,generatedInnerClassNameForB);
  assertNotNull(innerClassA);
  assertNotNull(innerClassB);
  JMethod ctorA=findMethod(innerClassA,simpleLambdaInnerClassNameForA);
  assertTrue(ctorA instanceof JConstructor);
  assertEquals(1,ctorA.getParams().size());
  assertEquals("test.EntryPoint$TestMF_A",ctorA.getOriginalParamTypes().get(0).getName());
  JMethod ctorB=findMethod(innerClassB,simpleLambdaInnerClassNameForB);
  assertTrue(ctorB instanceof JConstructor);
  assertEquals(1,ctorB.getParams().size());
  assertEquals("test.EntryPoint$TestMF_B",ctorB.getOriginalParamTypes().get(0).getName());
  assertEquals(1,innerClassA.getFields().size());
  assertEquals("test.EntryPoint$TestMF_A",innerClassA.getFields().get(0).getType().getName());
  assertEquals(1,innerClassB.getFields().size());
  assertEquals("test.EntryPoint$TestMF_B",innerClassB.getFields().get(0).getType().getName());
  assertTrue(innerClassA.getImplements().contains(program.getFromTypeMap("test.EntryPoint$Function")));
  assertTrue(innerClassB.getImplements().contains(program.getFromTypeMap("test.EntryPoint$Function")));
  JMethod samMethodA=findMethod(innerClassA,"apply");
  assertEquals("public final Object apply(){return this.$$outer_0.getId();}",formatSource(samMethodA.toSource()));
  JMethod samMethodB=findMethod(innerClassB,"apply");
  assertEquals("public final Object apply(){return this.$$outer_0.getId();}",formatSource(samMethodB.toSource()));
}
