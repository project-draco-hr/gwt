{
  String lambda="new AcceptsLambda<Pojo>().accept(Pojo::new);";
  String generatedInnerClassName=JjsUtils.classNamePrefixForMethodReference("test","test.EntryPoint","test.Lambda","test.Pojo","Pojo",false) + "__IIV$Type";
  String simpleLambdaInnerClassName=generatedInnerClassName.substring("test.".length());
  assertEqualBlock("(new AcceptsLambda()).accept(new " + simpleLambdaInnerClassName + "());",lambda);
  JProgram program=compileSnippet("void",lambda,false);
  JClassType lambdaInnerClass=(JClassType)getType(program,generatedInnerClassName);
  assertNotNull(lambdaInnerClass);
  JMethod ctor=findMethod(lambdaInnerClass,simpleLambdaInnerClassName);
  assertTrue(ctor instanceof JConstructor);
  assertEquals(0,ctor.getParams().size());
  assertEquals(0,lambdaInnerClass.getFields().size());
  assertTrue(lambdaInnerClass.getImplements().contains(program.getFromTypeMap("test.Lambda")));
  JMethod samMethod=findMethod(lambdaInnerClass,"run");
  assertEquals("public final Object run(int arg0,int arg1){return new Pojo(arg0,arg1);}",formatSource(samMethod.toSource()));
}
