{
  addSnippetClassDecl("int field1, field2;","class Pojo2 {","  public Pojo2(int x, int y) {","  }","  public int someMethod() { ","    return field1 + field2; ","  }","}");
  String lambda="new AcceptsLambda<Pojo2>().accept(Pojo2::new);";
  String generatedInnerClassName=JjsUtils.classNamePrefixForMethodReference("test","test.EntryPoint","test.Lambda","test.EntryPoint$Pojo2","EntryPoint$Pojo2",false) + "__Ltest_EntryPoint_2IIV$Type";
  String simpleLambdaInnerClassName=generatedInnerClassName.substring("test.".length());
  assertEqualBlock("(new AcceptsLambda()).accept(new " + simpleLambdaInnerClassName + "(this));",lambda);
  JProgram program=compileSnippet("void",lambda,false);
  JClassType lambdaInnerClass=(JClassType)getType(program,generatedInnerClassName);
  assertNotNull(lambdaInnerClass);
  JMethod ctor=findMethod(lambdaInnerClass,simpleLambdaInnerClassName);
  assertTrue(ctor instanceof JConstructor);
  assertEquals(1,ctor.getParams().size());
  assertEquals(1,lambdaInnerClass.getFields().size());
  assertTrue(lambdaInnerClass.getImplements().contains(program.getFromTypeMap("test.Lambda")));
  JMethod samMethod=findMethod(lambdaInnerClass,"run");
  assertEquals("public final Object run(int arg0,int arg1){" + "return new EntryPoint$Pojo2(this.test_EntryPoint,arg0,arg1);}",formatSource(samMethod.toSource()));
}
