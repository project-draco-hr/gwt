{
  String targetPath=tree.getPath();
  ClassLoader loader=AbstractResource.class.getClassLoader();
  String localizedPath=targetPath;
  if (locale != null) {
    localizedPath=targetPath + "_" + locale;
  }
  AbstractResource result=cache.get(localizedPath);
  if (result != null) {
    if (result == NOT_FOUND) {
      return null;
    }
 else {
      return result;
    }
  }
  String partualPath=localizedPath.replace('.','/');
  AbstractResource parent=findPrimaryParent(tree,locale);
  List<AbstractResource> altParents=findAlternativeParents(tree,locale);
  AbstractResource found=null;
  for (int i=0; i < loaders.size(); i++) {
    ResourceFactory element=loaders.get(i);
    String path=partualPath + "." + element.getExt();
    InputStream m=loader.getResourceAsStream(path);
    if (m != null) {
      found=element.load(m);
      found.setPath(partualPath);
      found.setPrimaryParent(parent);
      found.setLocale(locale);
      for (int j=0; j < altParents.size(); j++) {
        AbstractResource altParent=altParents.get(j);
        found.addAlternativeParent(altParent);
      }
      found.checkKeys();
      break;
    }
  }
  if (found == null) {
    if (parent != null) {
      found=parent;
    }
 else {
      found=NOT_FOUND;
    }
    found=parent;
  }
  cache.put(localizedPath,found);
  if (found == null && required) {
    throw new MissingResourceException("Could not find any resource associated with " + tree.getPath(),null,null);
  }
  return found;
}
