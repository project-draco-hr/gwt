{
  Collection<Collection<JRunAsync>> fragmentRunAsyncLists=Lists.newArrayList();
  BitSet mergedSubset=new BitSet();
  PriorityQueue<SubsetWithSize> subsetsDescending=computeSubsetsDescending();
  for (  Collection<JRunAsync> runAsyncGroup : groupedRunAsyncs) {
    if (runAsyncGroup.size() <= 1) {
      continue;
    }
    fragmentRunAsyncLists.add(runAsyncGroup);
    mergedSubset.or(asBitSet(runAsyncGroup));
  }
  while (fragmentRunAsyncLists.size() < pairCount && !subsetsDescending.isEmpty()) {
    BitSet largestSubset=subsetsDescending.poll().subset;
    if (largestSubset.intersects(mergedSubset)) {
      continue;
    }
    logger.log(TreeLogger.Type.DEBUG,"Merging " + largestSubset);
    fragmentRunAsyncLists.add(asRunAsyncList(largestSubset));
    mergedSubset.or(largestSubset);
  }
  BitSet notMergedSubset=computeComplement(mergedSubset,getRunAsyncCount());
  fragmentRunAsyncLists.addAll(CodeSplitters.getListOfLists(asRunAsyncList(notMergedSubset)));
  return fragmentRunAsyncLists;
}
