{
  ResourceEntry resourceEntry=resourceList.getEntry(key);
  if (resourceEntry == null) {
    throw new MissingResourceException(key,resourceList);
  }
  JParameter[] params=m.getParameters();
  int pluralParamIndex=-1;
  Class<? extends PluralRule> ruleClass=null;
  int numParams=params.length;
  boolean[] seenFlags=new boolean[numParams];
  final Parameters paramsAccessor=new ParametersImpl(params,seenFlags);
  int pluralOffset=0;
  String pluralSuffix="";
  for (int i=0; i < numParams; ++i) {
    PluralCount pluralCount=params[i].getAnnotation(PluralCount.class);
    if (pluralCount != null) {
      if (pluralParamIndex >= 0) {
        throw error(logger,m.getName() + ": there can only be one PluralCount parameter");
      }
      JType paramType=params[i].getType();
      boolean isArray=false;
      boolean isList=false;
      JPrimitiveType primType=paramType.isPrimitive();
      JClassType classType=paramType.isInterface();
      if (classType != null) {
        classType=classType.getErasedType();
        if ("java.util.List".equals(classType.getQualifiedSourceName())) {
          isList=true;
        }
 else {
          classType=null;
        }
      }
      JArrayType arrayType=paramType.isArray();
      if (arrayType != null) {
        isArray=true;
      }
      if (!isList && !isArray && (primType == null || (primType != JPrimitiveType.INT && primType != JPrimitiveType.SHORT))) {
        throw error(logger,m.getName() + ": PluralCount parameter must be int, short, array, or List");
      }
      if (isList) {
        pluralSuffix=".size()";
      }
 else       if (isArray) {
        pluralSuffix=".length";
      }
      pluralParamIndex=i;
      ruleClass=pluralCount.value();
      Offset offset=params[i].getAnnotation(Offset.class);
      if (offset != null) {
        pluralOffset=offset.value();
      }
    }
  }
  boolean isSafeHtml=m.getReturnType().getQualifiedSourceName().equals(SAFE_HTML_FQCN);
  String template=resourceEntry.getForm(null);
  if (template == null) {
    logger.log(TreeLogger.ERROR,"No default form for method " + m.getName() + "' in "+ m.getEnclosingType()+ " for locale "+ locale,null);
    throw new UnableToCompleteException();
  }
  StringBuffer generated=new StringBuffer();
  ArgumentChunk listArg=null;
  JType elemType=null;
  ListAccessor listAccessor=null;
  try {
    for (    TemplateChunk chunk : MessageFormatParser.parse(template)) {
      if (chunk instanceof ArgumentChunk) {
        ArgumentChunk argChunk=(ArgumentChunk)chunk;
        if (argChunk.isList()) {
          if (listArg != null) {
            logger.log(TreeLogger.ERROR,"Only one list parameter supported in " + m.getEnclosingType().getSimpleSourceName() + "."+ m.getName());
            throw new UnableToCompleteException();
          }
 else {
            listArg=argChunk;
            int listArgNum=argChunk.getArgumentNumber();
            JType listType=params[listArgNum].getType();
            JClassType classType=listType.isInterface();
            if (classType != null) {
              if ("java.util.List".equals(classType.getErasedType().getQualifiedSourceName())) {
                listAccessor=new ListAccessorList(listArgNum);
              }
 else {
                logger.log(TreeLogger.ERROR,"Parameters formatted as lists must be declared as java.util.List or arrays in " + m.getEnclosingType().getSimpleSourceName() + "."+ m.getName());
                throw new UnableToCompleteException();
              }
              JParameterizedType paramType=classType.isParameterized();
              if (paramType != null) {
                elemType=paramType.getTypeArgs()[0];
              }
 else {
                elemType=classType.getOracle().getJavaLangObject();
              }
            }
 else {
              JArrayType arrayType=listType.isArray();
              if (arrayType != null) {
                elemType=arrayType.getComponentType();
                listAccessor=new ListAccessorArray(listArgNum);
              }
            }
          }
        }
      }
    }
  }
 catch (  ParseException pe) {
    logger.log(TreeLogger.ERROR,"Error parsing '" + template + "'",pe);
    throw new UnableToCompleteException();
  }
  if (listArg != null) {
    generateListFormattingCode(logger,locale,generated,listArg,elemType,isSafeHtml,listAccessor,paramsAccessor);
  }
  if (ruleClass == null) {
    if (m.getAnnotation(PluralText.class) != null) {
      logger.log(TreeLogger.WARN,"Unused @PluralText on " + m.getEnclosingType().getSimpleSourceName() + "."+ m.getName()+ "; did you intend to mark a @PluralCount parameter?",null);
    }
  }
 else {
    if (ruleClass == PluralRule.class) {
      ruleClass=DefaultRule.class;
    }
    PluralRule rule=createLocalizedPluralRule(logger,m.getEnclosingType().getOracle(),ruleClass,locale);
    logger.log(TreeLogger.TRACE,"Using plural rule " + rule.getClass() + " for locale '"+ locale+ "'",null);
    boolean seenEqualsValue=false;
    for (    String form : resourceEntry.getForms()) {
      if (form.startsWith("=")) {
        int value=0;
        try {
          value=Integer.parseInt(form.substring(1));
        }
 catch (        NumberFormatException e) {
          logger.log(TreeLogger.WARN,"Ignoring invalid value in plural form '" + form + "'",e);
          continue;
        }
        if (!seenEqualsValue) {
          generated.append("switch (arg" + pluralParamIndex + pluralSuffix+ ") {\n");
          seenEqualsValue=true;
        }
        generated.append("  case " + value + ": return ");
        String pluralTemplate=resourceEntry.getForm(form);
        generateString(logger,locale,pluralTemplate,paramsAccessor,generated,isSafeHtml);
        generated.append(";\n");
      }
    }
    if (seenEqualsValue) {
      generated.append("}\n");
    }
    boolean seenPluralForm=false;
    StringBuilder pluralHeader=new StringBuilder();
    pluralHeader.append(PluralRule.class.getCanonicalName());
    pluralHeader.append(" rule = new " + rule.getClass().getCanonicalName() + "();\n");
    if (pluralOffset != 0) {
      pluralHeader.append("arg" + pluralParamIndex + " -= "+ pluralOffset+ ";\n");
    }
    pluralHeader.append("switch (rule.select(arg" + pluralParamIndex + pluralSuffix+ ")) {\n");
    PluralForm[] pluralForms=rule.pluralForms();
    resourceList.setPluralForms(key,pluralForms);
    for (int i=1; i < pluralForms.length; ++i) {
      String pluralTemplate=resourceEntry.getForm(pluralForms[i].getName());
      if (pluralTemplate != null) {
        if (!seenPluralForm) {
          generated.append(pluralHeader);
          seenPluralForm=true;
        }
        generated.append("  // " + pluralForms[i].getName() + " - "+ pluralForms[i].getDescription()+ "\n");
        generated.append("  case " + i + ": return ");
        generateString(logger,locale,pluralTemplate,paramsAccessor,generated,isSafeHtml);
        generated.append(";\n");
      }
 else       if (pluralForms[i].getWarnIfMissing()) {
        if (!seenEqualsValue) {
          logger.log(TreeLogger.WARN,"No plural form '" + pluralForms[i].getName() + "' defined for method '"+ m.getName()+ "' in "+ m.getEnclosingType()+ " for locale "+ locale,null);
        }
      }
    }
    if (seenPluralForm) {
      generated.append("}\n");
    }
  }
  generated.append("return ");
  generateString(logger,locale,template,paramsAccessor,generated,isSafeHtml);
  for (int i=0; i < numParams; ++i) {
    if (!seenFlags[i]) {
      Optional optional=params[i].getAnnotation(Optional.class);
      if (optional == null) {
        throw error(logger,"Required argument " + i + " not present: "+ template);
      }
    }
  }
  generated.append(';');
  println(generated.toString());
}
