{
  StringGenerator buf=new StringGenerator(outputBuf);
  Matcher match=argPattern.matcher(template);
  int curPos=0;
  boolean inQuote=false;
  int templateLen=template.length();
  while (curPos < templateLen) {
    char ch=template.charAt(curPos++);
switch (ch) {
case '\'':
      if (curPos < templateLen && template.charAt(curPos) == '\'') {
        buf.appendStringLiteral(ch);
        ++curPos;
        break;
      }
    inQuote=!inQuote;
  break;
case '{':
if (!inQuote) {
  if (match.find(curPos - 1) && match.start() == curPos - 1) {
    int argNumber=Integer.valueOf(match.group(1));
    if (argNumber >= params.length) {
      throw error(logger,"Argument " + argNumber + " beyond range of arguments: "+ template);
    }
    seenFlag[argNumber]=true;
    String arg="arg" + match.group(1);
    curPos=match.end();
    String format=match.group(3);
    if (format != null) {
      String subformat=match.group(5);
      ValueFormatter formatter=formatters.get(format);
      if (formatter != null) {
        String err=formatter.format(buf,subformat,arg,params[argNumber].getType());
        if (err != null) {
          throw error(logger,err);
        }
        continue;
      }
    }
    buf.appendExpression(arg,"java.lang.String".equals(params[argNumber].getType().getQualifiedSourceName()));
  }
 else {
    throw error(logger,"Invalid message format - { not start of valid argument" + template);
  }
  break;
}
buf.appendStringLiteral(ch);
break;
case '\n':
buf.appendStringLiteral("\\n");
break;
case '\r':
buf.appendStringLiteral("\\r");
break;
case '\\':
case '"':
buf.appendStringLiteral('\\');
default :
buf.appendStringLiteral(ch);
break;
}
}
if (inQuote) {
throw error(logger,"Unterminated single quote: " + template);
}
buf.completeString();
}
