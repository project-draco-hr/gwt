{
  String className=jsniRef.className();
  if ("null".equals(className)) {
    return;
  }
  boolean isArray=false;
  while (className.endsWith("[]")) {
    isArray=true;
    className=className.substring(0,className.length() - 2);
  }
  ReferenceBinding clazz=findClass(className);
  boolean isPrimitive=(clazz == null) && className.length() == 1 && "ZBCDFIJSV".indexOf(className.charAt(0)) >= 0;
  if (isArray || isPrimitive) {
    if (!jsniRef.isField() || !jsniRef.memberName().equals("class")) {
      emitError("Referencing member '" + jsniRef.className() + "."+ jsniRef.memberName()+ "': 'class' is the only legal reference for "+ (isArray ? "array" : "primitive")+ " types");
      return;
    }
  }
  if (isPrimitive) {
    return;
  }
  if (looksLikeAnonymousClass(jsniRef) || (clazz != null && clazz.isAnonymousType())) {
    emitError("Referencing class '" + className + ": JSNI references to anonymous classes are illegal");
  }
 else   if (clazz != null) {
    if (clazz.isDeprecated()) {
      emitWarning("deprecation","Referencing deprecated class '" + className + "'");
    }
    if (jsniRef.isMethod()) {
      checkMethodRef(clazz,jsniRef);
    }
 else {
      checkFieldRef(clazz,jsniRef);
    }
  }
 else {
    emitError("JSNI Referencing class '" + className + "': unable to resolve class, expect subsequent failures");
  }
}
