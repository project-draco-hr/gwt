{
  if (sessionKey == null) {
    sessionKey=randomString();
  }
  TreeLogger logger=mainLogger;
  TreeLogger.Type maxLevel=TreeLogger.INFO;
  if (mainLogger instanceof AbstractTreeLogger) {
    maxLevel=((AbstractTreeLogger)mainLogger).getMaxDetail();
  }
  ModuleTabPanel tabPanel=null;
  ModulePanel tab=null;
  if (!isHeadless()) {
    tabPanel=findModuleTab(userAgent,remoteSocket,url,tabKey,moduleName);
    String agentTag=BrowserInfo.getShortName(userAgent).toLowerCase();
    tab=tabPanel.addModuleSession(maxLevel,moduleName,sessionKey,options.getLogFile(String.format("%s-%s-%d.log",moduleName,agentTag,getNextSessionCounter(options.getLogDir()))));
    logger=tab.getLogger();
    TreeLogger branch=logger.branch(TreeLogger.INFO,"Loading module " + moduleName);
    if (url != null) {
      branch.log(TreeLogger.INFO,"Top URL: " + url);
    }
    branch.log(TreeLogger.INFO,"User agent: " + userAgent);
    branch.log(TreeLogger.TRACE,"Remote socket: " + remoteSocket);
    if (tabKey != null) {
      branch.log(TreeLogger.DEBUG,"Tab key: " + tabKey);
    }
    if (sessionKey != null) {
      branch.log(TreeLogger.DEBUG,"Session key: " + sessionKey);
    }
    frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
  }
  try {
    ModuleDef moduleDef=loadModule(logger,moduleName,true);
    assert(moduleDef != null);
    TypeOracle typeOracle=moduleDef.getTypeOracle(logger);
    ShellModuleSpaceHost host=doCreateShellModuleSpaceHost(logger,typeOracle,moduleDef);
    if (tab != null) {
      moduleTabs.put(host,tab);
    }
    return host;
  }
 catch (  RuntimeException e) {
    logger.log(TreeLogger.ERROR,"Exception initializing module",e);
    throw e;
  }
 finally {
    if (!isHeadless()) {
      frame.setCursor(Cursor.getDefaultCursor());
    }
  }
}
