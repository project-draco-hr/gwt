{
  JsonBoolean boolTrue=Json.create(true);
  JsonBoolean boolFalse=Json.create(false);
  assertEquals(true,boolTrue.asBoolean());
  assertEquals(false,boolFalse.asBoolean());
  JsonString trueString=Json.create("true");
  JsonString falseString=Json.create("");
  assertEquals(true,trueString.asBoolean());
  assertEquals(false,falseString.asBoolean());
  JsonNumber trueNumber=Json.create(1.0);
  JsonNumber falseNumber=Json.create(0.0);
  JsonNumber falseNumber2=Json.create(-0.0);
  assertEquals(true,trueNumber.asBoolean());
  assertEquals(false,falseNumber.asBoolean());
  assertEquals(false,falseNumber2.asBoolean());
  assertEquals(true,Json.createArray().asBoolean());
  assertEquals(true,Json.createObject().asBoolean());
  assertEquals(false,Json.createNull().asBoolean());
  assertEquals(1.0,boolTrue.asNumber());
  assertEquals(0.0,boolFalse.asNumber());
  assertEquals(42.0,Json.create("42").asNumber());
  assertTrue(Double.isNaN(trueString.asNumber()));
  assertEquals(0.0,Json.createNull().asNumber());
  assertEquals(0.0,falseString.asNumber());
  assertEquals(0.0,Json.createArray().asNumber());
  JsonArray nested=Json.createArray();
  JsonArray outer=Json.createArray();
  outer.set(0,nested);
  nested.set(0,42);
  assertEquals(42.0,outer.asNumber());
  nested.set(1,45);
  assertTrue(Double.isNaN(outer.asNumber()));
  assertTrue(Double.isNaN(Json.createObject().asNumber()));
  assertEquals("true",boolTrue.asString());
  assertEquals("false",boolFalse.asString());
  assertEquals("true",trueString.asString());
  assertEquals("null",Json.createNull().asString());
  assertEquals("42",Json.create(42).asString());
  JsonArray inner2=Json.createArray();
  inner2.set(0,52);
  inner2.set(1,55);
  outer.set(1,inner2);
  assertEquals("42, 45, 52, 55",outer.asString());
  assertEquals("[object Object]",Json.createObject().asString());
}
