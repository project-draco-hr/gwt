{
  int len=values.size();
  int end=start + len;
  int childCount=nodeView.getChildCount();
  ProvidesKey<C> providesKey=nodeInfo.getProvidesKey();
  Element container=nodeView.ensureChildContainer();
  Element childElem=container.getFirstChildElement();
  for (int i=start; i < end; i++) {
    C childValue=values.get(i - start);
    CellTreeNodeView<C> child=nodeView.createTreeNodeView(nodeInfo,childElem,childValue,null);
    CellTreeNodeView<?> savedChild=savedViews.remove(providesKey.getKey(childValue));
    if (savedChild != null) {
      child.animationFrame=savedChild.animationFrame;
      child.contentContainer=savedChild.contentContainer;
      child.childContainer=savedChild.childContainer;
      child.children=savedChild.children;
      child.emptyMessageElem=savedChild.emptyMessageElem;
      child.nodeInfo=savedChild.nodeInfo;
      child.nodeInfoLoaded=savedChild.nodeInfoLoaded;
      child.open=savedChild.open;
      child.showMoreElem=savedChild.showMoreElem;
      child.treeNode=savedChild.treeNode;
      if (child.treeNode != null) {
        child.treeNode.nodeView=child;
      }
      child.listView=savedChild.listView;
      child.listView.nodeView=child;
      child.getElement().appendChild(savedChild.ensureAnimationFrame());
    }
    if (childCount > i) {
      nodeView.children.set(i,child);
    }
 else {
      nodeView.children.add(child);
    }
    childElem=childElem.getNextSiblingElement();
  }
}
