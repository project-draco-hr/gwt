{
  MockJavaResource intf=new MockJavaResource("my.MyPlaceHistoryMapper"){
    @Override public CharSequence getContent(){
      StringBuilder code=new StringBuilder();
      code.append("package my;\n");
      code.append("import com.google.gwt.place.shared.PlaceHistoryMapperWithFactory;\n");
      code.append("import com.google.gwt.place.shared.WithTokenizers;\n");
      code.append("import com.google.gwt.place.shared.Prefix;\n");
      code.append("import com.google.gwt.place.testplaces.Place1;\n");
      code.append("import com.google.gwt.place.testplaces.Tokenizer2;\n");
      code.append("@WithTokenizers(Place1.Tokenizer.class)\n");
      code.append("public interface MyPlaceHistoryMapper extends PlaceHistoryMapperWithFactory<MyPlaceHistoryMapper.Factory> {\n");
      code.append("  interface Factory {\n");
      code.append("    @Prefix(Place1.Tokenizer.PREFIX) Tokenizer2 tokenizer2();\n");
      code.append("  }\n");
      code.append("}\n");
      return code;
    }
  }
;
  TypeOracle typeOracle=createTypeOracle(intf);
  UnitTestTreeLogger.Builder loggerBuilder=new UnitTestTreeLogger.Builder();
  loggerBuilder.expectError(String.format("Found duplicate place prefix \"%s\" on %s, already seen on %s",Place1.Tokenizer.PREFIX,Place1.Tokenizer.class.getCanonicalName(),intf.getTypeName() + ".Factory#tokenizer2()"),null);
  UnitTestTreeLogger logger=loggerBuilder.createLogger();
  PlaceHistoryGeneratorContext context=createContext(logger,typeOracle,intf.getTypeName(),intf.getTypeName() + ".Factory");
  try {
    context.ensureInitialized();
    fail();
  }
 catch (  UnableToCompleteException e) {
  }
  logger.assertCorrectLogEntries();
}
