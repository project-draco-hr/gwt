{
  Set<Resource> resources=new HashSet<Resource>(Arrays.asList(JavaResourceBase.getStandardResources()));
  resources.add(new RealJavaResource(Place.class));
  resources.add(new RealJavaResource(PlaceTokenizer.class));
  resources.add(new RealJavaResource(PlaceHistoryMapper.class));
  resources.add(new RealJavaResource(PlaceHistoryMapperWithFactory.class));
  resources.add(new RealJavaResource(WithTokenizers.class));
  resources.add(new RealJavaResource(Prefix.class));
  resources.add(new RealJavaResource(NoFactory.class));
  resources.add(new RealJavaResource(WithFactory.class));
  resources.add(new RealJavaResource(TokenizerFactory.class));
  resources.add(new RealJavaResource(Place1.class));
  resources.add(new RealJavaResource(Place2.class));
  resources.add(new RealJavaResource(Place3.class));
  resources.add(new RealJavaResource(Place4.class));
  resources.add(new RealJavaResource(Place6.class));
  resources.add(new RealJavaResource(AbstractTokenizer.class));
  resources.add(new RealJavaResource(Tokenizer2.class));
  resources.add(new RealJavaResource(Tokenizer3.class));
  resources.add(new RealJavaResource(Tokenizer4.class));
  resources.addAll(Arrays.asList(extraResources));
  try {
    return CompilationStateBuilder.buildFrom(createCompileLogger(),new CompilerContext(),resources).getTypeOracle();
  }
 catch (  UnableToCompleteException e) {
    throw new RuntimeException(e);
  }
}
