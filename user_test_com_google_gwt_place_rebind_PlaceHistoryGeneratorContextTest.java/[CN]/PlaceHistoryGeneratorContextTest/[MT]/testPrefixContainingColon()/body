{
  MockJavaResource intf=new MockJavaResource("my.MyPlaceHistoryMapper"){
    @Override protected CharSequence getContent(){
      StringBuilder code=new StringBuilder();
      code.append("package my;\n");
      code.append("import com.google.gwt.place.shared.Place;\n");
      code.append("import com.google.gwt.place.shared.PlaceHistoryMapperWithFactory;\n");
      code.append("import com.google.gwt.place.shared.PlaceTokenizer;\n");
      code.append("import com.google.gwt.place.shared.Prefix;\n");
      code.append("public interface MyPlaceHistoryMapper extends PlaceHistoryMapperWithFactory<MyPlaceHistoryMapper.Factory> {\n");
      code.append("  interface Factory {\n");
      code.append("    @Prefix(\"foo:bar\") PlaceTokenizer<Place> foo_bar();\n");
      code.append("  }\n");
      code.append("}\n");
      return code;
    }
  }
;
  TypeOracle typeOracle=createTypeOracle(intf);
  UnitTestTreeLogger.Builder loggerBuilder=new UnitTestTreeLogger.Builder();
  loggerBuilder.expectError("Found place prefix \"foo:bar\" containing separator char \":\", on " + intf.getTypeName() + ".Factory#foo_bar()",null);
  UnitTestTreeLogger logger=loggerBuilder.createLogger();
  PlaceHistoryGeneratorContext context=createContext(logger,typeOracle,intf.getTypeName(),intf.getTypeName() + ".Factory");
  try {
    context.ensureInitialized();
    fail();
  }
 catch (  UnableToCompleteException e) {
  }
  logger.assertCorrectLogEntries();
}
