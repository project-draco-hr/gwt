{
  assert(type != null);
  if (type.isPrimitive() != null) {
    return true;
  }
  assert(type instanceof JClassType);
  JClassType classType=(JClassType)type;
  TreeLogger localLogger=logger.branch(TreeLogger.DEBUG,classType.getParameterizedQualifiedSourceName(),null);
  TypeInfoComputed tic=getTypeInfoComputed(classType);
  if (tic.isPendingInstantiable()) {
    return true;
  }
 else   if (tic.isDone()) {
    return tic.isInstantiable();
  }
  tic.setPendingInstantiable();
  if (classType.getLeafType() == typeOracle.getJavaLangObject()) {
    markAsUninstantiableAndLog(logger,isSpeculative,"In order to produce smaller client-side code, 'Object' is not allowed; consider using a more specific type",tic);
    return false;
  }
  if (classType.isArray() != null) {
    return checkArrayInstantiable(logger,classType.isArray(),tic,isSpeculative);
  }
 else   if (classType.isWildcard() != null) {
    return checkWildcardInstantiable(logger,classType.isWildcard(),tic,isSpeculative);
  }
 else   if (classType.isClassOrInterface() != null) {
    TypeInfo typeInfo=getTypeInfo(classType);
    if (isSpeculative && typeInfo.isDirectlySerializable()) {
      isSpeculative=false;
    }
    boolean anySubtypes=false;
    if (checkClassOrInterfaceInstantiable(localLogger,classType,isSpeculative)) {
      tic.setInstantiable(true);
      anySubtypes=true;
    }
    if (classType.isParameterized() != null) {
      JParameterizedType parameterizedType=classType.isParameterized();
      if (!checkTypeArgumentsInstantiable(localLogger,parameterizedType,isSpeculative)) {
        return false;
      }
    }
 else     if (classType.isRawType() != null) {
      TreeLogger rawTypeLogger=logger.branch(TreeLogger.DEBUG,"Type '" + classType.getQualifiedSourceName() + "' should be parameterized to help the compiler produce the smallest code size possible for your module",null);
      if (classType.isAssignableTo(collectionClass) || classType.isAssignableTo(mapClass)) {
        checkAllSubtypesOfObject(rawTypeLogger);
      }
    }
    JClassType[] subtypes=classType.getSubtypes();
    if (subtypes.length > 0) {
      TreeLogger subLogger=localLogger.branch(TreeLogger.DEBUG,"Analyzing subclasses:",null);
      for (      JClassType subType : subtypes) {
        if (checkClassOrInterfaceInstantiable(subLogger.branch(TreeLogger.DEBUG,subType.getParameterizedQualifiedSourceName(),null),subType,true)) {
          getTypeInfoComputed(subType).setInstantiable(true);
          anySubtypes=true;
        }
      }
    }
    if (!anySubtypes && !isSpeculative) {
      markAsUninstantiableAndLog(logger,isSpeculative,"Type '" + classType.getParameterizedQualifiedSourceName() + "' was not serializable and has no concrete serializable subtypes",tic);
    }
    return anySubtypes;
  }
 else {
    assert(false);
    return false;
  }
}
