{
  if (type.isParameterized() != null) {
    return;
  }
  JClassType classOrInterface=type.isClassOrInterface();
  if (classOrInterface != null) {
    if (classOrInterface.isAssignableTo(collectionClass) || classOrInterface.isAssignableTo(mapClass)) {
      TreeLogger localLogger=logger.branch(TreeLogger.WARN,"Type '" + type.getQualifiedSourceName() + "' should be parameterized to help the compiler produce the smallest code size possible for your module. Since the gwt.typeArgs javadoc annotation is missing, all subtypes of Object will be analyzed for serializability even if they are not directly or indirectly used",null);
      JClassType[] allTypes=typeOracle.getJavaLangObject().getSubtypes();
      for (int i=0; i < allTypes.length; ++i) {
        JClassType cls=allTypes[i];
        MetaTypeInfo mti=getMetaTypeInfo(cls);
        if (mti.qualifiesForSerialization()) {
          checkType(localLogger,cls,true);
        }
      }
    }
  }
}
