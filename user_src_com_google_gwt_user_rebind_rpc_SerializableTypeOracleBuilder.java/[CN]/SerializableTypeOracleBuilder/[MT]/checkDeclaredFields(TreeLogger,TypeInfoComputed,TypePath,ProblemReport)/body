{
  JClassType classOrInterface=(JClassType)typeInfo.getType();
  if (classOrInterface.isEnum() != null) {
    return true;
  }
  JClassType baseType=getBaseType(classOrInterface);
  boolean allSucceeded=true;
  JField[] fields=baseType.getFields();
  if (fields.length > 0) {
    TreeLogger localLogger=logger.branch(TreeLogger.DEBUG,"Analyzing the fields of type '" + classOrInterface.getParameterizedQualifiedSourceName() + "' that qualify for serialization",null);
    for (    JField field : fields) {
      if (!shouldConsiderForSerialization(localLogger,context,field)) {
        continue;
      }
      TreeLogger fieldLogger=localLogger.branch(TreeLogger.DEBUG,field.toString(),null);
      JType fieldType=field.getType();
      TypePath path=TypePaths.createFieldPath(parent,field);
      if (typeInfo.isManuallySerializable() && fieldType.getLeafType() == typeOracle.getJavaLangObject()) {
        checkAllSubtypesOfObject(fieldLogger.branch(TreeLogger.WARN,"Object was reached from a manually serializable type",null),path,problems);
      }
 else {
        allSucceeded&=computeTypeInstantiability(fieldLogger,fieldType,path,problems).hasInstantiableSubtypes();
      }
    }
  }
  boolean succeeded=allSucceeded || typeInfo.isManuallySerializable();
  if (succeeded) {
    typeInfo.setFieldSerializable();
  }
  return succeeded;
}
