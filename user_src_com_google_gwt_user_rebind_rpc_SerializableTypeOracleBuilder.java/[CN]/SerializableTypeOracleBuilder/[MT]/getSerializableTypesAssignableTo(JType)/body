{
  MetaTypeInfo mti=getMetaTypeInfo(type);
  List serializableTypes=mti.getSerializableTypesAssignableToMe();
  if (serializableTypes == null) {
    JArrayType isArray=type.isArray();
    JClassType isClassOrInterface=type.isClassOrInterface();
    JParameterizedType isParameterized=type.isParameterized();
    JPrimitiveType isPrimitive=type.isPrimitive();
    serializableTypes=new ArrayList();
    if (isArray != null) {
      JType leafType=isArray.getLeafType();
      if (leafType.isPrimitive() != null) {
        serializableTypes.add(isArray);
        getMetaTypeInfo(isArray).setSerializable(true);
      }
 else {
        List leafTypes=getSerializableTypesAssignableTo(leafType);
        List covariantLeafTypes=getAllTypesBetweenRootTypeAndSerializableLeaves(leafType.isClassOrInterface(),leafTypes);
        Iterator iter=covariantLeafTypes.iterator();
        while (iter.hasNext()) {
          JClassType clazz=(JClassType)iter.next();
          JArrayType covariantArray=getArrayType(typeOracle,isArray.getRank(),clazz);
          serializableTypes.add(covariantArray);
          getMetaTypeInfo(covariantArray).setSerializable(true);
        }
      }
    }
 else     if (isParameterized != null) {
      JType[] typeArgs=isParameterized.getTypeArgs();
      boolean failed=false;
      for (int i=0; i < typeArgs.length && !failed; ++i) {
        JType typeArg=typeArgs[i];
        failed=(getSerializableTypesAssignableTo(typeArg).size() == 0);
      }
      if (!failed) {
        serializableTypes=getSerializableTypesAssignableTo(isParameterized.getRawType());
      }
    }
 else     if (isClassOrInterface != null) {
      if (getMetaTypeInfo(type).isSerializable()) {
        serializableTypes.add(type);
      }
      JClassType[] subtypes=isClassOrInterface.getSubtypes();
      for (int i=0; i < subtypes.length; ++i) {
        JClassType subtype=subtypes[i];
        if (getMetaTypeInfo(subtype).isSerializable()) {
          serializableTypes.add(subtype);
        }
      }
    }
 else {
      assert(isPrimitive != null && isPrimitive != JPrimitiveType.VOID);
      serializableTypes.add(type);
    }
    mti.setSerializableTypesAssignableToMe(serializableTypes);
  }
  return serializableTypes;
}
