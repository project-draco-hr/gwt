{
  TypeInfo typeInfo=getTypeInfo(classOrInterface);
  JClassType superType=classOrInterface.getSuperclass();
  if (superType != null && getTypeInfo(superType).isDeclaredSerializable()) {
    boolean superTypeOk=checkFields(logger,superType,isSpeculative);
    if (!superTypeOk && !typeInfo.isDirectlySerializable()) {
      return false;
    }
  }
  if (typeInfo.isManuallySerializable()) {
    isSpeculative=true;
  }
  boolean allSucceeded=true;
  JField[] fields=classOrInterface.getFields();
  if (fields.length > 0) {
    TreeLogger localLogger=logger.branch(TreeLogger.DEBUG,"Analyzing Fields:",null);
    for (int i=0; i < fields.length; ++i) {
      JField field=fields[i];
      if (field.isStatic() || field.isTransient()) {
        continue;
      }
      if (field.isFinal()) {
        if (!suppressNonStaticFinalFieldWarnings) {
          localLogger.branch(TreeLogger.WARN,"Field '" + field.toString() + "' will not be serialized because it is final",null);
        }
        continue;
      }
      TreeLogger fieldLogger=localLogger.branch(TreeLogger.DEBUG,field.toString(),null);
      JType fieldType=field.getType();
      if (typeInfo.isManuallySerializable() && fieldType.getLeafType() == typeOracle.getJavaLangObject()) {
        checkAllSubtypesOfObject(fieldLogger.branch(TreeLogger.WARN,"Object was reached from a manually serializable type",null));
      }
 else {
        allSucceeded&=checkTypeInstantiable(fieldLogger,fieldType,isSpeculative,false);
      }
    }
  }
  boolean succeeded=allSucceeded || typeInfo.isManuallySerializable();
  if (succeeded) {
    getTypeInfoComputed(classOrInterface).setFieldSerializable();
  }
  return succeeded;
}
