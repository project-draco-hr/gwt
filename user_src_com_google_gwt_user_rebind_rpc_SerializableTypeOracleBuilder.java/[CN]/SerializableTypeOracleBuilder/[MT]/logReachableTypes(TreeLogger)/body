{
  PrintWriter printWriter=null;
  if (logOutputStream != null) {
    printWriter=new PrintWriter(logOutputStream);
    PrintWriterTreeLogger printWriterTreeLogger=new PrintWriterTreeLogger(printWriter);
    printWriterTreeLogger.setMaxDetail(TreeLogger.ALL);
    logger=printWriterTreeLogger;
  }
  logger.log(TreeLogger.DEBUG,"Reachable types computed on: " + new Date().toString());
  Set<JType> keySet=typeToTypeInfoComputed.keySet();
  JType[] types=keySet.toArray(new JType[0]);
  Arrays.sort(types,JTYPE_COMPARATOR);
  for (  JType type : types) {
    TypeInfoComputed tic=typeToTypeInfoComputed.get(type);
    assert(tic != null);
    TreeLogger typeLogger=logger.branch(TreeLogger.DEBUG,tic.getType().getParameterizedQualifiedSourceName());
    TreeLogger serializationStatus=typeLogger.branch(TreeLogger.DEBUG,"Serialization status");
    if (tic.isInstantiable()) {
      serializationStatus.branch(TreeLogger.DEBUG,"Instantiable");
    }
 else {
      if (tic.isFieldSerializable()) {
        serializationStatus.branch(TreeLogger.DEBUG,"Field serializable");
      }
 else {
        serializationStatus.branch(TreeLogger.DEBUG,"Not serializable");
      }
    }
    TreeLogger pathLogger=typeLogger.branch(TreeLogger.DEBUG,"Path");
    logPath(pathLogger,tic.getPath());
    logger.log(TreeLogger.DEBUG,"");
  }
  if (printWriter != null) {
    printWriter.flush();
  }
}
