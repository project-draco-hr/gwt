{
  TypeInfoComputed typeInfo=getTypeInfoComputed(type,parent);
  if (!isAllowedByFilter(logger,type,isSpeculative)) {
    return false;
  }
  if (!typeInfo.isDeclaredSerializable()) {
    logger.branch(TreeLogger.DEBUG,"Type '" + type.getParameterizedQualifiedSourceName() + "' is not assignable to '"+ IsSerializable.class.getName()+ "' or '"+ Serializable.class.getName()+ "' nor does it have a custom field serializer",null);
    return false;
  }
  if (typeInfo.isManuallySerializable()) {
    List<String> problems=CustomFieldSerializerValidator.validate(typeInfo.getManualSerializer(),type);
    if (!problems.isEmpty()) {
      for (      String problem : problems) {
        logger.branch(getLogLevel(isSpeculative),problem,null);
      }
      return false;
    }
  }
 else {
    assert(typeInfo.isAutoSerializable());
    if (type.isEnum() != null) {
      if (type.isLocalType()) {
        return false;
      }
 else {
        return !type.isPrivate();
      }
    }
    if (type.isPrivate()) {
      return false;
    }
    TreeLogger.Type logLevel=isSpeculative ? TreeLogger.DEBUG : TreeLogger.WARN;
    if (type.isLocalType()) {
      logger.branch(logLevel,type.getParameterizedQualifiedSourceName() + " is a local type; it will be excluded from the set of serializable types",null);
      return false;
    }
    if (type.isMemberType() && !type.isStatic()) {
      logger.branch(logLevel,type.getParameterizedQualifiedSourceName() + " is nested but not static; it will be excluded from the set of serializable types",null);
      return false;
    }
    if (type.isAbstract()) {
      return false;
    }
    if (!type.isDefaultInstantiable()) {
      logger.log(logLevel,"Was not default instantiable (it must have a zero-argument constructor or no constructors at all)",null);
      return false;
    }
  }
  return true;
}
