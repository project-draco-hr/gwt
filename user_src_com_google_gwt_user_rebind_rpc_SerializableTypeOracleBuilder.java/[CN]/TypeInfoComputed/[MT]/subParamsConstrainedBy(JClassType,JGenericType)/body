{
  Map<JTypeParameter,Set<JTypeParameter>> newTypeParameters=new LinkedHashMap<JTypeParameter,Set<JTypeParameter>>();
  JGenericType isGenericSuper=superclass.isGenericType();
  if (isGenericSuper != null) {
    JParameterizedType parameterization=subclass.asParameterizationOf(isGenericSuper);
    JClassType[] paramArgs=parameterization.getTypeArgs();
    for (int i=0; i < paramArgs.length; ++i) {
      Set<JTypeParameter> typeParamsInParamArg=new HashSet<JTypeParameter>();
      recordTypeParametersIn(paramArgs[i],typeParamsInParamArg);
      for (      JTypeParameter arg : typeParamsInParamArg) {
        Set<JTypeParameter> constBy=newTypeParameters.get(arg);
        if (constBy == null) {
          constBy=new LinkedHashSet<JTypeParameter>();
          newTypeParameters.put(arg,constBy);
        }
        constBy.add(isGenericSuper.getTypeParameters()[i]);
      }
    }
  }
  return newTypeParameters;
}
