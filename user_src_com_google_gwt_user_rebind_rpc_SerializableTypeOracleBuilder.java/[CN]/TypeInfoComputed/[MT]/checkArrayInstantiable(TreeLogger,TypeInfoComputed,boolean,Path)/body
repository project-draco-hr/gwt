{
  JArrayType isArray=tic.getType().isArray();
  assert(isArray != null);
  JType leafType=isArray.getLeafType();
  JClassType leafClass=leafType.isClassOrInterface();
  JTypeParameter isLeafTypeParameter=leafType.isTypeParameter();
  if (isLeafTypeParameter != null && !typeParametersInRootTypes.contains(isLeafTypeParameter)) {
    tic.setInstantiable(false);
    tic.setInstantiableSubytpes(true);
    return true;
  }
  TreeLogger branch=localLogger.branch(TreeLogger.DEBUG,"Analyzing component type:",null);
  Set<JClassType> instantiableTypes=new HashSet<JClassType>();
  boolean succeeded=checkTypeInstantiable(branch,isArray.getComponentType(),isSpeculative,createArrayComponentPath(isArray,path),instantiableTypes);
  if (succeeded && leafClass != null) {
    for (    JClassType instantiableType : TypeHierarchyUtils.getAllTypesBetweenRootTypeAndLeaves(leafClass,instantiableTypes)) {
      if (!isAccessibleToSerializer(instantiableType)) {
        continue;
      }
      for (int rank=1; rank <= isArray.getRank(); ++rank) {
        JArrayType covariantArray=getArrayType(typeOracle,rank,instantiableType);
        TypeInfoComputed covariantArrayTic=getTypeInfoComputed(covariantArray,path);
        covariantArrayTic.setInstantiable(true);
      }
    }
  }
  tic.setInstantiable(succeeded);
  return succeeded;
}
