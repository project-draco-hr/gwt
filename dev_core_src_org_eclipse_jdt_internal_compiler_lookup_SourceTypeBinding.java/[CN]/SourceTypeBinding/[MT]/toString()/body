{
  StringBuffer buffer=new StringBuffer(30);
  buffer.append("(id=");
  if (this.id == TypeIds.NoId)   buffer.append("NoId");
 else   buffer.append(this.id);
  buffer.append(")\n");
  if (isDeprecated())   buffer.append("deprecated ");
  if (isPublic())   buffer.append("public ");
  if (isProtected())   buffer.append("protected ");
  if (isPrivate())   buffer.append("private ");
  if (isAbstract() && isClass())   buffer.append("abstract ");
  if (isStatic() && isNestedType())   buffer.append("static ");
  if (isFinal())   buffer.append("final ");
  if (isEnum())   buffer.append("enum ");
 else   if (isAnnotationType())   buffer.append("@interface ");
 else   if (isClass())   buffer.append("class ");
 else   buffer.append("interface ");
  buffer.append((this.compoundName != null) ? CharOperation.toString(this.compoundName) : "UNNAMED TYPE");
  if (this.typeVariables == null) {
    buffer.append("<NULL TYPE VARIABLES>");
  }
 else   if (this.typeVariables != Binding.NO_TYPE_VARIABLES) {
    buffer.append("<");
    for (int i=0, length=this.typeVariables.length; i < length; i++) {
      if (i > 0)       buffer.append(", ");
      if (this.typeVariables[i] == null) {
        buffer.append("NULL TYPE VARIABLE");
        continue;
      }
      char[] varChars=this.typeVariables[i].toString().toCharArray();
      buffer.append(varChars,1,varChars.length - 2);
    }
    buffer.append(">");
  }
  buffer.append("\n\textends ");
  buffer.append((this.superclass != null) ? this.superclass.debugName() : "NULL TYPE");
  if (this.superInterfaces != null) {
    if (this.superInterfaces != Binding.NO_SUPERINTERFACES) {
      buffer.append("\n\timplements : ");
      for (int i=0, length=this.superInterfaces.length; i < length; i++) {
        if (i > 0)         buffer.append(", ");
        buffer.append((this.superInterfaces[i] != null) ? this.superInterfaces[i].debugName() : "NULL TYPE");
      }
    }
  }
 else {
    buffer.append("NULL SUPERINTERFACES");
  }
  if (enclosingType() != null) {
    buffer.append("\n\tenclosing type : ");
    buffer.append(enclosingType().debugName());
  }
  if (this.fields != null) {
    if (this.fields != Binding.NO_FIELDS) {
      buffer.append("\n/*   fields   */");
      for (int i=0, length=this.fields.length; i < length; i++)       buffer.append('\n').append((this.fields[i] != null) ? this.fields[i].toString() : "NULL FIELD");
    }
  }
 else {
    buffer.append("NULL FIELDS");
  }
  if (this.methods != null) {
    if (this.methods != Binding.NO_METHODS) {
      buffer.append("\n/*   methods   */");
      for (int i=0, length=this.methods.length; i < length; i++)       buffer.append('\n').append((this.methods[i] != null) ? this.methods[i].toString() : "NULL METHOD");
    }
  }
 else {
    buffer.append("NULL METHODS");
  }
  if (this.memberTypes != null) {
    if (this.memberTypes != Binding.NO_MEMBER_TYPES) {
      buffer.append("\n/*   members   */");
      for (int i=0, length=this.memberTypes.length; i < length; i++)       buffer.append('\n').append((this.memberTypes[i] != null) ? this.memberTypes[i].toString() : "NULL TYPE");
    }
  }
 else {
    buffer.append("NULL MEMBER TYPES");
  }
  buffer.append("\n\n");
  return buffer.toString();
}
