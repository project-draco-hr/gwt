{
  if ((field.modifiers & ExtraCompilerModifiers.AccUnresolved) == 0)   return field;
  if (this.scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5) {
    if ((field.getAnnotationTagBits() & TagBits.AnnotationDeprecated) != 0)     field.modifiers|=ClassFileConstants.AccDeprecated;
  }
  if (isViewedAsDeprecated() && !field.isDeprecated())   field.modifiers|=ExtraCompilerModifiers.AccDeprecatedImplicitly;
  if (hasRestrictedAccess())   field.modifiers|=ExtraCompilerModifiers.AccRestrictedAccess;
  FieldDeclaration[] fieldDecls=this.scope.referenceContext.fields;
  for (int f=0, length=fieldDecls.length; f < length; f++) {
    if (fieldDecls[f].binding != field)     continue;
    MethodScope initializationScope=field.isStatic() ? this.scope.referenceContext.staticInitializerScope : this.scope.referenceContext.initializerScope;
    FieldBinding previousField=initializationScope.initializedField;
    try {
      initializationScope.initializedField=field;
      FieldDeclaration fieldDecl=fieldDecls[f];
      TypeBinding fieldType=fieldDecl.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT ? initializationScope.environment().convertToRawType(this,false) : fieldDecl.type.resolveType(initializationScope,true);
      field.type=fieldType;
      field.modifiers&=~ExtraCompilerModifiers.AccUnresolved;
      if (fieldType == null) {
        fieldDecl.binding=null;
        return null;
      }
      if (fieldType == TypeBinding.VOID) {
        this.scope.problemReporter().variableTypeCannotBeVoid(fieldDecl);
        fieldDecl.binding=null;
        return null;
      }
      if (fieldType.isArrayType() && ((ArrayBinding)fieldType).leafComponentType == TypeBinding.VOID) {
        this.scope.problemReporter().variableTypeCannotBeVoidArray(fieldDecl);
        fieldDecl.binding=null;
        return null;
      }
      if ((fieldType.tagBits & TagBits.HasMissingType) != 0) {
        field.tagBits|=TagBits.HasMissingType;
      }
      TypeBinding leafType=fieldType.leafComponentType();
      if (leafType instanceof ReferenceBinding && (((ReferenceBinding)leafType).modifiers & ExtraCompilerModifiers.AccGenericSignature) != 0) {
        field.modifiers|=ExtraCompilerModifiers.AccGenericSignature;
      }
    }
  finally {
      initializationScope.initializedField=previousField;
    }
    return field;
  }
  return null;
}
