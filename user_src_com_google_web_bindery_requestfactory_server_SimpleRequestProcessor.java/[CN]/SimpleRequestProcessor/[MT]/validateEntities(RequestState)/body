{
  List<ViolationMessage> errorMessages=new ArrayList<ViolationMessage>();
  for (  Map.Entry<SimpleProxyId<?>,AutoBean<? extends BaseProxy>> entry : source.beans.entrySet()) {
    AutoBean<? extends BaseProxy> bean=entry.getValue();
    Object domainObject=bean.getTag(Constants.DOMAIN_OBJECT);
    if (domainObject != null) {
      Set<ConstraintViolation<Object>> errors=service.validate(domainObject);
      if (errors != null && !errors.isEmpty()) {
        SimpleProxyId<?> id=entry.getKey();
        for (        ConstraintViolation<Object> error : errors) {
          IdMessage rootId=FACTORY.id().as();
          rootId.setClientId(id.getClientId());
          rootId.setTypeToken(service.resolveTypeToken(id.getProxyClass()));
          if (id.isEphemeral()) {
            rootId.setStrength(Strength.EPHEMERAL);
          }
 else {
            rootId.setServerId(toBase64(id.getServerId()));
          }
          IdMessage leafId=null;
          if (error.getLeafBean() != null) {
            SimpleProxyId<?> stableId=source.getStableId(error.getLeafBean());
            if (stableId != null) {
              leafId=FACTORY.id().as();
              leafId.setClientId(stableId.getClientId());
              leafId.setTypeToken(service.resolveTypeToken(stableId.getProxyClass()));
              if (stableId.isEphemeral()) {
                leafId.setStrength(Strength.EPHEMERAL);
              }
 else {
                leafId.setServerId(toBase64(stableId.getServerId()));
              }
            }
          }
          ViolationMessage message=FACTORY.violation().as();
          message.setLeafBeanId(leafId);
          message.setMessage(error.getMessage());
          message.setMessageTemplate(error.getMessageTemplate());
          message.setPath(error.getPropertyPath().toString());
          message.setRootBeanId(rootId);
          errorMessages.add(message);
        }
      }
    }
  }
  return errorMessages;
}
