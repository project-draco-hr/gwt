{
  if (lhsType == rhsType) {
    return true;
  }
  if (lhsType == lhsType.getOracle().getJavaLangObject()) {
    return true;
  }
  if (lhsType.isGenericType() != null) {
    lhsType=lhsType.isGenericType().getRawType();
  }
  if (rhsType.isGenericType() != null) {
    rhsType=rhsType.isGenericType().getRawType();
  }
  JTypeParameter lhsTypeParam=lhsType.isTypeParameter();
  JTypeParameter rhsTypeParam=rhsType.isTypeParameter();
  if (lhsTypeParam != null) {
    JClassType[] lhsTypeBounds=lhsTypeParam.getBounds();
    for (    JClassType lhsTypeBound : lhsTypeBounds) {
      if (!areClassTypesAssignable(lhsTypeBound,rhsType)) {
        return false;
      }
    }
    return true;
  }
 else   if (rhsTypeParam != null) {
    JClassType[] possibleSubtypeBounds=rhsTypeParam.getBounds();
    for (    JClassType possibleSubtypeBound : possibleSubtypeBounds) {
      if (areClassTypesAssignable(lhsType,possibleSubtypeBound)) {
        return true;
      }
    }
    return false;
  }
  JWildcardType lhsWildcard=lhsType.isWildcard();
  JWildcardType rhsWildcard=rhsType.isWildcard();
  if (lhsWildcard != null && rhsWildcard != null) {
    return areWildcardsAssignable(lhsWildcard,rhsWildcard);
  }
 else   if (lhsWildcard != null) {
    JClassType[] lowerBounds=lhsWildcard.getLowerBounds();
    if (lowerBounds.length > 0) {
      return true;
    }
 else {
      return areClassTypesAssignable(lhsWildcard.getFirstBound(),rhsType);
    }
  }
  JArrayType lhsArray=lhsType.isArray();
  JArrayType rhsArray=rhsType.isArray();
  if (lhsArray != null) {
    if (rhsArray == null) {
      return false;
    }
 else {
      return areArraysAssignable(lhsArray,rhsArray);
    }
  }
 else   if (rhsArray != null) {
    return false;
  }
  JMaybeParameterizedType lhsMaybeParameterized=lhsType.isMaybeParameterizedType();
  JMaybeParameterizedType rhsMaybeParameterized=rhsType.isMaybeParameterizedType();
  if (lhsMaybeParameterized != null && rhsMaybeParameterized != null) {
    if (lhsMaybeParameterized.getBaseType() == rhsMaybeParameterized.getBaseType()) {
      if (lhsMaybeParameterized.isRawType() != null || rhsMaybeParameterized.isRawType() != null) {
        return true;
      }
      assert(lhsMaybeParameterized.isRawType() == null && rhsMaybeParameterized.isRawType() == null);
      JParameterizedType lhsParameterized=lhsMaybeParameterized.isParameterized();
      JParameterizedType rhsParameterized=rhsMaybeParameterized.isParameterized();
      assert(lhsParameterized != null && rhsParameterized != null);
      return areTypeArgumentsAssignable(lhsParameterized,rhsParameterized);
    }
  }
  return false;
}
