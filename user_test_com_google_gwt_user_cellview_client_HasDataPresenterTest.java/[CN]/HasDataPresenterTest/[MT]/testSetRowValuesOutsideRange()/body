{
  HasData<String> listView=new MockHasData<String>();
  MockView<String> view=new MockView<String>();
  HasDataPresenter<String> presenter=new HasDataPresenter<String>(listView,view,10);
  presenter.setVisibleRange(new Range(5,10));
  view.assertLoadingState(LoadingState.LOADING);
  List<String> expectedData=createData(5,10);
  presenter.setRowValues(5,createData(5,10));
  assertEquals(10,presenter.getRowValues().size());
  assertEquals(expectedData,presenter.getRowValues());
  view.assertReplaceAllChildrenCalled(true);
  view.assertReplaceChildrenCalled(false);
  view.assertLastHtml("start=5,size=10");
  view.assertLoadingState(LoadingState.LOADED);
  presenter.setRowValues(15,createData(15,5));
  assertEquals(10,presenter.getRowValues().size());
  assertEquals(expectedData,presenter.getRowValues());
  view.assertReplaceAllChildrenCalled(false);
  view.assertReplaceChildrenCalled(false);
  view.assertLastHtml(null);
  view.assertLoadingState(LoadingState.LOADED);
  presenter.setRowValues(0,createData(0,5));
  assertEquals(10,presenter.getRowValues().size());
  assertEquals(expectedData,presenter.getRowValues());
  view.assertReplaceAllChildrenCalled(false);
  view.assertReplaceChildrenCalled(false);
  view.assertLastHtml(null);
  view.assertLoadingState(LoadingState.LOADED);
}
