{
  if (!isAllowedByFilter(logger,filter,type,isSpeculative)) {
    return false;
  }
  if (!isDeclaredSerializable(type)) {
    logger.branch(TreeLogger.DEBUG,"Type '" + type.getParameterizedQualifiedSourceName() + "' is not assignable to '"+ IsSerializable.class.getName()+ "' or '"+ Serializable.class.getName()+ "' nor does it have a custom field serializer",null);
    return false;
  }
  if (isManuallySerializable(type)) {
    JClassType manualSerializer=findCustomFieldSerializer(type.getOracle(),type);
    assert(manualSerializer != null);
    List<String> problems=CustomFieldSerializerValidator.validate(manualSerializer,type);
    if (!problems.isEmpty()) {
      for (      String problem : problems) {
        logger.branch(getLogLevel(isSpeculative),problem,null);
      }
      return false;
    }
  }
 else {
    assert(isAutoSerializable(type));
    TreeLogger.Type logLevel=isSpeculative ? TreeLogger.DEBUG : TreeLogger.WARN;
    if (!isAccessibleToSerializer(type)) {
      logger.branch(logLevel,type.getParameterizedQualifiedSourceName() + " is not accessible from a class in its same package; it will be excluded from the set of serializable types",null);
      return false;
    }
    if (type.isMemberType() && !type.isStatic()) {
      logger.branch(logLevel,type.getParameterizedQualifiedSourceName() + " is nested but not static; it will be excluded from the set of serializable types",null);
      return false;
    }
  }
  return true;
}
