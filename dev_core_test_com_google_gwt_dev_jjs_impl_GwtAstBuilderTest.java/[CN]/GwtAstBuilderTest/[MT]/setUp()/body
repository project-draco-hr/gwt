{
  sources.addAll(sourceOracle.getResources());
  sources.add(JavaResourceBase.createMockJavaResource("test.DalNavigationTile","package test;","public class DalNavigationTile extends DalTile {","}"));
  sources.add(JavaResourceBase.createMockJavaResource("test.DalTile","package test;","public class DalTile {" + "{ new DalRow().getTiles();" + "}","}"));
  sources.add(JavaResourceBase.createMockJavaResource("test.DalGrid","package test;","public class DalGrid {","  public DalNavigationTile getNavigationTile() {" + "  DalRow row = new DalRow();" + "  DalNavigationTile found = null;"+ "  for (DalTile dalTile : row.getTiles()) {"+ "    if (dalTile instanceof DalNavigationTile) {"+ "      found = (DalNavigationTile) dalTile;"+ "      break;"+ "    }"+ "  }"+ "  return found;"+ "}","}"));
  sources.add(JavaResourceBase.createMockJavaResource("test.DalRow","package test;","public class DalRow {" + "  public DalTile[] getTiles() {" + "    int length = 5;"+ "    DalTile[] result = new DalTile[length];"+ "    for (int i = 0; i < length; i++) {"+ "      result[i] = new DalTile();"+ "    }"+ "    return result;"+ "  }","}"));
  sources.add(JavaResourceBase.createMockJavaResource("test.NestedClasses","package test;","public class NestedClasses {","  static class StaticNestedClass {}","  class InnerNestedClass {}","  interface Lambda { void run(); }","  public static void referencedMethod() {}","  public void m() {","    class LocalClass {}","    Object anonymousInner = new Object(){};","    Lambda lambda = () -> {};","    Lambda methodRef = NestedClasses::referencedMethod;","  }","}"));
  sourceLevel=SourceLevel.DEFAULT_SOURCE_LEVEL;
}
