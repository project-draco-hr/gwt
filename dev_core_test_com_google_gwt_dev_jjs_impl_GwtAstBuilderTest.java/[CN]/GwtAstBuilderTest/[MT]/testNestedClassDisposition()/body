{
  sourceLevel=SourceLevel.JAVA8;
  sources.add(JavaResourceBase.createMockJavaResource("test.NestedClasses","package test;","public class NestedClasses {","  static class StaticNestedClass {}","  class InnerNestedClass {}","  interface Lambda { void run(); }","  public static void referencedMethod() {}","  public void m() {","    class LocalClass {}","    Object anonymousInner = new Object(){};","    Lambda lambda = () -> {};","    Lambda methodRef = NestedClasses::referencedMethod;","  }","}"));
  JProgram program=compileProgram("test.NestedClasses");
  JDeclaredType staticNested=program.getFromTypeMap("test.NestedClasses$StaticNestedClass");
  assertEquals(JDeclaredType.NestedClassDisposition.STATIC,staticNested.getClassDisposition());
  JDeclaredType innerNested=program.getFromTypeMap("test.NestedClasses$InnerNestedClass");
  assertEquals(JDeclaredType.NestedClassDisposition.INNER,innerNested.getClassDisposition());
  JDeclaredType localNested=program.getFromTypeMap("test.NestedClasses$1LocalClass");
  assertEquals(JDeclaredType.NestedClassDisposition.LOCAL,localNested.getClassDisposition());
  JDeclaredType anonymousNested=program.getFromTypeMap("test.NestedClasses$1");
  assertEquals(JDeclaredType.NestedClassDisposition.ANONYMOUS,anonymousNested.getClassDisposition());
  JDeclaredType lambdaNested=program.getFromTypeMap("test.NestedClasses$lambda$0$Type");
  assertEquals(JDeclaredType.NestedClassDisposition.LAMBDA,lambdaNested.getClassDisposition());
  JDeclaredType referenceNested=program.getFromTypeMap("test.NestedClasses$Lambda$$test$NestedClasses$referencedMethod__V$Type");
  assertEquals(JDeclaredType.NestedClassDisposition.LAMBDA,referenceNested.getClassDisposition());
  JDeclaredType topLevel=program.getFromTypeMap("test.NestedClasses");
  assertEquals(JDeclaredType.NestedClassDisposition.TOP_LEVEL,topLevel.getClassDisposition());
}
