{
  Map parameterizedMethods=getParameterizedTestMethods(getRequestedClass(),logger);
  SourceWriter sw=getSourceWriter();
  JClassType type=getRequestedClass();
  for (Iterator it=parameterizedMethods.entrySet().iterator(); it.hasNext(); ) {
    Map.Entry entry=(Map.Entry)it.next();
    String name=(String)entry.getKey();
    JMethod method=(JMethod)entry.getValue();
    JMethod beginMethod=getBeginMethod(type,name);
    JMethod endMethod=getEndMethod(type,name);
    sw.println("public void " + name + "() {");
    sw.indent();
    sw.println("  privateDelayTestFinish( 2000 );");
    sw.println();
    MutableBoolean isBounded=new MutableBoolean();
    Map params=getParamMetaData(method,isBounded);
    validateParams(method,params);
    JParameter[] methodParams=method.getParameters();
    List paramNames=new ArrayList(methodParams.length);
    for (int i=0; i < methodParams.length; ++i) {
      paramNames.add(methodParams[i].getName());
    }
    List paramValues=new ArrayList(methodParams.length);
    for (int i=0; i < methodParams.length; ++i) {
      paramValues.add(params.get(methodParams[i].getName()));
    }
    sw.print("final java.util.List ranges = java.util.Arrays.asList( new com.google.gwt.junit.client.Range[] { ");
    for (int i=0; i < paramNames.size(); ++i) {
      String paramName=(String)paramNames.get(i);
      sw.print((String)params.get(paramName));
      if (i != paramNames.size() - 1) {
        sw.print(",");
      }
 else {
        sw.println("} );");
      }
      sw.print(" ");
    }
    sw.println("final com.google.gwt.junit.client.impl.PermutationIterator permutationIt = new com.google.gwt.junit.client.impl.PermutationIterator( ranges );\n" + "com.google.gwt.user.client.DeferredCommand.addCommand( new com.google.gwt.user.client.IncrementalCommand() {\n" + "  public boolean execute() {\n"+ "    privateDelayTestFinish( 10000 );\n"+ "    if ( permutationIt.hasNext() ) {\n"+ "      com.google.gwt.junit.client.impl.PermutationIterator.Permutation permutation = (com.google.gwt.junit.client.impl.PermutationIterator.Permutation) permutationIt.next();\n");
    for (int i=0; i < methodParams.length; ++i) {
      JParameter methodParam=methodParams[i];
      String typeName=methodParam.getType().getQualifiedSourceName();
      String paramName=(String)paramNames.get(i);
      sw.println("      " + typeName + " "+ paramName+ " = ("+ typeName+ ") permutation.getValues().get("+ i+ ");");
    }
    final String setupTimingName="__setupTiming";
    final String testTimingName="__testTiming";
    sw.println("double " + setupTimingName + " = 0;");
    sw.println("double " + testTimingName + " = 0;");
    Statements setupBench=genBenchTarget(beginMethod,endMethod,paramNames,new Statement(new MethodCall(EMPTY_FUNC,null)));
    Statements testBench=genBenchTarget(beginMethod,endMethod,paramNames,new Statement(new MethodCall(method.getName(),paramNames)));
    StringBuffer recordResultsCode=new StringBuffer("com.google.gwt.junit.client.TestResults results = getTestResults();\n" + "com.google.gwt.junit.client.Trial trial = new com.google.gwt.junit.client.Trial();\n" + "trial.setRunTimeMillis( " + testTimingName + " - "+ setupTimingName+ " );\n"+ "java.util.Map variables = trial.getVariables();\n");
    for (int i=0; i < paramNames.size(); ++i) {
      String paramName=(String)paramNames.get(i);
      recordResultsCode.append("variables.put( \"").append(paramName).append("\", ").append(paramName).append(".toString() );\n");
    }
    recordResultsCode.append("results.getTrials().add( trial )");
    Statements recordCode=new Statement(recordResultsCode.toString());
    Statements breakCode=new Statement("  permutationIt.skipCurrentRange()");
    setupBench=benchmark(setupBench,setupTimingName,false,null,breakCode);
    testBench=benchmark(testBench,testTimingName,isBounded.value,recordCode,breakCode);
    Statements testAndSetup=new StatementsList();
    testAndSetup.getStatements().addAll(setupBench.getStatements());
    testAndSetup.getStatements().addAll(testBench.getStatements());
    sw.println(testAndSetup.toString());
    sw.println("      return true;\n" + "    }\n" + "    privateFinishTest();\n"+ "    return false;\n"+ "  }\n"+ "} );\n");
    sw.outdent();
    sw.println("}");
  }
}
