def BuildTOC(toc_filename, displayname):
    'This will return a list of toplevel TOCNodes, each of which may have\n  nested children.'
    infile = open(toc_filename)
    bytes = infile.read()
    lines = bytes.split('\n')
    out = TOCNode(displayname)
    parentstack = [(out, (-1))]
    previndent = 0
    prevnode = None
    for line in lines:
        if line.startswith('#'):
            continue
        indentlevel = line.find('*')
        if ((-1) == indentlevel):
            continue
        postindent = line[indentlevel:]
        poststar = postindent[2:]
        if poststar.startswith('['):
            splitted = re.split('[\\[\\] ]', poststar)
            wikiWord = splitted[1]
            caption = ' '.join(splitted[2:])
            caption = caption.replace('&', 'and')
            caption = caption.strip()
            tocnode = TOCNode(caption, wikiWord)
        else:
            caption = poststar
            caption = caption.replace('&', 'and')
            caption = caption.strip()
            tocnode = TOCNode(caption)
        if (indentlevel > previndent):
            if prevnode:
                parentstack.append((prevnode, previndent))
        elif (indentlevel < previndent):
            while (parentstack and (parentstack[(-1)][1] >= indentlevel)):
                parentstack.pop()
        parentstack[(-1)][0].addChild(tocnode)
        prevnode = tocnode
        previndent = indentlevel
    return out.AsTree()
