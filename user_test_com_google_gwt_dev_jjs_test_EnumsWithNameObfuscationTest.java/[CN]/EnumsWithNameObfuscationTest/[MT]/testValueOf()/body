{
  try {
    Basic.valueOf("D");
    fail("Basic.valueOf(\"D\") -- expected IllegalArgumentException");
  }
 catch (  IllegalArgumentException expected) {
  }
  try {
    Complex.valueOf("D");
    fail("Complex.valueOf(\"D\") -- expected IllegalArgumentException");
  }
 catch (  IllegalArgumentException expected) {
  }
  try {
    Subclassing.valueOf("D");
    fail("Subclassing.valueOf(\"D\") -- expected IllegalArgumentException");
  }
 catch (  IllegalArgumentException expected) {
  }
  enumValuesTest(Basic.class);
  enumValuesTest(Complex.class);
  enumValuesTest(Subclassing.class);
  try {
    Enum.valueOf(Basic.class,"foo");
    fail("Passed an invalid enum constant name to Enum.valueOf; expected " + "IllegalArgumentException");
  }
 catch (  IllegalArgumentException expected) {
  }
  try {
    Class fakeEnumClass=String.class;
    Enum.valueOf(fakeEnumClass,"foo");
    fail("Passed a non enum class to Enum.valueOf; expected " + "IllegalArgumentException");
  }
 catch (  IllegalArgumentException expected) {
  }
  try {
    Class<Basic> nullEnumClass=null;
    Enum.valueOf(nullEnumClass,"foo");
    fail("Passed a null enum class to Enum.valueOf; expected " + "NullPointerException");
  }
 catch (  NullPointerException expected) {
  }
  try {
    Enum.valueOf(Basic.class,null);
    fail("Passed a null enum constant to Enum.valueOf; expected " + "NullPointerException");
  }
 catch (  NullPointerException expected) {
  }
}
