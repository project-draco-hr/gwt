{
  Class<?>[] paramTypes=method.getParameterTypes();
  int argc=paramTypes.length;
  Object args[]=new Object[argc];
  if (jsargs.length < argc) {
    throw new RuntimeException("Not enough arguments to " + method);
  }
  Object jthis=null;
  if (method.needsThis()) {
    jthis=JsValueGlue.get(jsthis,classLoader,method.getDeclaringClass(),"invoke this");
    if (jthis == null) {
      throw ModuleSpace.createJavaScriptException(classLoader,"Invoking an instance method on a null instance");
    }
  }
  for (int i=0; i < argc; ++i) {
    args[i]=JsValueGlue.get(jsargs[i],classLoader,paramTypes[i],"invoke arguments");
  }
  try {
    Object result;
    try {
      result=method.invoke(jthis,args);
    }
 catch (    IllegalAccessException e) {
      e.printStackTrace();
      throw new RuntimeException(e);
    }
    JsValueGlue.set(returnValue,classLoader,method.getReturnType(),result);
    return false;
  }
 catch (  InstantiationException e) {
    wrapException(returnValue,e.getCause());
    return true;
  }
catch (  InvocationTargetException e) {
    wrapException(returnValue,e.getTargetException());
    return true;
  }
catch (  IllegalArgumentException e) {
    System.err.println("MethodDispatch.invoke, method=" + method.toString() + ": argument mismatch");
    for (int i=0; i < argc; ++i) {
      System.err.println(" param " + i + " type is "+ paramTypes[i].toString()+ " value is type "+ jsargs[i].getTypeString()+ " = "+ args[i].toString());
    }
    throw e;
  }
}
