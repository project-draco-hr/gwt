{
  Throwable caught;
  try {
    String className=getClass().getName();
    String resName=className.replace('.','/') + ".java";
    URL location=getClass().getClassLoader().getResource(resName);
    assertNotNull("Ensure that source is in classpath for: " + resName,location);
    String absPath=new File(new URI(location.toString())).getAbsolutePath();
    int sourcePathEntryLen=absPath.length() - resName.length();
    File sourcePathEntry=new File(absPath.substring(0,sourcePathEntryLen));
    int lastDot=className.lastIndexOf('.');
    String pkgName=(lastDot < 0 ? "test" : className.substring(0,lastDot) + ".test");
    TypeOracleBuilder builder=new TypeOracleBuilder();
    builder.addCompilationUnit(new StaticCompilationUnitProvider("java.lang","Object","package java.lang; public class Object { }".toCharArray()));
    addCompilationUnitsInPath(builder,sourcePathEntry,pkgName);
    return builder.build(logger);
  }
 catch (  URISyntaxException e) {
    caught=e;
  }
catch (  MalformedURLException e) {
    caught=e;
  }
  logger.log(TreeLogger.ERROR,"Failed to build type oracle",caught);
  throw new UnableToCompleteException();
}
