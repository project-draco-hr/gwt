{
  TypeOracle typeOracle=context.getTypeOracle();
  PropertyOracle propertyOracle=context.getPropertyOracle();
  String locale=null;
  String[] localeValues=null;
  try {
    locale=propertyOracle.getPropertyValue(logger,PROP_LOCALE);
    localeValues=propertyOracle.getPropertyValueSet(logger,PROP_LOCALE);
  }
 catch (  BadPropertyValueException e) {
    logger.log(TreeLogger.TRACE,"LocaleInfo used without I18N module, using defaults",e);
    return LocaleInfoImpl.class.getName();
  }
  JClassType targetClass;
  try {
    targetClass=typeOracle.getType(typeName);
  }
 catch (  NotFoundException e) {
    logger.log(TreeLogger.ERROR,"No such type",e);
    throw new UnableToCompleteException();
  }
  assert(LocaleInfoImpl.class.getName().equals(targetClass.getQualifiedSourceName()));
  String packageName=targetClass.getPackage().getName();
  String className=targetClass.getName().replace('.','_') + "_";
  if (!locale.equals("default")) {
    className+=locale;
  }
  String qualName=packageName + "." + className;
  PrintWriter pw=context.tryCreate(logger,packageName,className);
  if (pw != null) {
    ClassSourceFileComposerFactory factory=new ClassSourceFileComposerFactory(packageName,className);
    factory.setSuperclass(targetClass.getQualifiedSourceName());
    factory.addImport("com.google.gwt.core.client.JavaScriptObject");
    SourceWriter writer=factory.createSourceWriter(context,pw);
    writer.println("private JavaScriptObject nativeDisplayNames;");
    writer.println();
    writer.println("public String[] getAvailableLocaleNames() {");
    writer.println("  return new String[] {");
    for (    String propval : localeValues) {
      writer.println("    \"" + propval.replaceAll("\"","\\\"") + "\",");
    }
    writer.println("  };");
    writer.println("}");
    writer.println();
    writer.println("public String getLocaleName() {");
    writer.println("  return \"" + locale + "\";");
    writer.println("}");
    writer.println();
    writer.println("public native String getLocaleNativeDisplayName(String localeName) /*-{");
    writer.println("  this.@" + qualName + "::ensureNativeDisplayNames()();");
    writer.println("  return this.@" + qualName + "::nativeDisplayNames[localeName] || null;");
    writer.println("}-*/;");
    writer.println();
    writer.println("private native void ensureNativeDisplayNames() /*-{");
    writer.println("  if (this.@" + qualName + "::nativeDisplayNames != null) {");
    writer.println("    return;");
    writer.println("  }");
    writer.println("  this.@" + qualName + "::nativeDisplayNames = {");
    LocalizedProperties displayNames=new LocalizedProperties();
    LocalizedProperties displayNamesManual=new LocalizedProperties();
    LocalizedProperties displayNamesOverride=new LocalizedProperties();
    ClassLoader classLoader=getClass().getClassLoader();
    try {
      InputStream str=classLoader.getResourceAsStream(GENERATED_LOCALE_NATIVE_DISPLAY_NAMES);
      if (str != null) {
        displayNames.load(str,"UTF-8");
      }
      str=classLoader.getResourceAsStream(MANUAL_LOCALE_NATIVE_DISPLAY_NAMES);
      if (str != null) {
        displayNamesManual.load(str,"UTF-8");
      }
      str=classLoader.getResourceAsStream(OVERRIDE_LOCALE_NATIVE_DISPLAY_NAMES);
      if (str != null) {
        displayNamesOverride.load(str,"UTF-8");
      }
    }
 catch (    UnsupportedEncodingException e) {
      logger.log(TreeLogger.ERROR,"UTF-8 encoding is not defined",e);
      throw new UnableToCompleteException();
    }
catch (    IOException e) {
      logger.log(TreeLogger.ERROR,"Exception reading locale display names",e);
      throw new UnableToCompleteException();
    }
    boolean needComma=false;
    for (    String propval : localeValues) {
      String displayName=displayNamesOverride.getProperty(propval);
      if (displayName == null) {
        displayName=displayNamesManual.getProperty(propval);
      }
      if (displayName == null) {
        displayName=displayNames.getProperty(propval);
      }
      if (displayName != null && displayName.length() != 0) {
        propval.replace("\"","\\\"");
        displayName.replace("\"","\\\"");
        if (needComma) {
          writer.println(",");
        }
        writer.print("    \"" + propval + "\": \""+ displayName+ "\"");
        needComma=true;
      }
    }
    if (needComma) {
      writer.println();
    }
    writer.println("  };");
    writer.println("}-*/;");
    writer.commit(logger);
  }
  return packageName + "." + className;
}
