{
  TypeOracle typeOracle=context.getTypeOracle();
  PropertyOracle propertyOracle=context.getPropertyOracle();
  LocaleUtils.init(logger,propertyOracle);
  JClassType targetClass;
  try {
    targetClass=typeOracle.getType(typeName);
  }
 catch (  NotFoundException e) {
    logger.log(TreeLogger.ERROR,"No such type " + typeName,e);
    throw new UnableToCompleteException();
  }
  assert(LocaleInfoImpl.class.getName().equals(targetClass.getQualifiedSourceName()));
  String packageName=targetClass.getPackage().getName();
  String superClassName=targetClass.getName().replace('.','_') + "_shared";
  Set<GwtLocale> localeSet=LocaleUtils.getAllLocales();
  GwtLocaleImpl[] allLocales=localeSet.toArray(new GwtLocaleImpl[localeSet.size()]);
  Arrays.sort(allLocales);
  PrintWriter pw=context.tryCreate(logger,packageName,superClassName);
  if (pw != null) {
    String qualName=packageName + "." + superClassName;
    ClassSourceFileComposerFactory factory=new ClassSourceFileComposerFactory(packageName,superClassName);
    factory.setSuperclass(targetClass.getQualifiedSourceName());
    factory.addImport("com.google.gwt.core.client.JavaScriptObject");
    SourceWriter writer=factory.createSourceWriter(context,pw);
    writer.println("private JavaScriptObject nativeDisplayNames;");
    writer.println();
    writer.println("@Override");
    writer.println("public String[] getAvailableLocaleNames() {");
    writer.println("  return new String[] {");
    for (    GwtLocaleImpl possibleLocale : allLocales) {
      writer.println("    \"" + possibleLocale.toString().replaceAll("\"","\\\"") + "\",");
    }
    writer.println("  };");
    writer.println("}");
    writer.println();
    writer.println("@Override");
    writer.println("public native String getLocaleNativeDisplayName(String localeName) /*-{");
    writer.println("  this.@" + qualName + "::ensureNativeDisplayNames()();");
    writer.println("  return this.@" + qualName + "::nativeDisplayNames[localeName];");
    writer.println("}-*/;");
    writer.println();
    writer.println("private native void ensureNativeDisplayNames() /*-{");
    writer.println("  if (this.@" + qualName + "::nativeDisplayNames != null) {");
    writer.println("    return;");
    writer.println("  }");
    writer.println("  this.@" + qualName + "::nativeDisplayNames = {");
    LocalizedProperties displayNames=new LocalizedProperties();
    LocalizedProperties displayNamesManual=new LocalizedProperties();
    LocalizedProperties displayNamesOverride=new LocalizedProperties();
    ClassLoader classLoader=getClass().getClassLoader();
    try {
      InputStream str=classLoader.getResourceAsStream(GENERATED_LOCALE_NATIVE_DISPLAY_NAMES);
      if (str != null) {
        displayNames.load(str,"UTF-8");
      }
      str=classLoader.getResourceAsStream(MANUAL_LOCALE_NATIVE_DISPLAY_NAMES);
      if (str != null) {
        displayNamesManual.load(str,"UTF-8");
      }
      str=classLoader.getResourceAsStream(OVERRIDE_LOCALE_NATIVE_DISPLAY_NAMES);
      if (str != null) {
        displayNamesOverride.load(str,"UTF-8");
      }
    }
 catch (    UnsupportedEncodingException e) {
      logger.log(TreeLogger.ERROR,"UTF-8 encoding is not defined",e);
      throw new UnableToCompleteException();
    }
catch (    IOException e) {
      logger.log(TreeLogger.ERROR,"Exception reading locale display names",e);
      throw new UnableToCompleteException();
    }
    boolean needComma=false;
    for (    GwtLocaleImpl possibleLocale : allLocales) {
      String localeName=possibleLocale.toString();
      String displayName=displayNamesOverride.getProperty(localeName);
      if (displayName == null) {
        displayName=displayNamesManual.getProperty(localeName);
      }
      if (displayName == null) {
        displayName=displayNames.getProperty(localeName);
      }
      if (displayName != null && displayName.length() != 0) {
        localeName=quoteQuotes(localeName);
        displayName=quoteQuotes(displayName);
        if (needComma) {
          writer.println(",");
        }
        writer.print("    \"" + localeName + "\": \""+ displayName+ "\"");
        needComma=true;
      }
    }
    if (needComma) {
      writer.println();
    }
    writer.println("  };");
    writer.println("}-*/;");
    writer.commit(logger);
  }
  GwtLocale locale=LocaleUtils.getCompileLocale();
  String className=targetClass.getName().replace('.','_') + "_" + locale.getAsString();
  Set<GwtLocale> runtimeLocales=LocaleUtils.getRuntimeLocales();
  if (!runtimeLocales.isEmpty()) {
    className+="_runtimeSelection";
  }
  pw=context.tryCreate(logger,packageName,className);
  if (pw != null) {
    ClassSourceFileComposerFactory factory=new ClassSourceFileComposerFactory(packageName,className);
    factory.setSuperclass(superClassName);
    factory.addImport("com.google.gwt.core.client.GWT");
    factory.addImport("com.google.gwt.i18n.client.LocaleInfo");
    factory.addImport("com.google.gwt.i18n.client.constants.NumberConstants");
    factory.addImport("com.google.gwt.i18n.client.constants.NumberConstantsImpl");
    factory.addImport("com.google.gwt.i18n.client.constants.DateTimeConstants");
    factory.addImport("com.google.gwt.i18n.client.constants.DateTimeConstantsImpl");
    SourceWriter writer=factory.createSourceWriter(context,pw);
    writer.println("@Override");
    writer.println("public String getLocaleName() {");
    if (runtimeLocales.isEmpty()) {
      writer.println("  return \"" + locale + "\";");
    }
 else {
      writer.println("  String rtLocale = getRuntimeLocale();");
      writer.println("  return rtLocale != null ? rtLocale : \"" + locale + "\";");
    }
    writer.println("}");
    writer.println();
    writer.println("@Override");
    writer.println("public DateTimeConstants getDateTimeConstants() {");
    LocalizableGenerator localizableGenerator=new LocalizableGenerator();
    @SuppressWarnings("hiding") GeneratorContext subContext=new CachedGeneratorContext(context);
    generateConstantsLookup(logger,subContext,writer,localizableGenerator,runtimeLocales,locale,"com.google.gwt.i18n.client.constants.DateTimeConstantsImpl");
    writer.println("}");
    writer.println();
    writer.println("@Override");
    writer.println("public NumberConstants getNumberConstants() {");
    generateConstantsLookup(logger,subContext,writer,localizableGenerator,runtimeLocales,locale,"com.google.gwt.i18n.client.constants.NumberConstantsImpl");
    writer.println("}");
    writer.commit(logger);
  }
  return packageName + "." + className;
}
