{
  TypeOracle typeOracle=context.getTypeOracle();
  PropertyOracle propertyOracle=context.getPropertyOracle();
  String locale;
  try {
    locale=propertyOracle.getPropertyValue(logger,PROP_LOCALE);
  }
 catch (  BadPropertyValueException e) {
    logger.log(TreeLogger.ERROR,"Could not parse specified locale",e);
    throw new UnableToCompleteException();
  }
  JClassType targetClass;
  try {
    targetClass=typeOracle.getType(typeName);
  }
 catch (  NotFoundException e) {
    logger.log(TreeLogger.ERROR,"No such type",e);
    throw new UnableToCompleteException();
  }
  assert(LocaleInfoImpl.class.getName().equals(targetClass.getQualifiedSourceName()));
  String packageName=targetClass.getPackage().getName();
  String className=targetClass.getName().replace('.','_') + "_";
  if (!locale.equals("default")) {
    className+=locale;
  }
  PrintWriter pw=context.tryCreate(logger,packageName,className);
  if (pw != null) {
    ClassSourceFileComposerFactory factory=new ClassSourceFileComposerFactory(packageName,className);
    factory.addImplementedInterface(targetClass.getQualifiedSourceName());
    SourceWriter writer=factory.createSourceWriter(context,pw);
    writer.println("private static final String[] availableLocales = new String[] {");
    try {
      for (      String propval : propertyOracle.getPropertyValueSet(logger,PROP_LOCALE)) {
        writer.println("  \"" + propval.replaceAll("\"","\\\"") + "\",");
      }
    }
 catch (    BadPropertyValueException e) {
      logger.log(TreeLogger.ERROR,"No locale property defined -- did you inherit the I18N module?",e);
      throw new UnableToCompleteException();
    }
    writer.println("};");
    writer.println();
    writer.println("public String getLocaleName() {");
    writer.println("  return \"" + locale + "\";");
    writer.println("}");
    writer.println();
    writer.println("public String[] getAvailableLocaleNames() {");
    writer.println("  return availableLocales;");
    writer.println("}");
    writer.commit(logger);
  }
  return packageName + "." + className;
}
