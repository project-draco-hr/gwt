{
  assertEquals(1,Character.charCount(65));
  assertEquals(2,Character.charCount(Character.MIN_SUPPLEMENTARY_CODE_POINT));
  char[] testPlain=new char[]{'C','A','T'};
  char[] testUnicode=new char[]{'C','\uD801','\uDF00','T'};
  CharSequence plainSequence=new CharSequenceAdapter(testPlain);
  CharSequence unicodeSequence=new CharSequenceAdapter(testUnicode);
  assertEquals(65,Character.codePointAt(testPlain,1));
  assertEquals(65,Character.codePointAt(plainSequence,1));
  assertEquals("codePointAt fails on surrogate pair",67328,Character.codePointAt(testUnicode,1));
  assertEquals("codePointAt fails on surrogate pair",67328,Character.codePointAt(unicodeSequence,1));
  assertEquals("codePointAt fails on first char of surrogate pair",0xD801,Character.codePointAt(testUnicode,1,2));
  assertEquals(65,Character.codePointBefore(testPlain,2));
  assertEquals(65,Character.codePointBefore(plainSequence,2));
  assertEquals("codePointBefore fails on surrogate pair",67328,Character.codePointBefore(testUnicode,3));
  assertEquals("codePointBefore fails on surrogate pair",67328,Character.codePointBefore(unicodeSequence,3));
  assertEquals("codePointBefore fails on second char of surrogate pair",0xDF00,Character.codePointBefore(testUnicode,3,2));
  assertEquals("codePointCount(plain): ",3,Character.codePointCount(testPlain,0,3));
  assertEquals("codePointCount(plain): ",3,Character.codePointCount(plainSequence,0,3));
  assertEquals("codePointCount(unicode): ",3,Character.codePointCount(testUnicode,0,4));
  assertEquals("codePointCount(unicode): ",3,Character.codePointCount(unicodeSequence,0,4));
  assertEquals(1,Character.codePointCount(testPlain,1,1));
  assertEquals(1,Character.codePointCount(plainSequence,1,2));
  assertEquals(1,Character.codePointCount(testUnicode,1,2));
  assertEquals(1,Character.codePointCount(unicodeSequence,1,3));
  assertEquals(2,Character.codePointCount(testUnicode,2,2));
  assertEquals(2,Character.codePointCount(unicodeSequence,2,4));
  assertEquals(1,Character.offsetByCodePoints(testUnicode,0,4,0,1));
  assertEquals(1,Character.offsetByCodePoints(unicodeSequence,0,1));
  assertEquals("offsetByCodePoints(1,1): ",3,Character.offsetByCodePoints(testUnicode,0,4,1,1));
  assertEquals("offsetByCodePoints(1,1): ",3,Character.offsetByCodePoints(unicodeSequence,1,1));
  assertEquals("offsetByCodePoints(2,1): ",3,Character.offsetByCodePoints(testUnicode,0,4,2,1));
  assertEquals("offsetByCodePoints(2,1): ",3,Character.offsetByCodePoints(unicodeSequence,2,1));
  assertEquals(4,Character.offsetByCodePoints(testUnicode,0,4,3,1));
  assertEquals(4,Character.offsetByCodePoints(unicodeSequence,3,1));
  assertEquals(1,Character.offsetByCodePoints(testUnicode,0,4,2,-1));
  assertEquals(1,Character.offsetByCodePoints(unicodeSequence,2,-1));
  assertEquals(1,Character.offsetByCodePoints(testUnicode,0,4,3,-1));
  assertEquals(1,Character.offsetByCodePoints(unicodeSequence,3,-1));
  assertEquals("offsetByCodePoints(4.-1): ",3,Character.offsetByCodePoints(testUnicode,0,4,4,-1));
  assertEquals("offsetByCodePoints(4.-1): ",3,Character.offsetByCodePoints(unicodeSequence,4,-1));
  assertEquals(0,Character.offsetByCodePoints(testUnicode,0,4,3,-2));
  assertEquals(0,Character.offsetByCodePoints(unicodeSequence,3,-2));
  char[] nonBmpChar=new char[]{'\uD800','\uDF46'};
  assertEquals(0x10346,Character.codePointAt(nonBmpChar,0));
  assertEquals(1,Character.codePointCount(nonBmpChar,0,2));
}
