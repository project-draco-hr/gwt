{
  try {
    CompilerContext oldCompilerContext=new CompilerContext();
    oldCompilerContext.getOptions().setStrict(true);
    CompilationState oldState=CompilationStateBuilder.buildFrom(logger,oldCompilerContext,resources);
    oldState.addGeneratedCompilationUnits(logger,generatedUnits);
    MockLibrary oldLibrary=new MockLibrary("OldLib");
    Collection<CompilationUnit> oldCompilationUnits=Lists.newArrayList(oldState.getCompilationUnits());
    CompilationUnitInvalidator.retainValidUnits(logger,oldCompilationUnits,oldState.getValidClasses(),new CompilationErrorsIndexImpl());
    for (    CompilationUnit compilationUnit : oldCompilationUnits) {
      oldLibrary.addCompilationUnit(compilationUnit);
    }
    LibraryGroup libraryGroup=LibraryGroup.fromLibraries(Lists.newArrayList(oldLibrary),false);
    CompilerContext newCompilerContext=new CompilerContext.Builder().compileMonolithic(false).libraryGroup(libraryGroup).build();
    newCompilerContext.getOptions().setStrict(true);
    CompilationState state=CompilationStateBuilder.buildFrom(logger,newCompilerContext,Sets.<Resource>newHashSet());
    return state.getTypeOracle();
  }
 catch (  UnableToCompleteException e) {
    throw new RuntimeException(e);
  }
}
