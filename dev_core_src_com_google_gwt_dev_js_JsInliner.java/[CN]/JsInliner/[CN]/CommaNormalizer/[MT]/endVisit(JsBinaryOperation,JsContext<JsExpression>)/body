{
  if (isComma(x) == null) {
    return;
  }
  if (!x.getArg1().hasSideEffects()) {
    ctx.replaceMe(x.getArg2());
    return;
  }
  JsBinaryOperation toUpdate=isComma(x.getArg2());
  if (toUpdate == null) {
    JsBinaryOperation inner=isComma(x.getArg1());
    if (inner != null && !inner.getArg2().hasSideEffects()) {
      x.setArg1(inner.getArg1());
      didChange=true;
    }
    return;
  }
  while (isComma(toUpdate.getArg1()) != null) {
    toUpdate=(JsBinaryOperation)toUpdate.getArg1();
  }
  JsBinaryOperation newOp=new JsBinaryOperation(x.getSourceInfo().makeChild(CommaNormalizer.class,"Simplifying comma expression"),JsBinaryOperator.COMMA);
  newOp.setArg1(x.getArg1());
  newOp.setArg2(toUpdate.getArg1());
  toUpdate.setArg1(newOp);
  ctx.replaceMe(x.getArg2());
}
