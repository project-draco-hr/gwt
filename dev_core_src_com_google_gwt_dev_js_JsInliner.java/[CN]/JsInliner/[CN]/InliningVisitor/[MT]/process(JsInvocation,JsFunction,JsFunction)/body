{
  List<JsStatement> statements;
  if (invokedFunction.getBody() != null) {
    statements=Lists.newArrayList(invokedFunction.getBody().getStatements());
  }
 else {
    statements=Collections.emptyList();
  }
  List<JsExpression> inlinableBodyAsExpression=Lists.newArrayListWithCapacity(statements.size());
  JsExpression thisExpr=((JsNameRef)x.getQualifier()).getQualifier();
  ExtrudedNamesCollector extrudedNamesCollector=new ExtrudedNamesCollector(callerFunction.getScope(),invokedFunction.getScope());
  boolean sawReturnStatement=false;
  for (  JsStatement statement : statements) {
    if (sawReturnStatement) {
      return x;
    }
    JsExpression statementAsExpression=convertToExpression(statement);
    if (statementAsExpression == null) {
      return x;
    }
    sawReturnStatement|=isReturnStatement(statement);
    if (sawReturnStatement || statementAsExpression.hasSideEffects()) {
      extrudedNamesCollector.accept(statementAsExpression);
      inlinableBodyAsExpression.add(statementAsExpression);
    }
  }
  List<JsName> extrudedNames=extrudedNamesCollector.getExtrudedNames();
  if (extrudedNames.size() != 0 && callerFunction == programFunction) {
    return x;
  }
  if (!sawReturnStatement) {
    inlinableBodyAsExpression.add(new JsNameRef(x.getSourceInfo(),JsRootScope.INSTANCE.getUndefined()));
  }
  assert(inlinableBodyAsExpression.size() > 0);
  SourceInfo sourceInfo=x.getSourceInfo();
  ListIterator<JsExpression> i=inlinableBodyAsExpression.listIterator(inlinableBodyAsExpression.size());
  JsExpression op=i.previous();
  while (i.hasPrevious()) {
    JsBinaryOperation outerOp=new JsBinaryOperation(sourceInfo,JsBinaryOperator.COMMA);
    outerOp.setArg1(i.previous());
    outerOp.setArg2(op);
    op=outerOp;
  }
  if (!isInlinable(callerFunction,invokedFunction,thisExpr,x.getArguments(),op)) {
    return x;
  }
  NameRefReplacerVisitor nameRefReplacer=new NameRefReplacerVisitor(thisExpr,x.getArguments(),invokedFunction.getParameters());
  for (ListIterator<JsName> nameIterator=extrudedNames.listIterator(); nameIterator.hasNext(); ) {
    JsName name=nameIterator.next();
    JsName newName=getUnusedName(callerFunction.getScope(),invokedFunction.getName() + "_" + name.getIdent(),name.getShortIdent());
    nameRefReplacer.setReplacementName(name,newName);
    nameIterator.set(newName);
  }
  op=nameRefReplacer.accept(op);
  op=(new CommaNormalizer(extrudedNames)).accept(op);
  if (callerFunction == programFunction && extrudedNames.size() > 0) {
    return x;
  }
  if (invokedFunction.getInliningMode() != InliningMode.FORCE_INLINE && isTooComplexToInline(x,op) && isInvokedMoreThanOnce(invokedFunction)) {
    return x;
  }
  newLocalVariableStack.peek().addAll(extrudedNames);
  invocationCountingVisitor.removeCountsFor(x);
  invocationCountingVisitor.accept(op);
  return op;
}
