{
  JsFunction f=isFunction(x.getQualifier());
  if (f == null) {
    return;
  }
  if (blacklist.contains(f)) {
    return;
  }
  List<JsStatement> statements=f.getBody().getStatements();
  List<JsExpression> hoisted=new ArrayList<JsExpression>(statements.size());
  for (  JsStatement statement : statements) {
    JsExpression h=hoistedExpression(statement);
    if (h == null) {
      return;
    }
    hoisted.add(h);
    if (hoistedExpressionTerminal(statement)) {
      break;
    }
  }
  JsExpression op;
  if (hoisted.size() == 0) {
    op=program.getNullLiteral();
  }
 else {
    ListIterator<JsExpression> i=hoisted.listIterator(hoisted.size());
    op=i.previous();
    while (i.hasPrevious()) {
      JsBinaryOperation outerOp=new JsBinaryOperation(JsBinaryOperator.COMMA);
      outerOp.setArg1(i.previous());
      outerOp.setArg2(op);
      op=outerOp;
    }
  }
  if (!isInlinable(functionStack.peek(),x,f,op)) {
    return;
  }
  NameRefReplacerVisitor v=new NameRefReplacerVisitor(x,f);
  op=v.accept(op);
  op=(new CommaNormalizer()).accept(op);
  int originalComplexity=complexity(x);
  int inlinedComplexity=complexity(op);
  if (((float)inlinedComplexity / originalComplexity) > MAX_COMPLEXITY_INCREASE) {
    return;
  }
  op=accept(op);
  ctx.replaceMe(op);
}
