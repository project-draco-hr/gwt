{
  this.nodeView=nodeView;
  impl=new SimpleCellListImpl<C>(this,nodeInfo.getCell(),100,50,nodeView.ensureChildContainer(),nodeView.emptyMessageElem,nodeView.showMoreElem,nodeView.showFewerElem){
    @Override public void setData(    List<C> values,    int start){
      if (nodeView.children == null) {
        nodeView.children=new ArrayList<StandardTreeNodeView<?>>();
      }
      int len=values.size();
      int end=start + len;
      int childCount=nodeView.getChildCount();
      Map<Object,StandardTreeNodeView<?>> openNodes=new HashMap<Object,StandardTreeNodeView<?>>();
      for (int i=start; i < end && i < childCount; i++) {
        StandardTreeNodeView<?> child=nodeView.getChildNode(i);
        if (child.isOpen()) {
          openNodes.put(child.getValueKey(),child);
        }
      }
      if (nodeView.tree.isAnimationEnabled()) {
        nodeView.ensureAnimationFrame().getStyle().setDisplay(Display.NONE);
      }
      ProvidesKey<C> providesKey=nodeInfo.getProvidesKey();
      savedViews=new HashMap<Object,StandardTreeNodeView<?>>();
      for (      C childValue : values) {
        Object key=providesKey.getKey(childValue);
        StandardTreeNodeView<?> savedView=openNodes.remove(key);
        if (savedView != null) {
          savedView.ensureAnimationFrame().removeFromParent();
          savedViews.put(key,savedView);
        }
      }
      super.setData(values,start);
      Element childElem=nodeView.ensureChildContainer().getFirstChildElement();
      for (int i=start; i < end; i++) {
        C childValue=values.get(i - start);
        StandardTreeNodeView<C> child=nodeView.createTreeNodeView(nodeInfo,childElem,childValue,null);
        StandardTreeNodeView<?> savedChild=savedViews.remove(providesKey.getKey(childValue));
        if (savedChild != null) {
          child.animationFrame=savedChild.animationFrame;
          child.contentContainer=savedChild.contentContainer;
          child.childContainer=savedChild.childContainer;
          child.children=savedChild.children;
          child.emptyMessageElem=savedChild.emptyMessageElem;
          child.nodeInfo=savedChild.nodeInfo;
          child.nodeInfoLoaded=savedChild.nodeInfoLoaded;
          child.open=savedChild.open;
          child.showFewerElem=savedChild.showFewerElem;
          child.showMoreElem=savedChild.showMoreElem;
          savedChild.listView.setNodeView(child);
          child.getElement().appendChild(savedChild.ensureAnimationFrame());
        }
        if (childCount > i) {
          if (savedChild == null) {
            nodeView.children.get(i).cleanup();
          }
          nodeView.children.set(i,child);
        }
 else {
          nodeView.children.add(child);
        }
        childElem=childElem.getNextSiblingElement();
      }
      savedViews=null;
      if (nodeView.tree.isAnimationEnabled()) {
        nodeView.tree.maybeAnimateTreeNode(nodeView);
      }
    }
    @Override protected void emitHtml(    StringBuilder sb,    List<C> values,    int start,    Cell<C,Void> cell,    SelectionModel<? super C> selectionModel){
      ProvidesKey<C> providesKey=nodeInfo.getProvidesKey();
      TreeViewModel model=nodeView.tree.getTreeViewModel();
      int imageWidth=nodeView.tree.getImageWidth();
      for (      C value : values) {
        Object key=providesKey.getKey(value);
        sb.append("<div style=\"position:relative;padding-left:");
        sb.append(imageWidth);
        sb.append("px;\">");
        if (savedViews.get(key) != null) {
          sb.append(nodeView.tree.getOpenImageHtml());
        }
 else         if (model.isLeaf(value)) {
          sb.append(LEAF_IMAGE);
        }
 else {
          sb.append(nodeView.tree.getClosedImageHtml());
        }
        if (selectionModel != null && selectionModel.isSelected(value)) {
          sb.append("<div class='").append(STYLENNAME_SELECTED).append("'>");
        }
 else {
          sb.append("<div>");
        }
        cell.render(value,null,sb);
        sb.append("</div></div>");
      }
    }
    @Override protected void removeLastItem(){
      StandardTreeNodeView<?> child=nodeView.children.remove(nodeView.children.size() - 1);
      child.cleanup();
      super.removeLastItem();
    }
    @Override protected void setSelected(    Element elem,    boolean selected){
      setStyleName(getCellParent(elem),STYLENNAME_SELECTED,selected);
    }
  }
;
}
