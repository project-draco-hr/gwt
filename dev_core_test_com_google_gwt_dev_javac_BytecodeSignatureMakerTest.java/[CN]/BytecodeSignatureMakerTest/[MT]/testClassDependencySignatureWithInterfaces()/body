{
  MockJavaResource CLASS_DEP_INTERFACE_ORIG=new MockJavaResource(CLASS_DEP_TYPE_NAME){
    @Override public CharSequence getContent(){
      StringBuilder code=new StringBuilder();
      code.append("package test;\n");
      code.append("import java.util.Map;");
      code.append("import java.util.Collection;");
      code.append("public class ClassDependency implements Map, Collection {\n");
      code.append("  public int methodPublic(String arg) { return 1;}\n");
      code.append("}\n");
      return code;
    }
  }
;
  MockJavaResource CLASS_DEP_INTERFACE_MOD1=new MockJavaResource(CLASS_DEP_TYPE_NAME){
    @Override public CharSequence getContent(){
      StringBuilder code=new StringBuilder();
      code.append("package test;\n");
      code.append("import java.util.Map;");
      code.append("import java.util.Collection;");
      code.append("public class ClassDependency {\n");
      code.append("  public int methodPublic(String arg) { return 1;}\n");
      code.append("}\n");
      return code;
    }
  }
;
  MockJavaResource CLASS_DEP_INTERFACE_MOD2=new MockJavaResource(CLASS_DEP_TYPE_NAME){
    @Override public CharSequence getContent(){
      StringBuilder code=new StringBuilder();
      code.append("package test;\n");
      code.append("import java.util.Map;");
      code.append("import java.util.Collection;");
      code.append("public class ClassDependency implements Map {\n");
      code.append("  public int methodPublic(String arg) { return 1;}\n");
      code.append("}\n");
      return code;
    }
  }
;
  MockJavaResource CLASS_DEP_INTERFACE_MOD3=new MockJavaResource(CLASS_DEP_TYPE_NAME){
    @Override public CharSequence getContent(){
      StringBuilder code=new StringBuilder();
      code.append("package test;\n");
      code.append("import java.util.Map;");
      code.append("import java.util.Collection;");
      code.append("public class ClassDependency implements Collection, Map {\n");
      code.append("  public int methodPublic(String arg) { return 1;}\n");
      code.append("}\n");
      return code;
    }
  }
;
  CompiledClass originalClass=buildClass(CLASS_DEP_INTERFACE_ORIG);
  assertSignaturesNotEqual(originalClass,buildClass(CLASS_DEP_INTERFACE_MOD1));
  assertSignaturesNotEqual(originalClass,buildClass(CLASS_DEP_INTERFACE_MOD2));
  assertSignaturesEqual(originalClass,buildClass(CLASS_DEP_INTERFACE_MOD3));
}
