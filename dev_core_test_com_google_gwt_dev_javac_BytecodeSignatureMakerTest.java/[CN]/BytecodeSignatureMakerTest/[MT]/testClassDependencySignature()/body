{
  final MockJavaResource CLASS_DEP_ORIG=new MockJavaResource(CLASS_DEP_TYPE_NAME){
    @Override protected CharSequence getContent(){
      StringBuffer code=new StringBuffer();
      code.append("package test;\n");
      code.append("public class ClassDependency {\n");
      code.append("  static public final int fieldPublicStatic = 100;\n");
      code.append("  public int fieldPublic;\n");
      code.append("  protected int fieldProtected;\n");
      code.append("  int fieldDefault;\n");
      code.append("  private int fieldPrivate;\n");
      code.append("  public int methodPublic() {return 1;};\n");
      code.append("  protected int methodProtected(String arg) {return 1;};\n");
      code.append("  int methodDefault() {return 1;};\n");
      code.append("  private int methodPrivate(){return 1;};\n");
      code.append("}");
      return code;
    }
  }
;
  final MockJavaResource CLASS_DEP_NO_CHANGE=new MockJavaResource(CLASS_DEP_TYPE_NAME){
    @Override protected CharSequence getContent(){
      StringBuffer code=new StringBuffer();
      code.append("package test;\n");
      code.append("public class ClassDependency {\n");
      code.append("  static public final int fieldPublicStatic = 100;\n");
      code.append("  public int fieldPublic;\n");
      code.append("  protected int fieldProtected;\n");
      code.append("  int fieldDefault;\n");
      code.append("  private int fieldPrivate;\n");
      code.append("  public int methodPublic() {return 1;};\n");
      code.append("  protected int methodProtected(String arg) {return 1;};\n");
      code.append("  int methodDefault() {return 1;};\n");
      code.append("  private int methodPrivate(){return 1;};\n");
      code.append("}");
      return code;
    }
  }
;
  final MockJavaResource CLASS_DEP_NO_PRIVATE=new MockJavaResource(CLASS_DEP_TYPE_NAME){
    @Override protected CharSequence getContent(){
      StringBuffer code=new StringBuffer();
      code.append("package test;\n");
      code.append("public class ClassDependency {\n");
      code.append("  static public final int fieldPublicStatic = 100;\n");
      code.append("  public int fieldPublic;\n");
      code.append("  protected int fieldProtected;\n");
      code.append("  int fieldDefault;\n");
      code.append("  public int methodPublic() {return 1;};\n");
      code.append("  protected int methodProtected(String arg) {return 1;};\n");
      code.append("  int methodDefault() {return 1;};\n");
      code.append("}");
      return code;
    }
  }
;
  final MockJavaResource CLASS_DEP_NO_PROTECTED_FIELD=new MockJavaResource(CLASS_DEP_TYPE_NAME){
    @Override protected CharSequence getContent(){
      StringBuffer code=new StringBuffer();
      code.append("package test;\n");
      code.append("public class ClassDependency {\n");
      code.append("  static public final int fieldPublicStatic = 100;\n");
      code.append("  public int fieldPublic;\n");
      code.append("  int fieldDefault;\n");
      code.append("  private int fieldPrivate;\n");
      code.append("  public int methodPublic() {return 1;};\n");
      code.append("  protected int methodProtected(String arg) {return 1;};\n");
      code.append("  int methodDefault() {return 1;};\n");
      code.append("  private int methodPrivate(){return 1;};\n");
      code.append("}");
      return code;
    }
  }
;
  final MockJavaResource CLASS_DEP_NO_DEFAULT_FIELD=new MockJavaResource(CLASS_DEP_TYPE_NAME){
    @Override protected CharSequence getContent(){
      StringBuffer code=new StringBuffer();
      code.append("package test;\n");
      code.append("public class ClassDependency {\n");
      code.append("  static public final int fieldPublicStatic = 100;\n");
      code.append("  public int fieldPublic;\n");
      code.append("  protected int fieldProtected;\n");
      code.append("  private int fieldPrivate;\n");
      code.append("  public int methodPublic() {return 1;};\n");
      code.append("  protected int methodProtected(String arg) {return 1;};\n");
      code.append("  int methodDefault() {return 1;};\n");
      code.append("  private int methodPrivate(){return 1;};\n");
      code.append("}");
      return code;
    }
  }
;
  final MockJavaResource CLASS_DEP_NO_PUBLIC_FIELD=new MockJavaResource(CLASS_DEP_TYPE_NAME){
    @Override protected CharSequence getContent(){
      StringBuffer code=new StringBuffer();
      code.append("package test;\n");
      code.append("public class ClassDependency {\n");
      code.append("  static public final int fieldPublicStatic = 100;\n");
      code.append("  protected int fieldProtected;\n");
      code.append("  int fieldDefault;\n");
      code.append("  private int fieldPrivate;\n");
      code.append("  public int methodPublic() {return 1;};\n");
      code.append("  protected int methodProtected(String arg) {return 1;};\n");
      code.append("  int methodDefault() {return 1;};\n");
      code.append("  private int methodPrivate(){return 1;};\n");
      code.append("}");
      return code;
    }
  }
;
  final MockJavaResource CLASS_DEP_FIELD_VALUE_CHANGE=new MockJavaResource(CLASS_DEP_TYPE_NAME){
    @Override protected CharSequence getContent(){
      StringBuffer code=new StringBuffer();
      code.append("package test;\n");
      code.append("public class ClassDependency {\n");
      code.append("  static public final int fieldPublicStatic = 99;\n");
      code.append("  public int fieldPublic;\n");
      code.append("  protected int fieldProtected;\n");
      code.append("  int fieldDefault;\n");
      code.append("  private int fieldPrivate;\n");
      code.append("  public int methodPublic() {return 1;};\n");
      code.append("  protected int methodProtected(String arg) {return 1;};\n");
      code.append("  int methodDefault() {return 1;};\n");
      code.append("  private int methodPrivate(){return 1;};\n");
      code.append("}");
      return code;
    }
  }
;
  final MockJavaResource CLASS_DEP_ORDER=new MockJavaResource(CLASS_DEP_TYPE_NAME){
    @Override protected CharSequence getContent(){
      StringBuffer code=new StringBuffer();
      code.append("package test;\n");
      code.append("public class ClassDependency {\n");
      code.append("  public int fieldPublic;\n");
      code.append("  static public final int fieldPublicStatic = 100;\n");
      code.append("  protected int fieldProtected;\n");
      code.append("  int fieldDefault;\n");
      code.append("  private int fieldPrivate;\n");
      code.append("  public int methodPublic() {return 1;};\n");
      code.append("  int methodDefault() {return 1;};\n");
      code.append("  protected int methodProtected(String arg) {return 1;};\n");
      code.append("  private int methodPrivate(){return 1;};\n");
      code.append("}");
      return code;
    }
  }
;
  final MockJavaResource CLASS_DEP_INNER=new MockJavaResource(CLASS_DEP_TYPE_NAME){
    @Override protected CharSequence getContent(){
      StringBuffer code=new StringBuffer();
      code.append("package test;\n");
      code.append("public class ClassDependency {\n");
      code.append("  static public final int fieldPublicStatic = 100;\n");
      code.append("  public int fieldPublic;\n");
      code.append("  protected int fieldProtected;\n");
      code.append("  int fieldDefault;\n");
      code.append("  private int fieldPrivate;\n");
      code.append("  public int methodPublic() {return 1;};\n");
      code.append("  protected int methodProtected(String arg) {return 1;};\n");
      code.append("  int methodDefault() {return 1;};\n");
      code.append("  private int methodPrivate(){return 1;};\n");
      code.append("  public static class IgnoreMe {\n");
      code.append("    private int ignoreThisMember;\n");
      code.append("  }\n");
      code.append("}");
      return code;
    }
  }
;
  final MockJavaResource CLASS_DEP_DEPRECATED_FIELD=new MockJavaResource(CLASS_DEP_TYPE_NAME){
    @Override protected CharSequence getContent(){
      StringBuffer code=new StringBuffer();
      code.append("package test;\n");
      code.append("public class ClassDependency {\n");
      code.append("  static public final int fieldPublicStatic = 100;\n");
      code.append("  @Deprecated\n");
      code.append("  public int fieldPublic;\n");
      code.append("  protected int fieldProtected;\n");
      code.append("  int fieldDefault;\n");
      code.append("  private int fieldPrivate;\n");
      code.append("  public int methodPublic() {return 1;};\n");
      code.append("  protected int methodProtected(String arg) {return 1;};\n");
      code.append("  int methodDefault() {return 1;};\n");
      code.append("  private int methodPrivate(){return 1;};\n");
      code.append("}");
      return code;
    }
  }
;
  final MockJavaResource CLASS_DEP_DEPRECATED_METHOD=new MockJavaResource(CLASS_DEP_TYPE_NAME){
    @Override protected CharSequence getContent(){
      StringBuffer code=new StringBuffer();
      code.append("package test;\n");
      code.append("public class ClassDependency {\n");
      code.append("  static public final int fieldPublicStatic = 100;\n");
      code.append("  public int fieldPublic;\n");
      code.append("  protected int fieldProtected;\n");
      code.append("  int fieldDefault;\n");
      code.append("  private int fieldPrivate;\n");
      code.append("  @Deprecated\n");
      code.append("  public int methodPublic() {return 1;};\n");
      code.append("  protected int methodProtected(String arg) {return 1;};\n");
      code.append("  int methodDefault() {return 1;};\n");
      code.append("  private int methodPrivate(){return 1;};\n");
      code.append("}");
      return code;
    }
  }
;
  final MockJavaResource CLASS_DEP_ANNOTATED_FIELD=new MockJavaResource(CLASS_DEP_TYPE_NAME){
    @Override protected CharSequence getContent(){
      StringBuffer code=new StringBuffer();
      code.append("package test;\n");
      code.append("public class ClassDependency {\n");
      code.append("  static public final int fieldPublicStatic = 100;\n");
      code.append("  @TestAnnotation(\"Foo\")\n");
      code.append("  public int fieldPublic;\n");
      code.append("  protected int fieldProtected;\n");
      code.append("  int fieldDefault;\n");
      code.append("  private int fieldPrivate;\n");
      code.append("  public int methodPublic() {return 1;};\n");
      code.append("  protected int methodProtected(String arg) {return 1;};\n");
      code.append("  int methodDefault() {return 1;};\n");
      code.append("  private int methodPrivate(){return 1;};\n");
      code.append("}");
      return code;
    }
  }
;
  final MockJavaResource CLASS_DEP_ANNOTATED_METHOD=new MockJavaResource(CLASS_DEP_TYPE_NAME){
    @Override protected CharSequence getContent(){
      StringBuffer code=new StringBuffer();
      code.append("package test;\n");
      code.append("public class ClassDependency {\n");
      code.append("  static public final int fieldPublicStatic = 100;\n");
      code.append("  public int fieldPublic;\n");
      code.append("  protected int fieldProtected;\n");
      code.append("  int fieldDefault;\n");
      code.append("  private int fieldPrivate;\n");
      code.append("  @TestAnnotation(\"Foo\")\n");
      code.append("  public int methodPublic() {return 1;};\n");
      code.append("  protected int methodProtected(String arg) {return 1;};\n");
      code.append("  int methodDefault() {return 1;};\n");
      code.append("  private int methodPrivate(){return 1;};\n");
      code.append("}");
      return code;
    }
  }
;
  final MockJavaResource CLASS_DEP_JAVADOC=new MockJavaResource(CLASS_DEP_TYPE_NAME){
    @Override protected CharSequence getContent(){
      StringBuffer code=new StringBuffer();
      code.append("package test;\n");
      code.append("public class ClassDependency {\n");
      code.append("  /** a static field */\n");
      code.append("  static public final int fieldPublicStatic = 100;\n");
      code.append("  /** a public field */\n");
      code.append("  public int fieldPublic;\n");
      code.append("  protected int fieldProtected;\n");
      code.append("  int fieldDefault;\n");
      code.append("  private int fieldPrivate;\n");
      code.append("  /** a public method */\n");
      code.append("  public int methodPublic() {return 1;};\n");
      code.append("  protected int methodProtected(String arg) {return 1;};\n");
      code.append("  int methodDefault() {return 1;};\n");
      code.append("  private int methodPrivate(){return 1;};\n");
      code.append("}");
      return code;
    }
  }
;
  final MockJavaResource TEST_ANNOTATION=new MockJavaResource("test.TestAnnotation"){
    @Override protected CharSequence getContent(){
      StringBuffer code=new StringBuffer();
      code.append("package test;\n");
      code.append("public @interface TestAnnotation {\n");
      code.append("  String value();");
      code.append("}\n");
      return code;
    }
  }
;
  CompiledClass originalClass=buildClass(CLASS_DEP_ORIG);
  assertNotNull(originalClass);
  assertSignaturesEqual(originalClass,buildClass(CLASS_DEP_NO_CHANGE));
  assertSignaturesNotEqual(originalClass,buildClass(CLASS_DEP_NO_PRIVATE));
  assertSignaturesNotEqual(originalClass,buildClass(CLASS_DEP_NO_PUBLIC_FIELD));
  assertSignaturesNotEqual(originalClass,buildClass(CLASS_DEP_NO_PROTECTED_FIELD));
  assertSignaturesNotEqual(originalClass,buildClass(CLASS_DEP_NO_DEFAULT_FIELD));
  assertSignaturesNotEqual(originalClass,buildClass(CLASS_DEP_FIELD_VALUE_CHANGE));
  assertSignaturesEqual(originalClass,buildClass(CLASS_DEP_ORDER));
  assertSignaturesEqual(originalClass,buildClass(CLASS_DEP_INNER));
  assertSignaturesEqual(originalClass,buildClass(CLASS_DEP_DEPRECATED_FIELD));
  assertSignaturesEqual(originalClass,buildClass(CLASS_DEP_DEPRECATED_METHOD));
  oracle.add(TEST_ANNOTATION);
  assertSignaturesEqual(originalClass,buildClass(CLASS_DEP_ANNOTATED_FIELD));
  assertSignaturesEqual(originalClass,buildClass(CLASS_DEP_ANNOTATED_METHOD));
  assertSignaturesEqual(originalClass,buildClass(CLASS_DEP_JAVADOC));
}
