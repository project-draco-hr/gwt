{
  if (inputStream == null) {
    throw new NullPointerException("inputStream");
  }
  Map<Class<?>,Boolean> whitelistSer=new HashMap<Class<?>,Boolean>();
  Map<Class<?>,Boolean> whitelistDeser=new HashMap<Class<?>,Boolean>();
  Map<Class<?>,String> typeIds=new HashMap<Class<?>,String>();
  InputStreamReader isr=new InputStreamReader(inputStream,SERIALIZATION_POLICY_FILE_ENCODING);
  BufferedReader br=new BufferedReader(isr);
  String line=br.readLine();
  int lineNum=1;
  while (line != null) {
    line=line.trim();
    if (line.length() > 0) {
      String[] components=line.split(",");
      if (components.length != 2 && components.length != 7) {
        throw new ParseException(FORMAT_ERROR_MESSAGE,lineNum);
      }
      for (int i=0; i < components.length; i++) {
        components[i]=components[i].trim();
        if (components[i].length() == 0) {
          throw new ParseException(FORMAT_ERROR_MESSAGE,lineNum);
        }
      }
      String binaryTypeName=components[0].trim();
      boolean fieldSer;
      boolean instantSer;
      boolean fieldDeser;
      boolean instantDeser;
      String typeId;
      if (components.length == 2) {
        fieldSer=fieldDeser=true;
        instantSer=instantDeser=Boolean.valueOf(components[1]);
        typeId=binaryTypeName;
      }
 else {
        int idx=1;
        fieldSer=Boolean.valueOf(components[idx++]);
        instantSer=Boolean.valueOf(components[idx++]);
        fieldDeser=Boolean.valueOf(components[idx++]);
        instantDeser=Boolean.valueOf(components[idx++]);
        typeId=components[idx++];
        if (!fieldSer && !fieldDeser && !TypeNameObfuscator.SERVICE_INTERFACE_ID.equals(typeId)) {
          throw new ParseException("Type " + binaryTypeName + " is neither field serializable, field deserializable "+ "nor the service interface",lineNum);
        }
      }
      ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
      try {
        Class<?> clazz=Class.forName(binaryTypeName,false,contextClassLoader);
        if (fieldSer) {
          whitelistSer.put(clazz,instantSer);
        }
        if (fieldDeser) {
          whitelistDeser.put(clazz,instantDeser);
        }
        typeIds.put(clazz,typeId);
      }
 catch (      ClassNotFoundException ex) {
        if (classNotFoundExceptions != null) {
          classNotFoundExceptions.add(ex);
        }
      }
    }
    line=br.readLine();
    lineNum++;
  }
  return new StandardSerializationPolicy(whitelistSer,whitelistDeser,typeIds);
}
