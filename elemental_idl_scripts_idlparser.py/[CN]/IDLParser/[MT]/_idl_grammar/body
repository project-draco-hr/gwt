def _idl_grammar(self):
    'Returns the PEG grammar for IDL parsing.'

    def syntax_switch(w3c_syntax, webkit_syntax, fremontcut_syntax=None):
        'Returns w3c_syntax or web_syntax, depending on the current\n      configuration.\n      '
        if (self._syntax == WEBIDL_SYNTAX):
            return w3c_syntax
        elif (self._syntax == WEBKIT_SYNTAX):
            return webkit_syntax
        elif (self._syntax == FREMONTCUT_SYNTAX):
            if (fremontcut_syntax is not None):
                return fremontcut_syntax
            return w3c_syntax
        else:
            raise RuntimeError(('unsupported IDL syntax %s' % syntax))

    def Id():
        return re.compile('[\\w\\_]+')

    def _Definitions():
        return MAYBE(MANY(_Definition))

    def _Definition():
        return syntax_switch(OR(Module, Interface, ExceptionDef, TypeDef, ImplStmt, ValueTypeDef, Const), OR(Module, Interface))

    def Module():
        return syntax_switch([MAYBE(ExtAttrs), 'module', Id, '{', _Definitions, '}', MAYBE(';')], ['module', MAYBE(ExtAttrs), Id, '{', _Definitions, '}', MAYBE(';')], [MAYBE(_Annotations), MAYBE(ExtAttrs), 'module', Id, '{', _Definitions, '}', MAYBE(';')])

    def Interface():
        return syntax_switch([MAYBE(ExtAttrs), 'interface', Id, MAYBE(_ParentInterfaces), MAYBE(['{', MAYBE(MANY(_Member)), '}']), ';'], [OR('interface', 'exception'), MAYBE(ExtAttrs), Id, MAYBE(_ParentInterfaces), MAYBE(['{', MAYBE(MANY(_Member)), '}']), MAYBE(';')], [MAYBE(_Annotations), MAYBE(ExtAttrs), 'interface', Id, MAYBE(_ParentInterfaces), MAYBE(['{', MAYBE(MANY(_Member)), '}']), ';'])

    def _Member():
        return syntax_switch(OR(Const, Attribute, Operation, ExtAttrs), OR(Const, Attribute, Operation), OR(Const, Attribute, Operation))

    def _ParentInterfaces():
        return [':', MANY(ParentInterface, separator=',')]

    def ParentInterface():
        return syntax_switch([InterfaceType], [InterfaceType], [MAYBE(_Annotations), InterfaceType])

    def TypeDef():
        return ['typedef', Type, Id, ';']

    def ValueTypeDef():
        return ['valuetype', Id, Type, ';']

    def ImplStmt():
        return [ImplStmtImplementor, 'implements', ImplStmtImplemented, ';']

    def ImplStmtImplementor():
        return ScopedName

    def ImplStmtImplemented():
        return ScopedName

    def Const():
        return syntax_switch([MAYBE(ExtAttrs), 'const', Type, Id, '=', ConstExpr, ';'], [MAYBE(ExtAttrs), 'const', Type, Id, '=', ConstExpr, ';'], [MAYBE(_Annotations), MAYBE(ExtAttrs), 'const', Type, Id, '=', ConstExpr, ';'])

    def ConstExpr():
        return OR(_BooleanLiteral, _IntegerLiteral, _FloatLiteral)

    def _BooleanLiteral():
        return re.compile('true|false')

    def _IntegerLiteral():
        return OR(re.compile('(0x)?[0-9ABCDEF]+'), re.compile('[0-9]+'))

    def _FloatLiteral():
        return re.compile('[0-9]+\\.[0-9]*')

    def Attribute():
        return syntax_switch([MAYBE(ExtAttrs), MAYBE(Stringifier), MAYBE(ReadOnly), 'attribute', Type, Id, MAYBE(_AttrRaises), ';'], [MAYBE(Stringifier), MAYBE(ReadOnly), 'attribute', MAYBE(ExtAttrs), Type, Id, MAYBE(_AttrRaises), ';'], [MAYBE(_Annotations), MAYBE(ExtAttrs), MAYBE(_AttrGetterSetter), MAYBE(Stringifier), MAYBE(ReadOnly), 'attribute', Type, Id, MAYBE(_AttrRaises), ';'])

    def _AttrRaises():
        return syntax_switch(MANY(OR(GetRaises, SetRaises)), MANY(OR(GetRaises, SetRaises, Raises), separator=','))

    def _AttrGetterSetter():
        return OR(AttrGetter, AttrSetter)

    def AttrGetter():
        return 'getter'

    def AttrSetter():
        return 'setter'

    def ReadOnly():
        return 'readonly'

    def GetRaises():
        return syntax_switch(['getraises', '(', _ScopedNames, ')'], ['getter', 'raises', '(', _ScopedNames, ')'])

    def SetRaises():
        return syntax_switch(['setraises', '(', _ScopedNames, ')'], ['setter', 'raises', '(', _ScopedNames, ')'])

    def Operation():
        return syntax_switch([MAYBE(ExtAttrs), MAYBE(Static), MAYBE(Stringifier), MAYBE(_Specials), ReturnType, MAYBE(Id), '(', _Arguments, ')', MAYBE(Raises), ';'], [MAYBE(ExtAttrs), MAYBE(Static), ReturnType, MAYBE(Id), '(', _Arguments, ')', MAYBE(Raises), ';'], [MAYBE(_Annotations), MAYBE(ExtAttrs), MAYBE(Static), MAYBE(Stringifier), MAYBE(_Specials), ReturnType, MAYBE(Id), '(', _Arguments, ')', MAYBE(Raises), ';'])

    def Static():
        return 'static'

    def _Specials():
        return MANY(Special)

    def Special():
        return re.compile('getter|setter|creator|deleter|caller')

    def Stringifier():
        return 'stringifier'

    def Raises():
        return ['raises', '(', _ScopedNames, ')']

    def _Arguments():
        return MAYBE(MANY(Argument, ','))

    def Argument():
        return syntax_switch([MAYBE(ExtAttrs), MAYBE(Optional), MAYBE('in'), MAYBE(Optional), Type, MAYBE(AnEllipsis), Id], [MAYBE(Optional), MAYBE('in'), MAYBE(Optional), MAYBE(ExtAttrs), Type, Id])

    def Optional():
        return 'optional'

    def AnEllipsis():
        return '...'

    def ExceptionDef():
        return ['exception', Id, '{', MAYBE(MANY(_ExceptionMember)), '}', ';']

    def _ExceptionMember():
        return OR(Const, ExceptionField, ExtAttrs)

    def ExceptionField():
        return [Type, Id, ';']

    def Type():
        return _Type

    def ReturnType():
        return OR(VoidType, _Type)

    def InterfaceType():
        return ScopedName

    def _Type():
        return OR(AnyArrayType, AnyType, ObjectType, _NullableType)

    def _NullableType():
        return [OR(_IntegerType, BooleanType, OctetType, FloatType, DoubleType, SequenceType, DOMStringArrayType, ScopedName), MAYBE(Nullable)]

    def Nullable():
        return '?'

    def SequenceType():
        return ['sequence', '<', Type, '>']

    def AnyType():
        return 'any'

    def AnyArrayType():
        return 'any[]'

    def ObjectType():
        return re.compile('(object|Object)\\b')

    def VoidType():
        return 'void'

    def _IntegerType():
        return [MAYBE(Unsigned), OR(ByteType, IntType, LongLongType, LongType, OctetType, ShortType)]

    def Unsigned():
        return 'unsigned'

    def ShortType():
        return 'short'

    def LongLongType():
        return ['long', 'long']

    def LongType():
        return 'long'

    def IntType():
        return 'int'

    def ByteType():
        return 'byte'

    def OctetType():
        return 'octet'

    def BooleanType():
        return 'boolean'

    def FloatType():
        return 'float'

    def DoubleType():
        return 'double'

    def _ScopedNames():
        return MANY(ScopedName, separator=',')

    def ScopedName():
        return re.compile('[\\w\\_\\:\\.\\<\\>]+')

    def DOMStringArrayType():
        return 'DOMString[]'

    def ExtAttrs():
        return ['[', MAYBE(MANY(ExtAttr, ',')), ']']

    def ExtAttr():
        return [Id, MAYBE(OR(['=', ExtAttrValue], ExtAttrArgList))]

    def ExtAttrValue():
        return OR(ExtAttrFunctionValue, re.compile('[\\w&0-9:\\-\\|]+'))

    def ExtAttrFunctionValue():
        return [Id, ExtAttrArgList]

    def ExtAttrArgList():
        return ['(', MAYBE(MANY(Argument, ',')), ')']

    def _Annotations():
        return MANY(Annotation)

    def Annotation():
        return ['@', Id, MAYBE(_AnnotationBody)]

    def _AnnotationBody():
        return ['(', MAYBE(MANY(AnnotationArg, ',')), ')']

    def AnnotationArg():
        return [Id, MAYBE(['=', AnnotationArgValue])]

    def AnnotationArgValue():
        return re.compile('[\\w&0-9:/\\-\\.]+')
    return MANY(_Definition)
