{
  logger=logger.branch(TreeLogger.DEBUG,String.format("Generating implementation of %s",interfaceType.getName()));
  ClassSourceFileComposerFactory f=new ClassSourceFileComposerFactory(packageName,implName);
  f.addImport(ValueChangeEvent.class.getName());
  f.addImport(ValueChangeHandler.class.getName());
  f.addImport(superinterfaceType.recordType.getQualifiedSourceName());
  f.addImport(Property.class.getName());
  f.addImport(DivElement.class.getName());
  f.addImport(Document.class.getName());
  f.addImport(SpanElement.class.getName());
  f.addImport(FontWeight.class.getName().replace("$","."));
  f.addImport(HashSet.class.getName());
  f.addImport(Map.class.getName());
  f.addImport(Set.class.getName());
  f.addImplementedInterface(interfaceType.getName());
  SourceWriter sw=f.createSourceWriter(generatorContext,out);
  sw.println();
  JClassType takesValueType=generatorContext.getTypeOracle().findType(TakesValue.class.getName());
  JClassType hasTextType=generatorContext.getTypeOracle().findType(HasText.class.getName());
  JClassType stringType=generatorContext.getTypeOracle().findType(String.class.getName());
  JClassType recordType=superinterfaceType.recordType;
  JClassType viewType=superinterfaceType.viewType;
  writeGetPropertiesMethod(sw,recordType);
  Set<JField> uiPropertyFields=getUiPropertyFields(viewType,recordType);
  writeInit(sw,viewType,recordType,uiPropertyFields,takesValueType,logger);
  writeIsChangedMethod(sw,recordType,viewType,uiPropertyFields,takesValueType,hasTextType,stringType,logger);
  writeSetEnabledMethod(sw,viewType,uiPropertyFields,takesValueType);
  writeSetValueMethod(sw,recordType,viewType,uiPropertyFields,generatorContext,logger);
  writeShowErrorsMethod(sw,viewType);
  sw.outdent();
  sw.println("}");
}
