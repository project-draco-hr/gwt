{
  Event moduleSpaceLoadEvent=SpeedTracerLogger.start(DevModeEventType.MODULE_SPACE_LOAD);
  host.onModuleReady(this);
  try {
    createStaticDispatcher(logger);
    Object staticDispatch=getStaticDispatcher();
    invokeNativeVoid("__defineStatic",null,new Class[]{Object.class},new Object[]{staticDispatch});
  }
 catch (  Throwable e) {
    logger.log(TreeLogger.ERROR,"Unable to initialize static dispatcher",e);
    throw new UnableToCompleteException();
  }
  String entryPointTypeName=null;
  try {
    Class<?> implClass=loadClassFromSourceName("com.google.gwt.core.client.impl.Impl");
    Method registerEntry=implClass.getDeclaredMethod("registerEntry");
    registerEntry.setAccessible(true);
    registerEntry.invoke(null);
    Method enter=implClass.getDeclaredMethod("enter");
    enter.setAccessible(true);
    enter.invoke(null);
    String[] entryPoints=host.getEntryPointTypeNames();
    if (entryPoints.length > 0) {
      try {
        for (int i=0; i < entryPoints.length; i++) {
          entryPointTypeName=entryPoints[i];
          Method onModuleLoad=null;
          Object module;
          try {
            Class<?> clazz=loadClassFromSourceName(entryPointTypeName);
            onModuleLoad=null;
            try {
              onModuleLoad=clazz.getMethod("onModuleLoad");
              if (!Modifier.isStatic(onModuleLoad.getModifiers())) {
                onModuleLoad=null;
              }
            }
 catch (            NoSuchMethodException e) {
            }
            module=null;
            if (onModuleLoad == null) {
              module=rebindAndCreate(entryPointTypeName);
              onModuleLoad=module.getClass().getMethod("onModuleLoad");
              entryPointTypeName=module.getClass().getName().replace('$','.');
            }
          }
 catch (          Throwable e) {
            displayErrorGlassPanel("EntryPoint initialization exception",entryPointTypeName,e);
            throw e;
          }
          try {
            onModuleLoad.setAccessible(true);
            invokeNativeVoid("fireOnModuleLoadStart",null,new Class[]{String.class},new Object[]{entryPointTypeName});
            Event onModuleLoadEvent=SpeedTracerLogger.start(DevModeEventType.ON_MODULE_LOAD);
            try {
              onModuleLoad.invoke(module);
            }
  finally {
              onModuleLoadEvent.end();
            }
          }
 catch (          Throwable e) {
            displayErrorGlassPanel("onModuleLoad() threw an exception",entryPointTypeName,e);
            throw e;
          }
        }
      }
  finally {
        Method exit=implClass.getDeclaredMethod("exit",boolean.class);
        exit.setAccessible(true);
        exit.invoke(null,true);
      }
    }
 else {
      logger.log(TreeLogger.WARN,"The module has no entry points defined, so onModuleLoad() will never be called",null);
    }
  }
 catch (  Throwable e) {
    Throwable caught=e;
    if (e instanceof InvocationTargetException) {
      caught=((InvocationTargetException)e).getTargetException();
    }
    if (caught instanceof ExceptionInInitializerError) {
      caught=((ExceptionInInitializerError)caught).getException();
    }
    String unableToLoadMessage="Unable to load module entry point class " + entryPointTypeName;
    if (caught != null) {
      unableToLoadMessage+=" (see associated exception for details)";
    }
    logger.log(TreeLogger.ERROR,unableToLoadMessage,caught);
    throw new UnableToCompleteException();
  }
 finally {
    moduleSpaceLoadEvent.end();
  }
}
