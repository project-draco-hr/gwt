{
  Throwable caught=null;
  String msg=null;
  String resultName=null;
  try {
    String sourceName=requestedClassName.replace('$','.');
    resultName=rebind(sourceName);
    Class<?> resolvedClass=loadClassFromSourceName(resultName);
    if (Modifier.isAbstract(resolvedClass.getModifiers())) {
      msg="Deferred binding result type '" + resultName + "' should not be abstract";
    }
 else {
      Constructor<?> ctor=resolvedClass.getDeclaredConstructor();
      ctor.setAccessible(true);
      return (T)ctor.newInstance();
    }
  }
 catch (  ClassNotFoundException e) {
    msg="Could not load deferred binding result type '" + resultName + "'";
    caught=e;
  }
catch (  InstantiationException e) {
    caught=e;
  }
catch (  IllegalAccessException e) {
    caught=e;
  }
catch (  ExceptionInInitializerError e) {
    caught=e.getException();
  }
catch (  NoSuchMethodException e) {
    msg="Rebind result '" + resultName + "' has no default (zero argument) constructors.";
    caught=e;
  }
catch (  InvocationTargetException e) {
    caught=e.getTargetException();
  }
  if (msg == null) {
    msg="Failed to create an instance of '" + requestedClassName + "' via deferred binding ";
  }
  host.getLogger().log(TreeLogger.ERROR,msg,caught);
  throw new UnableToCompleteException();
}
