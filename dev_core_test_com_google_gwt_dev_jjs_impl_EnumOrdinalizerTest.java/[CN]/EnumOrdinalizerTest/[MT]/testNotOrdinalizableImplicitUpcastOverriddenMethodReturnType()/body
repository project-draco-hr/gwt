{
  runTypeTightener=true;
  runMethodCallTightener=true;
  EnumOrdinalizer.startTracker();
  addSnippetClassDecl("public interface EnumInterface {","  String name();","}");
  addSnippetClassDecl("public abstract class AbstractClass<T extends EnumInterface> {","  public abstract T getEnumClass();","}");
  addSnippetClassDecl("public class CustomClass1 extends AbstractClass<EnumClass1> {","  public EnumClass1 getEnumClass() { return EnumClass1.CONST1; }","}");
  addSnippetClassDecl("public class CustomClass2 extends AbstractClass<EnumClass2> {","  public EnumClass2 getEnumClass() { return EnumClass2.CONST2; }","}");
  addSnippetClassDecl("public enum EnumClass1 implements EnumInterface {","  CONST1;","}");
  addSnippetClassDecl("public enum EnumClass2 implements EnumInterface {","  CONST2;","}");
  addSnippetClassDecl("public static void testEnumClass(AbstractClass abstractClass) {","  EnumInterface enumClass = abstractClass.getEnumClass();","}");
  optimize("void","EntryPoint ep = new EntryPoint();","AbstractClass abstractClass1 = ep.new CustomClass1();","AbstractClass abstractClass2 = ep.new CustomClass2();","testEnumClass(abstractClass1);","testEnumClass(abstractClass2);");
  EnumOrdinalizer.Tracker tracker=EnumOrdinalizer.getTracker();
  EnumOrdinalizer.stopTracker();
  assertTrue(tracker.isVisited("test.EntryPoint$EnumClass1"));
  assertFalse(tracker.isOrdinalized("test.EntryPoint$EnumClass1"));
  assertTrue(tracker.isVisited("test.EntryPoint$EnumClass2"));
  assertFalse(tracker.isOrdinalized("test.EntryPoint$EnumClass2"));
}
