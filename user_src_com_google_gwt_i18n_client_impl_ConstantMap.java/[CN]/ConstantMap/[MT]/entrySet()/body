{
  return new AbstractSet<Entry<String,String>>(){
    @Override public boolean contains(    Object o){
      if (!(o instanceof Entry<?,?>)) {
        return false;
      }
      Entry<?,?> other=(Entry<?,?>)o;
      String value=get(other.getKey());
      if (value != null && value.equals(other.getValue())) {
        return true;
      }
      return false;
    }
    @Override public Iterator<Map.Entry<String,String>> iterator(){
      return new Iterator<Entry<String,String>>(){
        private int next=0;
        public boolean hasNext(){
          return next < ConstantMap.this.size();
        }
        public Entry<String,String> next(){
          if (!hasNext()) {
            throw new NoSuchElementException();
          }
          String key=keys[next++];
          return new EntryImpl(key,get(key));
        }
        public void remove(){
          throw new UnsupportedOperationException();
        }
      }
;
    }
    @Override public int size(){
      return ConstantMap.this.size();
    }
  }
;
}
