{
  if (GWT.isScript()) {
    return;
  }
  testInstance=this;
  final Test proxy=GWT.create(TestImpl.Proxy.class);
  assertTrue(proxy instanceof AsyncProxy);
  final TestImpl.Proxy asHidden=(TestImpl.Proxy)proxy;
  assertNull(asHidden.getProxiedInstance());
  asHidden.setProxyCallback(new ProxyCallback<Test>(){
    @Override public void onComplete(    Test instance){
      assertEquals(true,proxy.defaultBool());
      assertEquals(1,proxy.defaultByte());
      assertEquals(1,proxy.defaultChar());
      assertEquals(1D,proxy.defaultDouble());
      assertEquals(1F,proxy.defaultFloat());
      assertEquals(1,proxy.defaultInt());
      assertEquals(1L,proxy.defaultLong());
      assertEquals(1,proxy.defaultShort());
      assertEquals("",proxy.defaultString());
      assertSame(instance,proxy.defaultObject());
      instance.three();
    }
    @Override public void onFailure(    Throwable t){
      t.printStackTrace();
      fail(t.getMessage());
    }
    @Override public void onInit(    Test instance){
      assertTrue(instance instanceof TestImpl);
      assertSame(asHidden.getProxiedInstance(),instance);
      instance.one();
    }
  }
);
  AsyncProxyBase<?> asBase=(AsyncProxyBase<?>)proxy;
  asBase.suppressLoadForTest0();
  assertEquals(false,proxy.defaultBool());
  assertEquals(0,proxy.defaultByte());
  assertEquals(0,proxy.defaultChar());
  assertEquals(0D,proxy.defaultDouble());
  assertEquals(0F,proxy.defaultFloat());
  assertEquals(42,proxy.defaultInt());
  assertEquals(42L,proxy.defaultLong());
  assertEquals(0,proxy.defaultShort());
  assertNull(proxy.defaultString());
  assertNull(proxy.defaultObject());
  asBase.enableLoadForTest0();
  delayTestFinish(TEST_FINISH_DELAY_MILLIS);
  proxy.two();
}
