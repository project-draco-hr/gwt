{
  delayTestFinish(5000);
  final SimpleFooEventHandler<SimpleFooProxy> handler=new SimpleFooEventHandler<SimpleFooProxy>();
  EntityProxyChange.registerForProxyType(req.getEventBus(),SimpleFooProxy.class,handler);
  final SimpleFooProxy foo=req.create(SimpleFooProxy.class);
  Object futureId=foo.getId();
  assertEquals(futureId,foo.getId());
  assertTrue(((ProxyImpl)foo).unpersisted());
  Request<SimpleFooProxy> fooReq=req.simpleFooRequest().persistAndReturnSelf(foo);
  fooReq.fire(new Receiver<SimpleFooProxy>(){
    @Override public void onSuccess(    final SimpleFooProxy returned){
      Object futureId=foo.getId();
      assertEquals(futureId,foo.getId());
      assertTrue(((ProxyImpl)foo).unpersisted());
      assertEquals(1,handler.persistEventCount);
      assertEquals(1,handler.updateEventCount);
      assertEquals(2,handler.totalEventCount);
      checkStableIdEquals(foo,returned);
      finishTestAndReset();
    }
  }
);
}
