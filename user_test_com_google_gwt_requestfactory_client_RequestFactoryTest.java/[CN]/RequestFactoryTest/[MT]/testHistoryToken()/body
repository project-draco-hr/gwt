{
  delayTestFinish(DELAY_TEST_FINISH);
  SimpleBarRequest context=simpleBarRequest();
  final SimpleBarProxy foo=context.create(SimpleBarProxy.class);
  final EntityProxyId<SimpleBarProxy> futureId=foo.stableId();
  final String futureToken=req.getHistoryToken(futureId);
  assertEquals(futureId,req.getProxyId(futureToken));
  assertEquals(futureId.getProxyClass(),req.getProxyClass(futureToken));
  Request<SimpleBarProxy> fooReq=context.persistAndReturnSelf().using(foo);
  fooReq.fire(new Receiver<SimpleBarProxy>(){
    @Override public void onSuccess(    SimpleBarProxy returned){
      returned=checkSerialization(returned);
      EntityProxyId<SimpleBarProxy> persistedId=returned.stableId();
      String persistedToken=req.getHistoryToken(returned.stableId());
      assertFalse(futureToken.equals(persistedToken));
      assertEquals(persistedToken,req.getHistoryToken(futureId));
      assertEquals(futureId,req.getProxyId(futureToken));
      assertEquals(futureId,req.getProxyId(persistedToken));
      assertEquals(futureId.getProxyClass(),req.getProxyClass(persistedToken));
      assertEquals(persistedId,req.getProxyId(futureToken));
      assertEquals(persistedId,req.getProxyId(persistedToken));
      assertEquals(persistedId.getProxyClass(),req.getProxyClass(futureToken));
      finishTestAndReset();
    }
  }
);
}
