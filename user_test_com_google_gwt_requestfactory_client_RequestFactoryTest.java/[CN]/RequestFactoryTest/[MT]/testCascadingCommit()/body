{
  delayTestFinish(DELAY_TEST_FINISH);
  SimpleFooRequest context=req.simpleFooRequest();
  final SimpleFooProxy foo=context.create(SimpleFooProxy.class);
  final SimpleBarProxy bar0=context.create(SimpleBarProxy.class);
  final SimpleBarProxy bar1=context.create(SimpleBarProxy.class);
  List<SimpleBarProxy> bars=new ArrayList<SimpleBarProxy>();
  bars.add(bar0);
  bars.add(bar1);
  final SimpleFooEventHandler<SimpleBarProxy> handler=new SimpleFooEventHandler<SimpleBarProxy>();
  EntityProxyChange.registerForProxyType(req.getEventBus(),SimpleBarProxy.class,handler);
  Request<SimpleFooProxy> request=context.persistCascadingAndReturnSelf().using(foo);
  SimpleFooProxy editFoo=context.edit(foo);
  editFoo.setOneToManyField(bars);
  request.fire(new Receiver<SimpleFooProxy>(){
    @Override public void onSuccess(    SimpleFooProxy response){
      assertFalse(((SimpleEntityProxyId<SimpleFooProxy>)response.stableId()).isEphemeral());
      assertEquals(2,handler.persistEventCount);
      assertEquals(2,handler.totalEventCount);
      finishTestAndReset();
    }
  }
);
}
