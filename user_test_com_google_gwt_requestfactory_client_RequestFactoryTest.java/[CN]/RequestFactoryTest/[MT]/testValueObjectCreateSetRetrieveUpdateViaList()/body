{
  delayTestFinish(DELAY_TEST_FINISH);
  SimpleFooRequest req=simpleFooRequest();
  req.findSimpleFooById(1L).fire(new Receiver<SimpleFooProxy>(){
    @Override public void onSuccess(    SimpleFooProxy response){
      SimpleFooRequest req=simpleFooRequest();
      final SimpleValueProxy created=req.create(SimpleValueProxy.class);
      created.setNumber(42);
      created.setString("Hello world!");
      created.setSimpleFoo(response);
      response=req.edit(response);
      response.setSimpleValues(Arrays.asList(created));
      req.persistAndReturnSelf().using(response).with("simpleValues").to(new Receiver<SimpleFooProxy>(){
        @Override public void onSuccess(        SimpleFooProxy response){
          SimpleValueProxy value=response.getSimpleValues().get(0);
          assertEquals(42,value.getNumber());
          try {
            response.getSimpleValues().get(0).setNumber(43);
            fail("Should have thrown exception");
          }
 catch (          IllegalStateException expected) {
          }
          SimpleFooRequest req=simpleFooRequest();
          response=req.edit(response);
          response.getSimpleValues().get(0).setNumber(43);
          req.persistAndReturnSelf().using(response).with("simpleValues").to(new Receiver<SimpleFooProxy>(){
            @Override public void onSuccess(            SimpleFooProxy response){
              assertEquals(43,response.getSimpleValues().get(0).getNumber());
              finishTestAndReset();
            }
          }
).fire();
        }
      }
).fire();
    }
  }
);
}
