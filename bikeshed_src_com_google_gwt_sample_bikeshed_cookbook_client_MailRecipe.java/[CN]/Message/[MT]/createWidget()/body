{
  ListListModel<Message> listModel=new ListListModel<Message>();
  List<Message> messages=listModel.getList();
  Random rand=new Random();
  for (int i=0; i < 1000; i++) {
    Message message=new Message(10000 + i,senders[rand.nextInt(senders.length)],subjects[rand.nextInt(subjects.length)]);
    message.isRead=rand.nextBoolean();
    messages.add(message);
  }
  table=new PagingTableListView<Message>(listModel,10);
  table.setSelectionModel(selectionModel);
  SimpleColumn<Message,Boolean> selectedColumn=new SimpleColumn<Message,Boolean>(new CheckboxCell()){
    @Override public boolean dependsOnSelection(){
      return true;
    }
    @Override public Boolean getValue(    Message object){
      return selectionModel.isSelected(object);
    }
  }
;
  selectedColumn.setFieldUpdater(new FieldUpdater<Message,Boolean,Void>(){
    public void update(    int index,    Message object,    Boolean value,    Void viewData){
      selectionModel.setSelected(object,value);
    }
  }
);
  table.addColumn(selectedColumn,"Selected");
  TextColumn<Message> idColumn=new TextColumn<Message>(){
    @Override public String getValue(    Message object){
      return "" + object.id;
    }
  }
;
  table.addColumn(idColumn,"ID");
  TextColumn<Message> isReadColumn=new TextColumn<Message>(){
    @Override public String getValue(    Message object){
      return object.isRead ? "read" : "unread";
    }
  }
;
  table.addColumn(isReadColumn,"Read");
  TextColumn<Message> senderColumn=new TextColumn<Message>(){
    @Override public String getValue(    Message object){
      return object.getSender();
    }
  }
;
  table.addColumn(senderColumn,"Sender");
  TextColumn<Message> subjectColumn=new TextColumn<Message>(){
    @Override public String getValue(    Message object){
      return object.getSubject();
    }
  }
;
  table.addColumn(subjectColumn,"Subject");
  SimpleColumn<Message,String> toggleColumn=new SimpleColumn<Message,String>(ButtonCell.getInstance()){
    @Override public String getValue(    Message object){
      return object.isRead ? "Mark Unread" : "Mark Read";
    }
  }
;
  toggleColumn.setFieldUpdater(new FieldUpdater<Message,String,Void>(){
    public void update(    int index,    Message object,    String value,    Void viewData){
      object.isRead=!object.isRead;
      table.refresh();
    }
  }
);
  table.addColumn(toggleColumn,"Toggle Read/Unread");
  Label searchLabel=new Label("Search Sender or Subject:");
  final TextBox searchBox=new TextBox();
  searchBox.addKeyUpHandler(new KeyUpHandler(){
    public void onKeyUp(    KeyUpEvent event){
      selectionModel.setSearch(searchBox.getText());
    }
  }
);
  HorizontalPanel panel=new HorizontalPanel();
  panel.add(searchLabel);
  panel.add(searchBox);
  FlowPanel p=new FlowPanel();
  p.add(panel);
  p.add(makeButton("Search Subject","SUBJECT"));
  p.add(makeButton("Search Senders","SENDER"));
  p.add(new HTML("<br>"));
  p.add(table);
  p.add(new HTML("<br>"));
  p.add(makeButton("Select None","NONE"));
  p.add(makeButton("Select All On This Page","PAGE"));
  p.add(makeButton("Select All","ALL"));
  p.add(makeButton("Select Read","READ"));
  p.add(makeButton("Select Unread","UNREAD"));
  p.add(new HTML("<hr>"));
  p.add(selectionLabel);
  return p;
}
