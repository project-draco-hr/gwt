{
  ListViewAdapter<Message> adapter=new ListViewAdapter<Message>();
  messages=adapter.getList();
  Date now=new Date();
  Random rand=new Random();
  for (int i=0; i < 1000; i++) {
    long dateOffset=rand.nextInt(60 * 60 * 24* 90) * 1000L;
    Message message=new Message(10000 + i,senders[rand.nextInt(senders.length)],subjects[rand.nextInt(subjects.length)],new Date(now.getTime() - dateOffset));
    message.isRead=rand.nextBoolean();
    messages.add(message);
  }
  final Comparator<Message> idComparator=new Comparator<Message>(){
    public int compare(    Message o1,    Message o2){
      return o1.id - o2.id;
    }
  }
;
  final Comparator<Message> dateComparator=new Comparator<Message>(){
    public int compare(    Message o1,    Message o2){
      long cmp=o1.date.getTime() - o2.date.getTime();
      if (cmp < 0) {
        return -1;
      }
 else       if (cmp > 0) {
        return 1;
      }
 else {
        return 0;
      }
    }
  }
;
  sortMessages(idComparator,true);
  table=new PagingTableListView<Message>(adapter,10);
  table.setSelectionModel(selectionModel);
  adapter.addView(table);
  SelectionColumn<Message> selectedColumn=new SelectionColumn<Message>(selectionModel);
  Header<Boolean> selectedHeader=new Header<Boolean>(new CheckboxCell()){
    @Override public boolean dependsOnSelection(){
      return true;
    }
    @Override public Boolean getValue(){
      return selectionModel.getType().equals("ALL");
    }
  }
;
  selectedHeader.setUpdater(new ValueUpdater<Boolean,Void>(){
    public void update(    Boolean value,    Void viewData){
      if (value == true) {
        selectionModel.setType("ALL");
      }
 else       if (value == false) {
        selectionModel.setType("NONE");
      }
    }
  }
);
  table.addColumn(selectedColumn,selectedHeader);
  addColumn(table,"ID",TextCell.getInstance(),new GetValue<Message,String>(){
    public String getValue(    Message object){
      return "" + object.id;
    }
  }
,idComparator);
  addColumn(table,"Read",new GetValue<Message,String>(){
    public String getValue(    Message object){
      return object.isRead ? "read" : "unread";
    }
  }
);
  Column<Message,Date,Void> dateColumn=addColumn(table,"Date",new DateCell(),new GetValue<Message,Date>(){
    public Date getValue(    Message object){
      return object.date;
    }
  }
,dateComparator);
  dateColumn.setFieldUpdater(new FieldUpdater<Message,Date,Void>(){
    public void update(    int index,    Message object,    Date value,    Void viewData){
      Window.alert("Changed date from " + object.date + " to "+ value);
      object.date=value;
      table.refresh();
    }
  }
);
  addColumn(table,"Sender",new GetValue<Message,String>(){
    public String getValue(    Message object){
      return object.getSender();
    }
  }
);
  addColumn(table,"Subject",new GetValue<Message,String>(){
    public String getValue(    Message object){
      return object.getSubject();
    }
  }
);
  SimpleColumn<Message,String> toggleColumn=new SimpleColumn<Message,String>(ButtonCell.getInstance()){
    @Override public String getValue(    Message object){
      return object.isRead ? "Mark Unread" : "Mark Read";
    }
  }
;
  toggleColumn.setFieldUpdater(new FieldUpdater<Message,String,Void>(){
    public void update(    int index,    Message object,    String value,    Void viewData){
      object.isRead=!object.isRead;
      table.refresh();
    }
  }
);
  table.addColumn(toggleColumn,"Toggle Read/Unread");
  Label searchLabel=new Label("Search Sender or Subject:");
  final TextBox searchBox=new TextBox();
  searchBox.addKeyUpHandler(new KeyUpHandler(){
    public void onKeyUp(    KeyUpEvent event){
      selectionModel.setSearch(searchBox.getText());
    }
  }
);
  HorizontalPanel panel=new HorizontalPanel();
  panel.add(searchLabel);
  panel.add(searchBox);
  FlowPanel p=new FlowPanel();
  p.add(panel);
  p.add(makeButton("Search Subject","SUBJECT"));
  p.add(makeButton("Search Senders","SENDER"));
  p.add(new HTML("<br>"));
  p.add(table);
  p.add(new HTML("<br>"));
  p.add(makeButton("Select None","NONE"));
  p.add(makeButton("Select All On This Page","PAGE"));
  p.add(makeButton("Select All","ALL"));
  p.add(makeButton("Select Read","READ"));
  p.add(makeButton("Select Unread","UNREAD"));
  p.add(new HTML("<hr>"));
  p.add(selectionLabel);
  return p;
}
