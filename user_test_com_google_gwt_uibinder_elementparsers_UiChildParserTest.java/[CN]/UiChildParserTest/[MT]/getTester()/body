{
  MockJavaResource editor=new MockJavaResource("com.google.gwt.user.client.ui.Editor"){
    @Override public CharSequence getContent(){
      StringBuffer code=new StringBuffer();
      code.append("package com.google.gwt.user.client.ui;\n");
      code.append("public interface Editor<T>{\n");
      code.append("}\n");
      return code;
    }
  }
;
  MockJavaResource checkBox=new MockJavaResource("com.google.gwt.user.client.ui.CheckBox"){
    @Override public CharSequence getContent(){
      StringBuffer code=new StringBuffer();
      code.append("package com.google.gwt.user.client.ui;\n");
      code.append("public class CheckBox extends Widget implements Editor<Boolean> {");
      code.append("}\n");
      return code;
    }
  }
;
  MockJavaResource paramType=new MockJavaResource("com.google.gwt.user.client.ui.ParamType"){
    @Override public CharSequence getContent(){
      StringBuffer code=new StringBuffer();
      code.append("package com.google.gwt.user.client.ui;\n");
      code.append("public interface ParamType<T> {}\n");
      return code;
    }
  }
;
  MockJavaResource paramTypeImpl=new MockJavaResource("com.google.gwt.user.client.ui.ParamTypeImpl"){
    @Override public CharSequence getContent(){
      StringBuffer code=new StringBuffer();
      code.append("package com.google.gwt.user.client.ui;\n");
      code.append("public class ParamTypeImpl<T> implements ParamType<T> {}\n");
      return code;
    }
  }
;
  MockJavaResource hasUiChildren=new MockJavaResource(PARSED_TYPE){
    @Override public CharSequence getContent(){
      StringBuffer code=new StringBuffer();
      code.append("package com.google.gwt.user.client.ui;\n");
      code.append("import com.google.gwt.uibinder.client.UiChild;\n");
      code.append("import com.google.gwt.event.dom.client.ClickHandler;\n");
      code.append("public class HasUiChildren<T> {\n");
      code.append("  @UiChild\n");
      code.append("  void addChild(Object child) {}\n\n");
      code.append("  @UiChild(tagname=\"achild\")\n");
      code.append("  void addNamedChild(Object child) {}\n\n");
      code.append("  @UiChild(tagname=\"alimitedchild\", limit=1)\n");
      code.append("  void addLimitedChild(Object child, int param1) {}\n\n");
      code.append("  @UiChild(tagname=\"aSpecificChild\")\n");
      code.append("  void addSpecificTypeOfChild(MenuItem child) {}\n\n");
      code.append("  @UiChild(tagname=\"anInterfaceChild\")\n");
      code.append("  void addInterfaceChild(IsWidget child) {}\n\n");
      code.append("  @UiChild(tagname=\"aParamTypeChild\")\n");
      code.append("  void addParamTypeChild(ParamType<T> child) {}\n\n");
      code.append("  @UiChild(tagname=\"aComposedParamTypeChild\")\n");
      code.append("  <W extends IsWidget & Editor<T>> void \n");
      code.append("  addComposedParamTypeChild(W child) {}\n\n");
      code.append("}\n");
      return code;
    }
  }
;
  return new ElementParserTester(PARSED_TYPE,new UiChildParser(new UiBinderContext()),paramType,paramTypeImpl,editor,checkBox,hasUiChildren);
}
