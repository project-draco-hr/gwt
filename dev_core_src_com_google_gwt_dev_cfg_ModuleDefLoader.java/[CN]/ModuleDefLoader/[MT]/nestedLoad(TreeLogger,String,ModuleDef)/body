{
  if (alreadyLoadedModules.contains(moduleName)) {
    logger.log(TreeLogger.TRACE,"Module '" + moduleName + "' has already been loaded and will be skipped",null);
    return;
  }
 else {
    alreadyLoadedModules.add(moduleName);
  }
  String slashedModuleName=moduleName.replace('.','/');
  String resName=slashedModuleName + ".gwt.xml";
  URL moduleURL=classLoader.getResource(resName);
  if (moduleURL != null) {
    String externalForm=moduleURL.toExternalForm();
    logger.log(TreeLogger.TRACE,"Module location: " + externalForm,null);
    try {
      if ((!(externalForm.startsWith("jar:file"))) && (!(externalForm.startsWith("zip:file"))) && (!(externalForm.startsWith("http://")))&& (!(externalForm.startsWith("ftp://")))) {
        File gwtXmlFile=new File(new URI(externalForm));
        moduleDef.addGwtXmlFile(gwtXmlFile);
      }
    }
 catch (    URISyntaxException e) {
      logger.log(TreeLogger.ERROR,"Error parsing URI",e);
      throw new UnableToCompleteException();
    }
  }
  if (moduleURL == null) {
    String msg="Unable to find '" + resName + "' on your classpath; could be a typo, or maybe you forgot to include a classpath entry for source?";
    logger.log(TreeLogger.ERROR,msg,null);
    throw new UnableToCompleteException();
  }
  String moduleDir="";
  int i=slashedModuleName.lastIndexOf('/');
  if (i != -1) {
    moduleDir=slashedModuleName.substring(0,i) + "/";
  }
  Reader r=null;
  try {
    r=Util.createReader(logger,moduleURL);
    ModuleDefSchema schema=new ModuleDefSchema(logger,this,moduleURL,moduleDir,moduleDef);
    ReflectiveParser.parse(logger,schema,r);
  }
  finally {
    Utility.close(r);
  }
}
