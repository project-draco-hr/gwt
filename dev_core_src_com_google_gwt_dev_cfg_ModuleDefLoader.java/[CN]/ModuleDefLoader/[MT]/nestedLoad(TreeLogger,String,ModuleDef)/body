{
  if (alreadyLoadedModules.contains(moduleName)) {
    return;
  }
  TreeLogger logger=parentLogger.branch(TreeLogger.DEBUG,"Loading inherited module '" + moduleName + "'",null);
  alreadyLoadedModules.add(moduleName);
  if (!ModuleDef.isValidModuleName(moduleName)) {
    logger.log(TreeLogger.ERROR,"Invalid module name: '" + moduleName + "'",null);
    throw new UnableToCompleteException();
  }
  String slashedModuleName=moduleName.replace('.','/');
  String resName=slashedModuleName + ModuleDefLoader.GWT_MODULE_XML_SUFFIX;
  URL moduleURL=classLoader.getResource(resName);
  if (moduleURL != null) {
    String externalForm=moduleURL.toExternalForm();
    if (logger.isLoggable(TreeLogger.DEBUG)) {
      logger.log(TreeLogger.DEBUG,"Module location: " + externalForm,null);
    }
    try {
      if ((!(externalForm.startsWith("jar:file"))) && (!(externalForm.startsWith("zip:file"))) && (!(externalForm.startsWith("http://")))&& (!(externalForm.startsWith("ftp://")))) {
        File gwtXmlFile=new File(moduleURL.toURI());
        moduleDef.addGwtXmlFile(gwtXmlFile);
      }
    }
 catch (    URISyntaxException e) {
      logger.log(TreeLogger.ERROR,"Error parsing URI",e);
      throw new UnableToCompleteException();
    }
    String compilationUnitArchiveName=slashedModuleName + ModuleDefLoader.COMPILATION_UNIT_ARCHIVE_SUFFIX;
    URL compiledModuleURL=classLoader.getResource(compilationUnitArchiveName);
    if (compiledModuleURL != null) {
      moduleDef.addCompilationUnitArchiveURL(compiledModuleURL);
    }
  }
  if (moduleURL == null) {
    logger.log(TreeLogger.ERROR,"Unable to find '" + resName + "' on your classpath; "+ "could be a typo, or maybe you forgot to include a classpath entry for source?");
    throw new UnableToCompleteException();
  }
  String moduleDir="";
  int i=slashedModuleName.lastIndexOf('/');
  if (i != -1) {
    moduleDir=slashedModuleName.substring(0,i) + "/";
  }
  Reader r=null;
  try {
    r=Util.createReader(logger,moduleURL);
    ModuleDefSchema schema=new ModuleDefSchema(logger,this,moduleName,moduleURL,moduleDir,moduleDef);
    ReflectiveParser.parse(logger,schema,r);
  }
 catch (  Throwable e) {
    logger.log(TreeLogger.ERROR,"Unexpected error while processing XML",e);
    throw new UnableToCompleteException();
  }
 finally {
    Utility.close(r);
  }
}
