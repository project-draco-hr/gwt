{
  this.path=pathSoFar;
  setEditor(editor);
  setObject(ensureMutable(object));
  errors=new ArrayList<EditorError>();
  simpleEditors=new HashMap<String,Editor<?>>();
  if (hasSubEditorsWithoutDelegates()) {
    lastLeafValues=new HashMap<String,Object>();
  }
  if (editor instanceof HasEditorErrors<?>) {
    hasEditorErrors=(HasEditorErrors<T>)editor;
  }
  if (editor instanceof LeafValueEditor<?>) {
    leafValueEditor=(LeafValueEditor<T>)editor;
  }
  if (editor instanceof HasEditorDelegate<?>) {
    ((HasEditorDelegate<T>)editor).setDelegate(this);
  }
  if (editor instanceof ValueAwareEditor<?>) {
    valueAwareEditor=(ValueAwareEditor<T>)editor;
    if (editor instanceof CompositeEditor<?,?,?>) {
      @SuppressWarnings("unchecked") CompositeEditor<T,Object,Editor<Object>> temp=(CompositeEditor<T,Object,Editor<Object>>)editor;
      composedEditor=temp;
      editorChain=new Chain<Object,Editor<Object>>(map);
      composedEditor.setEditorChain(editorChain);
    }
  }
  if (leafValueEditor != null) {
    lastLeafValue=object;
    leafValueEditor.setValue(object);
    return;
  }
  if (valueAwareEditor != null) {
    valueAwareEditor.setValue(object);
  }
  if (object != null) {
    attachSubEditors(map);
  }
}
