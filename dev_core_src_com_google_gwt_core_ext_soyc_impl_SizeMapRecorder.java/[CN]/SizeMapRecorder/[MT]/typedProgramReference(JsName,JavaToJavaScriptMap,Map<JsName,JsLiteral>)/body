{
  JMethod method=jjsmap.nameToMethod(name);
  if (method != null) {
    StringBuilder sb=new StringBuilder();
    sb.append(method.getEnclosingType().getName());
    sb.append("::");
    sb.append(method.getName());
    sb.append("(");
    for (    JType type : method.getOriginalParamTypes()) {
      sb.append(type.getJsniSignatureName());
    }
    sb.append(")");
    sb.append(method.getOriginalReturnType().getJsniSignatureName());
    String desc=sb.toString();
    return new TypedProgramReference("method",desc);
  }
  JField field=jjsmap.nameToField(name);
  if ((field != null) && (field.getEnclosingType() != null)) {
    StringBuilder sb=new StringBuilder();
    sb.append(field.getEnclosingType().getName());
    sb.append("::");
    sb.append(field.getName());
    return new TypedProgramReference("field",sb.toString());
  }
  JClassType type=jjsmap.nameToType(name);
  if (type != null) {
    return new TypedProgramReference("type",type.getName());
  }
  JsLiteral literal=internedLiteralByVariableName.get(name);
  if (literal instanceof JsStringLiteral) {
    return new TypedProgramReference("string",((JsStringLiteral)literal).getValue());
  }
  return new TypedProgramReference("var",name.getShortIdent());
}
