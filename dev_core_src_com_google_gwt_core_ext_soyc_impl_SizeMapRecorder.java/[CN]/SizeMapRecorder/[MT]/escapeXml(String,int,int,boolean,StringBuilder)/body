{
  int lastIndex=0;
  int len=end - start;
  char[] c=new char[len];
  code.getChars(start,end,c,0);
  for (int i=0; i < len; i++) {
    if ((c[i] < '\u0020')) {
      builder.append(c,lastIndex,i - lastIndex);
      if (c[i] == '\u0000') {
        builder.append("\\0");
      }
 else       if (c[i] == '\u0009') {
        builder.append("\\t");
      }
 else       if (c[i] == '\n') {
        builder.append("\\n");
      }
 else       if (c[i] == '\r') {
        builder.append("\\r");
      }
 else {
        builder.append("(invalid xml character: \\u" + charToHex(c[i]) + ")");
      }
      lastIndex=i + 1;
    }
 else     if (((c[i] >= '\u007F') && (c[i] <= '\u0084')) || ((c[i] >= '\u0086') && (c[i] <= '\u009F')) || ((c[i] >= '\uD800') && (c[i] <= '\uDBFF'))|| ((c[i] >= '\uDC00') && (c[i] <= '\uDFFF'))|| ((c[i] >= '\uFDD0') && (c[i] <= '\uFDDF'))|| (c[i] == '\u00A0')|| (c[i] == '\uFFFF')|| (c[i] == '\uFFFE')) {
      builder.append(c,lastIndex,i - lastIndex);
      builder.append("(invalid xml character: \\u" + charToHex(c[i]) + ")");
      lastIndex=i + 1;
    }
 else     if (c[i] == '&') {
      builder.append(c,lastIndex,i - lastIndex);
      builder.append("&amp;");
      lastIndex=i + 1;
    }
 else     if (c[i] == '>') {
      builder.append(c,lastIndex,i - lastIndex);
      builder.append("&gt;");
      lastIndex=i + 1;
    }
 else     if (c[i] == '<') {
      builder.append(c,lastIndex,i - lastIndex);
      builder.append("&lt;");
      lastIndex=i + 1;
    }
 else     if (c[i] == '\"') {
      builder.append(c,lastIndex,i - lastIndex);
      builder.append("&quot;");
      lastIndex=i + 1;
    }
 else     if (c[i] == '\'') {
      if (quoteApostrophe) {
        builder.append(c,lastIndex,i - lastIndex);
        builder.append("&apos;");
        lastIndex=i + 1;
      }
    }
 else     if (c[i] > '\u007F') {
      builder.append(c,lastIndex,i - lastIndex);
      builder.append("&#x" + charToHex(c[i]) + ";");
      lastIndex=i + 1;
    }
  }
  builder.append(c,lastIndex,len - lastIndex);
}
