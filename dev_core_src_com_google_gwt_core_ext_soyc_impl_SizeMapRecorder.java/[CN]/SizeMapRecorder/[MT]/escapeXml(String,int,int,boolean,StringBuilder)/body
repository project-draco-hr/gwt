{
  int lastIndex=0;
  int len=end - start;
  char[] c=new char[len];
  code.getChars(start,end,c,0);
  for (int i=0; i < len; i++) {
    if ((c[i] >= '\uD800') && (c[i] <= '\uDBFF')) {
      builder.append(c,lastIndex,i - lastIndex);
      builder.append("(non-valid utf-8 character)");
      lastIndex=i + 1;
      break;
    }
 else     if ((c[i] >= '\uDC00') && (c[i] <= '\uDFFF')) {
      builder.append(c,lastIndex,i - lastIndex);
      builder.append("(non-valid utf-8 character)");
      lastIndex=i + 1;
      break;
    }
 else     if (c[i] == '\0') {
      builder.append(c,lastIndex,i - lastIndex);
      builder.append("(null)");
      lastIndex=i + 1;
      break;
    }
 else     if (c[i] == '\uffff') {
      builder.append(c,lastIndex,i - lastIndex);
      builder.append("(uffff)");
      lastIndex=i + 1;
      break;
    }
 else     if (c[i] == '\ufffe') {
      builder.append(c,lastIndex,i - lastIndex);
      builder.append("(ufffe)");
      lastIndex=i + 1;
    }
 else     if (c[i] == '&') {
      builder.append(c,lastIndex,i - lastIndex);
      builder.append("&amp;");
      lastIndex=i + 1;
    }
 else     if (c[i] == '>') {
      builder.append(c,lastIndex,i - lastIndex);
      builder.append("&gt;");
      lastIndex=i + 1;
    }
 else     if (c[i] == '<') {
      builder.append(c,lastIndex,i - lastIndex);
      builder.append("&lt;");
      lastIndex=i + 1;
    }
 else     if (c[i] == '\"') {
      builder.append(c,lastIndex,i - lastIndex);
      builder.append("&quot;");
      lastIndex=i + 1;
    }
 else     if (c[i] == '\'') {
      if (quoteApostrophe) {
        builder.append(c,lastIndex,i - lastIndex);
        builder.append("&apos;");
        lastIndex=i + 1;
      }
    }
  }
  builder.append(c,lastIndex,len - lastIndex);
}
