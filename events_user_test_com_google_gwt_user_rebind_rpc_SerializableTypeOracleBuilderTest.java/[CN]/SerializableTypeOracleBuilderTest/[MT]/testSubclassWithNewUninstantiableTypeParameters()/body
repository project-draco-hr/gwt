{
  Set<CompilationUnit> units=new HashSet<CompilationUnit>();
  addStandardClasses(units);
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class A implements Serializable {\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("A",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class B<T> extends A {\n");
    code.append("  T x;\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("B",code));
  }
  TreeLogger logger=createLogger();
  TypeOracle to=TypeOracleTestingUtils.buildTypeOracle(logger,units);
  JClassType a=to.getType("A");
  SerializableTypeOracleBuilder sob=createSerializableTypeOracleBuilder(logger,to);
  sob.addRootType(logger,a);
  SerializableTypeOracle so=sob.build(logger);
  assertInstantiable(so,a);
  assertSerializableTypes(so,a);
}
