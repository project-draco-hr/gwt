{
  String args=null;
  String name=runStyleName;
  int colon=name.indexOf(':');
  if (colon >= 0) {
    args=name.substring(colon + 1);
    name=name.substring(0,colon);
  }
  if (name.indexOf('.') < 0) {
    name=RunStyle.class.getName() + name;
  }
  Throwable caught=null;
  try {
    Class<?> clazz=Class.forName(name);
    Class<? extends RunStyle> runStyleClass=clazz.asSubclass(RunStyle.class);
    Constructor<? extends RunStyle> ctor=runStyleClass.getConstructor(JUnitShell.class);
    runStyle=ctor.newInstance(JUnitShell.this);
    return runStyle.initialize(args);
  }
 catch (  ClassNotFoundException e) {
    String msg="Unable to create runStyle \"" + runStyleName + "\"";
    if (runStyleName.indexOf('.') < 0 && runStyleName.length() > 0 && Character.isLowerCase(runStyleName.charAt(0))) {
      msg+=" - did you mean \"" + Character.toUpperCase(runStyleName.charAt(0)) + runStyleName.substring(1)+ "\"?";
    }
 else {
      msg+=" -- is it spelled correctly?";
    }
    getTopLogger().log(TreeLogger.ERROR,msg);
    return -1;
  }
catch (  SecurityException e) {
    caught=e;
  }
catch (  NoSuchMethodException e) {
    caught=e;
  }
catch (  IllegalArgumentException e) {
    caught=e;
  }
catch (  InstantiationException e) {
    caught=e;
  }
catch (  IllegalAccessException e) {
    caught=e;
  }
catch (  InvocationTargetException e) {
    caught=e;
  }
  getTopLogger().log(TreeLogger.ERROR,"Unable to create runStyle \"" + runStyleName + "\"",caught);
  return -1;
}
