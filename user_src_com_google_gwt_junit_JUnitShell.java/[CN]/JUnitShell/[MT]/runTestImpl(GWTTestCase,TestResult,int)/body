{
  testBatchingMethodTimeoutMillis=batchingStrategy.getTimeoutMultiplier() * baseTestMethodTimeoutMillis;
  if (mustNotExecuteTest(getBannedPlatforms(testCase.getClass(),testCase.getName()))) {
    return;
  }
  if (lastLaunchFailed) {
    throw new UnableToCompleteException();
  }
  String moduleName=testCase.getModuleName();
  String syntheticModuleName=testCase.getSyntheticModuleName();
  Strategy strategy=testCase.getStrategy();
  boolean sameTest=(currentModule != null) && syntheticModuleName.equals(currentModule.getName());
  if (sameTest && lastLaunchFailed) {
    throw new UnableToCompleteException();
  }
  if (!sameTest) {
    currentModule=compileStrategy.maybeCompileModule(moduleName,syntheticModuleName,strategy,batchingStrategy,getTopLogger());
    currentCompilationState=currentModule.getCompilationState(getTopLogger(),true);
  }
  assert(currentModule != null);
  JUnitFatalLaunchException launchException=checkTestClassInCurrentModule(getTopLogger(),currentCompilationState,moduleName,testCase);
  if (launchException != null) {
    testResult.addError(testCase,launchException);
    return;
  }
  currentTestInfo=new TestInfo(currentModule.getName(),testCase.getClass().getName(),testCase.getName());
  numTries++;
  if (messageQueue.hasResults(currentTestInfo)) {
    processTestResult(testCase,testResult);
    return;
  }
  compileStrategy.maybeAddTestBlockForCurrentTest(testCase,batchingStrategy);
  try {
    if (!runStyleStarted) {
      runStyle.launchModule(currentModule.getName());
    }
  }
 catch (  UnableToCompleteException e) {
    lastLaunchFailed=true;
    testResult.addError(testCase,new JUnitFatalLaunchException(e));
    return;
  }
  runStyleStarted=true;
  boolean mustRetry=mustRetry(numTries);
  try {
    testBeginTime=System.currentTimeMillis();
    testBeginTimeout=testBeginTime + baseTestBeginTimeoutMillis;
    testMethodTimeout=0;
    while (notDone()) {
      messageQueue.waitForResults(1000);
    }
    if (!mustRetry && pendingException != null) {
      UnableToCompleteException e=pendingException;
      pendingException=null;
      throw e;
    }
  }
 catch (  TimeoutException e) {
    if (!mustRetry) {
      lastLaunchFailed=true;
      testResult.addError(testCase,e);
      return;
    }
  }
  if (mustRetry) {
    if (messageQueue.needsRerunning(currentTestInfo)) {
      messageQueue.removeResults(currentTestInfo);
      getTopLogger().log(TreeLogger.WARN,currentTestInfo + " is being retried, retry attempt = " + numTries);
      runTestImpl(testCase,testResult,numTries);
      return;
    }
  }
  assert(messageQueue.hasResults(currentTestInfo));
  processTestResult(testCase,testResult);
}
