{
  final HostedModeOptionsImpl options=shell.options;
  registerHandler(new ArgHandlerPort(options){
    @Override public String[] getDefaultArgs(){
      return new String[]{"-port","auto"};
    }
  }
);
  registerHandler(new ArgHandlerWhitelist());
  registerHandler(new ArgHandlerBlacklist());
  registerHandler(new ArgHandlerLogDir(options));
  registerHandler(new ArgHandlerLogLevel(options));
  registerHandler(new ArgHandlerGenDir(options));
  registerHandler(new ArgHandlerCodeServerPort(options){
    @Override public String[] getDefaultArgs(){
      return new String[]{this.getTag(),"auto"};
    }
  }
);
  options.setServletContainerLauncher(shell.new MyJettyLauncher());
  registerHandler(new ArgHandlerWarDir(options){
    private static final String OUT_TAG="-out";
    @Override public String[] getTags(){
      return new String[]{getTag(),OUT_TAG};
    }
    @Override public int handle(    String[] args,    int tagIndex){
      if (OUT_TAG.equals(args[tagIndex])) {
        System.err.println("The -out option is deprecated. This option will be removed in " + "future GWT release and will throw an error if it is still used. Please use -war " + "option instead.");
      }
      return super.handle(args,tagIndex);
    }
  }
);
  registerHandler(new ArgHandlerDeployDir(options));
  registerHandler(new ArgHandlerExtraDir(options));
  registerHandler(new ArgHandlerWorkDirOptional(options));
  registerHandler(new ArgHandlerSourceLevel(options));
  registerHandler(new ArgHandlerScriptStyle(options));
  registerHandler(new ArgHandlerEnableAssertions(options));
  registerHandler(new ArgHandlerDisableAggressiveOptimization(options));
  registerHandler(new ArgHandlerDisableCastChecking(options));
  registerHandler(new ArgHandlerDisableClassMetadata(options));
  registerHandler(new ArgHandlerDisableClusterSimilarFunctions(options));
  registerHandler(new ArgHandlerDisableInlineLiteralParameters(options));
  registerHandler(new ArgHandlerDisableOptimizeDataflow(options));
  registerHandler(new ArgHandlerDisableOrdinalizeEnums(options));
  registerHandler(new ArgHandlerDisableRemoveDuplicateFunctions(options));
  registerHandler(new ArgHandlerDisableRunAsync(options));
  registerHandler(new ArgHandlerDisableUpdateCheck(options));
  registerHandler(new ArgHandlerDraftCompile(options));
  registerHandler(new ArgHandlerMaxPermsPerPrecompile(options));
  registerHandler(new ArgHandlerLocalWorkers(options));
  registerHandler(new ArgHandlerOptimize(options));
  registerHandler(new ArgHandlerLogLevel(options){
    @Override protected Type getDefaultLogLevel(){
      return TreeLogger.WARN;
    }
  }
);
  registerHandler(new ArgHandlerRunCompiledJavascript(shell));
  registerHandler(new ArgHandlerInt(){
    @Override public String[] getDefaultArgs(){
      return new String[]{getTag(),"5"};
    }
    @Override public String getPurpose(){
      return "Set the test method timeout, in minutes";
    }
    @Override public String getTag(){
      return "-testMethodTimeout";
    }
    @Override public String[] getTagArgs(){
      return new String[]{"minutes"};
    }
    @Override public boolean isUndocumented(){
      return false;
    }
    @Override public void setInt(    int minutes){
      shell.baseTestMethodTimeoutMillis=minutes * 60 * 1000;
    }
  }
);
  registerHandler(new ArgHandlerInt(){
    @Override public String[] getDefaultArgs(){
      return new String[]{getTag(),String.valueOf(DEFAULT_BEGIN_TIMEOUT_MINUTES)};
    }
    @Override public String getPurpose(){
      return "Set the test begin timeout (time for clients to contact " + "server), in minutes";
    }
    @Override public String getTag(){
      return "-testBeginTimeout";
    }
    @Override public String[] getTagArgs(){
      return new String[]{"minutes"};
    }
    @Override public boolean isUndocumented(){
      return false;
    }
    @Override public void setInt(    int minutes){
      shell.baseTestBeginTimeoutMillis=minutes * 60 * 1000;
    }
  }
);
  registerHandler(new ArgHandlerString(){
    @Override public String getPurpose(){
      return "Selects the runstyle to use for this test.  The name is " + "a suffix of com.google.gwt.junit.RunStyle or is a fully " + "qualified class name, and may be followed with a colon and "+ "an argument for this runstyle.  The specified class must"+ "extend RunStyle.";
    }
    @Override public String getTag(){
      return "-runStyle";
    }
    @Override public String[] getTagArgs(){
      return new String[]{"runstyle[:args]"};
    }
    @Override public boolean isUndocumented(){
      return false;
    }
    @Override public boolean setString(    String runStyleArg){
      shell.runStyleName=runStyleArg;
      return true;
    }
  }
);
  registerHandler(new ArgHandlerString(){
    @Override public String getPurpose(){
      return "Configure batch execution of tests";
    }
    @Override public String getTag(){
      return "-batch";
    }
    @Override public String[] getTagArgs(){
      return new String[]{"none|class|module"};
    }
    @Override public boolean isUndocumented(){
      return true;
    }
    @Override public boolean setString(    String str){
      if (str.equals("none")) {
        shell.batchingStrategy=new NoBatchingStrategy();
      }
 else       if (str.equals("class")) {
        shell.batchingStrategy=new ClassBatchingStrategy();
      }
 else       if (str.equals("module")) {
        shell.batchingStrategy=new ModuleBatchingStrategy();
      }
 else {
        return false;
      }
      return true;
    }
  }
);
  registerHandler(new ArgHandlerShowWindows(shell));
  registerHandler(new ArgHandlerString(){
    @Override public String getPurpose(){
      return "Precompile modules as tests are running (speeds up remote tests but requires more memory)";
    }
    @Override public String getTag(){
      return "-precompile";
    }
    @Override public String[] getTagArgs(){
      return new String[]{"simple|all|parallel"};
    }
    @Override public boolean isUndocumented(){
      return true;
    }
    @Override public boolean setString(    String str){
      if (str.equals("simple")) {
        shell.compileStrategy=new SimpleCompileStrategy(shell);
      }
 else       if (str.equals("all")) {
        shell.compileStrategy=new PreCompileStrategy(shell);
      }
 else       if (str.equals("parallel")) {
        shell.compileStrategy=new ParallelCompileStrategy(shell);
      }
 else {
        return false;
      }
      return true;
    }
  }
);
  registerHandler(new ArgHandlerRunInStandardsMode(shell));
  registerHandler(new ArgHandlerInt(){
    @Override public String getPurpose(){
      return "EXPERIMENTAL: Sets the maximum number of attempts for running each test method";
    }
    @Override public String getTag(){
      return "-Xtries";
    }
    @Override public String[] getTagArgs(){
      return new String[]{"1"};
    }
    @Override public boolean isRequired(){
      return false;
    }
    @Override public boolean isUndocumented(){
      return false;
    }
    @Override public void setInt(    int value){
      shell.tries=value;
    }
    @Override public boolean isExperimental(){
      return true;
    }
  }
);
  registerHandler(new ArgHandlerString(){
    @Override public String getPurpose(){
      return "Specify the user agents to reduce the number of permutations for remote browser tests;" + " e.g. ie6,ie8,safari,gecko1_8,opera";
    }
    @Override public String getTag(){
      return "-userAgents";
    }
    @Override public String[] getTagArgs(){
      return new String[]{"userAgents"};
    }
    @Override public boolean setString(    String str){
      shell.remoteUserAgents=str.split(",");
      for (int i=0; i < shell.remoteUserAgents.length; i++) {
        shell.remoteUserAgents[i]=shell.remoteUserAgents[i].trim();
      }
      return true;
    }
  }
);
}
