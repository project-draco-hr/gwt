def FinishInterface(self):
    if (self._super_interface and (self._interface.id is not self._super_interface)):
        consts_emitter = self._top_level_emitter.Emit('\ninterface $NAME extends $BASE {\n$!CONSTS}\n', NAME=self._interface.id, BASE=self._super_interface)
        for const in sorted(self._interface.constants, ConstantOutputOrder):
            self._EmitConstant(consts_emitter, const)
    if (self._interface.id == 'Document'):
        for iface in self._database.GetInterfaces():
            if iface.id.endswith('Element'):
                if ((iface.id == 'Element') or (iface.id == 'SVGElement')):
                    continue
                callName = DartType(iface.id)
                if (iface.id == 'SVGSVGElement'):
                    callName = 'SVGElement'
                self._members_emitter.Emit('\n  $TYPE create$CALL();\n', CALL=callName, TYPE=DartType(iface.id))
    if (self._interface.id == 'Window'):
        for iface in self._database.GetInterfaces():
            element_type = MaybeTypedArrayElementType(iface)
            if element_type:
                self._members_emitter.Emit('\n  $TYPE new$CTOR(int length);\n\n  $TYPE new$CTOR(IndexableNumber list);\n\n  $TYPE new$CTOR(ArrayBuffer buffer, int byteOffset, int length);\n', CTOR=iface.id, TYPE=iface.id)
            constructor_info = AnalyzeConstructor(iface)
            if constructor_info:
                self._members_emitter.Emit('\n  $TYPE new$CTOR($PARAMS);\n', TYPE=iface.id, CTOR=iface.id, PARAMS=constructor_info.ParametersInterfaceDeclaration())
