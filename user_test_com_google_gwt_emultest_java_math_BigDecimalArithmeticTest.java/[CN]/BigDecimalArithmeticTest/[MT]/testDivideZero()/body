{
  BigDecimal quotient=BigDecimal.ZERO.divide(BigDecimal.ONE);
  assertEquals(BigDecimal.ZERO,quotient);
  quotient=BigDecimal.ZERO.negate().divide(BigDecimal.ONE);
  assertEquals(BigDecimal.ZERO,quotient);
  try {
    quotient=BigDecimal.ZERO.divide(BigDecimal.ZERO);
    fail("Expected ArithmeticException, divide by zero");
  }
 catch (  ArithmeticException expected) {
  }
  assertEquals(BigDecimal.ZERO,quotient);
  try {
    quotient=BigDecimal.ONE.divide(BigDecimal.ZERO);
    fail("Expected ArithmeticException, divide by zero");
  }
 catch (  ArithmeticException expected) {
  }
  try {
    quotient=BigDecimal.ONE.divideToIntegralValue(BigDecimal.ZERO);
    fail("Expected ArithmeticException, divide by zero");
  }
 catch (  ArithmeticException expected) {
  }
}
