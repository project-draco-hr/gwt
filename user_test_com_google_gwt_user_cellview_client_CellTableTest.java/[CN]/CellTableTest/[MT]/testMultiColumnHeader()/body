{
  Resources res=GWT.create(Resources.class);
  CellTable<String> table=new CellTable<String>(10,res);
  TextHeader header=new TextHeader("Hello");
  Style style=res.cellTableStyle();
  String styleHeader=style.cellTableHeader();
  String styleFirstColumn=style.cellTableFirstColumnHeader();
  String styleLastColumn=style.cellTableLastColumnHeader();
  table.redraw();
  assertEquals(0,getHeaderCount(table));
  table.addColumn(new TextColumn<String>(){
    @Override public String getValue(    String object){
      return null;
    }
  }
,header);
  table.redraw();
  assertEquals(1,getHeaderCount(table));
  assertEquals(1,getHeaderElement(table,0).getColSpan());
  assertTrue(getHeaderElement(table,0).getClassName().contains(styleHeader));
  assertTrue(getHeaderElement(table,0).getClassName().contains(styleFirstColumn));
  assertTrue(getHeaderElement(table,0).getClassName().contains(styleLastColumn));
  table.addColumn(new TextColumn<String>(){
    @Override public String getValue(    String object){
      return null;
    }
  }
,header);
  table.redraw();
  assertEquals(1,getHeaderCount(table));
  assertEquals(2,getHeaderElement(table,0).getColSpan());
  assertTrue(getHeaderElement(table,0).getClassName().contains(styleHeader));
  assertTrue(getHeaderElement(table,0).getClassName().contains(styleFirstColumn));
  assertTrue(getHeaderElement(table,0).getClassName().contains(styleLastColumn));
  table.addColumn(new TextColumn<String>(){
    @Override public String getValue(    String object){
      return null;
    }
  }
,header);
  table.redraw();
  assertEquals(1,getHeaderCount(table));
  assertEquals(3,getHeaderElement(table,0).getColSpan());
  assertTrue(getHeaderElement(table,0).getClassName().contains(styleHeader));
  assertTrue(getHeaderElement(table,0).getClassName().contains(styleFirstColumn));
  assertTrue(getHeaderElement(table,0).getClassName().contains(styleLastColumn));
  table.addColumn(new TextColumn<String>(){
    @Override public String getValue(    String object){
      return null;
    }
  }
,"New Header");
  table.redraw();
  assertEquals(2,getHeaderCount(table));
  assertEquals(3,getHeaderElement(table,0).getColSpan());
  assertTrue(getHeaderElement(table,0).getClassName().contains(styleHeader));
  assertTrue(getHeaderElement(table,0).getClassName().contains(styleFirstColumn));
  assertEquals(1,getHeaderElement(table,1).getColSpan());
  assertTrue(getHeaderElement(table,1).getClassName().contains(styleHeader));
  assertTrue(getHeaderElement(table,1).getClassName().contains(styleLastColumn));
  table.addColumn(new TextColumn<String>(){
    @Override public String getValue(    String object){
      return null;
    }
  }
,header);
  table.addColumn(new TextColumn<String>(){
    @Override public String getValue(    String object){
      return null;
    }
  }
,header);
  table.redraw();
  assertEquals(3,getHeaderCount(table));
  assertEquals(3,getHeaderElement(table,0).getColSpan());
  assertTrue(getHeaderElement(table,0).getClassName().contains(styleHeader));
  assertTrue(getHeaderElement(table,0).getClassName().contains(styleFirstColumn));
  assertEquals(1,getHeaderElement(table,1).getColSpan());
  assertTrue(getHeaderElement(table,1).getClassName().contains(styleHeader));
  assertEquals(2,getHeaderElement(table,2).getColSpan());
  assertTrue(getHeaderElement(table,2).getClassName().contains(styleHeader));
  assertTrue(getHeaderElement(table,2).getClassName().contains(styleLastColumn));
}
