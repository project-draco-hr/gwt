{
  if (shouldIgnore(x,state)) {
    return null;
  }
  ExecutableType xType=viewIn(checkedElement,x,state);
  TypeMirror returnType=xType.getReturnType();
  if (state.types.isAssignable(returnType,state.requestType)) {
    DeclaredType asRequest=(DeclaredType)State.viewAs(state.requestType,returnType,state);
    if (asRequest.getTypeArguments().isEmpty()) {
      state.poison(x,Messages.rawType());
    }
 else {
      TypeMirror requestReturn=asRequest.getTypeArguments().get(0);
      if (!state.isTransportableType(requestReturn)) {
        state.poison(x,Messages.untransportableType(requestReturn));
      }
    }
  }
 else   if (state.types.isAssignable(returnType,state.instanceRequestType)) {
    DeclaredType asInstanceRequest=(DeclaredType)State.viewAs(state.instanceRequestType,returnType,state);
    if (asInstanceRequest.getTypeArguments().isEmpty()) {
      state.poison(x,Messages.rawType());
    }
 else {
      TypeMirror instanceType=asInstanceRequest.getTypeArguments().get(0);
      state.maybeScanProxy((TypeElement)state.types.asElement(instanceType));
      TypeMirror requestReturn=asInstanceRequest.getTypeArguments().get(1);
      if (!state.isTransportableType(requestReturn)) {
        state.poison(x,Messages.untransportableType(requestReturn));
      }
    }
  }
 else   if (!isSetter(x,state)) {
    state.poison(x,Messages.contextRequiredReturnTypes(state.requestType.asElement().getSimpleName(),state.instanceRequestType.asElement().getSimpleName()));
  }
  int i=0;
  for (  TypeMirror parameterType : xType.getParameterTypes()) {
    if (!state.isTransportableType(parameterType)) {
      state.poison(x.getParameters().get(i),Messages.untransportableType(parameterType));
    }
    i++;
  }
  return null;
}
