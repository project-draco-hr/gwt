{
  if (x.getTarget() == runAsyncCode) {
    JExpression arg0=x.getArgs().get(0);
    if (!(arg0 instanceof JClassLiteral)) {
      error(arg0.getSourceInfo(),"Only a class literal may be passed to runAsyncCode");
      return;
    }
    JClassLiteral lit=(JClassLiteral)arg0;
    String name=nameFromClassLiteral(lit);
    List<JRunAsync> matches=replacementsByName.get(name);
    SourceInfo info=x.getSourceInfo();
    if (matches == null || matches.size() == 0) {
      error(info,"No runAsync call is named " + name);
      return;
    }
    if (matches.size() > 1) {
      TreeLogger branch=error(info,"Multiple runAsync calls are named " + name);
      List<String> errors=new ArrayList<String>();
      for (      JRunAsync match : matches) {
        errors.add("One call is at '" + match.getSourceInfo().getFileName() + ':'+ match.getSourceInfo().getStartLine()+ "'");
      }
      Collections.sort(errors);
      for (      String error : errors) {
        branch.log(TreeLogger.ERROR,error);
      }
      return;
    }
    int splitPoint=matches.get(0).getSplitPoint();
    JMethodCall newCall=new JMethodCall(info,null,program.getIndexedMethod("RunAsyncCode.forSplitPointNumber"));
    newCall.addArg(new JNumericEntry(info,"RunAsyncFragmentIndex",splitPoint));
    ctx.replaceMe(newCall);
  }
}
