{
  this.selectionModel=selectionModel;
  if (images == null) {
    images=GWT.create(Images.class);
  }
  categoryDataProvider=new ListDataProvider<Category>();
  List<Category> categoryList=categoryDataProvider.getList();
  for (  Category category : ContactDatabase.get().queryCategories()) {
    categoryList.add(category);
  }
  List<HasCell<ContactInfo,?>> hasCells=new ArrayList<HasCell<ContactInfo,?>>();
  hasCells.add(new HasCell<ContactInfo,Boolean>(){
    private CheckboxCell cell=new CheckboxCell(true,false);
    public Cell<Boolean> getCell(){
      return cell;
    }
    public FieldUpdater<ContactInfo,Boolean> getFieldUpdater(){
      return null;
    }
    public Boolean getValue(    ContactInfo object){
      return selectionModel.isSelected(object);
    }
  }
);
  hasCells.add(new HasCell<ContactInfo,ContactInfo>(){
    private ContactCell cell=new ContactCell(images.contact());
    public Cell<ContactInfo> getCell(){
      return cell;
    }
    public FieldUpdater<ContactInfo,ContactInfo> getFieldUpdater(){
      return null;
    }
    public ContactInfo getValue(    ContactInfo object){
      return object;
    }
  }
);
  contactCell=new CompositeCell<ContactInfo>(hasCells){
    @Override public void render(    Context context,    ContactInfo value,    SafeHtmlBuilder sb){
      sb.appendHtmlConstant("<table><tbody><tr>");
      super.render(context,value,sb);
      sb.appendHtmlConstant("</tr></tbody></table>");
    }
    @Override protected Element getContainerElement(    Element parent){
      return parent.getFirstChildElement().getFirstChildElement().getFirstChildElement();
    }
    @Override protected <X>void render(    Context context,    ContactInfo value,    SafeHtmlBuilder sb,    HasCell<ContactInfo,X> hasCell){
      Cell<X> cell=hasCell.getCell();
      sb.appendHtmlConstant("<td>");
      cell.render(context,hasCell.getValue(value),sb);
      sb.appendHtmlConstant("</td>");
    }
  }
;
}
