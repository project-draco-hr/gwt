{
  MockJavaResource[] javaFiles={new MockJavaResource("t.AddressProxy"){
    @Override public CharSequence getContent(){
      StringBuilder code=new StringBuilder();
      code.append("package t;\n");
      code.append("import " + ProxyFor.class.getName() + ";\n");
      code.append("import " + EntityProxy.class.getName() + ";\n");
      if (proxyClass != null) {
        code.append("@ProxyFor(" + proxyClass + ".class)");
      }
      code.append("interface TestProxy extends EntityProxy {\n");
      code.append("}");
      System.out.println(code);
      return code;
    }
  }
,new MockJavaResource("t.ProxyWithRepeatedGetters"){
    @Override public CharSequence getContent(){
      StringBuilder code=new StringBuilder();
      code.append("package t;\n");
      code.append("import " + ProxyFor.class.getName() + ";\n");
      code.append("import " + EntityProxy.class.getName() + ";\n");
      if (proxyClass != null) {
        code.append("@ProxyFor(" + proxyClass + ".class)");
      }
      code.append("interface ProxyWithRepeatedGetters extends EntityProxy {\n");
      code.append("  boolean getFoo();");
      code.append("  boolean isFoo();");
      code.append("}");
      return code;
    }
  }
,new MockJavaResource("java.util.List"){
    @Override public CharSequence getContent(){
      StringBuilder code=new StringBuilder();
      code.append("package java.util;\n");
      code.append("public interface List<T> extends Collection<T> {\n");
      code.append("}");
      return code;
    }
  }
,new MockJavaResource("java.util.Set"){
    @Override public CharSequence getContent(){
      StringBuilder code=new StringBuilder();
      code.append("package java.util;\n");
      code.append("public interface Set<T> extends Collection<T> {\n");
      code.append("}");
      return code;
    }
  }
,new MockJavaResource("java.util.SortedSet"){
    @Override public CharSequence getContent(){
      StringBuilder code=new StringBuilder();
      code.append("package java.util;\n");
      code.append("public interface SortedSet<T> extends Set<T> {\n");
      code.append("}");
      return code;
    }
  }
};
  Set<Resource> toReturn=new HashSet<Resource>(Arrays.asList(javaFiles));
  toReturn.addAll(Arrays.asList(new Resource[]{new EmptyMockJavaResource(Iterable.class),new EmptyMockJavaResource(EntityProxy.class),new EmptyMockJavaResource(EntityProxyId.class),new EmptyMockJavaResource(InstanceRequest.class),new EmptyMockJavaResource(Locator.class),new EmptyMockJavaResource(RequestFactory.class),new EmptyMockJavaResource(Receiver.class),new EmptyMockJavaResource(ServiceLocator.class),new EmptyMockJavaResource(Splittable.class),new EmptyMockJavaResource(ValueProxy.class),new RealJavaResource(Request.class),new RealJavaResource(Service.class),new RealJavaResource(ProxyFor.class),new EmptyMockJavaResource(RequestContext.class)}));
  toReturn.addAll(Arrays.asList(JavaResourceBase.getStandardResources()));
  return toReturn;
}
