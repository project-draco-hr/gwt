{
  String typeName=x.getEnclosingType().getName();
  currentMethodName=computeName(x);
  if (bannedMethodNames.contains(currentMethodName)) {
    return false;
  }
  stringAnalyzableTypeEnvironment.recordTypeEnclosesMethod(typeName,currentMethodName);
  for (  JMethod overriddenMethod : x.getOverriddenMethods()) {
    String overriddenMethodName=computeName(overriddenMethod);
    stringAnalyzableTypeEnvironment.recordMethodOverridesMethod(currentMethodName,overriddenMethodName);
  }
  if (program.typeOracle.isExportedMethod(x) || program.typeOracle.isJsTypeMethod(x)) {
    if (x.isStatic() || x.isConstructor()) {
      stringAnalyzableTypeEnvironment.recordExportedStaticReferenceInType(typeName);
    }
    stringAnalyzableTypeEnvironment.recordExportedMethodInType(currentMethodName,typeName);
  }
  return true;
}
