{
  int charCount=0;
  for (int i=0; i < len; ) {
    ++charCount;
    byte ch=bytes[ofs + i];
    if ((ch & 0xC0) == 0x80) {
      throw new IllegalArgumentException("Invalid UTF8 sequence");
    }
 else     if ((ch & 0x80) == 0) {
      ++i;
    }
 else     if ((ch & 0xE0) == 0xC0) {
      i+=2;
    }
 else     if ((ch & 0xF0) == 0xE0) {
      i+=3;
    }
 else     if ((ch & 0xF8) == 0xF0) {
      i+=4;
    }
 else {
      throw new IllegalArgumentException("Invalid UTF8 sequence");
    }
    if (i > len) {
      throw new IndexOutOfBoundsException("Invalid UTF8 sequence");
    }
  }
  char[] chars=new char[charCount];
  int outIdx=0;
  int count=0;
  for (int i=0; i < len; ) {
    int ch=bytes[ofs + i++];
    if ((ch & 0x80) == 0) {
      count=1;
      ch&=127;
    }
 else     if ((ch & 0xE0) == 0xC0) {
      count=2;
      ch&=31;
    }
 else     if ((ch & 0xF0) == 0xE0) {
      count=3;
      ch&=15;
    }
 else     if ((ch & 0xF8) == 0xF0) {
      count=4;
      ch&=7;
    }
 else     if ((ch & 0xFC) == 0xF8) {
      count=5;
      ch&=3;
    }
    while (--count > 0) {
      byte b=bytes[ofs + i++];
      if ((b & 0xC0) != 0x80) {
        throw new IllegalArgumentException("Invalid UTF8 sequence at " + (ofs + i - 1) + ", byte="+ Integer.toHexString(b));
      }
      ch=(ch << 6) | (b & 63);
    }
    outIdx+=Character.toChars(ch,chars,outIdx);
  }
  return chars;
}
