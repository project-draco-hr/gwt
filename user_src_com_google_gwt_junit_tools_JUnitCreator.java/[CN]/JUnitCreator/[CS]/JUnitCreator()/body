{
  registerHandler(new ArgHandlerString(){
    @Override public String[] getDefaultArgs(){
      return null;
    }
    @Override public String getPurpose(){
      return "Specifies the path to your junit.jar (required)";
    }
    @Override public String getTag(){
      return "-junit";
    }
    @Override public String[] getTagArgs(){
      return new String[]{"pathToJUnitJar"};
    }
    @Override public boolean isRequired(){
      return true;
    }
    @Override public boolean setString(    String str){
      File f=new File(str);
      if (!f.exists() || !f.isFile()) {
        System.err.println("File not found: " + str);
        return false;
      }
      junitPath=str;
      return true;
    }
  }
);
  registerHandler(new ArgHandlerString(){
    @Override public String[] getDefaultArgs(){
      return null;
    }
    @Override public String getPurpose(){
      return "Specifies the name of the GWT module to use (required)";
    }
    @Override public String getTag(){
      return "-module";
    }
    @Override public String[] getTagArgs(){
      return new String[]{"moduleName"};
    }
    @Override public boolean isRequired(){
      return true;
    }
    @Override public boolean setString(    String str){
      moduleName=str;
      return true;
    }
  }
);
  registerHandler(new ArgHandlerEclipse(){
    @Override public String getPurpose(){
      return "Creates a debug launch config for the named eclipse project";
    }
    @Override public boolean setString(    String str){
      eclipse=str;
      return true;
    }
  }
);
  registerHandler(new ArgHandlerOutDir(){
    @Override public void setDir(    File dir){
      outDir=dir;
    }
  }
);
  registerHandler(new ArgHandlerOverwrite(){
    @Override public boolean setFlag(){
      if (ignore) {
        System.err.println("-overwrite cannot be used with -ignore.");
        return false;
      }
      overwrite=true;
      return true;
    }
  }
);
  registerHandler(new ArgHandlerIgnore(){
    @Override public boolean setFlag(){
      if (overwrite) {
        System.err.println("-ignore cannot be used with -overwrite.");
        return false;
      }
      ignore=true;
      return true;
    }
  }
);
  registerHandler(new ArgHandlerTestClass());
  registerHandler(classPathHandler);
}
