{
  delayTestFinish(5000);
  SimpleFooStringRequest context=req.simpleFooStringRequest();
  final SimpleFooStringProxy foo=context.create(SimpleFooStringProxy.class);
  final Object futureId=foo.getId();
  Request<SimpleFooStringProxy> fooReq=context.persistAndReturnSelf().using(foo);
  final SimpleFooStringProxy newFoo=context.edit(foo);
  assertEquals(futureId,foo.getId());
  assertEquals(futureId,newFoo.getId());
  newFoo.setUserName("GWT basic user");
  fooReq.fire(new Receiver<SimpleFooStringProxy>(){
    @Override public void onSuccess(    final SimpleFooStringProxy returned){
      assertEquals(futureId,foo.getId());
      assertEquals(futureId,newFoo.getId());
      checkStableIdEquals(foo,returned);
      checkStableIdEquals(newFoo,returned);
      SimpleFooStringRequest context=req.simpleFooStringRequest();
      Request<SimpleFooStringProxy> editRequest=context.persistAndReturnSelf().using(returned);
      final SimpleFooStringProxy editableFoo=context.edit(returned);
      editableFoo.setUserName("GWT power user");
      editRequest.fire(new Receiver<SimpleFooStringProxy>(){
        @Override public void onSuccess(        SimpleFooStringProxy returnedAfterEdit){
          checkStableIdEquals(editableFoo,returnedAfterEdit);
          assertEquals(returnedAfterEdit.getId(),returned.getId());
          finishTestAndReset();
        }
      }
);
    }
  }
);
}
