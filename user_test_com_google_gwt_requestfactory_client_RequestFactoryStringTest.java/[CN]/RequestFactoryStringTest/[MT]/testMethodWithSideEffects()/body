{
  delayTestFinish(5000);
  final SimpleFooEventHandler<SimpleFooStringProxy> handler=new SimpleFooEventHandler<SimpleFooStringProxy>();
  EntityProxyChange.registerForProxyType(req.getEventBus(),SimpleFooStringProxy.class,handler);
  req.simpleFooStringRequest().findSimpleFooStringById("999x").fire(new Receiver<SimpleFooStringProxy>(){
    @Override public void onSuccess(    SimpleFooStringProxy newFoo){
      assertEquals(1,handler.updateEventCount);
      assertEquals(1,handler.totalEventCount);
      final Request<Long> mutateRequest=req.simpleFooStringRequest().countSimpleFooWithUserNameSideEffect(newFoo);
      newFoo=mutateRequest.edit(newFoo);
      newFoo.setUserName("Ray");
      mutateRequest.fire(new Receiver<Long>(){
        @Override public void onSuccess(        Long response){
          assertCannotFire(mutateRequest);
          assertEquals(new Long(1L),response);
          assertEquals(2,handler.updateEventCount);
          assertEquals(2,handler.totalEventCount);
          req.simpleFooStringRequest().findSimpleFooStringById("999x").fire(new Receiver<SimpleFooStringProxy>(){
            @Override public void onSuccess(            SimpleFooStringProxy finalFoo){
              assertEquals("Ray",finalFoo.getUserName());
              assertEquals(3,handler.updateEventCount);
              assertEquals(3,handler.totalEventCount);
              finishTestAndReset();
            }
          }
);
        }
      }
);
      try {
        newFoo.setUserName("Barney");
        fail();
      }
 catch (      IllegalStateException e) {
      }
    }
  }
);
}
