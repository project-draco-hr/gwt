{
  delayTestFinish(5000);
  SimpleFooStringRequest context=req.simpleFooStringRequest();
  SimpleFooStringProxy rayFoo=context.create(SimpleFooStringProxy.class);
  final Request<SimpleFooStringProxy> persistRay=context.persistAndReturnSelf().using(rayFoo);
  rayFoo=context.edit(rayFoo);
  rayFoo.setUserName("Ray");
  persistRay.fire(new Receiver<SimpleFooStringProxy>(){
    @Override public void onSuccess(    final SimpleFooStringProxy persistedRay){
      SimpleBarRequest context=req.simpleBarRequest();
      SimpleBarProxy amitBar=context.create(SimpleBarProxy.class);
      final Request<SimpleBarProxy> persistAmit=context.persistAndReturnSelf().using(amitBar);
      amitBar=context.edit(amitBar);
      amitBar.setUserName("Amit");
      persistAmit.fire(new Receiver<SimpleBarProxy>(){
        @Override public void onSuccess(        SimpleBarProxy persistedAmit){
          SimpleFooStringRequest context=req.simpleFooStringRequest();
          final Request<SimpleFooStringProxy> persistRelationship=context.persistAndReturnSelf().using(persistedRay).with("barField");
          SimpleFooStringProxy newRec=context.edit(persistedRay);
          newRec.setBarField(persistedAmit);
          persistRelationship.fire(new Receiver<SimpleFooStringProxy>(){
            @Override public void onSuccess(            SimpleFooStringProxy relatedRay){
              assertEquals("Amit",relatedRay.getBarField().getUserName());
              finishTestAndReset();
            }
          }
);
        }
      }
);
    }
  }
);
}
