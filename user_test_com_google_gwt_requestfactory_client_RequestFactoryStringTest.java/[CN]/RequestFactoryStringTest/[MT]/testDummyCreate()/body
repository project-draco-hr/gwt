{
  delayTestFinish(5000);
  final SimpleFooEventHandler<SimpleFooStringProxy> handler=new SimpleFooEventHandler<SimpleFooStringProxy>();
  EntityProxyChange.registerForProxyType(req.getEventBus(),SimpleFooStringProxy.class,handler);
  SimpleFooStringRequest context=req.simpleFooStringRequest();
  final SimpleFooStringProxy foo=context.create(SimpleFooStringProxy.class);
  Object futureId=foo.getId();
  assertEquals(futureId,foo.getId());
  Request<SimpleFooStringProxy> fooReq=context.persistAndReturnSelf().using(foo);
  fooReq.fire(new Receiver<SimpleFooStringProxy>(){
    @Override public void onSuccess(    final SimpleFooStringProxy returned){
      Object futureId=foo.getId();
      assertEquals(futureId,foo.getId());
      assertEquals(1,handler.persistEventCount);
      assertEquals(1,handler.updateEventCount);
      assertEquals(2,handler.totalEventCount);
      checkStableIdEquals(foo,returned);
      finishTestAndReset();
    }
  }
);
}
