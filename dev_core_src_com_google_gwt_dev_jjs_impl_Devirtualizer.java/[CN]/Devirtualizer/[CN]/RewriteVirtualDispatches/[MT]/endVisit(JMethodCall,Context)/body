{
  JMethod method=x.getTarget();
  if (!mightNeedDevirtualization(method)) {
    return;
  }
  JType instanceType=x.getInstance().getType().getUnderlyingType();
  if (instanceType != program.getTypeJavaLangObject() && !program.typeOracle.canBeJavaScriptObject(instanceType) && !(program.isRepresentedAsNativeJsPrimitive(instanceType)) && !(instanceType instanceof JArrayType) && !isSuperOfRepresentedAsNativeType(instanceType) || x.isStaticDispatchOnly() && !method.getEnclosingType().isJsoType()) {
    return;
  }
  ensureDevirtualVersionExists(method);
  JMethod devirtualMethod=devirtualMethodByMethod.get(method);
  ctx.replaceMe(converter.convertCall(x,devirtualMethod));
}
