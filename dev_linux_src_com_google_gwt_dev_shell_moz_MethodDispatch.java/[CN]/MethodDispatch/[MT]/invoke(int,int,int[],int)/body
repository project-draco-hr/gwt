{
  JsValue jsthis=new JsValueMoz(jsthisInt);
  JsValue jsargs[]=new JsValue[jsargsInt.length];
  for (int i=0; i < jsargsInt.length; ++i) {
    jsargs[i]=new JsValueMoz(jsargsInt[i]);
  }
  JsValue returnValue=new JsValueMoz(returnValueInt);
  Class[] paramTypes=method.getParameterTypes();
  int argc=paramTypes.length;
  Object args[]=new Object[argc];
  if (jsargs.length < argc) {
    throw new RuntimeException("Not enough arguments to " + method);
  }
  Object jthis=null;
  if ((method.getModifiers() & Modifier.STATIC) == 0) {
    jthis=JsValueGlue.get(jsthis,method.getDeclaringClass(),"invoke this");
  }
  for (int i=0; i < argc; ++i) {
    args[i]=JsValueGlue.get(jsargs[i],paramTypes[i],"invoke arguments");
  }
  try {
    Object result;
    try {
      result=method.invoke(jthis,args);
    }
 catch (    IllegalAccessException e) {
      e.printStackTrace();
      throw new RuntimeException(e);
    }
    JsValueGlue.set(returnValue,classLoader,method.getReturnType(),result);
  }
 catch (  InvocationTargetException e) {
    Throwable t=e.getTargetException();
    RuntimeException re;
    if (t instanceof RuntimeException) {
      re=(RuntimeException)t;
    }
 else {
      re=new RuntimeException("Checked exception thrown into JavaScript" + " (Web Mode behavior may differ)",t);
    }
    ModuleSpaceMoz.setThrownJavaException(re);
    LowLevelMoz.raiseJavaScriptException(jscontext);
  }
catch (  IllegalArgumentException e) {
    System.err.println("MethodDispatch.invoke, method=" + method.toString() + ": argument mismatch");
    for (int i=0; i < argc; ++i) {
      System.err.println(" param " + i + " type is "+ paramTypes[i].toString()+ " value is type "+ jsargs[i].getTypeString()+ " = "+ args[i].toString());
    }
    throw e;
  }
}
