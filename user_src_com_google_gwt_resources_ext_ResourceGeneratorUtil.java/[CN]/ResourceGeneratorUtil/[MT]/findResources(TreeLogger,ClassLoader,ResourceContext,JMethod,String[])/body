{
  logger=logger.branch(TreeLogger.DEBUG,"Finding resources");
  String locale;
  try {
    PropertyOracle oracle=context.getGeneratorContext().getPropertyOracle();
    locale=oracle.getPropertyValue(logger,"locale");
  }
 catch (  BadPropertyValueException e) {
    locale=null;
  }
  checkForDeprecatedAnnotations(logger,method);
  Source resourceAnnotation=method.getAnnotation(Source.class);
  if (resourceAnnotation == null) {
    if (defaultSuffixes != null) {
      for (      String extension : defaultSuffixes) {
        logger.log(TreeLogger.SPAM,"Trying default extension " + extension);
        URL resourceUrl=tryFindResource(classLoader,getPathRelativeToPackage(method.getEnclosingType().getPackage(),method.getName() + extension),locale);
        if (resourceUrl != null) {
          return new URL[]{resourceUrl};
        }
      }
    }
    logger.log(TreeLogger.SPAM,"No annotation and no hits with default extensions");
    return new URL[0];
  }
  String[] resources=resourceAnnotation.value();
  URL[] toReturn=new URL[resources.length];
  boolean error=false;
  int tagIndex=0;
  for (  String resource : resources) {
    URL resourceURL=tryFindResource(classLoader,getPathRelativeToPackage(method.getEnclosingType().getPackage(),resource),locale);
    if (resourceURL == null) {
      resourceURL=tryFindResource(classLoader,resource,locale);
    }
    if (resourceURL == null) {
      logger.log(TreeLogger.ERROR,"Resource " + resource + " not found on classpath. Is the name specified as "+ "Class.getResource() would expect?");
      error=true;
    }
    toReturn[tagIndex++]=resourceURL;
  }
  if (error) {
    throw new UnableToCompleteException();
  }
  return toReturn;
}
