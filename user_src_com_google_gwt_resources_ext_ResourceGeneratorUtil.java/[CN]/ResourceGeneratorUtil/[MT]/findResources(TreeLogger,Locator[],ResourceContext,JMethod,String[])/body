{
  logger=logger.branch(TreeLogger.DEBUG,"Finding resources");
  String locale;
  try {
    PropertyOracle oracle=context.getGeneratorContext().getPropertyOracle();
    SelectionProperty prop=oracle.getSelectionProperty(logger,"locale");
    locale=prop.getCurrentValue();
  }
 catch (  BadPropertyValueException e) {
    locale=null;
  }
  checkForDeprecatedAnnotations(logger,method);
  boolean error=false;
  Source resourceAnnotation=method.getAnnotation(Source.class);
  URL[] toReturn;
  if (resourceAnnotation == null) {
    if (defaultSuffixes != null) {
      for (      String extension : defaultSuffixes) {
        logger.log(TreeLogger.SPAM,"Trying default extension " + extension);
        for (        Locator locator : locators) {
          URL resourceUrl=tryFindResource(locator,getPathRelativeToPackage(method.getEnclosingType().getPackage(),method.getName() + extension),locale);
          if (resourceUrl != null) {
            return new URL[]{resourceUrl};
          }
        }
      }
    }
    logger.log(TreeLogger.ERROR,"No " + Source.class.getName() + " annotation and no resources found with default extensions");
    toReturn=null;
    error=true;
  }
 else {
    String[] resources=resourceAnnotation.value();
    toReturn=new URL[resources.length];
    int tagIndex=0;
    for (    String resource : resources) {
      URL resourceURL=null;
      for (      Locator locator : locators) {
        resourceURL=tryFindResource(locator,getPathRelativeToPackage(method.getEnclosingType().getPackage(),resource),locale);
        if (resourceURL == null) {
          resourceURL=tryFindResource(locator,resource,locale);
        }
        if (resourceURL != null) {
          break;
        }
      }
      if (resourceURL == null) {
        error=true;
        logger.log(TreeLogger.ERROR,"Resource " + resource + " not found. Is the name specified as Class.getResource()"+ " would expect?");
      }
      toReturn[tagIndex++]=resourceURL;
    }
  }
  if (error) {
    throw new UnableToCompleteException();
  }
  return toReturn;
}
