{
  TypeOracle typeOracle=generatorContext.getTypeOracle();
  JClassType asyncProxyType=typeOracle.findType(AsyncProxy.class.getName());
  JClassType asyncProxyBaseType=typeOracle.findType(AsyncProxyBase.class.getName());
  JClassType sourceType=typeOracle.findType(typeName);
  if (sourceType == null) {
    logger.log(TreeLogger.ERROR,"Could not find requested typeName");
    throw new UnableToCompleteException();
  }
 else   if (sourceType.isInterface() == null) {
    logger.log(TreeLogger.ERROR,sourceType.getQualifiedSourceName() + " is not an interface.",null);
    throw new UnableToCompleteException();
  }
  JClassType concreteType=getConcreteType(logger,typeOracle,sourceType);
  JClassType paramType=getParamType(logger,asyncProxyType,sourceType);
  validate(logger,sourceType,concreteType,paramType);
  String generatedSimpleSourceName=sourceType.getQualifiedSourceName().replace('.','_').replace('$','_') + "Impl";
  ClassSourceFileComposerFactory f=new ClassSourceFileComposerFactory(sourceType.getPackage().getName(),generatedSimpleSourceName);
  String createdClassName=f.getCreatedClassName();
  f.addImport(GWT.class.getName());
  f.addImport(RunAsyncCallback.class.getName());
  f.setSuperclass(asyncProxyBaseType.getQualifiedSourceName() + "<" + paramType.getQualifiedSourceName()+ ">");
  f.addImplementedInterface(sourceType.getQualifiedSourceName());
  PrintWriter out=generatorContext.tryCreate(logger,sourceType.getPackage().getName(),generatedSimpleSourceName);
  if (out != null) {
    SourceWriter sw=f.createSourceWriter(generatorContext,out);
    sw.println("protected void doAsync0() {");
    sw.indent();
    sw.println("GWT.runAsync(new RunAsyncCallback() {");
    sw.indentln("public void onFailure(Throwable caught) {doFailure0(caught);}");
    sw.indentln("public void onSuccess() {setInstance0(doCreate0());}");
    sw.println("});");
    sw.outdent();
    sw.println("}");
    String proxyCallback="ProxyCallback<" + paramType.getQualifiedSourceName() + ">";
    sw.println("private " + proxyCallback + " callback;");
    sw.println("public void setProxyCallback(" + proxyCallback + " callback) {this.callback = callback;}");
    sw.println("protected " + proxyCallback + " getCallback0() {return callback;}");
    sw.println("private " + paramType.getQualifiedSourceName() + " doCreate0() {");
    sw.indent();
    sw.println("return GWT.create(" + concreteType.getQualifiedSourceName() + ".class);");
    sw.outdent();
    sw.println("}");
    boolean allowNonVoid=sourceType.getAnnotation(AllowNonVoid.class) != null;
    for (    JMethod method : paramType.getOverridableMethods()) {
      DefaultValue defaults=getDefaultValue(sourceType,method);
      if (method.getReturnType() != JPrimitiveType.VOID && !allowNonVoid) {
        logger.log(TreeLogger.ERROR,"The method " + method.getName() + " returns a type other than void, but "+ sourceType.getQualifiedSourceName()+ " does not define the "+ AllowNonVoid.class.getSimpleName()+ " annotation.");
        throw new UnableToCompleteException();
      }
      sw.print("public " + method.getReturnType().getQualifiedSourceName() + " "+ method.getName()+ "(");
      for (Iterator<JParameter> i=Arrays.asList(method.getParameters()).iterator(); i.hasNext(); ) {
        JParameter param=i.next();
        sw.print("final " + param.getType().getQualifiedSourceName() + " "+ param.getName());
        if (i.hasNext()) {
          sw.print(", ");
        }
      }
      sw.println(") {");
{
        sw.indent();
        sw.println("if (getProxiedInstance() != null) {");
{
          sw.indent();
          if (method.getReturnType() != JPrimitiveType.VOID) {
            sw.print("return ");
          }
          writeInvocation(sw,"getProxiedInstance()",method);
          sw.outdent();
        }
        sw.println("} else {");
{
          sw.indent();
          sw.println("enqueue0(new ParamCommand<" + paramType.getQualifiedSourceName() + ">() {");
{
            sw.indent();
            sw.println("public void execute(" + paramType.getQualifiedSourceName() + " t) {");
{
              sw.indent();
              writeInvocation(sw,"t",method);
              sw.outdent();
            }
            sw.println("}");
            sw.outdent();
          }
          sw.println("});");
          if (method.getReturnType() != JPrimitiveType.VOID) {
            sw.println("return " + getDefaultExpression(defaults,method.getReturnType()) + ";");
          }
          sw.outdent();
        }
        sw.println("}");
        sw.outdent();
      }
      sw.println("}");
    }
    sw.commit(logger);
  }
  return createdClassName;
}
