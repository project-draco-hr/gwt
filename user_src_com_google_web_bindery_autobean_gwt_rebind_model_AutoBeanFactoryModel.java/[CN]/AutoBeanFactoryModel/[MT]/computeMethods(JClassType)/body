{
  List<JMethod> toExamine=new ArrayList<JMethod>();
  toExamine.addAll(Arrays.asList(beanType.getInheritableMethods()));
  toExamine.addAll(objectMethods);
  List<AutoBeanMethod> toReturn=new ArrayList<AutoBeanMethod>(toExamine.size());
  for (  JMethod method : toExamine) {
    if (method.isPrivate()) {
      continue;
    }
    AutoBeanMethod.Builder builder=new AutoBeanMethod.Builder();
    builder.setMethod(method);
    JClassType classReturn=method.getReturnType().isInterface();
    if (classReturn != null) {
      maybeCalculate(classReturn);
      if (noWrapTypes != null) {
        for (        JClassType noWrap : noWrapTypes) {
          if (noWrap.isAssignableFrom(classReturn)) {
            builder.setNoWrap(true);
            break;
          }
        }
      }
    }
    JBeanMethod action=JBeanMethod.which(method);
    builder.setAction(action);
    if (JBeanMethod.CALL.equals(action)) {
      JMethod staticImpl=findStaticImpl(beanType,method);
      if (staticImpl == null && objectMethods.contains(method)) {
        continue;
      }
      builder.setStaticImp(staticImpl);
    }
    AutoBeanMethod toAdd=builder.build();
    if (toAdd.hasEnumMap()) {
      allEnumConstants.putAll(toAdd.getEnumMap());
    }
    if (toAdd.isCollection()) {
      maybeCalculate(toAdd.getElementType());
    }
 else     if (toAdd.isMap()) {
      maybeCalculate(toAdd.getKeyType());
      maybeCalculate(toAdd.getValueType());
    }
    toReturn.add(toAdd);
  }
  return toReturn;
}
