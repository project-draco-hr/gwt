{
  UnitTestTreeLogger.Builder builder=new UnitTestTreeLogger.Builder();
  builder.expectWarn("Type 'BangType' wants to reference type 'ZingType' but can't because module " + "'BarModule' has no dependency (neither direct nor transitive) on 'BazModule'.",null);
  UnitTestTreeLogger logger=builder.createLogger();
  File missingDepsFile=java.nio.file.Files.createTempFile("missingDepsFile","txt").toFile();
  MockDepsInfoProvider depsInfo=new MockDepsInfoProvider();
  depsInfo.addModuleDep("FooModule","BarModule");
  depsInfo.addModuleDep("FooModule","BazModule");
  depsInfo.addGwtXmlFile("FooModule","com/google/gwt/FooModule.gwt.xml");
  depsInfo.addGwtXmlFile("BarModule","com/google/gwt/BarModule.gwt.xml");
  depsInfo.addGwtXmlFile("BazModule","com/google/gwt/BazModule.gwt.xml");
  depsInfo.registerType("BangType","BarModule");
  depsInfo.registerType("ZingType","BazModule");
  TypeRefDepsChecker typeRefDepsChecker=new TypeRefDepsChecker(logger,null,depsInfo,true,missingDepsFile);
  typeRefDepsChecker.maybeRecordTypeRef("BangType","ZingType");
  typeRefDepsChecker.verifyTypeRefsInModules();
  logger.assertCorrectLogEntries();
  assertEquals("BarModule\tcom/google/gwt/BarModule.gwt.xml\tBazModule\tcom/google/gwt/BazModule.gwt.xml" + "\tType 'BangType' wants to reference type 'ZingType'.",CharMatcher.WHITESPACE.trimFrom(Files.toString(missingDepsFile,StandardCharsets.UTF_8)));
}
