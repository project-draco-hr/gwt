{
  super(fixIM(parent),style);
  Display display=parent.getDisplay();
  display.setData(NO_INPUT_METHOD,null);
  int[] result=new int[1];
  if (!mozilla) {
    String mozillaPath=System.getProperty("swt.mozilla.path");
    int ptr;
    try {
      Library.loadLibrary("swt-mozilla");
    }
 catch (    UnsatisfiedLinkError e) {
      try {
        Library.loadLibrary("swt-mozilla-gcc3");
      }
 catch (      UnsatisfiedLinkError ex) {
        dispose();
        SWT.error(SWT.ERROR_NO_HANDLES,e);
      }
    }
    try {
      Library.loadLibrary("swt-mozilla14-profile");
      usingProfile=true;
    }
 catch (    UnsatisfiedLinkError e1) {
      try {
        Library.loadLibrary("swt-mozilla17-profile");
        usingProfile=true;
      }
 catch (      UnsatisfiedLinkError e2) {
        try {
          Library.loadLibrary("swt-mozilla14-profile-gcc3");
          usingProfile=true;
        }
 catch (        UnsatisfiedLinkError e3) {
          try {
            Library.loadLibrary("swt-mozilla17-profile-gcc3");
            usingProfile=true;
          }
 catch (          UnsatisfiedLinkError e4) {
            try {
              Library.loadLibrary("swt-mozilla18-profile");
              usingProfile=true;
            }
 catch (            UnsatisfiedLinkError e5) {
              try {
                Library.loadLibrary("swt-mozilla18-profile-gcc3");
                usingProfile=true;
              }
 catch (              UnsatisfiedLinkError e6) {
              }
            }
          }
        }
      }
    }
    int[] retVal=new int[1];
    nsEmbedString pathString=new nsEmbedString(mozillaPath);
    int rc=XPCOM.NS_NewLocalFile(pathString.getAddress(),true,retVal);
    pathString.dispose();
    if (rc != XPCOM.NS_OK)     error(rc);
    if (retVal[0] == 0)     error(XPCOM.NS_ERROR_NULL_POINTER);
    nsILocalFile localFile=new nsILocalFile(retVal[0]);
    rc=XPCOM.NS_InitEmbedding(localFile.getAddress(),0);
    localFile.Release();
    if (rc != XPCOM.NS_OK) {
      dispose();
      SWT.error(SWT.ERROR_NO_HANDLES,null," [NS_InitEmbedding " + mozillaPath + " error "+ rc+ "]");
    }
    rc=XPCOM.NS_GetComponentManager(result);
    if (rc != XPCOM.NS_OK)     error(rc);
    if (result[0] == 0)     error(XPCOM.NS_NOINTERFACE);
    nsIComponentManager componentManager=new nsIComponentManager(result[0]);
    result[0]=0;
    rc=componentManager.CreateInstance(XPCOM.NS_APPSHELL_CID,0,nsIAppShell.NS_IAPPSHELL_IID,result);
    if (rc != XPCOM.NS_OK)     error(rc);
    if (result[0] == 0)     error(XPCOM.NS_NOINTERFACE);
    AppShell=new nsIAppShell(result[0]);
    rc=AppShell.Create(0,null);
    if (rc != XPCOM.NS_OK)     error(rc);
    rc=AppShell.Spinup();
    if (rc != XPCOM.NS_OK)     error(rc);
    WindowCreator=new WindowCreator();
    WindowCreator.AddRef();
    rc=XPCOM.NS_GetServiceManager(result);
    if (rc != XPCOM.NS_OK)     error(rc);
    if (result[0] == 0)     error(XPCOM.NS_NOINTERFACE);
    nsIServiceManager serviceManager=new nsIServiceManager(result[0]);
    result[0]=0;
    byte[] buffer=XPCOM.NS_WINDOWWATCHER_CONTRACTID.getBytes();
    byte[] aContractID=new byte[buffer.length + 1];
    System.arraycopy(buffer,0,aContractID,0,buffer.length);
    rc=serviceManager.GetServiceByContractID(aContractID,nsIWindowWatcher.NS_IWINDOWWATCHER_IID,result);
    if (rc != XPCOM.NS_OK)     error(rc);
    if (result[0] == 0)     error(XPCOM.NS_NOINTERFACE);
    nsIWindowWatcher windowWatcher=new nsIWindowWatcher(result[0]);
    result[0]=0;
    rc=windowWatcher.SetWindowCreator(WindowCreator.getAddress());
    if (rc != XPCOM.NS_OK)     error(rc);
    windowWatcher.Release();
    if (usingProfile) {
      buffer=Converter.wcsToMbcs(null,XPCOM.NS_DIRECTORYSERVICE_CONTRACTID,true);
      rc=serviceManager.GetServiceByContractID(buffer,nsIDirectoryService.NS_IDIRECTORYSERVICE_IID,result);
      if (rc != XPCOM.NS_OK)       error(rc);
      if (result[0] == 0)       error(XPCOM.NS_NOINTERFACE);
      nsIDirectoryService directoryService=new nsIDirectoryService(result[0]);
      result[0]=0;
      rc=directoryService.QueryInterface(nsIProperties.NS_IPROPERTIES_IID,result);
      if (rc != XPCOM.NS_OK)       error(rc);
      if (result[0] == 0)       error(XPCOM.NS_NOINTERFACE);
      directoryService.Release();
      nsIProperties properties=new nsIProperties(result[0]);
      result[0]=0;
      buffer=Converter.wcsToMbcs(null,XPCOM.NS_APP_APPLICATION_REGISTRY_DIR,true);
      rc=properties.Get(buffer,nsIFile.NS_IFILE_IID,result);
      if (rc != XPCOM.NS_OK)       error(rc);
      if (result[0] == 0)       error(XPCOM.NS_NOINTERFACE);
      properties.Release();
      nsIFile profileDir=new nsIFile(result[0]);
      result[0]=0;
      int path=XPCOM.nsEmbedCString_new();
      rc=profileDir.GetNativePath(path);
      if (rc != XPCOM.NS_OK)       error(rc);
      profileDir.Release();
      int length=XPCOM.nsEmbedCString_Length(path);
      ptr=XPCOM.nsEmbedCString_get(path);
      buffer=new byte[length];
      XPCOM.memmove(buffer,ptr,length);
      XPCOM.nsEmbedCString_delete(path);
      String string=new String(Converter.mbcsToWcs(null,buffer)) + PROFILE_DIR;
      pathString=new nsEmbedString(string);
      rc=XPCOM.NS_NewLocalFile(pathString.getAddress(),true,result);
      if (rc != XPCOM.NS_OK)       error(rc);
      if (result[0] == 0)       error(XPCOM.NS_ERROR_NULL_POINTER);
      pathString.dispose();
      profileDir=new nsIFile(result[0]);
      result[0]=0;
      rc=XPCOM_PROFILE.NS_NewProfileDirServiceProvider(true,result);
      if (rc != XPCOM.NS_OK)       error(rc);
      if (result[0] == 0)       error(XPCOM.NS_NOINTERFACE);
      final int dirServiceProvider=result[0];
      result[0]=0;
      rc=XPCOM_PROFILE.ProfileDirServiceProvider_Register(dirServiceProvider);
      if (rc != XPCOM.NS_OK)       error(rc);
      rc=XPCOM_PROFILE.ProfileDirServiceProvider_SetProfileDir(dirServiceProvider,profileDir.getAddress());
      if (rc != XPCOM.NS_OK)       error(rc);
      getDisplay().addListener(SWT.Dispose,new Listener(){
        public void handleEvent(        Event e){
          XPCOM_PROFILE.ProfileDirServiceProvider_Shutdown(dirServiceProvider);
        }
      }
);
    }
    buffer=XPCOM.NS_PREFSERVICE_CONTRACTID.getBytes();
    aContractID=new byte[buffer.length + 1];
    System.arraycopy(buffer,0,aContractID,0,buffer.length);
    rc=serviceManager.GetServiceByContractID(aContractID,nsIPrefService.NS_IPREFSERVICE_IID,result);
    serviceManager.Release();
    if (rc != XPCOM.NS_OK)     error(rc);
    if (result[0] == 0)     error(XPCOM.NS_NOINTERFACE);
    nsIPrefService prefService=new nsIPrefService(result[0]);
    result[0]=0;
    buffer=new byte[1];
    rc=prefService.GetBranch(buffer,result);
    prefService.Release();
    if (rc != XPCOM.NS_OK)     error(rc);
    if (result[0] == 0)     error(XPCOM.NS_NOINTERFACE);
    nsIPrefBranch prefBranch=new nsIPrefBranch(result[0]);
    result[0]=0;
    String prefLocales=null;
    nsIPrefLocalizedString localizedString=null;
    buffer=Converter.wcsToMbcs(null,PREFERENCE_LANGUAGES,true);
    rc=prefBranch.GetComplexValue(buffer,nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID,result);
    if (rc != XPCOM.NS_OK) {
      prefLocales="en-us,en" + TOKENIZER_LOCALE;
    }
 else {
      if (result[0] == 0)       error(XPCOM.NS_NOINTERFACE);
      localizedString=new nsIPrefLocalizedString(result[0]);
      result[0]=0;
      rc=localizedString.ToString(result);
      if (rc != XPCOM.NS_OK)       error(rc);
      if (result[0] == 0)       error(XPCOM.NS_NOINTERFACE);
      int length=XPCOM.strlen_PRUnichar(result[0]);
      char[] dest=new char[length];
      XPCOM.memmove(dest,result[0],length * 2);
      prefLocales=new String(dest) + TOKENIZER_LOCALE;
    }
    result[0]=0;
    Locale locale=Locale.getDefault();
    String language=locale.getLanguage();
    String country=locale.getCountry();
    StringBuffer stringBuffer=new StringBuffer(language);
    stringBuffer.append(SEPARATOR_LOCALE);
    stringBuffer.append(country.toLowerCase());
    stringBuffer.append(TOKENIZER_LOCALE);
    stringBuffer.append(language);
    stringBuffer.append(TOKENIZER_LOCALE);
    String newLocales=stringBuffer.toString();
    StringTokenizer tokenzier=new StringTokenizer(prefLocales,TOKENIZER_LOCALE);
    while (tokenzier.hasMoreTokens()) {
      String token=(tokenzier.nextToken() + TOKENIZER_LOCALE).trim();
      if (newLocales.indexOf(token) == -1) {
        stringBuffer.append(token);
      }
    }
    newLocales=stringBuffer.toString();
    if (!newLocales.equals(prefLocales)) {
      newLocales=newLocales.substring(0,newLocales.length() - TOKENIZER_LOCALE.length());
      int length=newLocales.length();
      char[] charBuffer=new char[length + 1];
      newLocales.getChars(0,length,charBuffer,0);
      if (localizedString == null) {
        byte[] contractID=Converter.wcsToMbcs(null,XPCOM.NS_PREFLOCALIZEDSTRING_CONTRACTID,true);
        rc=componentManager.CreateInstanceByContractID(contractID,0,nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID,result);
        if (rc != XPCOM.NS_OK)         error(rc);
        if (result[0] == 0)         error(XPCOM.NS_NOINTERFACE);
        localizedString=new nsIPrefLocalizedString(result[0]);
        result[0]=0;
      }
      localizedString.SetDataWithLength(length,charBuffer);
      rc=prefBranch.SetComplexValue(buffer,nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID,localizedString.getAddress());
    }
    if (localizedString != null) {
      localizedString.Release();
      localizedString=null;
    }
    String prefCharset=null;
    buffer=Converter.wcsToMbcs(null,PREFERENCE_CHARSET,true);
    rc=prefBranch.GetComplexValue(buffer,nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID,result);
    if (rc != XPCOM.NS_OK) {
      prefCharset="ISO-8859-1";
    }
 else {
      if (result[0] == 0)       error(XPCOM.NS_NOINTERFACE);
      localizedString=new nsIPrefLocalizedString(result[0]);
      result[0]=0;
      rc=localizedString.ToString(result);
      if (rc != XPCOM.NS_OK)       error(rc);
      if (result[0] == 0)       error(XPCOM.NS_NOINTERFACE);
      int length=XPCOM.strlen_PRUnichar(result[0]);
      char[] dest=new char[length];
      XPCOM.memmove(dest,result[0],length * 2);
      prefCharset=new String(dest);
    }
    result[0]=0;
    String newCharset=System.getProperty("file.encoding");
    if (!newCharset.equals(prefCharset)) {
      int length=newCharset.length();
      char[] charBuffer=new char[length + 1];
      newCharset.getChars(0,length,charBuffer,0);
      if (localizedString == null) {
        byte[] contractID=Converter.wcsToMbcs(null,XPCOM.NS_PREFLOCALIZEDSTRING_CONTRACTID,true);
        rc=componentManager.CreateInstanceByContractID(contractID,0,nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID,result);
        if (rc != XPCOM.NS_OK)         error(rc);
        if (result[0] == 0)         error(XPCOM.NS_NOINTERFACE);
        localizedString=new nsIPrefLocalizedString(result[0]);
        result[0]=0;
      }
      localizedString.SetDataWithLength(length,charBuffer);
      rc=prefBranch.SetComplexValue(buffer,nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID,localizedString.getAddress());
    }
    if (localizedString != null)     localizedString.Release();
    prefBranch.Release();
    PromptServiceFactory factory=new PromptServiceFactory();
    factory.AddRef();
    rc=componentManager.QueryInterface(nsIComponentRegistrar.NS_ICOMPONENTREGISTRAR_IID,result);
    if (rc != XPCOM.NS_OK)     error(rc);
    if (result[0] == 0)     error(XPCOM.NS_NOINTERFACE);
    nsIComponentRegistrar componentRegistrar=new nsIComponentRegistrar(result[0]);
    result[0]=0;
    buffer=XPCOM.NS_PROMPTSERVICE_CONTRACTID.getBytes();
    aContractID=new byte[buffer.length + 1];
    System.arraycopy(buffer,0,aContractID,0,buffer.length);
    buffer="Prompt Service".getBytes();
    byte[] aClassName=new byte[buffer.length + 1];
    System.arraycopy(buffer,0,aClassName,0,buffer.length);
    rc=componentRegistrar.RegisterFactory(XPCOM.NS_PROMPTSERVICE_CID,aClassName,aContractID,factory.getAddress());
    if (rc != XPCOM.NS_OK)     error(rc);
    factory.Release();
    HelperAppLauncherDialogFactory dialogFactory=new HelperAppLauncherDialogFactory();
    dialogFactory.AddRef();
    buffer=XPCOM.NS_HELPERAPPLAUNCHERDIALOG_CONTRACTID.getBytes();
    aContractID=new byte[buffer.length + 1];
    System.arraycopy(buffer,0,aContractID,0,buffer.length);
    buffer="Helper App Launcher Dialog".getBytes();
    aClassName=new byte[buffer.length + 1];
    System.arraycopy(buffer,0,aClassName,0,buffer.length);
    rc=componentRegistrar.RegisterFactory(XPCOM.NS_HELPERAPPLAUNCHERDIALOG_CID,aClassName,aContractID,dialogFactory.getAddress());
    if (rc != XPCOM.NS_OK)     error(rc);
    dialogFactory.Release();
    DownloadFactory downloadFactory=new DownloadFactory();
    downloadFactory.AddRef();
    buffer=XPCOM.NS_DOWNLOAD_CONTRACTID.getBytes();
    aContractID=new byte[buffer.length + 1];
    System.arraycopy(buffer,0,aContractID,0,buffer.length);
    buffer="Download".getBytes();
    aClassName=new byte[buffer.length + 1];
    System.arraycopy(buffer,0,aClassName,0,buffer.length);
    rc=componentRegistrar.RegisterFactory(XPCOM.NS_DOWNLOAD_CID,aClassName,aContractID,downloadFactory.getAddress());
    if (rc != XPCOM.NS_OK)     error(rc);
    downloadFactory.Release();
    FilePickerFactory pickerFactory=new FilePickerFactory();
    pickerFactory.AddRef();
    buffer=XPCOM.NS_FILEPICKER_CONTRACTID.getBytes();
    aContractID=new byte[buffer.length + 1];
    System.arraycopy(buffer,0,aContractID,0,buffer.length);
    buffer="FilePicker".getBytes();
    aClassName=new byte[buffer.length + 1];
    System.arraycopy(buffer,0,aClassName,0,buffer.length);
    rc=componentRegistrar.RegisterFactory(XPCOM.NS_FILEPICKER_CID,aClassName,aContractID,pickerFactory.getAddress());
    if (rc != XPCOM.NS_OK)     error(rc);
    pickerFactory.Release();
    componentRegistrar.Release();
    componentManager.Release();
    mozilla=true;
    LowLevelMoz.init();
  }
  BrowserCount++;
  int rc=XPCOM.NS_GetComponentManager(result);
  if (rc != XPCOM.NS_OK)   error(rc);
  if (result[0] == 0)   error(XPCOM.NS_NOINTERFACE);
  nsIComponentManager componentManager=new nsIComponentManager(result[0]);
  result[0]=0;
  nsID NS_IWEBBROWSER_CID=new nsID("F1EAC761-87E9-11d3-AF80-00A024FFC08C");
  rc=componentManager.CreateInstance(NS_IWEBBROWSER_CID,0,nsIWebBrowser.NS_IWEBBROWSER_IID,result);
  if (rc != XPCOM.NS_OK)   error(rc);
  if (result[0] == 0)   error(XPCOM.NS_NOINTERFACE);
  componentManager.Release();
  webBrowser=new nsIWebBrowser(result[0]);
  createCOMInterfaces();
  AddRef();
  rc=webBrowser.SetContainerWindow(webBrowserChrome.getAddress());
  if (rc != XPCOM.NS_OK)   error(rc);
  rc=webBrowser.QueryInterface(nsIBaseWindow.NS_IBASEWINDOW_IID,result);
  if (rc != XPCOM.NS_OK)   error(rc);
  if (result[0] == 0)   error(XPCOM.NS_ERROR_NO_INTERFACE);
  nsIBaseWindow baseWindow=new nsIBaseWindow(result[0]);
  Rectangle rect=getClientArea();
  if (rect.isEmpty()) {
    rect.width=1;
    rect.height=1;
  }
  embedHandle=OS.gtk_hbox_new(false,0);
  OS.gtk_container_add(handle,embedHandle);
  OS.gtk_widget_show(embedHandle);
  rc=baseWindow.InitWindow(embedHandle,0,0,0,rect.width,rect.height);
  if (rc != XPCOM.NS_OK)   error(XPCOM.NS_ERROR_FAILURE);
  rc=baseWindow.Create();
  if (rc != XPCOM.NS_OK)   error(XPCOM.NS_ERROR_FAILURE);
  rc=baseWindow.SetVisibility(true);
  if (rc != XPCOM.NS_OK)   error(XPCOM.NS_ERROR_FAILURE);
  baseWindow.Release();
  rc=webBrowser.AddWebBrowserListener(weakReference.getAddress(),nsIWebProgressListener.NS_IWEBPROGRESSLISTENER_IID);
  if (rc != XPCOM.NS_OK)   error(rc);
  rc=webBrowser.SetParentURIContentListener(uriContentListener.getAddress());
  if (rc != XPCOM.NS_OK)   error(rc);
  if (eventCallback == null) {
    eventCallback=new Callback(Browser.class,"eventProc",3);
    eventProc=eventCallback.getAddress();
    if (eventProc == 0)     error(SWT.ERROR_NO_MORE_CALLBACKS);
  }
  int list=OS.gtk_container_get_children(embedHandle);
  if (list != 0) {
    mozillaHandle=OS.g_list_data(list);
    OS.g_list_free(list);
    if (mozillaHandle != 0) {
      getDisplay().setData(ADD_WIDGET_KEY,new Object[]{new LONG(mozillaHandle),this});
      OS.g_signal_connect(mozillaHandle,OS.event,eventProc,0);
      OS.g_signal_connect(mozillaHandle,OS.key_press_event,eventProc,STOP_PROPOGATE);
      OS.g_signal_connect(mozillaHandle,OS.key_release_event,eventProc,STOP_PROPOGATE);
    }
  }
  Listener listener=new Listener(){
    public void handleEvent(    Event event){
switch (event.type) {
case SWT.Dispose:
{
          if (ignoreDispose) {
            ignoreDispose=false;
            break;
          }
          ignoreDispose=true;
          notifyListeners(event.type,event);
          event.type=SWT.NONE;
          onDispose(event.display);
          break;
        }
case SWT.Resize:
      onResize();
    break;
case SWT.FocusIn:
  Activate();
break;
case SWT.Deactivate:
{
Display display=event.display;
if (Browser.this == display.getFocusControl()) Deactivate();
break;
}
case SWT.Show:
{
Display display=event.display;
display.asyncExec(new Runnable(){
public void run(){
  if (Browser.this.isDisposed())   return;
  onResize();
}
}
);
break;
}
}
}
}
;
int[] folderEvents=new int[]{SWT.Dispose,SWT.Resize,SWT.FocusIn,SWT.Deactivate,SWT.Show};
for (int i=0; i < folderEvents.length; i++) {
addListener(folderEvents[i],listener);
}
}
