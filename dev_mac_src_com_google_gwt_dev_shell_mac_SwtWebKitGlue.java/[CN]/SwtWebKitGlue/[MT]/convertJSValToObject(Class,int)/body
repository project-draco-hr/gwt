{
  if (LowLevelSaf.isNull(jsval) || LowLevelSaf.isUndefined(jsval)) {
    return null;
  }
  if (LowLevelSaf.isObject(jsval)) {
    Object translated=translateJSObject(paramType,jsval);
    if (paramType.isAssignableFrom(translated.getClass())) {
      return translated;
    }
  }
  int curExecState=LowLevelSaf.getExecState();
switch (TypeInfo.classifyType(paramType)) {
case TypeInfo.TYPE_WRAP_BOOLEAN:
case TypeInfo.TYPE_PRIM_BOOLEAN:
    return Boolean.valueOf(LowLevelSaf.coerceToBoolean(curExecState,jsval));
case TypeInfo.TYPE_WRAP_BYTE:
case TypeInfo.TYPE_PRIM_BYTE:
  return new Byte(LowLevelSaf.coerceToByte(curExecState,jsval));
case TypeInfo.TYPE_WRAP_CHAR:
case TypeInfo.TYPE_PRIM_CHAR:
return new Character(LowLevelSaf.coerceToChar(curExecState,jsval));
case TypeInfo.TYPE_WRAP_DOUBLE:
case TypeInfo.TYPE_PRIM_DOUBLE:
return new Double(LowLevelSaf.coerceToDouble(curExecState,jsval));
case TypeInfo.TYPE_WRAP_FLOAT:
case TypeInfo.TYPE_PRIM_FLOAT:
return new Float(LowLevelSaf.coerceToFloat(curExecState,jsval));
case TypeInfo.TYPE_WRAP_INT:
case TypeInfo.TYPE_PRIM_INT:
return new Integer(LowLevelSaf.coerceToInt(curExecState,jsval));
case TypeInfo.TYPE_WRAP_LONG:
case TypeInfo.TYPE_PRIM_LONG:
return new Long(LowLevelSaf.coerceToLong(curExecState,jsval));
case TypeInfo.TYPE_WRAP_SHORT:
case TypeInfo.TYPE_PRIM_SHORT:
return new Short(LowLevelSaf.coerceToShort(curExecState,jsval));
case TypeInfo.TYPE_WRAP_STRING:
return LowLevelSaf.coerceToString(curExecState,jsval);
case TypeInfo.TYPE_USER:
if (LowLevelSaf.isString(jsval)) {
return LowLevelSaf.coerceToString(curExecState,jsval);
}
break;
}
throw new IllegalArgumentException("Cannot convert to type " + TypeInfo.getSourceRepresentation(paramType,""));
}
