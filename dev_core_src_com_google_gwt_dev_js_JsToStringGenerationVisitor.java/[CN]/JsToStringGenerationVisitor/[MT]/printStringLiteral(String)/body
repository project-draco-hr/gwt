{
  char[] chars=value.toCharArray();
  final int n=chars.length;
  int quoteCount=0;
  int aposCount=0;
  for (int i=0; i < n; ++i) {
switch (chars[i]) {
case '"':
      ++quoteCount;
    break;
case '\'':
  ++aposCount;
break;
}
}
char quoteChar=(quoteCount < aposCount) ? '"' : '\'';
p.print(quoteChar);
for (int i=0; i < n; ++i) {
char c=chars[i];
if (' ' <= c && c <= '~' && c != quoteChar && c != '\\') {
p.print(c);
continue;
}
int escape=-1;
switch (c) {
case 0:
escape='0';
break;
case '\b':
escape='b';
break;
case '\f':
escape='f';
break;
case '\n':
escape='n';
break;
case '\r':
escape='r';
break;
case '\t':
escape='t';
break;
case '"':
escape='"';
break;
case '\'':
escape='\'';
break;
case '\\':
escape='\\';
break;
}
if (escape >= 0) {
p.print('\\');
p.print((char)escape);
}
 else {
int hexSize;
if (c < 256) {
p.print("\\x");
hexSize=2;
}
 else {
p.print("\\u");
hexSize=4;
}
for (int shift=(hexSize - 1) * 4; shift >= 0; shift-=4) {
int digit=0xf & (c >> shift);
p.print(HEX_DIGITS[digit]);
}
}
}
p.print(quoteChar);
}
