{
{
    MockErrorReporter errors=new MockErrorReporter();
    JMethod res=(JMethod)lookup("test.Bar::addOne(I)",errors);
    errors.assertNoError();
    assertEquals("test.Foo",res.getEnclosingType().getName());
    assertEquals("addOne",res.getName());
  }
{
    MockErrorReporter errors=new MockErrorReporter();
    JMethod res=(JMethod)lookup("test.Bar::addTwoOverloaded(I)",errors);
    errors.assertNoError();
    assertEquals("test.Foo",res.getEnclosingType().getName());
    assertEquals("addTwoOverloaded",res.getName());
    assertEquals(JPrimitiveType.INT,res.getParams().get(0).getType());
  }
{
    MockErrorReporter errors=new MockErrorReporter();
    JMethod res=(JMethod)lookup("test.Bar::addTwoOverloaded(D)",errors);
    errors.assertNoError();
    assertEquals("test.Foo",res.getEnclosingType().getName());
    assertEquals("addTwoOverloaded",res.getName());
    assertEquals(JPrimitiveType.DOUBLE,res.getParams().get(0).getType());
  }
{
    MockErrorReporter errors=new MockErrorReporter();
    JMethod res=(JMethod)lookup("test.Bar::addOne(*)",errors);
    errors.assertNoError();
    assertEquals("test.Foo",res.getEnclosingType().getName());
    assertEquals("addOne",res.getName());
  }
{
    MockErrorReporter errors=new MockErrorReporter();
    HasEnclosingType res=lookup("test.Bar::addTwoOverloaded(*)",errors);
    errors.assertHasError();
  }
{
    MockErrorReporter errors=new MockErrorReporter();
    JMethod res=(JMethod)lookup("test.Bar::foo(I)",errors);
    errors.assertNoError();
    assertEquals("test.Bar",res.getEnclosingType().getName());
    assertEquals("foo",res.getName());
  }
{
    MockErrorReporter errors=new MockErrorReporter();
    JMethod res=(JMethod)lookup("test.Bar::bar(I)",errors);
    errors.assertNoError();
    assertEquals("test.Bar",res.getEnclosingType().getName());
    assertEquals("bar",res.getName());
  }
{
    MockErrorReporter errors=new MockErrorReporter();
    JMethod res=(JMethod)lookup("test.Bar::bar(D)",errors);
    errors.assertNoError();
    assertEquals("test.Bar",res.getEnclosingType().getName());
    assertEquals("bar",res.getName());
  }
{
    MockErrorReporter errors=new MockErrorReporter();
    HasEnclosingType res=lookup("test.Bar::foo(*)",errors);
    errors.assertHasError();
  }
}
