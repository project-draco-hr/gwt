{
{
    MockErrorReporter errors=new MockErrorReporter();
    JField res=(JField)lookup("test.Foo::intStatic",errors);
    errors.assertNoError();
    assertEquals("test.Foo",res.getEnclosingType().getName());
    assertEquals("intStatic",res.getName());
    assertTrue(res.isStatic());
  }
{
    MockErrorReporter errors=new MockErrorReporter();
    JField res=(JField)lookup("test.Foo::intInstance",errors);
    errors.assertNoError();
    assertEquals("test.Foo",res.getEnclosingType().getName());
    assertEquals("intInstance",res.getName());
    assertFalse(res.isStatic());
  }
{
    MockErrorReporter errors=new MockErrorReporter();
    JMethod res=(JMethod)lookup("test.Foo::addOne(I)",errors);
    errors.assertNoError();
    assertEquals("test.Foo",res.getEnclosingType().getName());
    assertEquals("addOne",res.getName());
  }
{
    MockErrorReporter errors=new MockErrorReporter();
    JMethod res=(JMethod)lookup("test.Foo::addTwoOverloaded(I)",errors);
    errors.assertNoError();
    assertEquals("test.Foo",res.getEnclosingType().getName());
    assertEquals("addTwoOverloaded",res.getName());
    assertEquals(JPrimitiveType.INT,res.getParams().get(0).getType());
  }
{
    MockErrorReporter errors=new MockErrorReporter();
    JMethod res=(JMethod)lookup("test.Foo::addTwoOverloaded(D)",errors);
    errors.assertNoError();
    assertEquals("test.Foo",res.getEnclosingType().getName());
    assertEquals("addTwoOverloaded",res.getName());
    assertEquals(JPrimitiveType.DOUBLE,res.getParams().get(0).getType());
  }
{
    MockErrorReporter errors=new MockErrorReporter();
    JMethod res=(JMethod)lookup("test.Foo::new()",errors);
    errors.assertNoError();
    assertEquals("test.Foo",res.getEnclosingType().getName());
    assertEquals("new",res.getName());
  }
{
    MockErrorReporter errors=new MockErrorReporter();
    HasEnclosingType res=lookup("test.Foo::bogoField",errors);
    errors.assertHasError();
  }
{
    MockErrorReporter errors=new MockErrorReporter();
    HasEnclosingType res=lookup("test.Foo::bogoMethod()",errors);
    errors.assertHasError();
  }
{
    MockErrorReporter errors=new MockErrorReporter();
    HasEnclosingType res=lookup("test.Foo::new(J)",errors);
    errors.assertHasError();
  }
}
