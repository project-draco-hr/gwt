{
  File cacheDir=Files.createTempDir();
  String moduleName="com.google.FooModule";
  MinimalRebuildCacheManager minimalRebuildCacheManager=new MinimalRebuildCacheManager(TreeLogger.NULL,cacheDir);
  PermutationDescription permutationDescription=new PermutationDescription();
  minimalRebuildCacheManager.deleteCaches();
  MinimalRebuildCache startingCache=minimalRebuildCacheManager.getCache(moduleName,permutationDescription);
  Map<String,Long> currentModifiedBySourcePath=new ImmutableMap.Builder<String,Long>().put("Foo.java",0L).put("Bar.java",0L).put("Baz.java",0L).build();
  startingCache.recordDiskSourceResources(currentModifiedBySourcePath);
  startingCache.recordNestedTypeName("Foo","Foo");
  startingCache.setJsForType(TreeLogger.NULL,"Foo","Some Js for Foo");
  startingCache.addTypeReference("Bar","Foo");
  startingCache.getImmediateTypeRelations().getImmediateSuperclassesByClass().put("Baz","Foo");
  startingCache.addTypeReference("Foo","Foo$Inner");
  Map<String,Long> laterModifiedBySourcePath=new ImmutableMap.Builder<String,Long>().put("Foo.java",9999L).put("Bar.java",0L).put("Baz.java",0L).build();
  startingCache.recordDiskSourceResources(laterModifiedBySourcePath);
  startingCache.setRootTypeNames(Sets.newHashSet("Foo","Bar","Baz"));
  StringAnalyzableTypeEnvironment typeEnvironment=startingCache.getTypeEnvironment();
  typeEnvironment.recordTypeEnclosesMethod("Foo","Foo::$clinit()V");
  typeEnvironment.recordTypeEnclosesMethod("Bar","Bar::$clinit()V");
  typeEnvironment.recordTypeEnclosesMethod("Baz","Baz::$clinit()V");
  typeEnvironment.recordMethodInstantiatesType("Foo::start()V","Bar");
  typeEnvironment.recordMethodCallsMethod("Foo::start()V","Bar::run()V");
  typeEnvironment.recordMethodInstantiatesType("Bar::start()V","Baz");
  typeEnvironment.recordMethodCallsMethod("Bar::run()V","Baz::run()V");
  startingCache.computeReachableTypeNames();
  startingCache.computeAndClearStaleTypesCache(TreeLogger.NULL,new JTypeOracle(null,startingCache));
  startingCache.addExportedGlobalName("alert","Window");
  minimalRebuildCacheManager.putCache(moduleName,permutationDescription,startingCache);
  assertTrue(minimalRebuildCacheManager.shutdown());
  MinimalRebuildCacheManager reloadedMinimalRebuildCacheManager=new MinimalRebuildCacheManager(TreeLogger.NULL,cacheDir);
  MinimalRebuildCache reloadedCache=reloadedMinimalRebuildCacheManager.syncReadDiskCache(moduleName,permutationDescription);
  assertFalse(startingCache == reloadedCache);
  assertTrue(startingCache.hasSameContent(reloadedCache));
}
