{
  System.out.println("Starting to generate from CLDR data (ignore -D lines " + "produced by cldr-tools)");
  UOption[] options={UOption.HELP_H(),UOption.HELP_QUESTION_MARK(),UOption.SOURCEDIR().setDefault(CldrUtility.MAIN_DIRECTORY),outputDir().setDefault("./"),restrictLocales()};
  UOption.parseArgs(args,options);
  String sourceDir=options[2].value;
  String targetDir=options[3].value;
  DEBUG=options[4].doesOccur;
  Factory cldrFactory=Factory.make(sourceDir,".*");
  Set<String> locales=cldrFactory.getAvailable();
  if (DEBUG) {
    locales=new HashSet<String>(Arrays.asList(new String[]{"root","en","en_US","en_CA","ar","ar_IQ"}));
  }
  System.out.println("Processing " + locales.size() + " locales");
  File outputDir=new File(targetDir);
  LocaleData localeData=new LocaleData(factory,locales);
  for (  Class<? extends Processor> processorClass : PROCESSORS) {
    Constructor<? extends Processor> ctor=processorClass.getConstructor(File.class,Factory.class,LocaleData.class);
    Processor processor=ctor.newInstance(outputDir,cldrFactory,localeData);
    processor.run();
  }
  System.out.println("Finished.");
}
