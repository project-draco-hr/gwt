{
  System.out.println("Starting to generate from CLDR data (ignore -D lines " + "produced by cldr-tools)");
  UOption[] options={UOption.HELP_H(),UOption.HELP_QUESTION_MARK(),UOption.SOURCEDIR().setDefault(CLDRPaths.MAIN_DIRECTORY),outputDir().setDefault("./"),restrictLocales(),processors().setDefault(DEFAULT_PROCESSORS)};
  UOption.parseArgs(args,options);
  String sourceDir=options[2].value;
  String targetDir=options[3].value;
  String restrictLocales=options[4].value;
  String procNames=options[5].value;
  List<Class<? extends Processor>> processorClasses=new ArrayList<Class<? extends Processor>>();
  for (  String procName : procNames.split(",")) {
    if (!procName.contains(".")) {
      procName=Processor.class.getPackage().getName() + "." + procName;
    }
    Throwable thrown=null;
    try {
      Class<?> clazz=Class.forName(procName);
      processorClasses.add(clazz.asSubclass(Processor.class));
    }
 catch (    ClassNotFoundException e) {
      thrown=e;
    }
catch (    ClassCastException e) {
      thrown=e;
    }
    if (thrown != null) {
      System.err.println("Ignoring " + procName + " ("+ thrown+ ")");
    }
  }
  Factory cldrFactory=Factory.make(sourceDir,".*");
  Set<String> locales=cldrFactory.getAvailable();
  if (restrictLocales != null) {
    Set<String> newLocales=new HashSet<String>();
    newLocales.add("root");
    for (    String locale : restrictLocales.split(",")) {
      if (!locales.contains(locale)) {
        System.err.println("Ignoring non-existent locale " + locale);
        continue;
      }
      newLocales.add(locale);
    }
    locales=newLocales;
  }
  System.out.println("Processing " + locales.size() + " locales");
  File outputDir=new File(targetDir);
  LocaleData localeData=new LocaleData(factory,locales);
  for (  Class<? extends Processor> processorClass : processorClasses) {
    Constructor<? extends Processor> ctor=processorClass.getConstructor(File.class,Factory.class,LocaleData.class);
    Processor processor=ctor.newInstance(outputDir,cldrFactory,localeData);
    processor.run();
  }
  System.out.println("Finished.");
}
