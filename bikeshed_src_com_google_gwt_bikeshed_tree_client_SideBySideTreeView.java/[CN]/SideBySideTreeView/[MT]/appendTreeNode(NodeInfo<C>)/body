{
  final int level=treeNodes.size();
  CellDecorator<C> cell=new CellDecorator<C>(nodeInfo,level);
  final ListView<C> listView=createListView(nodeInfo,cell);
  ScrollPanel scrollable=new ScrollPanel((Widget)listView);
  scrollable.setStyleName(STYLENAME_COLUMN);
  ListView<C> listViewDelegate=new ListView<C>(){
    public Range getRange(){
      return listView.getRange();
    }
    public void setData(    int start,    int length,    List<C> values){
      TreeNode<?> node=treeNodes.get(level);
      Object openKey=node.getCell().openKey;
      if (openKey != null) {
        boolean stillExists=false;
        ProvidesKey<C> keyProvider=nodeInfo.getProvidesKey();
        for (        C value : values) {
          if (openKey.equals(keyProvider.getKey(value))) {
            stillExists=true;
            break;
          }
        }
        if (!stillExists) {
          trimToLevel(level);
        }
      }
      listView.setData(start,length,values);
    }
    public void setDataSize(    int size,    boolean isExact){
      listView.setDataSize(size,isExact);
    }
    public void setDelegate(    Delegate<C> delegate){
      listView.setDelegate(delegate);
    }
    public void setSelectionModel(    SelectionModel<? super C> selectionModel){
      listView.setSelectionModel(selectionModel);
    }
  }
;
  TreeNode<C> treeNode=new TreeNode<C>(nodeInfo,listViewDelegate,cell,scrollable);
  treeNodes.add(treeNode);
  listView.setSelectionModel(nodeInfo.getSelectionModel());
  nodeInfo.setView(listViewDelegate);
  SplitLayoutPanel splitPanel=getSplitLayoutPanel();
  splitPanel.insertWest(scrollable,defaultWidth,null);
  splitPanel.setWidgetMinSize(scrollable,minWidth);
  splitPanel.forceLayout();
  animation.scrollToEnd();
}
