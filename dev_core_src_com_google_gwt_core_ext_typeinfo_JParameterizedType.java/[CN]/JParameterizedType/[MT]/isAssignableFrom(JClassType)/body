{
  Set<JClassType> typeHierarchy=getFlattenedSuperTypeHierarchy(otherType);
  if (typeHierarchy.contains(this)) {
    return true;
  }
  for (  JClassType type : typeHierarchy) {
    JGenericType isGeneric=type.isGenericType();
    if (isGeneric != null) {
      type=isGeneric.getRawType();
    }
    JParameterizedType isParameterized=type.isParameterized();
    if (isParameterized != null && isParameterized.getBaseType() == getBaseType()) {
      assert(isParameterized != this);
      return areTypeArgsAssignableFrom(this.getTypeArgs(),isParameterized.getTypeArgs());
    }
    JRawType isRaw=type.isRawType();
    if (isRaw != null && isRaw.getBaseType() == getBaseType()) {
      return true;
    }
    JWildcardType isWildcard=type.isWildcard();
    if (isWildcard != null && isWildcard.isAssignableTo(this)) {
      return true;
    }
  }
  return false;
}
