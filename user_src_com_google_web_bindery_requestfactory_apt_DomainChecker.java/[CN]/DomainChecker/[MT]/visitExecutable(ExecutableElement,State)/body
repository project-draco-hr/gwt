{
  if (shouldIgnore(clientMethodElement,state)) {
    return null;
  }
  Name name=clientMethodElement.getSimpleName();
  if (currentTypeIsProxy && name.contentEquals("stableId") && clientMethodElement.getParameters().isEmpty()) {
    return null;
  }
  ExecutableType clientMethod=viewIn(checkedElement,clientMethodElement,state);
  List<TypeMirror> lookFor=new ArrayList<TypeMirror>();
  TypeMirror returnType;
  try {
    returnType=convertToDomainTypes(clientMethod,lookFor,clientMethodElement,state);
  }
 catch (  UnmappedTypeException e) {
    return null;
  }
  ExecutableElement domainMethod;
  if (currentTypeIsProxy && isSetter(clientMethodElement,state)) {
    domainMethod=new MethodFinder(name,state.types.getNoType(TypeKind.VOID),lookFor,false,state).scan(domainElement,state);
    if (domainMethod == null) {
      domainMethod=new MethodFinder(name,domainElement.asType(),lookFor,false,state).scan(domainElement,state);
    }
  }
 else {
    domainMethod=new MethodFinder(name,returnType,lookFor,!currentTypeIsProxy,state).scan(domainElement,state);
  }
  if (domainMethod == null) {
    StringBuilder sb=new StringBuilder();
    sb.append(returnType).append(" ").append(name).append("(");
    for (    TypeMirror param : lookFor) {
      sb.append(param);
    }
    sb.append(")");
    state.poison(clientMethodElement,Messages.domainMissingMethod(sb));
    return null;
  }
  if (!domainMethod.getModifiers().contains(Modifier.PUBLIC)) {
    state.poison(clientMethodElement,Messages.domainMethodNotPublic(domainMethod.getSimpleName()));
  }
  boolean isInstanceRequest=state.types.isSubtype(clientMethod.getReturnType(),state.instanceRequestType);
  if ((isInstanceRequest || requireInstanceDomainMethods) && domainMethod.getModifiers().contains(Modifier.STATIC)) {
    state.poison(clientMethodElement,Messages.domainMethodWrongModifier(false,domainMethod.getSimpleName()));
  }
  if (!isInstanceRequest && requireStaticDomainMethods && !domainMethod.getModifiers().contains(Modifier.STATIC)) {
    state.poison(clientMethodElement,Messages.domainMethodWrongModifier(true,domainMethod.getSimpleName()));
  }
  state.addMapping(clientMethodElement,domainMethod);
  return null;
}
