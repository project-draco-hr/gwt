{
  double doubleVal;
  if (value.isNull()) {
    return null;
  }
  if (value.isUndefined()) {
    throw new HostedModeException(msgPrefix + ": JavaScript undefined, expected " + type.getName());
  }
  if (value.isWrappedJavaObject()) {
    Object origObject=value.getWrappedJavaObject();
    if (!type.isAssignableFrom(origObject.getClass())) {
      throw new HostedModeException(msgPrefix + ": Java object of type " + origObject.getClass().getName()+ ", expected "+ type.getName());
    }
    return origObject;
  }
  if (getJavaScriptObjectSuperclass(type) != null) {
    if (!value.isJavaScriptObject()) {
      throw new HostedModeException(msgPrefix + ": JS object of type " + value.getTypeString()+ ", expected "+ type.getName());
    }
    return createJavaScriptObject(value,type);
  }
switch (TypeInfo.classifyType(type)) {
case TypeInfo.TYPE_WRAP_BOOLEAN:
case TypeInfo.TYPE_PRIM_BOOLEAN:
    if (!value.isBoolean()) {
      throw new HostedModeException(msgPrefix + ": JS value of type " + value.getTypeString()+ ", expected boolean");
    }
  return Boolean.valueOf(value.getBoolean());
case TypeInfo.TYPE_WRAP_BYTE:
case TypeInfo.TYPE_PRIM_BYTE:
return new Byte((byte)getIntRange(value,Byte.MIN_VALUE,Byte.MAX_VALUE,"byte",msgPrefix));
case TypeInfo.TYPE_WRAP_CHAR:
case TypeInfo.TYPE_PRIM_CHAR:
return new Character((char)getIntRange(value,Character.MIN_VALUE,Character.MAX_VALUE,"char",msgPrefix));
case TypeInfo.TYPE_WRAP_DOUBLE:
case TypeInfo.TYPE_PRIM_DOUBLE:
if (!value.isNumber()) {
throw new HostedModeException(msgPrefix + ": JS value of type " + value.getTypeString()+ ", expected double");
}
return new Double(value.getNumber());
case TypeInfo.TYPE_WRAP_FLOAT:
case TypeInfo.TYPE_PRIM_FLOAT:
if (!value.isNumber()) {
throw new HostedModeException(msgPrefix + ": JS value of type " + value.getTypeString()+ ", expected float");
}
doubleVal=value.getNumber();
if ((float)(doubleVal - Float.MIN_VALUE) == 0.0f) {
doubleVal=Float.MIN_VALUE;
}
float floatVal=(float)doubleVal;
if (Float.isInfinite(floatVal) && !Double.isInfinite(doubleVal)) {
throw new HostedModeException(msgPrefix + ": JS value " + doubleVal+ " out of range for a float");
}
return new Float(floatVal);
case TypeInfo.TYPE_WRAP_INT:
case TypeInfo.TYPE_PRIM_INT:
return new Integer(getIntRange(value,Integer.MIN_VALUE,Integer.MAX_VALUE,"int",msgPrefix));
case TypeInfo.TYPE_WRAP_LONG:
case TypeInfo.TYPE_PRIM_LONG:
if (!value.isNumber()) {
throw new HostedModeException(msgPrefix + ": JS value of type " + value.getTypeString()+ ", expected long");
}
doubleVal=value.getNumber();
if (doubleVal < Long.MIN_VALUE || doubleVal > Long.MAX_VALUE) {
throw new HostedModeException(msgPrefix + ": JS double value " + doubleVal+ " out of range for a long");
}
long longVal=(long)doubleVal;
if (doubleVal != longVal) {
ModuleSpace.getLogger().log(TreeLogger.WARN,msgPrefix + ": Loss of precision converting double to long",null);
}
return new Long(longVal);
case TypeInfo.TYPE_WRAP_SHORT:
case TypeInfo.TYPE_PRIM_SHORT:
return new Short((short)getIntRange(value,Short.MIN_VALUE,Short.MAX_VALUE,"short",msgPrefix));
case TypeInfo.TYPE_WRAP_STRING:
if (!value.isString()) {
throw new HostedModeException(msgPrefix + ": JS value of type " + value.getTypeString()+ ", expected string");
}
return value.getString();
case TypeInfo.TYPE_USER:
if (value.isString()) {
return value.getString();
}
break;
}
throw new IllegalArgumentException(msgPrefix + ": Cannot convert to type " + TypeInfo.getSourceRepresentation(type,"")+ " from "+ value.getTypeString());
}
