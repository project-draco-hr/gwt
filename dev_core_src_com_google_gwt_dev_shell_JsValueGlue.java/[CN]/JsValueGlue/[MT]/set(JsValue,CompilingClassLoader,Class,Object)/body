{
  if (obj == null) {
    value.setNull();
  }
 else   if (type.equals(String.class)) {
    value.setString((String)obj);
  }
 else   if (type.equals(boolean.class)) {
    value.setBoolean(((Boolean)obj).booleanValue());
  }
 else   if (type.equals(short.class)) {
    value.setInt(((Short)obj).shortValue());
  }
 else   if (type.equals(int.class)) {
    value.setInt(((Integer)obj).intValue());
  }
 else   if (type.equals(byte.class)) {
    value.setInt(((Byte)obj).byteValue());
  }
 else   if (type.equals(char.class)) {
    value.setInt(((Character)obj).charValue());
  }
 else   if (type.equals(long.class)) {
    long longVal=((Long)obj).longValue();
    double doubleVal=longVal;
    if ((long)doubleVal != longVal) {
      ModuleSpace.getLogger().log(TreeLogger.WARN,"Loss of precision converting long to double",null);
    }
    value.setDouble(doubleVal);
  }
 else   if (type.equals(float.class)) {
    value.setDouble(((Float)obj).floatValue());
  }
 else   if (type.equals(double.class)) {
    value.setDouble(((Double)obj).doubleValue());
  }
 else {
    try {
      Class jso=Class.forName(JSO_CLASS,true,cl);
      if (jso.isAssignableFrom(type) && jso.isAssignableFrom(obj.getClass())) {
        JsValue jsObject=getUnderlyingObject(obj);
        value.setValue(jsObject);
        return;
      }
    }
 catch (    ClassNotFoundException e) {
    }
    if (!type.isAssignableFrom(obj.getClass())) {
      throw new HostedModeException("object is of type " + obj.getClass().getName() + ", expected "+ type.getName());
    }
    value.setWrappedJavaObject(cl,obj);
  }
}
