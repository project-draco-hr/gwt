{
  DependencyReportVisitor v=new DependencyReportVisitor();
  v.accept(program);
  Map<Correlation,Integer> idents=new HashMap<Correlation,Integer>();
  TreeMap<String,Set<Integer>> clusters=new TreeMap<String,Set<Integer>>();
  for (  Correlation c : v.deps.keySet()) {
    if (c.getAxis().equals(Axis.CLASS)) {
      clusters.put(c.getIdent(),new TreeSet<Integer>());
    }
  }
  EnumSet<Axis> toShow=EnumSet.of(Axis.METHOD,Axis.FIELD);
  StringBuilder edges=new StringBuilder();
  StringBuilder nodes=new StringBuilder();
  StringBuilder subgraphs=new StringBuilder();
  for (  Map.Entry<Correlation,Set<Correlation>> entry : v.deps.entrySet()) {
    Correlation key=entry.getKey();
    if (!toShow.contains(key.getAxis()) || key.getIdent().startsWith("java.lang")) {
      continue;
    }
    Set<Integer> keyClusterSet;
    if (!idents.containsKey(key)) {
      idents.put(key,idents.size());
      nodes.append(idents.get(key) + " [label=\"" + key+ "\"];\n");
    }
    if (key.getAxis().isJava()) {
      keyClusterSet=clusters.get(clusters.headMap(key.getIdent()).lastKey());
      keyClusterSet.add(idents.get(key));
    }
 else {
      keyClusterSet=null;
    }
    for (    Correlation c : entry.getValue()) {
      if (!toShow.contains(c.getAxis()) || c.getIdent().startsWith("java.lang")) {
        continue;
      }
      Set<Integer> cClusterSet;
      if (!idents.containsKey(c)) {
        idents.put(c,idents.size());
        nodes.append(idents.get(c) + " [label=\"" + c+ "\"];\n");
      }
      if (c.getAxis().isJava()) {
        cClusterSet=clusters.get(clusters.headMap(c.getIdent()).lastKey());
        cClusterSet.add(idents.get(c));
      }
 else {
        cClusterSet=null;
      }
      edges.append(idents.get(key) + " -> " + idents.get(c));
      if (keyClusterSet == cClusterSet) {
        edges.append(" constraint=false");
      }
      edges.append(";\n");
    }
  }
  int clusterNumber=0;
  for (  Map.Entry<String,Set<Integer>> entry : clusters.entrySet()) {
    Set<Integer> set=entry.getValue();
    if (set.isEmpty()) {
      continue;
    }
    subgraphs.append("subgraph cluster" + clusterNumber++ + " {");
    subgraphs.append("label=\"" + entry.getKey() + "\";");
    for (    Integer i : set) {
      subgraphs.append(i + "; ");
    }
    subgraphs.append("};\n");
  }
  PrintWriter out;
  try {
    File outputPathDir=new File(outputPath);
    outputPathDir.mkdirs();
    out=new PrintWriter(new FileWriter(File.createTempFile("soyc","-deps.dot",outputPathDir)));
  }
 catch (  IOException e) {
    out=null;
  }
  out.println("digraph soyc {");
  out.println(subgraphs.toString());
  out.println(nodes.toString());
  out.println(edges.toString());
  out.println("}");
  out.close();
}
