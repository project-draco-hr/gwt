{
  Pattern multiplesOf6=new Pattern(){
    @Override public boolean contains(    int i){
      return i % 6 == 0;
    }
  }
;
  BitSet setA=createSetOfMultiples(2);
  BitSet setB=createSetOfMultiples(3);
  setA.and(setB);
  checkPattern(setA,multiplesOf6);
  setA.and(setA);
  checkPattern(setA,multiplesOf6);
  setA.and((BitSet)setA.clone());
  checkPattern(setA,multiplesOf6);
  BitSet trueSet=new BitSet(TEST_SIZE);
  trueSet.set(0,TEST_SIZE);
  setA.and(trueSet);
  checkPattern(setA,multiplesOf6);
  trueSet.set(TEST_SIZE,TEST_SIZE * 2);
  setA.and(trueSet);
  checkPattern(setA,multiplesOf6);
  for (int i=TEST_SIZE; i < TEST_SIZE * 2; i++) {
    assertFalse(setA.get(i));
  }
  setA.and(new BitSet());
  assertEquals(0,setA.length());
  setB=new BitSet();
  setA.set(0);
  setB.set(1);
  setA.and(setB);
  assertTrue(setA.isEmpty());
  setB=new BitSet();
  setA.set(0);
  setB.set(BIG_NUMBER);
  setA.and(setB);
  assertTrue(setA.isEmpty());
  setA.set(0);
  setB.and(setA);
  assertTrue(setB.isEmpty());
  setA=new BitSet();
  setA.set(1);
  setA.set(5);
  setB=new BitSet();
  setB.set(2);
  setA.and(setB);
  assertTrue(setA.isEmpty());
  setA=new BitSet();
  setA.set(1);
  setA.set(5);
  setB=new BitSet();
  setB.set(5);
  setA.and(setB);
  assertTrue(setA.get(5));
  assertEquals(1,setA.cardinality());
  setA=new BitSet();
  setA.set(2);
  setB=new BitSet();
  setB.set(1);
  setB.set(3);
  setA.and(setB);
  assertEquals(0,setA.cardinality());
}
