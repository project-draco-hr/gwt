{
  Pattern multiplesOf2And5=new Pattern(){
    @Override public boolean contains(    int i){
      return i % 2 == 0 || i % 5 == 0;
    }
  }
;
  BitSet setA=createSetOfMultiples(2);
  BitSet setB=createSetOfMultiples(5);
  setA.or(setB);
  checkPattern(setA,multiplesOf2And5);
  setA.or(setA);
  checkPattern(setA,multiplesOf2And5);
  setA.or((BitSet)setA.clone());
  checkPattern(setA,multiplesOf2And5);
  setA.or(new BitSet());
  checkPattern(setA,multiplesOf2And5);
  BitSet trueSet=new BitSet(TEST_SIZE * 2);
  trueSet.set(0,TEST_SIZE * 2);
  setA.or(trueSet);
  assertEquals(TEST_SIZE * 2,setA.cardinality());
  setA=new BitSet();
  setA.set(2);
  setB=new BitSet();
  setB.set(1);
  setB.set(3);
  setA.or(setB);
  checkRange(setA,1,4);
}
