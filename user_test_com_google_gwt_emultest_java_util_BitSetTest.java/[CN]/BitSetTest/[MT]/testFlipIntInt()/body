{
  BitSet set=new BitSet();
  set.flip(0,BIG_NUMBER);
  checkRange(set,0,BIG_NUMBER);
  set.flip(0,BIG_NUMBER - 1);
  checkValues(set,BIG_NUMBER - 1);
  set.clear(0,BIG_NUMBER);
  assertTrue(set.isEmpty());
  set.flip(0,33);
  set.flip(0,8);
  checkRange(set,8,33);
  for (int i=0; i < 33; i++) {
    set.flip(i,i);
    assertEquals(25,set.cardinality());
  }
  set.flip(0,8);
  set.flip(7,21);
  set.flip(22,27);
  checkValues(set,0,1,2,3,4,5,6,21,27,28,29,30,31,32);
  set=new BitSet();
  set.flip(10,12);
  set.flip(11,1000);
  checkRange(set,10,11,12,1000);
  set=new BitSet();
  set.flip(10,12);
  set.flip(0,10);
  checkRange(set,0,12);
  set.flip(0,12);
  assertTrue(set.isEmpty());
  set.flip(0,64);
  set.flip(0,63);
  checkValues(set,63);
  set.flip(63,64);
  assertTrue(set.isEmpty());
  set.flip(0,130);
  checkRange(set,0,130);
  set.flip(0,66);
  checkRange(set,66,130);
  set.flip(65,131);
  checkRange(set,65,66,130,131);
  set=new BitSet();
  set.flip(1,20);
  set.flip(5,10);
  checkRange(set,1,5,10,20);
  set=new BitSet();
  set.flip(1,10);
  set.flip(5,15);
  checkRange(set,1,5,10,15);
  try {
    set.flip(-1,2);
    fail("exception expected");
  }
 catch (  IndexOutOfBoundsException expected) {
  }
  try {
    set.flip(3,1);
    fail("exception expected");
  }
 catch (  IndexOutOfBoundsException expected) {
  }
  set.flip(2,2);
}
