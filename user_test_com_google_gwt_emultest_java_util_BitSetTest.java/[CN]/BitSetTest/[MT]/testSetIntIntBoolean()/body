{
  BitSet set=new BitSet();
  set.set(0,BIG_NUMBER,true);
  assertEquals(BIG_NUMBER,set.cardinality());
  set.set(0,BIG_NUMBER - 1,false);
  assertEquals(1,set.cardinality());
  set.set(0,BIG_NUMBER,false);
  assertTrue(set.isEmpty());
  set.set(0,32,true);
  checkRange(set,0,32);
  set.set(0,8,false);
  checkRange(set,8,32);
  set.set(0,8,true);
  checkRange(set,0,32);
  set.set(7,21,false);
  checkValues(set,0,1,2,3,4,5,6,21,22,23,24,25,26,27,28,29,30,31);
  set.set(22,27,false);
  checkValues(set,0,1,2,3,4,5,6,21,27,28,29,30,31);
  set=new BitSet();
  set.set(11,1000,true);
  set.set(10,12,false);
  checkRange(set,12,1000);
  assertEquals(988,set.cardinality());
  set=new BitSet();
  set.set(10,12,true);
  set.set(0,10,true);
  checkRange(set,0,12);
  set.set(0,12,false);
  assertTrue(set.isEmpty());
  set=new BitSet();
  set.set(1,20,true);
  set.set(5,10,false);
  checkRange(set,1,5,10,20);
  set=new BitSet();
  set.set(1,10,true);
  set.set(5,10,false);
  set.set(10,15,true);
  checkRange(set,1,5,10,15);
  try {
    set.set(-1,2,true);
    fail("exception expected");
  }
 catch (  IndexOutOfBoundsException expected) {
  }
  try {
    set.set(3,1,true);
    fail("exception expected");
  }
 catch (  IndexOutOfBoundsException expected) {
  }
  set.set(2,2,true);
  try {
    set.set(-1,2,false);
    fail("exception expected");
  }
 catch (  IndexOutOfBoundsException expected) {
  }
  try {
    set.set(3,1,false);
    fail("exception expected");
  }
 catch (  IndexOutOfBoundsException expected) {
  }
  set.set(2,2,false);
}
