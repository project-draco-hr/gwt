{
  BitSet set=new BitSet();
  assertEquals(-1,set.nextSetBit(0));
  assertEquals(-1,set.nextSetBit(BIG_NUMBER));
  set.set(0);
  set.set(1);
  set.set(3);
  set.set(31);
  set.set(32);
  set.set(33);
  assertEquals(0,set.nextSetBit(0));
  assertEquals(1,set.nextSetBit(1));
  assertEquals(3,set.nextSetBit(2));
  assertEquals(3,set.nextSetBit(3));
  assertEquals(31,set.nextSetBit(4));
  assertEquals(31,set.nextSetBit(31));
  assertEquals(32,set.nextSetBit(32));
  assertEquals(33,set.nextSetBit(33));
  assertEquals(-1,set.nextSetBit(34));
  set=new BitSet();
  set.set(BIG_NUMBER);
  assertEquals(BIG_NUMBER,set.nextSetBit(0));
  assertEquals(BIG_NUMBER,set.nextSetBit(BIG_NUMBER));
  assertEquals(-1,set.nextSetBit(BIG_NUMBER + 1));
  for (int i=0; i < TEST_SIZE; i++) {
    set.set(BIG_NUMBER + i);
  }
  set.set(TEST_SIZE / 2);
  assertEquals(TEST_SIZE / 2,set.nextSetBit(0));
  try {
    set.nextSetBit(-1);
    fail("exception expected");
  }
 catch (  IndexOutOfBoundsException expected) {
  }
}
