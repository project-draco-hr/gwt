{
  AutoBean<Q> toMutate=getProxyForReturnPayloadGraph(id);
  toMutate.accept(new AutoBeanVisitor(){
    @Override public boolean visitReferenceProperty(    String propertyName,    AutoBean<?> value,    PropertyContext ctx){
      if (ctx.canSet()) {
        if (returnRecord.hasProperty(propertyName)) {
          Object raw=returnRecord.get(propertyName);
          if (returnRecord.isNull(propertyName)) {
            ctx.set(null);
          }
 else {
            Object decoded=EntityCodex.decode(ctx.getType(),ctx.getElementType(),AbstractRequestContext.this,raw);
            ctx.set(decoded);
          }
        }
      }
      return false;
    }
    @Override public boolean visitValueProperty(    String propertyName,    Object value,    PropertyContext ctx){
      if (ctx.canSet()) {
        if (returnRecord.hasProperty(propertyName)) {
          Object raw=returnRecord.get(propertyName);
          if (returnRecord.isNull(propertyName)) {
            ctx.set(null);
          }
 else {
            Object decoded=ValueCodex.convertFromString(ctx.getType(),String.valueOf(raw));
            ctx.set(decoded);
          }
        }
      }
      return false;
    }
  }
);
  makeImmutable(toMutate);
  Q proxy=toMutate.as();
  if (operations != null) {
    for (    WriteOperation op : operations) {
      if (op.equals(WriteOperation.UPDATE) && !requestFactory.hasVersionChanged(id,returnRecord.getVersion())) {
        continue;
      }
      requestFactory.getEventBus().fireEventFromSource(new EntityProxyChange<EntityProxy>(proxy,op),id.getProxyClass());
    }
  }
  return proxy;
}
