{
  this.incrementalCompile=compilerContext.getOptions().isIncrementalCompileEnabled();
  this.logger=logger;
  this.compilerContext=compilerContext;
  this.program=program;
  this.jsProgram=jsProgram;
  this.rebindPermutationOracle=precompilationContext.getRebindPermutationOracle();
  this.compilationState=rebindPermutationOracle.getCompilationState();
  this.compiledClassesByInternalName=compilationState.getClassFileMap();
  this.compiledClassesBySourceName=compilationState.getClassFileMapBySource();
  initializeNameBasedLocators();
  this.minimalRebuildCache=compilerContext.getMinimalRebuildCache();
  if (incrementalCompile) {
    this.staleTypeNames=minimalRebuildCache.computeAndClearStaleTypesCache(logger,program.typeOracle);
    checkPreambleTypesStillFresh(logger);
  }
  replacementValueByMagicMethodQualifiedName=ImmutableMap.<String,JBooleanLiteral>builder().put(GWT_IS_CLIENT,JBooleanLiteral.TRUE).put(OLD_GWT_IS_CLIENT,JBooleanLiteral.TRUE).put(GWT_IS_PROD_MODE,JBooleanLiteral.TRUE).put(OLD_GWT_IS_PROD_MODE,JBooleanLiteral.TRUE).put(GWT_IS_SCRIPT,JBooleanLiteral.TRUE).put(OLD_GWT_IS_SCRIPT,JBooleanLiteral.TRUE).put(CLASS_DESIRED_ASSERTION_STATUS,JBooleanLiteral.get(compilerContext.getOptions().isEnableAssertions())).put(CLASS_IS_CLASS_METADATA_ENABLED,JBooleanLiteral.get(!compilerContext.getOptions().isClassMetadataDisabled())).build();
}
