{
  sourceNameBasedTypeLocator=new NameBasedTypeLocator(compiledClassesBySourceName){
    @Override protected boolean hasCompileErrors(    String sourceName){
      return compilerContext.getCompilationErrorsIndex().hasCompileErrors(sourceName);
    }
    @Override protected void logErrorTrace(    TreeLogger branch,    Type logLevel,    String sourceName){
      CompilationProblemReporter.logErrorTrace(branch,logLevel,compilerContext,sourceName,false);
    }
  }
;
  binaryNameBasedTypeLocator=new NameBasedTypeLocator(null){
    @Override protected CompilationUnit getCompilationUnitFromSource(    String binaryName){
      return internalNameBasedTypeLocator.getCompilationUnitFromSource(BinaryName.toInternalName(binaryName));
    }
    @Override protected boolean sourceCompilationUnitIsAvailable(    String binaryName){
      return internalNameBasedTypeLocator.sourceCompilationUnitIsAvailable(BinaryName.toInternalName(binaryName));
    }
    @Override protected boolean hasCompileErrors(    String binaryName){
      return sourceNameBasedTypeLocator.hasCompileErrors(BinaryName.toSourceName(binaryName));
    }
    @Override protected void logErrorTrace(    TreeLogger branch,    Type logLevel,    String binaryName){
      sourceNameBasedTypeLocator.logErrorTrace(branch,logLevel,BinaryName.toSourceName(binaryName));
    }
  }
;
  internalNameBasedTypeLocator=new NameBasedTypeLocator(compiledClassesByInternalName){
    @Override protected JDeclaredType getResolvedType(    String internalName){
      return binaryNameBasedTypeLocator.getResolvedType(InternalName.toBinaryName(internalName));
    }
    @Override protected boolean resolvedTypeIsAvailable(    String internalName){
      return binaryNameBasedTypeLocator.resolvedTypeIsAvailable(InternalName.toBinaryName(internalName));
    }
    @Override protected boolean hasCompileErrors(    String internalName){
      return sourceNameBasedTypeLocator.hasCompileErrors(InternalName.toSourceName(internalName));
    }
    @Override protected void logErrorTrace(    TreeLogger branch,    Type logLevel,    String internalName){
      sourceNameBasedTypeLocator.logErrorTrace(branch,logLevel,BinaryName.toSourceName(internalName));
    }
  }
;
}
