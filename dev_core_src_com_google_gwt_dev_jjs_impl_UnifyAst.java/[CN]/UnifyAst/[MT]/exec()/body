{
  for (  JMethod entryMethod : program.getEntryMethods()) {
    flowInto(entryMethod);
  }
  for (  JClassType type : program.codeGenTypes) {
    for (    JMethod method : type.getMethods()) {
      flowInto(method);
    }
  }
  if (!compilerContext.shouldCompileMonolithic()) {
    Set<String> sourceNames=ImmutableSet.copyOf(compiledClassesBySourceName.keySet());
    for (    String sourceTypeName : sourceNames) {
      JDeclaredType type=findType(sourceTypeName,sourceNameBasedTypeLocator);
      instantiate(type);
      for (      JField field : type.getFields()) {
        flowInto(field);
      }
      for (      JMethod method : type.getMethods()) {
        flowInto(method);
      }
    }
  }
  instantiate(program.getTypeJavaLangString());
  flowInto(program.getIndexedMethod("Object.toString"));
  mapApi(program.getTypeJavaLangString());
  flowInto(methodMap.get("java.lang.String.valueOf(C)Ljava/lang/String;"));
  flowInto(program.getIndexedMethod("Enum.obfuscatedName"));
  AutoboxUtils autoboxUtils=new AutoboxUtils(program);
  for (  JMethod method : autoboxUtils.getBoxMethods()) {
    flowInto(method);
  }
  for (  JMethod method : autoboxUtils.getUnboxMethods()) {
    flowInto(method);
  }
  if (compilerContext.getOptions().isRunAsyncEnabled()) {
    flowInto(program.getIndexedMethod("AsyncFragmentLoader.onLoad"));
    flowInto(program.getIndexedMethod("AsyncFragmentLoader.runAsync"));
  }
  staticInitialize(program.getTypeClassLiteralHolder());
  for (  JMethod method : program.getTypeJavaLangClass().getMethods()) {
    if (method.isStatic() && method.getName().startsWith("createFor")) {
      flowInto(method);
    }
  }
  mainLoop();
  if (compilerContext.shouldCompileMonolithic()) {
    pruneDeadFieldsAndMethods();
  }
  computeOverrides();
  if (errorsFound) {
    throw new UnableToCompleteException();
  }
}
