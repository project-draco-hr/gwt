{
  final String groupingSeparator=remapSeparator(orig.groupingSeparator());
  final String decimalSeparator=remapSeparator(orig.decimalSeparator());
  final String monetaryGroupingSeparator=remapSeparator(orig.monetaryGroupingSeparator());
  final String monetarySeparator=remapSeparator(orig.monetarySeparator());
  return new NumberConstants(){
    @Override public String currencyPattern(){
      return orig.currencyPattern();
    }
    @Override public String decimalPattern(){
      return orig.decimalPattern();
    }
    @Override public String decimalSeparator(){
      return decimalSeparator;
    }
    @Override public String defCurrencyCode(){
      return orig.defCurrencyCode();
    }
    @Override public String exponentialSymbol(){
      return orig.exponentialSymbol();
    }
    @Override public String globalCurrencyPattern(){
      return orig.globalCurrencyPattern();
    }
    @Override public String groupingSeparator(){
      return groupingSeparator;
    }
    @Override public String infinity(){
      return orig.infinity();
    }
    @Override public String minusSign(){
      return orig.minusSign();
    }
    @Override public String monetaryGroupingSeparator(){
      return monetaryGroupingSeparator;
    }
    @Override public String monetarySeparator(){
      return monetarySeparator;
    }
    @Override public String notANumber(){
      return orig.notANumber();
    }
    @Override public String percent(){
      return orig.percent();
    }
    @Override public String percentPattern(){
      return orig.percentPattern();
    }
    @Override public String perMill(){
      return orig.perMill();
    }
    @Override public String plusSign(){
      return orig.plusSign();
    }
    @Override public String scientificPattern(){
      return orig.scientificPattern();
    }
    @Override public String simpleCurrencyPattern(){
      return orig.simpleCurrencyPattern();
    }
    @Override public String zeroDigit(){
      return "0";
    }
  }
;
}
