{
  if (Double.isNaN(number)) {
    return numberConstants.notANumber();
  }
  boolean isNegative=((number < 0.0) || (number == 0.0 && 1 / number < 0.0));
  if (isNegative) {
    number=-number;
  }
  StringBuilder buf=new StringBuilder();
  if (Double.isInfinite(number)) {
    buf.append(isNegative ? negativePrefix : positivePrefix);
    buf.append(numberConstants.infinity());
    buf.append(isNegative ? negativeSuffix : positiveSuffix);
    return buf.toString();
  }
  number*=multiplier;
  int scale=toScaledString(buf,number);
  int preRound=buf.length() + scale + maximumFractionDigits+ 3;
  if (preRound > 0 && preRound < buf.length() && buf.charAt(preRound) == '9') {
    propagateCarry(buf,preRound - 1);
    scale+=buf.length() - preRound;
    buf.delete(preRound,buf.length());
  }
  format(isNegative,buf,scale);
  return buf.toString();
}
