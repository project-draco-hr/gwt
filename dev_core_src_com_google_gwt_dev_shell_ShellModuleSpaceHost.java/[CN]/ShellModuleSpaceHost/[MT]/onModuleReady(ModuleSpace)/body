{
  this.space=readySpace;
  Event moduleSpaceHostReadyEvent=SpeedTracerLogger.start(DevModeEventType.MODULE_SPACE_HOST_READY);
  try {
    ModuleSpacePropertyOracle propOracle=new ModuleSpacePropertyOracle(module.getProperties(),module.getActiveLinkerNames(),readySpace);
    Deque<Rule> rules=module.getRules();
    PrecompileTaskOptionsImpl options=new PrecompileTaskOptionsImpl();
    options.setGenDir(genDir);
    CompilerContext compilerContext=new CompilerContext.Builder().module(module).options(options).build();
    StandardGeneratorContext genCtx=new StandardGeneratorContext(compilerContext,compilationState,new ArtifactSet(),false);
    genCtx.setGeneratorResultCachingEnabled((rebindCache != null));
    rebindOracle=new StandardRebindOracle(propOracle,rules,genCtx);
    rebindOracle.setRebindCache(rebindCache);
    classLoader=new CompilingClassLoader(logger,compilationState,readySpace);
  }
  finally {
    moduleSpaceHostReadyEvent.end();
  }
}
