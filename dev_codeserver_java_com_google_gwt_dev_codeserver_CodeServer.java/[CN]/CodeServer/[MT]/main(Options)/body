{
  if (options.isCompileTest()) {
    PrintWriterTreeLogger logger=new PrintWriterTreeLogger();
    logger.setMaxDetail(options.getLogLevel());
    OutboxTable outboxes;
    try {
      File baseCacheDir=DiskCachingUtil.computePreferredCacheDir(options.getModuleNames(),logger);
      UnitCache unitCache=UnitCacheSingleton.get(logger,null,baseCacheDir);
      MinimalRebuildCacheManager minimalRebuildCacheManager=new MinimalRebuildCacheManager(logger,baseCacheDir);
      outboxes=makeOutboxes(options,logger,unitCache,minimalRebuildCacheManager);
    }
 catch (    Throwable t) {
      t.printStackTrace();
      System.out.println("FAIL");
      System.exit(1);
      return;
    }
    int retries=options.getCompileTestRecompiles();
    for (int i=0; i < retries; i++) {
      System.out.println("\n### Recompile " + (i + 1) + "\n");
      try {
        outboxes.defaultCompileAll(logger);
      }
 catch (      Throwable t) {
        t.printStackTrace();
        System.out.println("FAIL");
        System.exit(1);
      }
    }
    System.out.println("PASS");
    System.exit(0);
  }
  try {
    start(options);
    String url="http://" + options.getPreferredHost() + ":"+ options.getPort()+ "/";
    System.out.println();
    System.out.println("The code server is ready at " + url);
  }
 catch (  UnableToCompleteException e) {
    System.exit(1);
  }
catch (  Throwable t) {
    t.printStackTrace();
    System.exit(1);
  }
}
