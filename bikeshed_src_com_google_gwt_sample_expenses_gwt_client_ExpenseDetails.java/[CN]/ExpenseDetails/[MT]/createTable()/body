{
  CellTable.Resources resources=GWT.create(TableResources.class);
  CellTable<ExpenseRecord> view=new CellTable<ExpenseRecord>(100,resources);
  Styles.Common common=Styles.common();
  view.addColumnStyleName(0,common.spacerColumn());
  view.addColumnStyleName(1,common.expenseDetailsDateColumn());
  view.addColumnStyleName(3,common.expenseDetailsCategoryColumn());
  view.addColumnStyleName(4,common.expenseDetailsAmountColumn());
  view.addColumnStyleName(5,common.expenseDetailsApprovalColumn());
  view.addColumnStyleName(6,common.spacerColumn());
  view.addColumn(new Column<ExpenseRecord,String>(new TextCell()){
    @Override public String getValue(    ExpenseRecord object){
      return "<div style='display:none;'/>";
    }
  }
);
  GetValue<ExpenseRecord,Date> createdGetter=new GetValue<ExpenseRecord,Date>(){
    public Date getValue(    ExpenseRecord object){
      return object.getCreated();
    }
  }
;
  defaultComparator=createColumnComparator(createdGetter,false);
  Comparator<ExpenseRecord> createdDesc=createColumnComparator(createdGetter,true);
  addColumn(view,"Created",new DateCell(DateTimeFormat.getFormat("MMM dd yyyy")),createdGetter,defaultComparator,createdDesc);
  lastComparator=defaultComparator;
  addColumn(view,"Description",new TextCell(),new GetValue<ExpenseRecord,String>(){
    public String getValue(    ExpenseRecord object){
      return object.getDescription();
    }
  }
);
  addColumn(view,"Category",new TextCell(),new GetValue<ExpenseRecord,String>(){
    public String getValue(    ExpenseRecord object){
      return object.getCategory();
    }
  }
);
  final GetValue<ExpenseRecord,Double> amountGetter=new GetValue<ExpenseRecord,Double>(){
    public Double getValue(    ExpenseRecord object){
      return object.getAmount();
    }
  }
;
  Comparator<ExpenseRecord> amountAsc=createColumnComparator(amountGetter,false);
  Comparator<ExpenseRecord> amountDesc=createColumnComparator(amountGetter,true);
  addColumn(view,"Amount",new NumberCell(NumberFormat.getCurrencyFormat()),new GetValue<ExpenseRecord,Number>(){
    public Number getValue(    ExpenseRecord object){
      return amountGetter.getValue(object);
    }
  }
,amountAsc,amountDesc);
  final DenialPopup denialPopup=new DenialPopup();
  denialPopup.addCloseHandler(new CloseHandler<PopupPanel>(){
    public void onClose(    CloseEvent<PopupPanel> event){
      String reasonDenied=denialPopup.getReasonDenied();
      ExpenseRecord record=denialPopup.getExpenseRecord();
      if (reasonDenied == null || reasonDenied.length() == 0) {
        syncCommit(record,null);
      }
 else {
        updateExpenseRecord(record,"Denied",reasonDenied);
      }
    }
  }
);
  approvalCell=new ApprovalCell();
  Column<ExpenseRecord,String> approvalColumn=addColumn(view,"Approval Status",approvalCell,new GetValue<ExpenseRecord,String>(){
    public String getValue(    ExpenseRecord object){
      return object.getApproval();
    }
  }
);
  approvalColumn.setFieldUpdater(new FieldUpdater<ExpenseRecord,String>(){
    public void update(    int index,    final ExpenseRecord object,    String value){
      if ("Denied".equals(value)) {
        denialPopup.setExpenseRecord(object);
        denialPopup.setReasonDenied(object.getReasonDenied());
        denialPopup.popup();
      }
 else {
        updateExpenseRecord(object,value,"");
      }
    }
  }
);
  view.addColumn(new Column<ExpenseRecord,String>(new TextCell()){
    @Override public String getValue(    ExpenseRecord object){
      return "<div style='display:none;'/>";
    }
  }
);
  return view;
}
