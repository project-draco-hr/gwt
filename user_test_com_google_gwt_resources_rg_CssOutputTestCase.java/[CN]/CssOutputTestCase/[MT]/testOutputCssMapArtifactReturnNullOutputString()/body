{
  UnitTestTreeLogger testLogger=new UnitTestTreeLogger.Builder().createLogger();
  ResourceContext mockResourceContext=EasyMock.createMock(ResourceContext.class);
  Map<JMethod,String> testMap=new HashMap<JMethod,String>();
  OutputStream mockOutputStream=EasyMock.createMock(OutputStream.class);
  GeneratorContext mockGeneratorContext=EasyMock.createMock(GeneratorContext.class);
  GeneratedResource mockGeneratedResource=EasyMock.createMock(GeneratedResource.class);
  EasyMock.expect(mockResourceContext.getGeneratorContext()).andReturn(mockGeneratorContext);
  EasyMock.expect(mockGeneratorContext.tryCreateResource(testLogger,"cssResource/com.test.Bundle.cssMethod.cssmap")).andReturn(null);
  JMethod method=EasyMock.createMock(JMethod.class);
  JClassType bundleType=EasyMock.createMock(JClassType.class);
  EasyMock.expect(method.getEnclosingType()).andReturn(bundleType);
  EasyMock.expect(bundleType.getQualifiedSourceName()).andReturn("com.test.Bundle");
  EasyMock.expect(method.getName()).andReturn("cssMethod");
  EasyMock.replay(mockResourceContext);
  EasyMock.replay(mockGeneratorContext);
  EasyMock.replay(method);
  EasyMock.replay(bundleType);
  CssResourceGenerator crg=new CssResourceGenerator();
  crg.outputCssMapArtifact(testLogger,mockResourceContext,method,testMap);
  testLogger.assertCorrectLogEntries();
  EasyMock.verify(mockResourceContext);
  EasyMock.verify(mockGeneratorContext);
  EasyMock.verify(method);
  EasyMock.verify(bundleType);
}
