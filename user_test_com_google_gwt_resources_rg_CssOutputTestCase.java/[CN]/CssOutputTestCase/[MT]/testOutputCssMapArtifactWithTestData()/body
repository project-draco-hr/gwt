{
  UnitTestTreeLogger testLogger=new UnitTestTreeLogger.Builder().createLogger();
  ResourceContext mockResourceContext=EasyMock.createMock(ResourceContext.class);
  JMethod mockJMethod1=EasyMock.createMock(JMethod.class);
  JMethod mockJMethod2=EasyMock.createMock(JMethod.class);
  JMethod mockJMethod3=EasyMock.createMock(JMethod.class);
  JClassType mockJClassType1=EasyMock.createMock(JClassType.class);
  JClassType mockJClassType2=EasyMock.createMock(JClassType.class);
  JClassType mockJClassType3=EasyMock.createMock(JClassType.class);
  Map<JMethod,String> testMap=new LinkedHashMap<JMethod,String>();
  testMap.put(mockJMethod1,"TESTCSSNAME1");
  testMap.put(mockJMethod2,"TESTCSSNAME2");
  testMap.put(mockJMethod3,"TESTCSSNAME3");
  ByteArrayOutputStream testOutputStream=new ByteArrayOutputStream();
  GeneratorContext mockGeneratorContext=EasyMock.createMock(GeneratorContext.class);
  GeneratedResource mockGeneratedResource=EasyMock.createMock(GeneratedResource.class);
  EasyMock.expect(mockResourceContext.getGeneratorContext()).andReturn(mockGeneratorContext);
  EasyMock.expectLastCall().times(2);
  EasyMock.expect(mockGeneratorContext.tryCreateResource(testLogger,"cssResource/test-file5.cssmap")).andReturn(testOutputStream);
  EasyMock.expect(mockJMethod1.getEnclosingType()).andReturn(mockJClassType1);
  EasyMock.expect(mockJClassType1.getQualifiedSourceName()).andReturn("test.class.type.1");
  EasyMock.expect(mockJMethod1.getName()).andReturn("basename1");
  EasyMock.expect(mockJMethod2.getEnclosingType()).andReturn(mockJClassType2);
  EasyMock.expect(mockJClassType2.getQualifiedSourceName()).andReturn("test.class.type.2");
  EasyMock.expect(mockJMethod2.getName()).andReturn("basename2");
  EasyMock.expect(mockJMethod3.getEnclosingType()).andReturn(mockJClassType3);
  EasyMock.expect(mockJClassType3.getQualifiedSourceName()).andReturn("test.class.type.3");
  EasyMock.expect(mockJMethod3.getName()).andReturn("basename3");
  EasyMock.expect(mockGeneratorContext.commitResource(testLogger,testOutputStream)).andReturn(mockGeneratedResource);
  EasyMock.replay(mockResourceContext);
  EasyMock.replay(mockGeneratorContext);
  EasyMock.replay(mockJMethod1);
  EasyMock.replay(mockJMethod2);
  EasyMock.replay(mockJMethod3);
  EasyMock.replay(mockJClassType1);
  EasyMock.replay(mockJClassType2);
  EasyMock.replay(mockJClassType3);
  CssResourceGenerator crg=new CssResourceGenerator();
  crg.outputCssMapArtifact(testLogger,mockResourceContext,testMap,"test-file5");
  String expectedOutput="test-class-type-1-basename1,TESTCSSNAME1\n" + "test-class-type-2-basename2,TESTCSSNAME2\n" + "test-class-type-3-basename3,TESTCSSNAME3\n";
  assertEquals(expectedOutput,testOutputStream.toString());
  testLogger.assertCorrectLogEntries();
  EasyMock.verify(mockResourceContext);
  EasyMock.verify(mockGeneratorContext);
  EasyMock.verify(mockJMethod1);
  EasyMock.verify(mockJMethod2);
  EasyMock.verify(mockJMethod3);
  EasyMock.verify(mockJClassType1);
  EasyMock.verify(mockJClassType2);
  EasyMock.verify(mockJClassType3);
}
