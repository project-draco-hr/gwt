{
  resolver=new Resolver(){
    public void addImplementedInterface(    JRealClassType type,    JClassType intf){
      TypeOracleMediator.this.addImplementedInterface(type,intf);
    }
    public void addThrows(    JAbstractMethod method,    JType exception){
      TypeOracleMediator.this.addThrows(method,exception);
    }
    public Map<String,JRealClassType> getBinaryMapper(){
      return TypeOracleMediator.this.binaryMapper;
    }
    public TypeOracleMediator getMediator(){
      return TypeOracleMediator.this;
    }
    public TypeOracle getTypeOracle(){
      return TypeOracleMediator.this.typeOracle;
    }
    public JMethod newMethod(    JClassType type,    String name,    Map<Class<? extends Annotation>,Annotation> declaredAnnotations,    JTypeParameter[] typeParams){
      return TypeOracleMediator.this.newMethod(type,name,declaredAnnotations,typeParams);
    }
    public void newParameter(    JAbstractMethod method,    JType argType,    String argName,    Map<Class<? extends Annotation>,Annotation> declaredAnnotations,    boolean argNamesAreReal){
      TypeOracleMediator.this.newParameter(method,argType,argName,declaredAnnotations,argNamesAreReal);
    }
    public JRealClassType newRealClassType(    JPackage pkg,    String enclosingTypeName,    boolean isLocalType,    String className,    boolean isIntf){
      return TypeOracleMediator.this.newRealClassType(pkg,enclosingTypeName,isLocalType,className,isIntf);
    }
    public boolean resolveAnnotation(    TreeLogger logger,    CollectAnnotationData annotVisitor,    Map<Class<? extends Annotation>,Annotation> declaredAnnotations){
      return TypeOracleMediator.this.resolveAnnotation(logger,annotVisitor,declaredAnnotations);
    }
    public boolean resolveAnnotations(    TreeLogger logger,    List<CollectAnnotationData> annotations,    Map<Class<? extends Annotation>,Annotation> declaredAnnotations){
      return TypeOracleMediator.this.resolveAnnotations(logger,annotations,declaredAnnotations);
    }
    public boolean resolveClass(    TreeLogger logger,    JRealClassType type){
      return TypeOracleMediator.this.resolveClass(logger,type);
    }
    public void setReturnType(    JAbstractMethod method,    JType returnType){
      TypeOracleMediator.this.setReturnType(method,returnType);
    }
    public void setSuperClass(    JRealClassType type,    JClassType superType){
      TypeOracleMediator.this.setSuperClass(type,superType);
    }
  }
;
}
