{
  TypeDeclaration typeDecl=compiledClass.getTypeDeclaration();
  SourceTypeBinding binding=typeDecl.binding;
  assert(binding.constantPoolName() != null);
  String qname=compiledClass.getSourceName();
  String className=Shared.getShortName(qname);
  String jpkgName=compiledClass.getPackageName();
  JPackage pkg=typeOracle.getOrCreatePackage(jpkgName);
  boolean isLocalType=binding instanceof LocalTypeBinding;
  boolean isIntf=TypeDeclaration.kind(typeDecl.modifiers) == TypeDeclaration.INTERFACE_DECL;
  boolean isAnnotation=TypeDeclaration.kind(typeDecl.modifiers) == TypeDeclaration.ANNOTATION_TYPE_DECL;
  JRealClassType resultType;
  if (isAnnotation) {
    resultType=new JAnnotationType(typeOracle,pkg,enclosingType,isLocalType,className,isIntf);
  }
 else   if (maybeGeneric(typeDecl,enclosingType)) {
    JTypeParameter[] jtypeParameters=declareTypeParameters(typeDecl.typeParameters);
    JGenericType jgenericType=new JGenericType(typeOracle,pkg,enclosingType,isLocalType,className,isIntf,jtypeParameters);
    resultType=jgenericType;
  }
 else   if (binding.isEnum()) {
    resultType=new JEnumType(typeOracle,pkg,enclosingType,isLocalType,className,isIntf);
  }
 else {
    resultType=new JRealClassType(typeOracle,pkg,enclosingType,isLocalType,className,isIntf);
  }
  if (typeDecl.methods != null) {
    for (    AbstractMethodDeclaration method : typeDecl.methods) {
      declareTypeParameters(method.typeParameters());
    }
  }
  resultType.addModifierBits(Shared.bindingToModifierBits(binding));
  return resultType;
}
