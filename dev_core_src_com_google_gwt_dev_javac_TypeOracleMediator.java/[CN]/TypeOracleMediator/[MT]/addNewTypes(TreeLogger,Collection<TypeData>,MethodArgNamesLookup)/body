{
  Event typeOracleMediatorEvent=SpeedTracerLogger.start(CompilerEventType.TYPE_ORACLE_MEDIATOR);
  Event visitClassFileEvent=SpeedTracerLogger.start(CompilerEventType.TYPE_ORACLE_MEDIATOR,"phase","Visit Class Files");
  assert(context == null);
  context=new TypeOracleBuildContext(argsLookup);
  for (  TypeData typeData : typeDataList) {
    CollectClassData cv=processClass(typeData);
    if (!cv.hasNoExternalName()) {
      context.classMap.put(typeData.internalName,cv);
    }
  }
  visitClassFileEvent.end();
  Event identityEvent=SpeedTracerLogger.start(CompilerEventType.TYPE_ORACLE_MEDIATOR,"phase","Establish Identity");
  Set<JRealClassType> unresolvedTypes=new LinkedHashSet<JRealClassType>();
  for (  TypeData typeData : typeDataList) {
    CollectClassData cv=context.classMap.get(typeData.internalName);
    if (cv == null) {
      continue;
    }
    JRealClassType type=createType(typeData,unresolvedTypes);
    if (type != null) {
      binaryMapper.put(typeData.internalName,type);
      context.classMapType.put(type,cv);
    }
  }
  identityEvent.end();
  Event resolveEnclosingEvent=SpeedTracerLogger.start(CompilerEventType.TYPE_ORACLE_MEDIATOR,"phase","Resolve Enclosing Classes");
  TreeLogger branch=logger.branch(TreeLogger.SPAM,"Resolving enclosing classes");
  for (Iterator<JRealClassType> it=unresolvedTypes.iterator(); it.hasNext(); ) {
    JRealClassType type=it.next();
    if (!resolveEnclosingClass(branch,type)) {
      it.remove();
    }
  }
  resolveEnclosingEvent.end();
  Event resolveUnresolvedEvent=SpeedTracerLogger.start(CompilerEventType.TYPE_ORACLE_MEDIATOR,"phase","Resolve Unresolved Types");
  for (  JRealClassType type : unresolvedTypes) {
    branch=logger.branch(TreeLogger.SPAM,"Resolving " + type.getQualifiedSourceName());
    if (!resolveClass(branch,type)) {
    }
  }
  resolveUnresolvedEvent.end();
  Event finishEvent=SpeedTracerLogger.start(CompilerEventType.TYPE_ORACLE_MEDIATOR,"phase","Finish");
  super.finish();
  finishEvent.end();
  context=null;
  typeOracleMediatorEvent.end();
}
