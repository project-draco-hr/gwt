{
  toReturn.method=method;
  TypeOracle oracle=method.getEnclosingType().getOracle();
  toReturn.isValueType=ModelUtils.isValueType(oracle,method.getReturnType());
  if (!toReturn.isValueType) {
    JClassType returnClass=method.getReturnType().isClassOrInterface();
    JClassType collectionInterface=oracle.findType(Collection.class.getCanonicalName());
    JClassType mapInterface=oracle.findType(Map.class.getCanonicalName());
    if (collectionInterface.isAssignableFrom(returnClass)) {
      JClassType[] parameterizations=ModelUtils.findParameterizationOf(collectionInterface,returnClass);
      toReturn.elementType=parameterizations[0];
    }
 else     if (mapInterface.isAssignableFrom(returnClass)) {
      JClassType[] parameterizations=ModelUtils.findParameterizationOf(mapInterface,returnClass);
      toReturn.keyType=parameterizations[0];
      toReturn.valueType=parameterizations[1];
    }
  }
}
