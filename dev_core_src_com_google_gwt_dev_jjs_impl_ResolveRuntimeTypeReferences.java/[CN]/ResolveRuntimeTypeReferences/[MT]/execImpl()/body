{
  RuntimeTypeCollectorVisitor runtimeTypeCollector=new RuntimeTypeCollectorVisitor();
  runtimeTypeCollector.accept(program);
  runtimeTypeCollector.accept(Lists.newArrayList(program.getCastMap().values()));
  runtimeTypeCollector.accept(program.getIndexedType("ClassLiteralHolder"));
  runtimeTypeCollector.accept(program.getBaseArrayCastMap());
  assignTypes(runtimeTypeCollector.typesRequiringRuntimeIds);
  ReplaceRuntimeTypeReferencesVisitor replaceTypeIdsVisitor=new ReplaceRuntimeTypeReferencesVisitor();
  replaceTypeIdsVisitor.accept(program);
  replaceTypeIdsVisitor.accept(program.getIndexedType("ClassLiteralHolder"));
  replaceTypeIdsVisitor.accept(program.getBaseArrayCastMap());
  for (  Entry<JReferenceType,JCastMap> entry : program.getCastMap().entrySet()) {
    JCastMap castMap=entry.getValue();
    replaceTypeIdsVisitor.accept(castMap);
  }
  return typeIdLiteralsByType;
}
