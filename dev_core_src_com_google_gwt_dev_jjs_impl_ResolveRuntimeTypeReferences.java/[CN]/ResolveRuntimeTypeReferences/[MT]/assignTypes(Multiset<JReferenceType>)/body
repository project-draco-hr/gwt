{
  typeMapper.getOrCreateTypeId(program.getJavaScriptObject());
  typeMapper.getOrCreateTypeId(program.getTypeJavaLangObject());
  typeMapper.getOrCreateTypeId(program.getTypeJavaLangString());
  Iterable<JReferenceType> types=null;
switch (typeOrder) {
case FREQUENCY:
    types=Multisets.copyHighestCountFirst(typesWithReferenceCounts).elementSet();
  break;
case ALPHABETICAL:
types=Lists.newArrayList(typesWithReferenceCounts.elementSet());
Collections.sort((List<JReferenceType>)types,HasName.BY_NAME_COMPARATOR);
break;
case NONE:
types=typesWithReferenceCounts.elementSet();
break;
}
for (JType type : types) {
typeMapper.getOrCreateTypeId(type);
}
}
