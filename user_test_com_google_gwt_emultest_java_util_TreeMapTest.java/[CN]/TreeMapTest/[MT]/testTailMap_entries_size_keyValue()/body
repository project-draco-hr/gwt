{
  K[] keys=getSortedKeys();
  V[] values=getSortedValues();
  NavigableMap<K,V> map=createNavigableMap();
  map.put(keys[0],values[0]);
  Map<K,V> tailMap=map.tailMap(keys[0]);
  assertEquals(1,tailMap.size());
  assertEquals(keys[0],tailMap.keySet().toArray()[0]);
  Map<K,V> exclusiveTailMap=map.tailMap(keys[0],false);
  assertEquals(0,exclusiveTailMap.size());
  assertEquals(0,exclusiveTailMap.keySet().size());
  Map<K,V> inclusiveTailMap=map.tailMap(keys[0],true);
  assertEquals(1,inclusiveTailMap.size());
  assertEquals(keys[0],inclusiveTailMap.keySet().toArray()[0]);
  map.put(keys[1],values[1]);
  tailMap=map.tailMap(keys[1]);
  assertEquals(1,tailMap.size());
  exclusiveTailMap=map.tailMap(keys[1],false);
  assertEquals(0,exclusiveTailMap.size());
  inclusiveTailMap=map.tailMap(keys[1],true);
  assertEquals(1,inclusiveTailMap.size());
  tailMap=map.tailMap(keys[0]);
  assertEquals(2,tailMap.size());
  assertEquals(keys[0],tailMap.keySet().toArray()[0]);
  assertEquals(keys[1],tailMap.keySet().toArray()[1]);
  exclusiveTailMap=map.tailMap(keys[0],false);
  assertEquals(1,exclusiveTailMap.size());
  assertEquals(keys[1],exclusiveTailMap.keySet().toArray()[0]);
  inclusiveTailMap=map.tailMap(keys[0],true);
  assertEquals(2,inclusiveTailMap.size());
  assertEquals(keys[0],inclusiveTailMap.keySet().toArray()[0]);
  assertEquals(keys[1],inclusiveTailMap.keySet().toArray()[1]);
}
