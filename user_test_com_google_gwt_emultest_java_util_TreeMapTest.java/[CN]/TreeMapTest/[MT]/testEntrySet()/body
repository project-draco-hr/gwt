{
  K[] keys=getSortedKeys();
  V[] values=getSortedValues();
  NavigableMap<K,V> map=createNavigableMap();
  map.put(keys[0],values[0]);
  map.put(keys[1],values[1]);
  map.put(keys[2],values[2]);
  Set<Map.Entry<K,V>> entries=map.entrySet();
  Iterator<Map.Entry<K,V>> entrySetIterator=entries.iterator();
  assertEquals(3,entries.size());
  assertEquals(keys[0] + "=" + values[0],entrySetIterator.next().toString());
  while (entrySetIterator.hasNext()) {
    Map.Entry<K,V> entry=entrySetIterator.next();
    assertTrue(map.get(entry.getKey()) == entry.getValue());
  }
  assertEquals(map.size(),entries.size());
  _assertEquals(entries,map.entrySet());
  map.clear();
  assertEquals(map.size(),entries.size());
  _assertEquals(entries,map.entrySet());
  map.put(keys[0],values[0]);
  assertEquals(map.size(),entries.size());
  _assertEquals(entries,map.entrySet());
  entries.clear();
  assertEquals(map.size(),entries.size());
  _assertEquals(entries,map.entrySet());
  map.put(keys[1],values[1]);
  map.put(keys[2],values[2]);
  Iterator<Entry<K,V>> it=entries.iterator();
  while (it.hasNext()) {
    Map.Entry<K,V> entry=it.next();
    map.containsKey(entry.getKey());
    map.containsValue(entry.getValue());
    it.remove();
  }
  try {
    it.next();
    fail("should throw NoSuchElementException");
  }
 catch (  NoSuchElementException expected) {
  }
  _assertEmpty(map);
}
