{
  K[] keys=getSortedKeys();
  assertEquals(0,createNavigableMap().headMap(keys[0]).size());
  NavigableMap<K,V> exclusiveHeadMap=createNavigableMap().headMap(keys[0],false);
  assertEquals(0,exclusiveHeadMap.size());
  assertNull(exclusiveHeadMap.firstEntry());
  assertNull(exclusiveHeadMap.lastEntry());
  try {
    assertNull(exclusiveHeadMap.firstKey());
    fail();
  }
 catch (  NoSuchElementException e) {
  }
  try {
    assertNull(exclusiveHeadMap.lastKey());
    fail();
  }
 catch (  NoSuchElementException e) {
  }
  NavigableMap<K,V> inclusiveHeadMap=createNavigableMap().headMap(keys[0],true);
  assertEquals(0,inclusiveHeadMap.size());
  assertNull(inclusiveHeadMap.firstEntry());
  assertNull(inclusiveHeadMap.lastEntry());
  try {
    assertNull(inclusiveHeadMap.firstKey());
    fail();
  }
 catch (  NoSuchElementException e) {
  }
  try {
    assertNull(inclusiveHeadMap.lastKey());
    fail();
  }
 catch (  NoSuchElementException e) {
  }
}
