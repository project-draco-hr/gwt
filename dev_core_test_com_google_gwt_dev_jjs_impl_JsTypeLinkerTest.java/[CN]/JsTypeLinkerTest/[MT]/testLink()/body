{
  NamedRange programRange=new NamedRange("Program");
  NamedRange someModelARange=new NamedRange("com.some.app.SomeAModel");
  NamedRange someModelBRange=new NamedRange("com.some.app.SomeBModel");
  NamedRange someControllerRange=new NamedRange("com.some.app.SomeController");
  NamedRange entryPointRange=new NamedRange("com.some.app.EntryPoint");
  List<NamedRange> classRanges=Lists.newArrayList(someModelARange,someModelBRange,someControllerRange,entryPointRange);
  StatementRangesBuilder srb=new StatementRangesBuilder();
  JsSourceMapBuilder smb=new JsSourceMapBuilder();
  StringBuilder sb=new StringBuilder();
  appendStatement(sb,srb,smb,"<preamble>\n");
  appendStatement(sb,srb,smb,"<java.lang.Object />\n");
  appendStatement(sb,srb,smb,"<java.lang.Class />\n");
  appendStatement(sb,srb,smb,"</preamble>\n");
{
    programRange.setStartPosition(sb.length());
    programRange.setStartLineNumber(lines);
    appendTypeStatement(sb,srb,smb,someModelARange,"<com.some.app.SomeModelA>\n");
    appendTypeStatement(sb,srb,smb,someModelBRange,"<com.some.app.SomeModelB>\n");
    appendTypeStatement(sb,srb,smb,someControllerRange,"<com.some.app.SomeController>\n");
    appendTypeStatement(sb,srb,smb,entryPointRange,"<com.some.app.EntryPoint>\n");
    programRange.setEndPosition(sb.length());
    programRange.setEndLineNumber(lines);
  }
  appendStatement(sb,srb,smb,"<epilogue>\n");
  appendStatement(sb,srb,smb,"<Some Bootstrap Code>\n");
  appendStatement(sb,srb,smb,"</epilogue>\n");
  String originalJs=sb.toString();
  MinimalRebuildCache minimalRebuildCache=new MinimalRebuildCache();
  PermutationRebuildCache permutationRebuildCache=minimalRebuildCache.getPermutationRebuildCache(1);
  Map<String,String> superClassesByClass=minimalRebuildCache.getImmediateTypeRelations().getImmediateSuperclassesByClass();
  superClassesByClass.put("java.lang.Class","java.lang.Object");
  superClassesByClass.put("com.some.app.SomeAModel","java.lang.Object");
  superClassesByClass.put("com.some.app.SomeBModel","java.lang.Object");
  superClassesByClass.put("com.some.app.SomeController","java.lang.Object");
  superClassesByClass.put("com.some.app.EntryPoint","java.lang.Object");
  minimalRebuildCache.setRootTypeNames(Lists.newArrayList("com.some.app.EntryPoint"));
  permutationRebuildCache.addTypeReference("com.some.app.EntryPoint","com.some.app.SomeController");
  permutationRebuildCache.addTypeReference("com.some.app.SomeController","com.some.app.SomeBModel");
  permutationRebuildCache.addTypeReference("com.some.app.SomeController","com.some.app.SomeAModel");
  JsTypeLinker jsTypeLinker=new JsTypeLinker(TreeLogger.NULL,new JsNoopTransformer(originalJs,srb.build(),smb.build()),classRanges,programRange,permutationRebuildCache,new JTypeOracle(null,minimalRebuildCache,true));
  jsTypeLinker.exec();
  assertEquals("<preamble>\n<java.lang.Object />\n<java.lang.Class />\n</preamble>\n" + "<com.some.app.EntryPoint>\n" + "<com.some.app.SomeModelA>\n"+ "<com.some.app.SomeModelB>\n"+ "<com.some.app.SomeController>\n"+ "<epilogue>\n<Some Bootstrap Code>\n</epilogue>\n",jsTypeLinker.getJs());
  assertEquals(Lists.newArrayList("preamble","java.lang.Object","java.lang.Class","/preamble","com.some.app.EntryPoint","com.some.app.SomeModelA","com.some.app.SomeModelB","com.some.app.SomeController","epilogue","Some Bootstrap Code","/epilogue"),getTypeNames(jsTypeLinker.getSourceInfoMap()));
  assertEquals(11,jsTypeLinker.getSourceInfoMap().getLines());
  superClassesByClass.put("com.some.app.SomeAModel","com.some.app.SomeBModel");
  jsTypeLinker=new JsTypeLinker(TreeLogger.NULL,new JsNoopTransformer(originalJs,srb.build(),smb.build()),classRanges,programRange,permutationRebuildCache,new JTypeOracle(null,minimalRebuildCache,true));
  jsTypeLinker.exec();
  assertEquals("<preamble>\n<java.lang.Object />\n<java.lang.Class />\n</preamble>\n" + "<com.some.app.EntryPoint>\n" + "<com.some.app.SomeModelB>\n"+ "<com.some.app.SomeModelA>\n"+ "<com.some.app.SomeController>\n"+ "<epilogue>\n<Some Bootstrap Code>\n</epilogue>\n",jsTypeLinker.getJs());
  assertEquals(Lists.newArrayList("preamble","java.lang.Object","java.lang.Class","/preamble","com.some.app.EntryPoint","com.some.app.SomeModelB","com.some.app.SomeModelA","com.some.app.SomeController","epilogue","Some Bootstrap Code","/epilogue"),getTypeNames(jsTypeLinker.getSourceInfoMap()));
  assertEquals(11,jsTypeLinker.getSourceInfoMap().getLines());
  permutationRebuildCache.removeReferencesFrom("com.some.app.SomeController");
  permutationRebuildCache.addTypeReference("com.some.app.SomeController","com.some.app.SomeBModel");
  jsTypeLinker=new JsTypeLinker(TreeLogger.NULL,new JsNoopTransformer(originalJs,srb.build(),smb.build()),classRanges,programRange,permutationRebuildCache,new JTypeOracle(null,minimalRebuildCache,true));
  jsTypeLinker.exec();
  assertEquals("<preamble>\n<java.lang.Object />\n<java.lang.Class />\n</preamble>\n" + "<com.some.app.EntryPoint>\n" + "<com.some.app.SomeModelB>\n"+ "<com.some.app.SomeController>\n"+ "<epilogue>\n<Some Bootstrap Code>\n</epilogue>\n",jsTypeLinker.getJs());
  assertEquals(Lists.newArrayList("preamble","java.lang.Object","java.lang.Class","/preamble","com.some.app.EntryPoint","com.some.app.SomeModelB","com.some.app.SomeController","epilogue","Some Bootstrap Code","/epilogue"),getTypeNames(jsTypeLinker.getSourceInfoMap()));
  assertEquals(10,jsTypeLinker.getSourceInfoMap().getLines());
}
