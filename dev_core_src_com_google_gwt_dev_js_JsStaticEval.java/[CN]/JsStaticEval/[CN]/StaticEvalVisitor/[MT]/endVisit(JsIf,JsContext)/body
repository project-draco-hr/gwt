{
  evalBooleanContext.remove(x.getIfExpr());
  JsExpression condExpr=x.getIfExpr();
  if (condExpr instanceof CanBooleanEval) {
    if (tryStaticEvalIf(x,(CanBooleanEval)condExpr,ctx)) {
      return;
    }
  }
  JsStatement thenStmt=x.getThenStmt();
  JsStatement elseStmt=x.getElseStmt();
  boolean thenIsEmpty=JsUtils.isEmpty(thenStmt);
  boolean elseIsEmpty=JsUtils.isEmpty(elseStmt);
  JsExpression thenExpr=JsUtils.extractExpression(thenStmt);
  JsExpression elseExpr=JsUtils.extractExpression(elseStmt);
  if (thenIsEmpty && elseIsEmpty) {
    ctx.replaceMe(condExpr.makeStmt());
  }
 else   if (thenExpr != null && elseExpr != null) {
    JsConditional cond=new JsConditional(x.getSourceInfo(),x.getIfExpr(),thenExpr,elseExpr);
    ctx.replaceMe(accept(cond.makeStmt()));
  }
 else   if (thenIsEmpty && elseExpr != null) {
    JsBinaryOperation op=new JsBinaryOperation(x.getSourceInfo(),JsBinaryOperator.OR,x.getIfExpr(),elseExpr);
    ctx.replaceMe(accept(op.makeStmt()));
  }
 else   if (thenIsEmpty && !elseIsEmpty) {
    JsUnaryOperation negatedOperation=new JsPrefixOperation(x.getSourceInfo(),JsUnaryOperator.NOT,x.getIfExpr());
    JsIf newIf=new JsIf(x.getSourceInfo(),negatedOperation,elseStmt,null);
    ctx.replaceMe(accept(newIf));
  }
 else   if (elseIsEmpty && thenExpr != null) {
    JsBinaryOperation op=new JsBinaryOperation(x.getSourceInfo(),JsBinaryOperator.AND,x.getIfExpr(),thenExpr);
    ctx.replaceMe(accept(op.makeStmt()));
  }
 else   if (elseIsEmpty && elseStmt != null) {
    JsIf newIf=new JsIf(x.getSourceInfo(),x.getIfExpr(),thenStmt,null);
    ctx.replaceMe(accept(newIf));
  }
}
