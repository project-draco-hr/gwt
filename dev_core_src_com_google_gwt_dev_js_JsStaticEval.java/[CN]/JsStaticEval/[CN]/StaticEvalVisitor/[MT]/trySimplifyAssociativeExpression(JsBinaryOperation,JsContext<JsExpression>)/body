{
  boolean toReturn=false;
  JsBinaryOperator op=x.getOperator();
  JsExpression arg1=x.getArg1();
  JsExpression arg2=x.getArg2();
{
    JsBinaryOperation rightOp=null;
    if (arg2 instanceof JsBinaryOperation) {
      rightOp=(JsBinaryOperation)arg2;
    }
    if (rightOp != null && !rightOp.getOperator().isAssignment() && op == rightOp.getOperator()) {
      if (op == JsBinaryOperator.ADD) {
        boolean mustBeString=additionCoercesToString(rightOp.getArg1()) || (additionCoercesToString(arg1) && additionCoercesToString(rightOp.getArg2()));
        if (!mustBeString) {
          return toReturn;
        }
      }
      JsExpression newLeft=new JsBinaryOperation(x.getSourceInfo(),op,arg1,rightOp.getArg1());
      op=rightOp.getOperator();
      arg1=accept(newLeft);
      arg2=rightOp.getArg2();
      x=new JsBinaryOperation(x.getSourceInfo(),op,arg1,arg2);
      ctx.replaceMe(x);
      toReturn=didChange=true;
    }
  }
{
    JsBinaryOperation leftOp=null;
    JsExpression leftLeft=null;
    JsExpression leftRight=null;
    if (arg1 instanceof JsBinaryOperation) {
      leftOp=(JsBinaryOperation)arg1;
      if (op.getPrecedence() == leftOp.getOperator().getPrecedence()) {
        leftLeft=leftOp.getArg1();
        leftRight=leftOp.getArg2();
      }
    }
    if (leftRight != null) {
      if (op == JsBinaryOperator.ADD) {
        boolean mustBeString=additionCoercesToString(leftRight) || (additionCoercesToString(leftLeft) && additionCoercesToString(arg2));
        if (!mustBeString) {
          return toReturn;
        }
      }
      JsBinaryOperation middle=new JsBinaryOperation(x.getSourceInfo(),op,leftRight,arg2);
      StaticEvalVisitor v=new StaticEvalVisitor();
      JsExpression maybeSimplified=v.accept(middle);
      if (v.didChange()) {
        x.setArg1(leftLeft);
        x.setArg2(maybeSimplified);
        toReturn=didChange=true;
      }
    }
  }
  return toReturn;
}
