{
  JsBinaryOperator op=x.getOperator();
  JsExpression arg1=x.getArg1();
  JsExpression arg2=x.getArg2();
  JsExpression result=x;
  if (op == JsBinaryOperator.AND) {
    result=shortCircuitAnd(x);
  }
 else   if (op == JsBinaryOperator.OR) {
    result=shortCircuitOr(x);
  }
 else   if (op == JsBinaryOperator.COMMA) {
    result=trySimplifyComma(x);
  }
 else   if (op == JsBinaryOperator.EQ || op == JsBinaryOperator.REF_EQ) {
    result=simplifyEqAndRefEq(x);
  }
 else   if (op == JsBinaryOperator.NEQ || op == JsBinaryOperator.REF_NEQ) {
    result=simplifyNeAndRefNe(x);
  }
 else   if (arg1 instanceof JsValueLiteral && arg2 instanceof JsValueLiteral) {
switch (op) {
case ADD:
case SUB:
case MUL:
case DIV:
case MOD:
case GT:
case GTE:
case LT:
case LTE:
      result=simplifyOp(x);
    break;
default :
  break;
}
}
result=maybeReorderOperations(result);
if (result != x) {
ctx.replaceMe(result);
}
}
