{
  JsBinaryOperator op=x.getOperator();
  JsExpression arg1=x.getArg1();
  JsExpression arg2=x.getArg2();
  if (MATH_ASSOCIATIVE.contains(op) && trySimplifyAssociativeExpression(x,ctx)) {
  }
 else   if (op == JsBinaryOperator.AND) {
    shortCircuitAnd(arg1,arg2,ctx);
  }
 else   if (op == JsBinaryOperator.OR) {
    shortCircuitOr(arg1,arg2,ctx);
  }
 else   if (op == JsBinaryOperator.COMMA) {
    trySimplifyComma(arg1,arg2,ctx);
  }
 else   if (op == JsBinaryOperator.EQ) {
    trySimplifyEq(x,arg1,arg2,ctx);
  }
 else   if (op == JsBinaryOperator.NEQ) {
    trySimplifyNe(x,arg1,arg2,ctx);
  }
 else   if (op == JsBinaryOperator.ADD) {
    trySimplifyAdd(x,arg1,arg2,ctx);
  }
 else {
switch (op) {
case GT:
case GTE:
case LT:
case LTE:
      trySimplifyCompare(x,arg1,arg2,op,ctx);
    break;
default :
  break;
}
}
}
