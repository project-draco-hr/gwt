{
  List<SourceCode> sourceCodes=new ArrayList<SourceCode>(resources.size());
  ImmutableMap.Builder<String,String> constantNameMappingBuilder=ImmutableMap.builder();
  boolean css=ensureEitherCssOrGss(resources,logger);
  if (css && !allowLegacy) {
    logger.log(Type.ERROR,"Your ClientBundle is referencing css files instead of gss. " + "You will need to either convert these files to gss using the " + "converter tool or turn on auto convertion in your gwt.xml file. "+ "Note: Autoconversion will be removed in the next version of GWT, "+ "you will need to move to gss."+ "Add this line to your gwt.xml file to temporary avoid this:"+ "<set-configuration-property name=\"CssResource.legacy\" value=\"true\" />");
    throw new UnableToCompleteException();
  }
  if (css) {
    String concatenatedCss=concatCssFiles(resources,logger);
    ConversionResult result=convertToGss(concatenatedCss,logger);
    String gss=result.gss;
    String name="[auto-converted gss files from : " + resources + "]";
    sourceCodes.add(new SourceCode(name,gss));
    constantNameMappingBuilder.putAll(result.defNameMapping);
  }
 else {
    for (    URL stylesheet : resources) {
      TreeLogger branchLogger=logger.branch(TreeLogger.DEBUG,"Parsing GSS stylesheet " + stylesheet.toExternalForm());
      try {
        String fileContent=Resources.asByteSource(stylesheet).asCharSource(Charsets.UTF_8).read();
        sourceCodes.add(new SourceCode(stylesheet.getFile(),fileContent));
        continue;
      }
 catch (      IOException e) {
        branchLogger.log(TreeLogger.ERROR,"Unable to parse CSS",e);
      }
      throw new UnableToCompleteException();
    }
  }
  CssTree tree;
  try {
    tree=new GssParser(sourceCodes).parse();
  }
 catch (  GssParserException e) {
    logger.log(TreeLogger.ERROR,"Unable to parse CSS",e);
    throw new UnableToCompleteException();
  }
  List<String> permutationAxes=finalizeTree(tree);
  checkErrors();
  return new CssParsingResult(tree,permutationAxes,constantNameMappingBuilder.build());
}
