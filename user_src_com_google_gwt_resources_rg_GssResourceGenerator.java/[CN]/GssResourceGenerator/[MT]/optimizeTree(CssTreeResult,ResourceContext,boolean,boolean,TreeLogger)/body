{
  CssTree cssTree=cssTreeResult.tree;
  CollectMixinDefinitions collectMixinDefinitions=new CollectMixinDefinitions(cssTree.getMutatingVisitController(),errorManager);
  collectMixinDefinitions.runPass();
  new ReplaceMixins(cssTree.getMutatingVisitController(),errorManager,collectMixinDefinitions.getDefinitions()).runPass();
  new ProcessComponents<Object>(cssTree.getMutatingVisitController(),errorManager).runPass();
  RuntimeConditionalBlockCollector runtimeConditionalBlockCollector=new RuntimeConditionalBlockCollector(cssTree.getVisitController());
  runtimeConditionalBlockCollector.runPass();
  new ExtendedEliminateConditionalNodes(cssTree.getMutatingVisitController(),getPermutationsConditions(context,cssTreeResult.permutationAxes,logger),runtimeConditionalBlockCollector.getRuntimeConditionalBlock()).runPass();
  new ValidateRuntimeConditionalNode(cssTree.getVisitController(),errorManager,lenientConversion).runPass();
  checkErrors();
  CollectConstantDefinitions collectConstantDefinitionsPass=new CollectConstantDefinitions(cssTree);
  collectConstantDefinitionsPass.runPass();
  ReplaceConstantReferences replaceConstantReferences=new ReplaceConstantReferences(cssTree,collectConstantDefinitionsPass.getConstantDefinitions(),true,errorManager,false);
  replaceConstantReferences.runPass();
  new ImageSpriteCreator(cssTree.getMutatingVisitController(),context,errorManager).runPass();
  Map<String,GssFunction> gssFunctionMap=new GwtGssFunctionMapProvider(context).get();
  new ResolveCustomFunctionNodes(cssTree.getMutatingVisitController(),errorManager,gssFunctionMap,true,allowedNonStandardFunctions).runPass();
  if (simplifyCss) {
    new EliminateEmptyRulesetNodes(cssTree.getMutatingVisitController()).runPass();
    new EliminateUnitsFromZeroNumericValues(cssTree.getMutatingVisitController()).runPass();
    new ColorValueOptimizer(cssTree.getMutatingVisitController()).runPass();
    new AbbreviatePositionalValues(cssTree.getMutatingVisitController()).runPass();
  }
  if (eliminateDeadStyles) {
    new DisallowDuplicateDeclarations(cssTree.getVisitController(),errorManager).runPass();
    new SplitRulesetNodes(cssTree.getMutatingVisitController()).runPass();
    new MarkRemovableRulesetNodes(cssTree).runPass();
    new EliminateUselessRulesetNodes(cssTree).runPass();
    new MergeAdjacentRulesetNodesWithSameSelector(cssTree).runPass();
    new EliminateUselessRulesetNodes(cssTree).runPass();
    new MergeAdjacentRulesetNodesWithSameDeclarations(cssTree).runPass();
    new EliminateUselessRulesetNodes(cssTree).runPass();
  }
  return collectConstantDefinitionsPass.getConstantDefinitions();
}
