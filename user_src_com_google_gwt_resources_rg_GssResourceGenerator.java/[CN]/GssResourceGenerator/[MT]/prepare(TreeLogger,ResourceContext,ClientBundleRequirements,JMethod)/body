{
  if (method.getReturnType().isInterface() == null) {
    logger.log(TreeLogger.ERROR,"Return type must be an interface");
    throw new UnableToCompleteException();
  }
  URL[] resourceUrls=ResourceGeneratorUtil.findResources(logger,context,method);
  if (resourceUrls.length == 0) {
    logger.log(TreeLogger.ERROR,"At least one source must be specified");
    throw new UnableToCompleteException();
  }
  CssParsingResult cssParsingResult=parseResources(Lists.newArrayList(resourceUrls),context,logger);
  cssParsingResultMap.put(method,cssParsingResult);
  for (  String permutationAxis : cssParsingResult.permutationAxes) {
    try {
      context.getRequirements().addPermutationAxis(permutationAxis);
    }
 catch (    BadPropertyValueException e) {
      logger.log(TreeLogger.ERROR,"Unknown deferred-binding property " + permutationAxis,e);
      throw new UnableToCompleteException();
    }
  }
}
