{
  Set<Resource> resources=new HashSet<Resource>();
  for (  MockJavaResource resource : JavaResourceBase.getStandardResources()) {
    resources.add(resource);
  }
  resources.add(makeClass("Type1"));
  resources.add(makeClass("Type2"));
  resources.add(makeClass("Type3"));
  resources.add(makeClass("Type4"));
  resources.add(makeClass("Type5"));
  TypeOracle to=TypeOracleTestingUtils.buildTypeOracle(TreeLogger.NULL,resources);
  propRpcBlacklist.values.add("Type1");
  propRpcBlacklist.values.add("+Type2");
  propRpcBlacklist.values.add("-Type3");
  propRpcBlacklist.values.add("+Type4");
  propRpcBlacklist.values.add("-Type4");
  BlacklistTypeFilter filter=new BlacklistTypeFilter(TreeLogger.NULL,new MockPropertyOracle());
  assertFalse(filter.isAllowed(to.getType("Type1")));
  assertTrue(filter.isAllowed(to.getType("Type2")));
  assertFalse(filter.isAllowed(to.getType("Type3")));
  assertFalse(filter.isAllowed(to.getType("Type4")));
  assertTrue(filter.isAllowed(to.getType("Type5")));
}
