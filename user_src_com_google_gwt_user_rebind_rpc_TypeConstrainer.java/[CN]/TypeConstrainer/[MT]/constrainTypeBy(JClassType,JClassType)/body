{
  JParameterizedType superAsParameterized=superType.isParameterized();
  if (superAsParameterized == null) {
    return subType;
  }
  Map<JTypeParameter,JClassType> constraints=new HashMap<JTypeParameter,JClassType>();
  JClassType subWithWildcardsReplaced=replaceWildcardsWithFreshTypeVariables(subType,constraints);
  JParameterizedType subAsParameterized=subWithWildcardsReplaced.asParameterizationOf(superAsParameterized.getBaseType());
  if (subAsParameterized == null) {
    return subType;
  }
  if (!typesMatch(subAsParameterized,superAsParameterized,constraints)) {
    return null;
  }
  return substitute(subWithWildcardsReplaced,constraints);
}
