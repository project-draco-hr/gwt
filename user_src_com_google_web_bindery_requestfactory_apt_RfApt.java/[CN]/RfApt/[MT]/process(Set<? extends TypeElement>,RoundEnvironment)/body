{
  log("RequestFactory processing a round");
  if (builder == null) {
    builder=new TypeTokenResolver.Builder();
    try {
      FileObject resource=filer.getResource(StandardLocation.CLASS_OUTPUT,"",TOKEN_MANIFEST);
      builder.load(resource.openInputStream());
      log("Reusing old data");
    }
 catch (    IOException e) {
      log("Not reusing existing manifest file: " + e.getMessage());
    }
  }
  new Finder().scan(ElementFilter.typesIn(roundEnv.getRootElements()),null);
  if (roundEnv.processingOver()) {
    TypeTokenResolver d=builder.build();
    builder=null;
    try {
      FileObject res=filer.createResource(StandardLocation.CLASS_OUTPUT,"",TOKEN_MANIFEST);
      d.store(res.openOutputStream());
    }
 catch (    IOException e) {
      error("Could not write output: " + e.getMessage());
    }
    try {
      String packageName=TypeTokenResolver.class.getPackage().getName();
      String simpleName=TypeTokenResolver.class.getSimpleName() + "BuilderImpl";
      JavaFileObject classfile=filer.createSourceFile(packageName + "." + simpleName);
      PrintWriter pw=new PrintWriter(classfile.openWriter());
      pw.println("package " + packageName + ";");
      pw.println("public class " + simpleName + " extends "+ TypeTokenResolver.Builder.class.getCanonicalName()+ " {");
      pw.println("public " + simpleName + "() {");
      for (      Map.Entry<String,String> entry : d.getAllTypeTokens().entrySet()) {
        if (elements.getTypeElement(entry.getValue()) != null) {
          pw.println("addTypeToken(\"" + entry.getKey() + "\", "+ entry.getValue()+ ".class.getName());");
        }
      }
      pw.println("}");
      pw.println("}");
      pw.close();
    }
 catch (    FilerException e) {
      log("Ignoring exception: %s",e.getMessage());
    }
catch (    IOException e) {
      error("Could not write BuilderImpl: " + e.getMessage());
    }
    log("Finished!");
  }
  return false;
}
