{
  MockNetwork network=createMockNetwork();
  RequestProcessor requestProcessor=new RequestProcessor(){
    public Response execute(    Request request) throws Exception {
      fail("Should not reach here.");
      return null;
    }
  }
;
  MessageTransport messageTransport=new MessageTransport(network.getClientSocket().getInputStream(),network.getClientSocket().getOutputStream(),requestProcessor,new MessageTransport.TerminationCallback(){
    public void onTermination(    Exception e){
    }
  }
);
  messageTransport.start();
  Message.Request.Builder requestMessageBuilder=Message.Request.newBuilder();
  requestMessageBuilder.setServiceType(Message.Request.ServiceType.DEV_MODE);
  Message.Request request=requestMessageBuilder.build();
  network.getServerSocket().close();
  int sleepCycles=0;
  while (!network.getServerSocket().isClosed() && sleepCycles < 8) {
    Thread.sleep(250);
    sleepCycles++;
  }
  assertTrue("Unable to shut down server's input stream; cannot proceed with the test.",network.getServerSocket().isClosed());
  Future<Response> responseFuture=null;
  responseFuture=messageTransport.executeRequestAsync(request);
  assertNotNull(responseFuture);
  try {
    responseFuture.get(2,TimeUnit.SECONDS);
    fail("Should have thrown an exception");
  }
 catch (  TimeoutException te) {
    fail("Should not have timed out");
  }
catch (  ExecutionException e) {
    assertTrue("Expected: IllegalStateException, actual:" + e.getCause(),e.getCause() instanceof IllegalStateException);
  }
catch (  Exception e) {
    fail("Should not have thrown any other exception");
  }
  network.shutdown();
}
