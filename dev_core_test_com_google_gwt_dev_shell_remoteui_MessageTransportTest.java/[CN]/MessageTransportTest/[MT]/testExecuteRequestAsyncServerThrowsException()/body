{
  MockNetwork network=createMockNetwork();
  RequestProcessor requestProcessor=new RequestProcessor(){
    public Response execute(    Request request) throws Exception {
      fail("Should not reach here.");
      return null;
    }
  }
;
  MessageTransport messageTransport=new MessageTransport(network.getClientSocket().getInputStream(),network.getClientSocket().getOutputStream(),requestProcessor,new MessageTransport.TerminationCallback(){
    public void onTermination(    Exception e){
    }
  }
);
  Message.Request.Builder requestMessageBuilder=Message.Request.newBuilder();
  requestMessageBuilder.setServiceType(Message.Request.ServiceType.DEV_MODE);
  Message.Request request=requestMessageBuilder.build();
  Future<Response> responseFuture=messageTransport.executeRequestAsync(request);
  assertNotNull(responseFuture);
  Message receivedRequest=Message.parseDelimitedFrom(network.getServerSocket().getInputStream());
  assertEquals(receivedRequest.getRequest(),request);
  Failure.Builder failureBuilder=Failure.newBuilder();
  failureBuilder.setMessage("Unable to process the request.");
  Message.Builder messageBuilder=Message.newBuilder();
  messageBuilder.setMessageId(receivedRequest.getMessageId());
  messageBuilder.setMessageType(Message.MessageType.FAILURE);
  messageBuilder.setFailure(failureBuilder);
  Message failureMsg=messageBuilder.build();
  failureMsg.writeDelimitedTo(network.getServerSocket().getOutputStream());
  try {
    responseFuture.get(2,TimeUnit.SECONDS);
    fail("Should have thrown an exception");
  }
 catch (  TimeoutException te) {
    fail("Should not have timed out");
  }
catch (  ExecutionException e) {
    assertTrue("Expected: MessageTransport.RequestException, actual:" + e.getCause(),e.getCause() instanceof RequestException);
    RequestException re=(RequestException)e.getCause();
    assertEquals(re.getMessage(),"Unable to process the request.");
  }
catch (  Exception e) {
    fail("Should not have thrown any other exception");
  }
  network.shutdown();
}
