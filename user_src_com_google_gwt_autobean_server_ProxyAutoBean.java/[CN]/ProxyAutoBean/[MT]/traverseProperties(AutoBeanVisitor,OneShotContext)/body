{
  for (  final Method getter : getters) {
    String name;
    PropertyName annotation=getter.getAnnotation(PropertyName.class);
    if (annotation != null) {
      name=annotation.value();
    }
 else {
      name=getter.getName();
      name=Character.toLowerCase(name.charAt(3)) + (name.length() >= 5 ? name.substring(4) : "");
    }
    Object value;
    try {
      getter.setAccessible(true);
      value=getter.invoke(shim);
    }
 catch (    IllegalArgumentException e) {
      throw new RuntimeException(e);
    }
catch (    IllegalAccessException e) {
      throw new RuntimeException(e);
    }
catch (    InvocationTargetException e) {
      throw new RuntimeException(e.getCause());
    }
    MethodPropertyContext x=isUsingSimplePeer() ? new BeanPropertyContext(this,getter) : new GetterPropertyContext(this,getter);
    if (TypeUtils.isValueType(x.getType())) {
      if (visitor.visitValueProperty(name,value,x)) {
      }
      visitor.endVisitValueProperty(name,value,x);
    }
 else     if (Collection.class.isAssignableFrom(x.getType())) {
      @SuppressWarnings("rawtypes") AutoBean temp=AutoBeanUtils.getAutoBean((Collection)value);
      @SuppressWarnings("unchecked") AutoBean<Collection<?>> bean=(AutoBean<Collection<?>>)temp;
      if (visitor.visitCollectionProperty(name,bean,x)) {
        if (value != null) {
          ((ProxyAutoBean<?>)bean).traverse(visitor,ctx);
        }
      }
      visitor.endVisitCollectionProperty(name,bean,x);
    }
 else     if (Map.class.isAssignableFrom(x.getType())) {
      @SuppressWarnings("rawtypes") AutoBean temp=AutoBeanUtils.getAutoBean((Map)value);
      @SuppressWarnings("unchecked") AutoBean<Map<?,?>> bean=(AutoBean<Map<?,?>>)temp;
      if (visitor.visitMapProperty(name,bean,x)) {
        if (value != null) {
          ((ProxyAutoBean<?>)bean).traverse(visitor,ctx);
        }
      }
      visitor.endVisitMapProperty(name,bean,x);
    }
 else {
      ProxyAutoBean<?> bean=(ProxyAutoBean<?>)AutoBeanUtils.getAutoBean(value);
      if (visitor.visitReferenceProperty(name,bean,x)) {
        if (value != null) {
          bean.traverse(visitor,ctx);
        }
      }
      visitor.endVisitReferenceProperty(name,bean,x);
    }
  }
}
