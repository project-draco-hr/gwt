{
  List<URL> sheets=Arrays.asList(stylesheets);
  SoftReference<CssStylesheet> ref=SHEETS.get(sheets);
  CssStylesheet toReturn=ref == null ? null : ref.get();
  if (toReturn != null) {
    logger.log(TreeLogger.DEBUG,"Using cached result");
    return new CssStylesheet(toReturn);
  }
  Parser p=new Parser();
  Errors errors=new Errors(logger);
  GenerationHandler g=new GenerationHandler(errors);
  p.setDocumentHandler(g);
  p.setErrorHandler(errors);
  for (  URL stylesheet : sheets) {
    TreeLogger branchLogger=logger.branch(TreeLogger.DEBUG,"Parsing CSS stylesheet " + stylesheet.toExternalForm());
    try {
      p.parseStyleSheet(stylesheet.toURI().toString());
      continue;
    }
 catch (    CSSException e) {
      branchLogger.log(TreeLogger.ERROR,"Unable to parse CSS",e);
    }
catch (    IOException e) {
      branchLogger.log(TreeLogger.ERROR,"Unable to parse CSS",e);
    }
catch (    URISyntaxException e) {
      branchLogger.log(TreeLogger.ERROR,"Unable to parse CSS",e);
    }
    throw new UnableToCompleteException();
  }
  if (errors.fatalErrorEncountered) {
    throw new UnableToCompleteException();
  }
  toReturn=g.css;
  SHEETS.put(new ArrayList<URL>(sheets),new SoftReference<CssStylesheet>(new CssStylesheet(toReturn)));
  return toReturn;
}
