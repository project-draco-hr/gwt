{
  Object o=unoptimizableId((byte)2);
  assertEquals((byte)2,(byte)o);
  o=unoptimizableId((short)3);
  assertEquals((short)3,(short)o);
  o=unoptimizableId(1);
  assertEquals(1,(int)o);
  o=unoptimizableId(1L);
  assertEquals(1L,(long)o);
  o=unoptimizableId(0.1f);
  assertEquals(0.1f,(float)o);
  o=unoptimizableId(0.1);
  assertEquals(0.1,(double)o);
  o=unoptimizableId(true);
  assertEquals(true,(boolean)o);
  o=unoptimizableId('a');
  assertEquals('a',(char)o);
  try {
    Object boxedChar=unoptimizableId('a');
    boolean b=(boolean)boxedChar;
    fail("Should have thrown a ClassCastException");
  }
 catch (  ClassCastException e) {
  }
  try {
    Object string=unoptimizableId("string");
    int n=(int)string;
    fail("Should have thrown a ClassCastException");
  }
 catch (  ClassCastException e) {
  }
}
