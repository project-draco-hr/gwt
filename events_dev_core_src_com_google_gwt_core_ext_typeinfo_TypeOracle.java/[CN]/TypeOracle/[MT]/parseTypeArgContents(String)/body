{
  List<JClassType> typeArgList=new ArrayList<JClassType>();
  int start=0;
  for (int offset=0, length=typeArgContents.length(); offset < length; ++offset) {
    char ch=typeArgContents.charAt(offset);
switch (ch) {
case '<':
      for (int depth=1; depth > 0; ) {
        if (++offset == length) {
          throw new ParseException("Mismatched brackets; expected '<' to match subsequent '>'");
        }
        char ich=typeArgContents.charAt(offset);
        if (ich == '<') {
          ++depth;
        }
 else         if (ich == '>') {
          --depth;
        }
      }
    break;
case '>':
  throw new ParseException("No matching '<' for '>'");
case ',':
String typeArgComponent=typeArgContents.substring(start,offset);
parseTypeArgComponent(typeArgList,typeArgComponent);
start=offset + 1;
break;
default :
break;
}
}
String typeArgComponent=typeArgContents.substring(start);
parseTypeArgComponent(typeArgList,typeArgComponent);
JClassType[] typeArgs=typeArgList.toArray(new JClassType[typeArgList.size()]);
return typeArgs;
}
