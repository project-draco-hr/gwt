{
  JClassType stringType=requireType(typeOracle,String.class);
  JClassType placeTokenizerType=requireType(typeOracle,PlaceTokenizer.class);
  JClassType placeHistoryMapperWithFactoryType=requireType(typeOracle,PlaceHistoryMapperWithFactory.class);
  JClassType factoryType;
  JClassType interfaceType=typeOracle.findType(interfaceName);
  if (interfaceType == null) {
    logger.log(TreeLogger.ERROR,"Could not find requested typeName: " + interfaceName);
    throw new UnableToCompleteException();
  }
  if (interfaceType.isInterface() == null) {
    logger.log(TreeLogger.ERROR,interfaceType.getQualifiedSourceName() + " is not an interface.",null);
    throw new UnableToCompleteException();
  }
  factoryType=findFactoryType(placeHistoryMapperWithFactoryType,interfaceType);
  String implName=interfaceType.getName().replace(".","_") + "Impl";
  return new PlaceHistoryGeneratorContext(logger,typeOracle,interfaceType,factoryType,stringType,placeTokenizerType,interfaceType.getPackage().getName(),implName);
}
