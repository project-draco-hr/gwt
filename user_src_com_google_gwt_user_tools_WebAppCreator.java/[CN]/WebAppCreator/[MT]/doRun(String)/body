{
  for (  Procrastinator toDo : argProcessingToDos) {
    toDo.stopProcratinating();
  }
  if (templates.contains("maven")) {
    junitPath="junit-provided-by-maven";
    if (templates.contains("eclipse")) {
      System.err.println("'maven' template is being generated removing 'eclipse'" + " template from generated output.");
      templates.remove("eclipse");
    }
    if (templates.contains("ant")) {
      System.err.println("'maven' template is being generated removing 'ant'" + " template from generated output.");
      templates.remove("ant");
    }
  }
  if (junitPath != null) {
    ArrayList<String> testTemplates=new ArrayList<String>();
    for (    String template : templates) {
      String testTemplateName="_" + template + "-test";
      if (getTemplateRoot(testTemplateName) != null) {
        testTemplates.add(testTemplateName);
      }
    }
    templates.addAll(testTemplates);
  }
  System.out.println("Generating from templates: " + templates);
  Map<String,String> replacements=getReplacements(installPath,moduleName);
  List<FileCreator> files=getFiles(replacements);
  for (  FileCreator fileCreator : files) {
    URL url=WebAppCreator.class.getResource(fileCreator.sourceName);
    if (url == null) {
      throw new WebAppCreatorException("Could not find " + fileCreator.sourceName);
    }
    File file=Utility.createNormalFile(fileCreator.destDir,fileCreator.destName,overwrite,ignore);
    if (file == null) {
      continue;
    }
    if (fileCreator.isBinary) {
      byte[] data=Util.readURLAsBytes(url);
      Utility.writeTemplateBinaryFile(file,data);
    }
 else {
      String data=Util.readURLAsString(url);
      Utility.writeTemplateFile(file,data,replacements);
    }
  }
}
