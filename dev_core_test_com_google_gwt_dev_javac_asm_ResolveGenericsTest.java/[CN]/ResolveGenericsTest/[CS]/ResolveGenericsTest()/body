{
  typeOracleUpdater=TypeOracleTestingUtils.buildStandardUpdaterWith(failTreeLogger);
  resolver=new MockResolver(typeOracleUpdater.getMockResolver());
  oracle=typeOracleUpdater.getTypeOracle();
  createUnresolvedClass(String.class,null);
  testHandler=createUnresolvedClass(TestHandler.class,null);
  testHandler1=createUnresolvedClass(TestHandler1.class,null);
  testOuter0=createUnresolvedClass(TestOuter0.class,null);
  testType=createUnresolvedClass(TestOuter0.Type.class,testOuter0);
  testOuter1=createUnresolvedClass(TestOuter1.class,null);
  testOuter2=createUnresolvedClass(TestOuter2.class,null);
  testOuter0dispatch=createUnresolvedMethod(testOuter0,TestOuter0.class,"dispatch",TestHandler.class);
  testOuter1dispatch=createUnresolvedMethod(testOuter1,TestOuter1.class,"dispatch",TestHandler.class);
  testOuter2dispatch=createUnresolvedMethod(testOuter2,TestOuter2.class,"dispatch",TestHandler.class);
  for (  JClassType type : oracle.getTypes()) {
    if (type instanceof JRealClassType) {
      typeOracleUpdater.getBinaryMapper().put(type.getQualifiedBinaryName().replace('.','/'),(JRealClassType)type);
    }
  }
}
