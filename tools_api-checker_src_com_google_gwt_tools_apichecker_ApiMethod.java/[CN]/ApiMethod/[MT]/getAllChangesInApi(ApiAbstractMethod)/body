{
  if (!(newApiMethod.getMethod() instanceof JMethod)) {
    return Collections.emptyList();
  }
  List<ApiChange> changeApis=new ArrayList<ApiChange>();
  JMethod existingMethod=(JMethod)method;
  JMethod newMethod=(JMethod)newApiMethod.getMethod();
  if (!existingMethod.getReturnType().getJNISignature().equals(newMethod.getReturnType().getJNISignature())) {
    changeApis.add(new ApiChange(this,ApiChange.Status.OVERRIDABLE_METHOD_RETURN_TYPE_CHANGE," from " + existingMethod.getReturnType() + " to "+ newMethod.getReturnType()));
  }
  JParameter[] newParametersList=newMethod.getParameters();
  JParameter[] existingParametersList=existingMethod.getParameters();
  if (newParametersList.length != existingParametersList.length) {
    changeApis.add(new ApiChange(this,ApiChange.Status.OVERRIDABLE_METHOD_ARGUMENT_TYPE_CHANGE,"number of parameters changed"));
  }
 else {
    int length=newParametersList.length;
    for (int i=0; i < length; i++) {
      if (!existingParametersList[i].getType().getJNISignature().equals(newParametersList[i].getType().getJNISignature())) {
        changeApis.add(new ApiChange(this,ApiChange.Status.OVERRIDABLE_METHOD_ARGUMENT_TYPE_CHANGE," at position " + i + " from "+ existingParametersList[i].getType()+ " to "+ newParametersList[i].getType()));
      }
    }
  }
  Set<String> newExceptionsSet=new HashSet<String>();
  Map<String,JType> newExceptionsMap=new HashMap<String,JType>();
  for (  JType newType : newMethod.getThrows()) {
    String jniSignature=newType.getJNISignature();
    newExceptionsMap.put(jniSignature,newType);
    newExceptionsSet.add(jniSignature);
  }
  Set<String> existingExceptionsSet=new HashSet<String>();
  Map<String,JType> existingExceptionsMap=new HashMap<String,JType>();
  for (  JType existingType : existingMethod.getThrows()) {
    String jniSignature=existingType.getJNISignature();
    existingExceptionsMap.put(jniSignature,existingType);
    existingExceptionsSet.add(jniSignature);
  }
  ApiDiffGenerator.removeIntersection(existingExceptionsSet,newExceptionsSet);
  removeUncheckedExceptions(newMethod,newExceptionsSet,newExceptionsMap);
  removeUncheckedExceptions(existingMethod,existingExceptionsSet,existingExceptionsMap);
  if (existingExceptionsSet.size() > 0) {
    changeApis.add(new ApiChange(this,ApiChange.Status.OVERRIDABLE_METHOD_EXCEPTION_TYPE_CHANGE,"existing method had more exceptions: " + existingExceptionsSet));
  }
  if (newExceptionsSet.size() > 0) {
    changeApis.add(new ApiChange(this,ApiChange.Status.OVERRIDABLE_METHOD_EXCEPTION_TYPE_CHANGE,"new method has more exceptions: " + newExceptionsSet));
  }
  return changeApis;
}
