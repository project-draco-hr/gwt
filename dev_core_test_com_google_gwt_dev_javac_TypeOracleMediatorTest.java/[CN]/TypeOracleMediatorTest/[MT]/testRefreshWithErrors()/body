{
  StringBuffer sb=new StringBuffer();
  sb.append("package java.lang;");
  sb.append("public class Object { }");
  addCompilationUnit("java.lang.Object",sb);
  sb=new StringBuffer();
  sb.append("package test.refresh.with.errors;");
  sb.append("public class UnmodifiedClass { }");
  addCompilationUnit("test.refresh.with.errors.UnmodifiedClass",sb);
  sb=new StringBuffer();
  sb.append("package test.refresh.with.errors;\n");
  sb.append("public class GoodClass {\n");
  sb.append("  ClassThatWillGoBad ctwgb;\n");
  sb.append("}\n");
  addCompilationUnit("test.refresh.with.errors.GoodClass",sb);
  MockCompilationUnit unitThatWillGoBad=new MockCompilationUnit("test.refresh.with.errors.ClassThatWillGoBad"){
    private String source="package test.refresh.with.errors;\n" + "public class ClassThatWillGoBad { }\n";
    @Override public String getSource(){
      return source;
    }
    @Override void setState(    State newState){
      super.setState(newState);
      source="This will cause a syntax error.";
    }
  }
;
  units.add(unitThatWillGoBad);
  compileAndRefresh();
  assertNotNull(typeOracle.findType("test.refresh.with.errors.UnmodifiedClass"));
  assertNotNull(typeOracle.findType("test.refresh.with.errors.GoodClass"));
  assertNotNull(typeOracle.findType("test.refresh.with.errors.ClassThatWillGoBad"));
  sb=new StringBuffer();
  sb.append("package test.refresh.with.errors;\n");
  sb.append("public class AnotherGoodClass {\n");
  sb.append("  UnmodifiedClass uc; // This will cause the runaway pruning.\n");
  sb.append("}\n");
  addCompilationUnit("test.refresh.with.errors.AnotherGoodClass",sb);
  sb=new StringBuffer();
  sb.append("package test.refresh.with.errors;\n");
  sb.append("public class BadClass {\n");
  sb.append("  This will trigger a syntax error.\n");
  sb.append("}\n");
  addCompilationUnit("test.refresh.with.errors.BadClass",sb);
  unitThatWillGoBad.setState(State.FRESH);
  compileAndRefresh();
  assertNotNull(typeOracle.findType("test.refresh.with.errors.UnmodifiedClass"));
  assertNotNull(typeOracle.findType("test.refresh.with.errors.AnotherGoodClass"));
  assertNull(typeOracle.findType("test.refresh.with.errors.BadClass"));
  assertNull(typeOracle.findType("test.refresh.with.errors.ClassThatWillGoBad"));
  assertNull(typeOracle.findType("test.refresh.with.errors.GoodClass"));
}
