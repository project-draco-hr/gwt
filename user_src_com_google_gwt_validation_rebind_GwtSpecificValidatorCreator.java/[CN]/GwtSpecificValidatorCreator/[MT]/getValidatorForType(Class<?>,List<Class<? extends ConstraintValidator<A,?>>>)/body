{
  type=Primitives.wrap(type);
  Map<Class<?>,Class<? extends ConstraintValidator<A,?>>> map=Maps.newHashMap();
  for (  Class<? extends ConstraintValidator<A,?>> constraintClass : constraintValidatorClasses) {
    Class<?> aType=Primitives.wrap(getTypeOfConstraintValidator(constraintClass));
    if (aType.isAssignableFrom(type)) {
      map.put(aType,constraintClass);
    }
  }
  final Set<Class<?>> best=Util.findBestMatches(type,map.keySet());
  Predicate<Class<?>> inBest=new Predicate<Class<?>>(){
    @Override public boolean apply(    Class<?> key){
      return best.contains(key);
    }
  }
;
  return ImmutableSet.copyOf(Maps.filterKeys(map,inBest).values());
}
