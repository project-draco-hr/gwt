{
  sw.println("public <T> Set<ConstraintViolation<T>> validateValue(");
  sw.indent();
  sw.indent();
  sw.println("GwtValidationContext<T> context,");
  sw.println("Class<" + beanHelper.getTypeCanonicalName() + "> beanType,");
  sw.println("String propertyName,");
  sw.println("Object value,");
  sw.println("Class<?>... groups) {");
  sw.outdent();
  sw.println("try {");
  sw.indent();
  writeNewViolations(sw);
  for (  PropertyDescriptor property : beanHelper.getBeanDescriptor().getConstrainedProperties()) {
    sw.print("if (propertyName.equals(\"");
    sw.print(property.getPropertyName());
    sw.println("\")) {");
    sw.indent();
    if (!isIterableOrMap(property.getElementClass())) {
      writeValidatePropertyCall(sw,property,true,true);
    }
    writeValidateInheritance(sw,beanHelper.getClazz(),Stage.VALUE,property);
    sw.outdent();
    sw.print("} else ");
  }
  writeIfPropertyNameNotFound(sw);
  sw.println("return violations;");
  writeCatchUnexpectedException(sw,"\"Error validating \" + propertyName + \" of " + beanHelper.getTypeCanonicalName() + "\"");
  sw.outdent();
  sw.println("}");
}
