{
  sw.println("public <T> Set<ConstraintViolation<T>> validate(");
  sw.indent();
  sw.indent();
  sw.println("GwtValidationContext<T> context,");
  sw.println(beanHelper.getTypeCanonicalName() + " object,");
  sw.println("Class<?>... groups) {");
  sw.outdent();
  writeNewViolations(sw);
  if (beanHelper.getBeanDescriptor().isBeanConstrained()) {
    Set<PropertyDescriptor> properties=beanHelper.getBeanDescriptor().getConstrainedProperties();
    for (    PropertyDescriptor p : properties) {
      writeValidatePropertyCall(sw,p);
    }
    int count=0;
    Class<?> clazz=null;
    try {
      clazz=beanHelper.getClazz();
    }
 catch (    ClassNotFoundException e) {
      error(logger,e);
    }
    for (    ConstraintDescriptor<?> constraint : beanHelper.getBeanDescriptor().findConstraints().getConstraintDescriptors()) {
      count++;
      Class<? extends ConstraintValidator<? extends Annotation,?>> validatorClass=getValidatorForType(constraint,clazz);
      sw.print("validate(context, violations, null, object, ");
      sw.print("new ");
      sw.print(validatorClass.getCanonicalName());
      sw.print("(), ");
      sw.print(constraintDescriptorVar("this",count));
      sw.println(", groups);");
    }
    writeValidateInterfaces(sw,clazz);
    Class<?> superClass=clazz.getSuperclass();
    while (superClass != null) {
      writeCallValidator(sw,superClass);
      writeValidateInterfaces(sw,superClass);
      superClass=superClass.getSuperclass();
    }
    beanType.getFields();
  }
  sw.println("return violations;");
  sw.outdent();
  sw.println("}");
}
