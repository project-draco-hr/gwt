{
  Class<?> clazz=value.getClass();
  JProgram jProgram=new JProgram();
  if (clazz.isArray()) {
    StringBuilder sb=new StringBuilder();
    Object[] array=(Object[])value;
    sb.append("new " + clazz.getComponentType().getCanonicalName() + "[] ");
    sb.append("{");
    boolean first=true;
    for (    Object object : array) {
      if (first) {
        first=false;
      }
 else {
        sb.append(",");
      }
      sb.append(asLiteral(object));
    }
    sb.append("}");
    return sb.toString();
  }
  if (value instanceof Class<?>) {
    return ((Class<?>)((Class<?>)value)).getCanonicalName() + ".class";
  }
  if (value instanceof Double) {
    return jProgram.getLiteralDouble(((Double)value).doubleValue()).toSource();
  }
  if (value instanceof Integer) {
    return jProgram.getLiteralInt(((Integer)value).intValue()).toSource();
  }
  if (value instanceof Long) {
    return jProgram.getLiteralLong(((Long)value).intValue()).toSource();
  }
  if (value instanceof String) {
    return '"' + Generator.escape((String)value) + '"';
  }
  throw new IllegalArgumentException(value.getClass() + " is can not be represented as a Java Literal.");
}
