{
  Class<? extends Annotation> annotationType=constraint.getAnnotation().annotationType();
  int count=0;
  for (  ConstraintDescriptor<?> composingConstraint : constraint.getComposingConstraints()) {
    writeConstraintDescriptor(sw,composingConstraint,elementType,origin,constraintDescripotorVar + "_" + count++);
  }
  sw.print("private final ");
  sw.print(ConstraintDescriptorImpl.class.getCanonicalName());
  sw.print("<");
  sw.print(annotationType.getCanonicalName());
  sw.print(">");
  sw.println(" " + constraintDescripotorVar + "  = ");
  sw.indent();
  sw.indent();
  sw.print(ConstraintDescriptorImpl.class.getCanonicalName());
  sw.print(".<");
  sw.print(annotationType.getCanonicalName());
  sw.println("> builder()");
  sw.indent();
  sw.indent();
  sw.println(".setAnnotation( ");
  sw.indent();
  sw.indent();
  writeNewAnnotation(sw,constraint);
  sw.println(")");
  sw.outdent();
  sw.outdent();
  sw.println(".setAttributes(attributeBuilder()");
  sw.indent();
  for (  Map.Entry<String,Object> entry : constraint.getAttributes().entrySet()) {
    sw.print(".put(");
    String key=entry.getKey();
    sw.print(asLiteral(key));
    sw.print(", ");
    Object value=entry.getValue();
    if ("groups".equals(key) && value instanceof Class[] && ((Class[])value).length == 0) {
      value=new Class[]{Default.class};
    }
    sw.print(asLiteral(value));
    sw.println(")");
  }
  sw.println(".build())");
  sw.outdent();
  sw.print(".setConstraintValidatorClasses(");
  sw.print(asLiteral(asArray(constraint.getConstraintValidatorClasses(),new Class[0])));
  sw.println(")");
  int ccCount=constraint.getComposingConstraints().size();
  for (int i=0; i < ccCount; i++) {
    sw.print(".addComposingConstraint(");
    sw.print(constraintDescripotorVar + "_" + i);
    sw.println(")");
  }
  sw.print(".setGroups(");
  Set<Class<?>> groups=constraint.getGroups();
  sw.print(asLiteral(asArray(groups,new Class<?>[0])));
  sw.println(")");
  sw.print(".setPayload(");
  Set<Class<? extends Payload>> payload=constraint.getPayload();
  sw.print(asLiteral(asArray(payload,new Class[0])));
  sw.println(")");
  sw.print(".setReportAsSingleViolation(");
  sw.print(Boolean.valueOf(constraint.isReportAsSingleViolation()).toString());
  sw.println(")");
  sw.print(".setElementType(");
  sw.print(asLiteral(elementType));
  sw.println(")");
  sw.print(".setDefinedOn(");
  sw.print(asLiteral(origin));
  sw.println(")");
  sw.println(".build();");
  sw.outdent();
  sw.outdent();
  sw.outdent();
  sw.outdent();
  sw.println();
}
