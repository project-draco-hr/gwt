{
  if (this.name.equals(name)) {
    if (outerName != null) {
      outerClass=outerName;
    }
    int copyFlags=access & (Opcodes.ACC_STATIC | Opcodes.ACC_PRIVATE);
    this.access|=copyFlags;
    boolean isStatic=(access & Opcodes.ACC_STATIC) != 0;
switch (classType) {
case TopLevel:
      classType=isStatic ? ClassType.Nested : ClassType.Inner;
    break;
case Anonymous:
  if (innerName != null) {
    classType=ClassType.Local;
  }
break;
case Inner:
break;
default :
throw new IllegalStateException("Unexpected INNERCLASS with type of " + classType);
}
}
}
