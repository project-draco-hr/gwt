{
  buildNestedSourceName(internalName,enclosingInternalName,innerName);
  if (this.internalName.equals(internalName)) {
    if (enclosingInternalName != null) {
      this.enclosingInternalName=enclosingInternalName;
    }
    this.access=access;
    boolean isStatic=(access & Opcodes.ACC_STATIC) != 0;
switch (classType) {
case TopLevel:
      classType=isStatic ? ClassType.Nested : ClassType.Inner;
    break;
case Anonymous:
  if (innerName != null) {
    classType=ClassType.Local;
  }
break;
case Inner:
break;
default :
throw new IllegalStateException("Unexpected INNERCLASS with type of " + classType);
}
}
}
