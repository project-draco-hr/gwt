{
  if (Object.class.equals(method.getDeclaringClass()) || RequestFactory.class.equals(method.getDeclaringClass())) {
    try {
      return method.invoke(InProcessRequestFactory.this,args);
    }
 catch (    InvocationTargetException e) {
      throw e.getCause();
    }
  }
  Class<? extends RequestContext> context=method.getReturnType().asSubclass(RequestContext.class);
  Dialect dialect=method.getReturnType().isAnnotationPresent(JsonRpcService.class) ? Dialect.JSON_RPC : Dialect.STANDARD;
  RequestContextHandler handler=new InProcessRequestContext(InProcessRequestFactory.this,dialect,context).new RequestContextHandler();
  return context.cast(Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),new Class<?>[]{context},handler));
}
