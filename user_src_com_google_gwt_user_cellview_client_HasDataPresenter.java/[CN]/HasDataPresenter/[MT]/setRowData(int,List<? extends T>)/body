{
  int valuesLength=values.size();
  int valuesEnd=start + valuesLength;
  int pageStart=getPageStart();
  int pageEnd=getPageStart() + getPageSize();
  int boundedStart=Math.max(start,pageStart);
  int boundedEnd=Math.min(valuesEnd,pageEnd);
  if (start != pageStart && boundedStart >= boundedEnd) {
    return;
  }
  PendingState<T> pending=ensurePendingState();
  int cacheOffset=Math.max(0,boundedStart - pageStart - getRowDataSize());
  for (int i=0; i < cacheOffset; i++) {
    pending.rowData.add(null);
  }
  for (int i=boundedStart; i < boundedEnd; i++) {
    T value=values.get(i - start);
    int dataIndex=i - pageStart;
    if (dataIndex < getRowDataSize()) {
      pending.rowData.set(dataIndex,value);
    }
 else {
      pending.rowData.add(value);
    }
  }
  pending.replaceRange(boundedStart - cacheOffset,boundedEnd);
  if (valuesEnd > getRowCount()) {
    setRowCount(valuesEnd,isRowCountExact());
  }
}
