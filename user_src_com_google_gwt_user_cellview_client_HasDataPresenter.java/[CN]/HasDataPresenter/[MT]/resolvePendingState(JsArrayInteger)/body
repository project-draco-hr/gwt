{
  pendingStateCommand=null;
  if (isResolvingState) {
    return false;
  }
  isResolvingState=true;
  if (pendingState == null) {
    isResolvingState=false;
    pendingStateLoop=0;
    return false;
  }
  pendingStateLoop++;
  if (pendingStateLoop > LOOP_MAXIMUM) {
    isResolvingState=false;
    pendingStateLoop=0;
    throw new IllegalStateException("A possible infinite loop has been detected in a Cell Widget. This " + "usually happens when your SelectionModel triggers a " + "SelectionChangeEvent when SelectionModel.isSelection() is "+ "called, which causes the table to redraw continuously.");
  }
  State<T> oldState=state;
  PendingState<T> newState=pendingState;
  state=pendingState;
  pendingState=null;
  if (modifiedRows == null) {
    modifiedRows=JavaScriptObject.createArray().cast();
  }
  int pageStart=newState.getPageStart();
  int pageSize=newState.getPageSize();
  int pageEnd=pageStart + pageSize;
  int rowDataCount=newState.getRowDataSize();
  newState.keyboardSelectedRow=Math.max(0,Math.min(newState.keyboardSelectedRow,rowDataCount - 1));
  if (KeyboardSelectionPolicy.DISABLED == keyboardSelectionPolicy) {
    newState.keyboardSelectedRow=0;
    newState.keyboardSelectedRowValue=null;
  }
 else   if (newState.keyboardSelectedRowChanged) {
    newState.keyboardSelectedRowValue=rowDataCount > 0 ? newState.getRowDataValue(newState.keyboardSelectedRow) : null;
  }
 else   if (newState.keyboardSelectedRowValue != null) {
    int bestMatchIndex=findIndexOfBestMatch(newState,newState.keyboardSelectedRowValue,newState.keyboardSelectedRow);
    if (bestMatchIndex >= 0) {
      newState.keyboardSelectedRow=bestMatchIndex;
      newState.keyboardSelectedRowValue=rowDataCount > 0 ? newState.getRowDataValue(newState.keyboardSelectedRow) : null;
    }
 else {
      newState.keyboardSelectedRow=0;
      newState.keyboardSelectedRowValue=null;
    }
  }
  try {
    if (KeyboardSelectionPolicy.BOUND_TO_SELECTION == keyboardSelectionPolicy && selectionModel != null && newState.viewTouched) {
      T oldValue=oldState.getSelectedValue();
      Object oldKey=getRowValueKey(oldValue);
      T newValue=rowDataCount > 0 ? newState.getRowDataValue(newState.getKeyboardSelectedRow()) : null;
      Object newKey=getRowValueKey(newValue);
      if (newKey != null) {
        boolean oldValueWasSelected=(oldValue == null) ? false : selectionModel.isSelected(oldValue);
        boolean newValueWasSelected=(newValue == null) ? false : selectionModel.isSelected(newValue);
        if (!newKey.equals(oldKey)) {
          if (oldValueWasSelected) {
            selectionModel.setSelected(oldValue,false);
          }
          newState.selectedValue=newValue;
          if (newValue != null && !newValueWasSelected) {
            selectionModel.setSelected(newValue,true);
          }
        }
 else         if (!newValueWasSelected) {
          newState.selectedValue=null;
        }
      }
    }
  }
 catch (  RuntimeException e) {
    isResolvingState=false;
    pendingStateLoop=0;
    throw e;
  }
  boolean keyboardRowChanged=newState.keyboardSelectedRowChanged || (oldState.getKeyboardSelectedRow() != newState.keyboardSelectedRow) || (oldState.getKeyboardSelectedRowValue() == null && newState.keyboardSelectedRowValue != null);
  Set<Integer> newlySelectedRows=new HashSet<Integer>();
  try {
    for (int i=pageStart; i < pageStart + rowDataCount; i++) {
      T rowValue=newState.getRowDataValue(i - pageStart);
      boolean isSelected=(rowValue != null && selectionModel != null && selectionModel.isSelected(rowValue));
      boolean wasSelected=oldState.isRowSelected(i);
      if (isSelected) {
        newState.selectedRows.add(i);
        newlySelectedRows.add(i);
        if (!wasSelected) {
          modifiedRows.push(i);
        }
      }
 else       if (wasSelected) {
        modifiedRows.push(i);
      }
    }
  }
 catch (  RuntimeException e) {
    isResolvingState=false;
    pendingStateLoop=0;
    throw e;
  }
  boolean replacedEmptyRange=false;
  for (  Range replacedRange : newState.replacedRanges) {
    int start=replacedRange.getStart();
    int length=replacedRange.getLength();
    if (length == 0) {
      replacedEmptyRange=true;
    }
    for (int i=start; i < start + length; i++) {
      modifiedRows.push(i);
    }
  }
  if (modifiedRows.length() > 0 && keyboardRowChanged) {
    modifiedRows.push(oldState.getKeyboardSelectedRow());
    modifiedRows.push(newState.keyboardSelectedRow);
  }
  if (pendingState != null) {
    isResolvingState=false;
    pendingState.selectedValue=newState.selectedValue;
    pendingState.selectedRows.addAll(newlySelectedRows);
    if (keyboardRowChanged) {
      pendingState.keyboardSelectedRowChanged=true;
    }
    if (newState.keyboardStealFocus) {
      pendingState.keyboardStealFocus=true;
    }
    modifiedRows.push(oldState.getKeyboardSelectedRow());
    modifiedRows.push(newState.keyboardSelectedRow);
    if (resolvePendingState(modifiedRows)) {
      return true;
    }
  }
  List<Range> modifiedRanges=calculateModifiedRanges(modifiedRows,pageStart,pageEnd);
  Range range0=modifiedRanges.size() > 0 ? modifiedRanges.get(0) : null;
  Range range1=modifiedRanges.size() > 1 ? modifiedRanges.get(1) : null;
  int replaceDiff=0;
  for (  Range range : modifiedRanges) {
    replaceDiff+=range.getLength();
  }
  int oldPageStart=oldState.getPageStart();
  int oldPageSize=oldState.getPageSize();
  int oldRowDataCount=oldState.getRowDataSize();
  boolean redrawRequired=newState.redrawRequired;
  if (pageStart != oldPageStart) {
    redrawRequired=true;
  }
 else   if (rowDataCount < oldRowDataCount) {
    redrawRequired=true;
  }
 else   if (range1 == null && range0 != null && range0.getStart() == pageStart && (replaceDiff >= oldRowDataCount || replaceDiff > oldPageSize)) {
    redrawRequired=true;
  }
 else   if (replaceDiff >= REDRAW_MINIMUM && replaceDiff > REDRAW_THRESHOLD * oldRowDataCount) {
    redrawRequired=true;
  }
 else   if (replacedEmptyRange && oldRowDataCount == 0) {
    redrawRequired=true;
  }
  updateLoadingState();
  try {
    if (redrawRequired) {
      SafeHtmlBuilder sb=new SafeHtmlBuilder();
      view.replaceAllChildren(newState.rowData,selectionModel,newState.keyboardStealFocus);
      view.resetFocus();
    }
 else     if (range0 != null) {
{
        int absStart=range0.getStart();
        int relStart=absStart - pageStart;
        SafeHtmlBuilder sb=new SafeHtmlBuilder();
        List<T> replaceValues=newState.rowData.subList(relStart,relStart + range0.getLength());
        view.replaceChildren(replaceValues,relStart,selectionModel,newState.keyboardStealFocus);
      }
      if (range1 != null) {
        int absStart=range1.getStart();
        int relStart=absStart - pageStart;
        SafeHtmlBuilder sb=new SafeHtmlBuilder();
        List<T> replaceValues=newState.rowData.subList(relStart,relStart + range1.getLength());
        view.replaceChildren(replaceValues,relStart,selectionModel,newState.keyboardStealFocus);
      }
      view.resetFocus();
    }
 else     if (keyboardRowChanged) {
      int oldSelectedRow=oldState.getKeyboardSelectedRow();
      if (oldSelectedRow >= 0 && oldSelectedRow < rowDataCount) {
        view.setKeyboardSelected(oldSelectedRow,false,false);
      }
      int newSelectedRow=newState.getKeyboardSelectedRow();
      if (newSelectedRow >= 0 && newSelectedRow < rowDataCount) {
        view.setKeyboardSelected(newSelectedRow,true,newState.keyboardStealFocus);
      }
    }
  }
 catch (  Error e) {
    throw new RuntimeException(e);
  }
 finally {
    isResolvingState=false;
  }
  resolvePendingState(null);
  return true;
}
