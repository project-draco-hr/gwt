{
class TestPolicy extends SerializationPolicy {
    @Override public boolean shouldDeserializeFields(    Class<?> clazz){
      return C.class.equals(clazz);
    }
    @Override public boolean shouldSerializeFields(    Class<?> clazz){
      return C.class.equals(clazz);
    }
    @Override public void validateDeserialize(    Class<?> clazz) throws SerializationException {
    }
    @Override public void validateSerialize(    Class<?> clazz) throws SerializationException {
    }
    @Override public Set<String> getClientFieldNamesForEnhancedClass(    Class<?> clazz){
      return null;
    }
  }
  try {
    RPC.encodeResponseForSuccess(CC.class.getMethod("c"),new C(),new TestPolicy(),AbstractSerializationStream.FLAG_ELIDE_TYPE_NAMES);
    fail("Should have thrown a SerializationException");
  }
 catch (  SerializationException e) {
  }
}
