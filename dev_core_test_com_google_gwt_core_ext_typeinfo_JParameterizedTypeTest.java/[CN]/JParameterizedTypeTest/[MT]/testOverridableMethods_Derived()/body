{
  TypeOracle oracle=moduleContext.getOracle();
  JClassType type=oracle.getType(Derived.class.getName());
  JGenericType genericType=type.isGenericType();
  assertNotNull(genericType);
  JClassType supertype=type.getSuperclass();
  JParameterizedType paramType=supertype.isParameterized();
  assertNotNull(paramType);
  List<JMethod> expected=new ArrayList<JMethod>();
  expected.addAll(Arrays.asList(genericType.getOverloads("m")));
  expected.add(paramType.getMethod("m",new JType[]{paramType.getTypeArgs()[0]}));
  List<JMethod> actual=new ArrayList<JMethod>(Arrays.asList(type.getInheritableMethods()));
  validateInheritableOrOverridableMethods(expected,actual,true);
  actual=new ArrayList<JMethod>(Arrays.asList(type.getOverridableMethods()));
  validateInheritableOrOverridableMethods(expected,actual,true);
}
