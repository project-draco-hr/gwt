{
  registerHandler(new ArgHandlerEclipse(){
    @Override public String getPurpose(){
      return "Creates an ant file, an eclipse project, and a launch config";
    }
    @Override public boolean setString(    String str){
      eclipse=str;
      return true;
    }
  }
);
  registerHandler(new ArgHandlerOutDir(){
    @Override public void setDir(    File dir){
      outDir=dir;
    }
  }
);
  registerHandler(new ArgHandlerOverwrite(){
    @Override public boolean setFlag(){
      if (ignore) {
        System.err.println("-overwrite cannot be used with -ignore");
        return false;
      }
      overwrite=true;
      return true;
    }
  }
);
  registerHandler(new ArgHandlerIgnore(){
    @Override public boolean setFlag(){
      if (overwrite) {
        System.err.println("-ignore cannot be used with -overwrite");
        return false;
      }
      ignore=true;
      return true;
    }
  }
);
  registerHandler(new ArgHandlerString(){
    @Override public String[] getDefaultArgs(){
      return null;
    }
    @Override public String getPurpose(){
      return "Specifies the new name of the module";
    }
    @Override public String getTag(){
      return "-moduleName";
    }
    @Override public String[] getTagArgs(){
      return new String[]{"moduleName"};
    }
    @Override public boolean setString(    String str){
      newModuleName=str;
      return true;
    }
  }
);
  registerHandler(new ArgHandlerDir(){
    @Override public String[] getDefaultArgs(){
      return new String[]{"-deployDir","deployDir"};
    }
    @Override public String getPurpose(){
      return "Specifies the deploy directory (defaults to deployDir)";
    }
    @Override public String getTag(){
      return "-deployDir";
    }
    @Override public void setDir(    File dir){
      if (dir.getName().length() == 0) {
        throw new IllegalArgumentException("deployDir may not be empty");
      }
      deployDir=dir;
    }
  }
);
  registerHandler(new ArgHandlerAppClass());
  registerHandler(classPathHandler);
  registerHandler(moduleHandler);
}
