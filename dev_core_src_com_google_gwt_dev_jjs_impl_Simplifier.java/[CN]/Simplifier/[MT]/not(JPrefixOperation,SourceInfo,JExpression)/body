{
  if (arg instanceof JMultiExpression) {
    JMultiExpression argMulti=(JMultiExpression)arg;
    JMultiExpression newMulti=new JMultiExpression(sourceInfo);
    newMulti.exprs.addAll(allButLast(argMulti.exprs));
    newMulti.exprs.add(not(null,sourceInfo,last(argMulti.exprs)));
    return newMulti;
  }
  if (arg instanceof JBinaryOperation) {
    JBinaryOperation argOp=(JBinaryOperation)arg;
    JBinaryOperator op=argOp.getOp();
    JBinaryOperator newOp=null;
    if (op == JBinaryOperator.EQ) {
      newOp=JBinaryOperator.NEQ;
    }
 else     if (op == JBinaryOperator.NEQ) {
      newOp=JBinaryOperator.EQ;
    }
 else     if (op == JBinaryOperator.GT) {
      newOp=JBinaryOperator.LTE;
    }
 else     if (op == JBinaryOperator.LTE) {
      newOp=JBinaryOperator.GT;
    }
 else     if (op == JBinaryOperator.GTE) {
      newOp=JBinaryOperator.LT;
    }
 else     if (op == JBinaryOperator.LT) {
      newOp=JBinaryOperator.GTE;
    }
    if (newOp != null) {
      JBinaryOperation newBinOp=new JBinaryOperation(argOp.getSourceInfo(),argOp.getType(),newOp,argOp.getLhs(),argOp.getRhs());
      return newBinOp;
    }
  }
 else   if (arg instanceof JPrefixOperation) {
    JPrefixOperation argOp=(JPrefixOperation)arg;
    JUnaryOperator op=argOp.getOp();
    if (op == JUnaryOperator.NOT) {
      return argOp.getArg();
    }
  }
  if (original != null) {
    return original;
  }
  return new JPrefixOperation(arg.getSourceInfo(),JUnaryOperator.NOT,arg);
}
