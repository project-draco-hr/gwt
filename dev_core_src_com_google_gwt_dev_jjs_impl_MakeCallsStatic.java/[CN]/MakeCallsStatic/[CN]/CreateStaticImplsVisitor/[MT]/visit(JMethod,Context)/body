{
  JDeclaredType enclosingType=x.getEnclosingType();
  JType returnType=x.getType();
  SourceInfo sourceInfo=x.getSourceInfo().makeChild();
  int myIndexInClass=enclosingType.getMethods().indexOf(x);
  assert(myIndexInClass > 0);
  String newName=getStaticMethodName(x);
  JMethod newMethod=new JMethod(sourceInfo,newName,enclosingType,returnType,false,true,true,x.getAccess());
  newMethod.setInliningMode(x.getInliningMode());
  newMethod.setHasSideEffects(x.hasSideEffects());
  newMethod.setSynthetic();
  newMethod.addThrownExceptions(x.getThrownExceptions());
  JType thisParameterType=enclosingType.strengthenToNonNull();
  JParameter thisParam=JParameter.create(sourceInfo,"this$static",thisParameterType,true,true,newMethod);
  Map<JParameter,JParameter> varMap=new IdentityHashMap<JParameter,JParameter>();
  for (int i=0; i < x.getParams().size(); ++i) {
    JParameter oldVar=x.getParams().get(i);
    JParameter newVar=JParameter.create(oldVar.getSourceInfo(),oldVar.getName(),oldVar.getType(),oldVar.isFinal(),false,newMethod);
    varMap.put(oldVar,newVar);
  }
  List<JType> originalParamTypes=Lists.newArrayList();
  originalParamTypes.add(thisParameterType);
  originalParamTypes.addAll(x.getOriginalParamTypes());
  newMethod.setOriginalTypes(x.getOriginalReturnType(),originalParamTypes);
  JAbstractMethodBody movedBody=x.getBody();
  newMethod.setBody(movedBody);
  JMethodBody newBody=new JMethodBody(sourceInfo);
  x.setBody(newBody);
  JMethodCall newCall=new JMethodCall(sourceInfo,null,newMethod);
  newCall.addArg(new JThisRef(sourceInfo,enclosingType));
  for (int i=0; i < x.getParams().size(); ++i) {
    JParameter param=x.getParams().get(i);
    newCall.addArg(new JParameterRef(sourceInfo,param));
  }
  newBody.getBlock().addStmt(JjsUtils.makeMethodEndStatement(returnType,newCall));
  if (newMethod.isNative()) {
    JsFunction jsFunc=((JsniMethodBody)movedBody).getFunc();
    JsName paramName=jsFunc.getScope().declareName("this$static");
    jsFunc.getParameters().add(0,new JsParameter(sourceInfo,paramName));
    RewriteJsniMethodBody rewriter=new RewriteJsniMethodBody(paramName);
    rewriter.accept(jsFunc.getBody());
  }
 else {
    RewriteMethodBody rewriter=new RewriteMethodBody(thisParam,varMap,optimizerCtx);
    rewriter.accept(movedBody);
  }
  program.putStaticImpl(x,newMethod);
  enclosingType.getMethods().add(myIndexInClass + 1,newMethod);
  if (optimizerCtx != null) {
    optimizerCtx.markModified(x);
    optimizerCtx.markModified(newMethod);
  }
  return false;
}
