{
  if (o == null) {
    return LowLevelMoz.JSVAL_NULL;
  }
  if (type.equals(String.class)) {
    return LowLevelMoz.convertString(scriptObject,(String)o);
  }
 else   if (type.equals(boolean.class)) {
    return LowLevelMoz.convertBoolean(scriptObject,((Boolean)o).booleanValue());
  }
 else   if (type.equals(byte.class)) {
    return LowLevelMoz.convertByte(scriptObject,((Byte)o).byteValue());
  }
 else   if (type.equals(short.class)) {
    return LowLevelMoz.convertShort(scriptObject,((Short)o).shortValue());
  }
 else   if (type.equals(char.class)) {
    return LowLevelMoz.convertChar(scriptObject,((Character)o).charValue());
  }
 else   if (type.equals(int.class)) {
    return LowLevelMoz.convertInt(scriptObject,((Integer)o).intValue());
  }
 else   if (type.equals(long.class)) {
    return LowLevelMoz.convertLong(scriptObject,((Long)o).longValue());
  }
 else   if (type.equals(float.class)) {
    return LowLevelMoz.convertFloat(scriptObject,((Float)o).floatValue());
  }
 else   if (type.equals(double.class)) {
    return LowLevelMoz.convertDouble(scriptObject,((Double)o).doubleValue());
  }
  try {
    Class jso=Class.forName(HandleMoz.HANDLE_CLASS,true,cl);
    if (jso.isAssignableFrom(type) && jso.isAssignableFrom(o.getClass())) {
      return HandleMoz.getJSObjectFromHandle(o);
    }
  }
 catch (  ClassNotFoundException e) {
  }
  return wrapObjectAsJSObject(cl,scriptObject,o);
}
