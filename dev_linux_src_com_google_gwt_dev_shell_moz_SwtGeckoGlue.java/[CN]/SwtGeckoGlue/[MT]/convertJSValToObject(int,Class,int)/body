{
  if (jsval == LowLevelMoz.JSVAL_VOID || jsval == LowLevelMoz.JSVAL_NULL) {
    return null;
  }
  if (LowLevelMoz.isJSObject(jsval)) {
    Object translated=translateJSObject(scriptObject,paramType,jsval);
    if (paramType.isAssignableFrom(translated.getClass())) {
      return translated;
    }
  }
switch (TypeInfo.classifyType(paramType)) {
case TypeInfo.TYPE_WRAP_BOOLEAN:
case TypeInfo.TYPE_PRIM_BOOLEAN:
    return Boolean.valueOf(LowLevelMoz.coerceToBoolean(scriptObject,jsval));
case TypeInfo.TYPE_WRAP_BYTE:
case TypeInfo.TYPE_PRIM_BYTE:
  return new Byte(LowLevelMoz.coerceToByte(scriptObject,jsval));
case TypeInfo.TYPE_WRAP_CHAR:
case TypeInfo.TYPE_PRIM_CHAR:
return new Character(LowLevelMoz.coerceToChar(scriptObject,jsval));
case TypeInfo.TYPE_WRAP_DOUBLE:
case TypeInfo.TYPE_PRIM_DOUBLE:
return new Double(LowLevelMoz.coerceToDouble(scriptObject,jsval));
case TypeInfo.TYPE_WRAP_FLOAT:
case TypeInfo.TYPE_PRIM_FLOAT:
return new Float(LowLevelMoz.coerceToFloat(scriptObject,jsval));
case TypeInfo.TYPE_WRAP_INT:
case TypeInfo.TYPE_PRIM_INT:
return new Integer(LowLevelMoz.coerceToInt(scriptObject,jsval));
case TypeInfo.TYPE_WRAP_LONG:
case TypeInfo.TYPE_PRIM_LONG:
return new Long(LowLevelMoz.coerceToLong(scriptObject,jsval));
case TypeInfo.TYPE_WRAP_SHORT:
case TypeInfo.TYPE_PRIM_SHORT:
return new Short(LowLevelMoz.coerceToShort(scriptObject,jsval));
case TypeInfo.TYPE_WRAP_STRING:
return LowLevelMoz.coerceToString(scriptObject,jsval);
case TypeInfo.TYPE_USER:
if (LowLevelMoz.isString(jsval)) {
return LowLevelMoz.coerceToString(scriptObject,jsval);
}
break;
}
throw new IllegalArgumentException("Cannot convert to type " + TypeInfo.getSourceRepresentation(paramType,""));
}
