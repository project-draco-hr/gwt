{
  selectorTracker.initialize(msg,this);
  assertSame(msg,trans);
switch (visitState) {
case 2:
    assertEquals("gender",msg.getMethodName());
  assertNull(msg.getDescription());
assertEquals("0B47700B9670EA6CE190F3C12EC6CF76",msg.getKey());
assertEquals("{1} wants to sell their car",msg.getDefaultMessage());
assertEquals(Type.STRING,msg.getReturnType());
List<Parameter> params=msg.getParameters();
assertEquals(2,params.size());
Parameter param=params.get(0);
assertNotNull(param.getType().getEnumValues());
assertParamNameEquals("gender",param);
param=params.get(1);
assertEquals(Type.STRING,param.getType());
assertParamNameEquals("name",param);
break;
case 16:
assertEquals("multiSelect",msg.getMethodName());
assertEquals("test of multiple selectors",msg.getDescription());
assertEquals("3213633E1B1DCFA944C788487B99A99D",msg.getKey());
assertEquals("{1}, {2}, and {0} others liked their {3} messages",msg.getDefaultMessage());
params=msg.getParameters();
assertEquals(5,params.size());
param=params.get(0);
assertTrue("not a List",param.getType() instanceof ListType);
assertParamNameEquals("names",param);
param=params.get(1);
assertEquals(Type.STRING,param.getType());
assertParamNameEquals("name1",param);
param=params.get(2);
assertEquals(Type.STRING,param.getType());
assertParamNameEquals("name2",param);
param=params.get(3);
assertEquals(Type.INT,param.getType());
assertParamNameEquals("msgCount",param);
param=params.get(4);
assertEquals(Type.STRING,param.getType());
assertParamNameEquals("gender",param);
break;
case 171:
assertEquals("inheritedConstant",msg.getMethodName());
assertNull(msg.getDescription());
assertEquals("inheritedConstant",msg.getKey());
assertEquals("inherited",msg.getDefaultMessage());
assertEquals(0,msg.getParameters().size());
break;
case 175:
assertEquals("inheritedMap",msg.getMethodName());
assertNull(msg.getDescription());
assertEquals("inheritedMap",msg.getKey());
assertEquals("k1,k2",msg.getDefaultMessage());
assertEquals(0,msg.getParameters().size());
break;
case 186:
assertEquals("inheritedMessage",msg.getMethodName());
assertNull(msg.getDescription());
assertEquals("inheritedMessage",msg.getKey());
assertEquals("inherited",msg.getDefaultMessage());
assertEquals(0,msg.getParameters().size());
break;
default :
fail("Unexpected visit state " + visitState + ", method="+ msg.getMethodName()+ ", desc="+ msg.getDescription()+ ", key="+ msg.getKey()+ ", def=\""+ msg.getDefaultMessage()+ "\"");
break;
}
visitState++;
processDefaultMessageBefore(msg.getMessageStyle(),msg.getDefaultMessage());
return this;
}
