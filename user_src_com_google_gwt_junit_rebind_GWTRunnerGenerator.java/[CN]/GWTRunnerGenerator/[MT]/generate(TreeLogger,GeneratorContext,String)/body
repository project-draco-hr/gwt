{
  if (!GWT_RUNNER_NAME.equals(typeName)) {
    logger.log(TreeLogger.ERROR,"This generator may only be used with " + GWT_RUNNER_NAME,null);
    throw new UnableToCompleteException();
  }
  JClassType requestedClass;
  try {
    requestedClass=context.getTypeOracle().getType(typeName);
  }
 catch (  NotFoundException e) {
    logger.log(TreeLogger.ERROR,"Could not find type '" + typeName + "'; please see the log, as this usually indicates a previous error ",e);
    throw new UnableToCompleteException();
  }
  String moduleName;
  try {
    ConfigurationProperty prop=context.getPropertyOracle().getConfigurationProperty("junit.moduleName");
    moduleName=prop.getValues().get(0);
  }
 catch (  BadPropertyValueException e) {
    logger.log(TreeLogger.ERROR,"Could not resolve junit.moduleName property",e);
    throw new UnableToCompleteException();
  }
  String userAgent;
  try {
    SelectionProperty prop=context.getPropertyOracle().getSelectionProperty(logger,"user.agent");
    userAgent=prop.getCurrentValue();
  }
 catch (  BadPropertyValueException e) {
    logger.log(TreeLogger.ERROR,"Could not resolve user.agent property",e);
    throw new UnableToCompleteException();
  }
  String generatedClass=requestedClass.getName().replace('.','_') + "Impl" + userAgent;
  String packageName=requestedClass.getPackage().getName();
  String qualifiedStubClassName=packageName + "." + generatedClass;
  SourceWriter sourceWriter=getSourceWriter(logger,context,packageName,generatedClass,GWT_RUNNER_NAME);
  if (sourceWriter != null) {
    TestModuleInfo moduleInfo=GWTTestCase.getTestsForModule(moduleName);
    Set<TestInfo> moduleTests=(moduleInfo == null) ? null : moduleInfo.getTests();
    Set<String> testClasses;
    if (moduleTests == null || moduleTests.isEmpty()) {
      JClassType[] allTestTypes=getAllPossibleTestTypes(context.getTypeOracle());
      testClasses=getTestTypesForModule(logger,moduleName,allTestTypes);
    }
 else {
      testClasses=new TreeSet<String>();
      for (      TestInfo testInfo : moduleTests) {
        testClasses.add(testInfo.getTestClass());
      }
    }
    writeCreateNewTestCaseMethod(testClasses,sourceWriter);
    writeGetUserAgentPropertyMethod(userAgent,sourceWriter);
    sourceWriter.commit(logger);
  }
  return qualifiedStubClassName;
}
