{
  if (!GWT_RUNNER_NAME.equals(typeName)) {
    logger.log(TreeLogger.ERROR,"This generator may only be used with " + GWT_RUNNER_NAME,null);
    throw new UnableToCompleteException();
  }
  JClassType requestedClass;
  try {
    requestedClass=context.getTypeOracle().getType(typeName);
  }
 catch (  NotFoundException e) {
    logger.log(TreeLogger.ERROR,"Could not find type '" + typeName + "'; please see the log, as this usually indicates a previous error ",e);
    throw new UnableToCompleteException();
  }
  String moduleName;
  try {
    moduleName=context.getPropertyOracle().getPropertyValue(logger,"junit.moduleName");
  }
 catch (  BadPropertyValueException e) {
    logger.log(TreeLogger.ERROR,"Could not resolve junit.moduleName property",e);
    throw new UnableToCompleteException();
  }
  String generatedClass=requestedClass.getSimpleSourceName() + "Impl";
  String packageName=requestedClass.getPackage().getName();
  String qualifiedStubClassName=packageName + "." + generatedClass;
  SourceWriter sourceWriter=getSourceWriter(logger,context,packageName,generatedClass,GWT_RUNNER_NAME);
  if (sourceWriter != null) {
    PerfLogger.start("GWTRunnerGenerator");
    JClassType[] allTestTypes=getAllTestTypes(context.getTypeOracle());
    Set<String> testClasses=getTestTypesForModule(logger,moduleName,allTestTypes);
    writeCreateNewTestCaseMethod(testClasses,sourceWriter);
    sourceWriter.commit(logger);
    PerfLogger.end();
  }
  return qualifiedStubClassName;
}
