{
  for (  String property : new String[]{"userName","password","charField","longField","bigDecimalField","bigIntField","intId","shortField","byteField","created","doubleField","floatField","boolField","otherBoolField","id","version"}) {
    assertTrue("Expect " + property + " to be defined",jso.isDefined(property));
  }
  assertEquals("bovik",jso.get(SimpleFooRecord.userName));
  assertEquals("bovik",jso.get(SimpleFooRecord.password));
  assertEquals(new Character('c'),jso.get(SimpleFooRecord.charField));
  assertEquals(new Long(1234567890L),jso.get(SimpleFooRecord.longField));
  assertEquals(new BigDecimal("12345678901234.5678901234567890"),jso.get(SimpleFooRecord.bigDecimalField));
  assertEquals(new BigInteger("123456789012345678901234567890"),jso.get(SimpleFooRecord.bigIntField));
  assertEquals(Integer.valueOf(4),jso.get(SimpleFooRecord.intId));
  assertEquals(Short.valueOf((short)5),jso.get(SimpleFooRecord.shortField));
  assertEquals(Byte.valueOf((byte)6),jso.get(SimpleFooRecord.byteField));
  assertEquals(new Date(400),jso.get(SimpleFooRecord.created));
  assertEquals(Double.valueOf(12345.6789),jso.get(SimpleFooRecord.doubleField));
  int expected=(int)(Float.valueOf(12.3456789f) * 1000);
  int actual=(int)(jso.get(SimpleFooRecord.floatField) * 1000);
  assertEquals(expected,actual);
  assertFalse(jso.get(SimpleFooRecord.boolField));
  assertTrue(jso.get(SimpleFooRecord.otherBoolField));
  assertEquals((Long)42L,jso.getId());
  assertEquals(new Integer(1),jso.getVersion());
  testSchema(jso,schemaPresent);
}
