{
  if (className == null) {
    throw new ClassNotFoundException("null class name",new NullPointerException());
  }
  if (isInStandardJavaPackage(className)) {
    throw new ClassNotFoundException(className);
  }
  if (BRIDGE_CLASS_NAMES.containsKey(className)) {
    return BRIDGE_CLASS_NAMES.get(className);
  }
  byte[] classBytes;
  try {
    String lookupClassName=className;
    if (classRewriter != null && classRewriter.isJsoImpl(className)) {
      lookupClassName=className.substring(0,className.length() - 1);
    }
    classBytes=compiler.getClassBytes(logger,lookupClassName);
    if (classRewriter != null) {
      classBytes=classRewriter.rewrite(className,classBytes);
    }
    Class<?> newClass=defineClass(className,classBytes,0,classBytes.length);
    if (className.equals(JavaScriptHost.class.getName())) {
      javaScriptHostClass=newClass;
      updateJavaScriptHost();
    }
    JsniMethods jsniMethods=newClass.getAnnotation(JsniMethods.class);
    if (jsniMethods != null) {
      for (      JsniMethod jsniMethod : jsniMethods.value()) {
        String[] bodyParts=jsniMethod.body();
        int size=0;
        for (        String bodyPart : bodyParts) {
          size+=bodyPart.length();
        }
        StringBuilder body=new StringBuilder(size);
        for (        String bodyPart : bodyParts) {
          body.append(bodyPart);
        }
        shellJavaScriptHost.createNative(jsniMethod.file(),jsniMethod.line(),jsniMethod.name(),jsniMethod.paramNames(),body.toString());
      }
    }
    return newClass;
  }
 catch (  UnableToCompleteException e) {
    throw new ClassNotFoundException(className);
  }
}
