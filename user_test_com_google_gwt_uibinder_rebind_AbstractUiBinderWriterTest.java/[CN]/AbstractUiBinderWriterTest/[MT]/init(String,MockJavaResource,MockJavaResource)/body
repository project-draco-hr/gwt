{
  resources.add(RENDERABLE_PANEL);
  resources.add(CLIENT_BUNDLE);
  resources.add(DIV_ELEMENT);
  resources.add(SPAN_ELEMENT);
  resources.add(FOO);
  resources.add(rendererClass);
  resources.addAll(Arrays.asList(otherClasses));
  CompilationState state=CompilationStateBuilder.buildFrom(createCompileLogger(),resources);
  types=state.getTypeOracle();
  logger=new MockMortalLogger();
  UiBinderContext uiBinderCtx=new UiBinderContext();
  fieldManager=new FieldManager(types,logger,true);
  String baseClass=RENDERER_BASE_CLASS_NAME;
  DesignTimeUtils designTime=DesignTimeUtilsStub.EMPTY;
  elemProvider=new XMLElementProviderImpl(new AttributeParsers(types,fieldManager,logger),types,logger,designTime);
  doc=docHelper.documentFor(domString,rendererClass.getPath());
  item=(Element)doc.getDocumentElement().getChildNodes().item(0);
  elm=elemProvider.get(item);
  JClassType aClass=types.findType(baseClass);
  MessagesWriter messages=new MessagesWriter(types,BINDER_URI,logger,rendererClass.getPath(),"rendererPackage","rendererClassName");
  writer=new UiBinderWriter(aClass,"foo","",types,logger,fieldManager,messages,DesignTimeUtilsStub.EMPTY,uiBinderCtx,true,true,BINDER_URI);
  parser=new UiBinderParser(writer,messages,fieldManager,types,null,BINDER_URI,new UiBinderContext());
  designTime.rememberPathForElements(doc);
}
