{
  File path=new File(reportPath);
  File[] files=path.listFiles(new FilenameFilter(){
    public boolean accept(    File f,    String name){
      return name.startsWith("report-") && name.endsWith(".xml");
    }
  }
);
  Map filesToUpdate=new HashMap();
  Map filesById=new HashMap();
  for (int i=0; i < files.length; ++i) {
    File f=files[i];
    filesById.put(getReportId(f),new ReportFile(f));
  }
synchronized (reportsLock) {
    for (int i=0; i < files.length; ++i) {
      File file=files[i];
      String reportId=getReportId(file);
      ReportEntry entry=(ReportEntry)reports.get(reportId);
      if (entry == null || entry.lastModified < file.lastModified()) {
        filesToUpdate.put(reportId,null);
      }
    }
    for (Iterator it=reports.keySet().iterator(); it.hasNext(); ) {
      String id=(String)it.next();
      if (filesById.get(id) == null) {
        it.remove();
      }
    }
  }
  try {
    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
    factory.setIgnoringElementContentWhitespace(true);
    factory.setIgnoringComments(true);
    DocumentBuilder builder=factory.newDocumentBuilder();
    for (Iterator it=filesToUpdate.keySet().iterator(); it.hasNext(); ) {
      String id=(String)it.next();
      ReportFile reportFile=(ReportFile)filesById.get(id);
      String filePath=reportFile.file.getAbsolutePath();
      Document doc=builder.parse(filePath);
      Report report=ReportXml.fromXml(doc.getDocumentElement());
      report.setId(id);
      ReportSummary summary=report.getSummary();
      long lastModified=new File(filePath).lastModified();
      filesToUpdate.put(id,new ReportEntry(report,summary,lastModified));
    }
synchronized (reportsLock) {
      for (Iterator it=filesToUpdate.keySet().iterator(); it.hasNext(); ) {
        String id=(String)it.next();
        reports.put(id,filesToUpdate.get(id));
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
synchronized (updateLock) {
    updating=false;
    lastUpdateMillis=System.currentTimeMillis();
  }
}
