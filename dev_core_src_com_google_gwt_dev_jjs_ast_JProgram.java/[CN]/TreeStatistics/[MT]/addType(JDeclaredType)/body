{
  allTypes.add(type);
  String name=type.getName();
  putIntoTypeMap(name,type);
  if (CODEGEN_TYPES_SET.contains(name)) {
    codeGenTypes.add((JClassType)type);
  }
  if (IMMORTAL_CODEGEN_TYPES_SET.contains(name)) {
    immortalCodeGenTypes.add((JClassType)type);
  }
  if (!typeNamesToIndex.contains(name)) {
    return;
  }
  indexedTypes.put(type.getShortName(),type);
  for (  JMethod method : type.getMethods()) {
    if (!method.isPrivate()) {
      indexedMethods.put(type.getShortName() + '.' + method.getName(),method);
    }
  }
  for (  JField field : type.getFields()) {
    indexedFields.put(type.getShortName() + '.' + field.getName(),field);
  }
switch (name) {
case "java.lang.Object":
    typeJavaLangObject=(JClassType)type;
  break;
case "java.lang.String":
typeString=(JClassType)type;
break;
case "java.lang.Class":
typeClass=(JClassType)type;
break;
case JAVASCRIPTOBJECT:
typeSpecialJavaScriptObject=(JClassType)type;
break;
case CLASS_LITERAL_HOLDER:
typeSpecialClassLiteralHolder=(JClassType)type;
break;
}
}
