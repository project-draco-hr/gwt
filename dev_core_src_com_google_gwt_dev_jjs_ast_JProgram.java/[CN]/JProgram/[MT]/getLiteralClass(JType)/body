{
  JClassLiteral classLiteral=classLiterals.get(type);
  if (classLiteral == null) {
    if (optimizationsStarted) {
      throw new InternalCompilerException("New class literals cannot be created once optimizations have started; type '" + type + "'");
    }
    SourceInfo info=typeSpecialClassLiteralHolder.getSourceInfo();
    JExpression alloc=JClassLiteral.computeClassObjectAllocation(this,info,type);
    JField field=new JField(this,info,type.getJavahSignatureName() + "_classLit",typeSpecialClassLiteralHolder,getTypeJavaLangClass(),true,Disposition.FINAL);
    typeSpecialClassLiteralHolder.fields.add(field);
    JFieldRef fieldRef=new JFieldRef(this,info,null,field,typeSpecialClassLiteralHolder);
    JDeclarationStatement decl=new JDeclarationStatement(this,info,fieldRef,alloc);
    JMethodBody clinitBody=(JMethodBody)typeSpecialClassLiteralHolder.methods.get(0).getBody();
    clinitBody.getStatements().add(decl);
    classLiteral=new JClassLiteral(this,createSourceInfoSynthetic(JProgram.class,"class literal for " + type.getName()),type,field);
    classLiterals.put(type,classLiteral);
  }
 else {
    JField field=classLiteral.getField();
    if (optimizationsStarted && !field.getEnclosingType().fields.contains(field)) {
      throw new InternalCompilerException("Getting a class literal whose field holder has already been pruned; type '" + type + " '");
    }
  }
  return classLiteral;
}
