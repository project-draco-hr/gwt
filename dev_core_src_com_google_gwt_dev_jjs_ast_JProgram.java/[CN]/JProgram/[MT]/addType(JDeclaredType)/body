{
  allTypes.add(type);
  String name=type.getName();
  putIntoTypeMap(name,type);
  if (CODEGEN_TYPES_SET.contains(name)) {
    codeGenTypes.add((JClassType)type);
  }
  if (IMMORTAL_CODEGEN_TYPES_SET.contains(name)) {
    immortalCodeGenTypes.add((JClassType)type);
  }
  if (typeNamesToIndex.contains(name)) {
    indexedTypes.put(type.getShortName(),type);
    for (    JMethod method : type.getMethods()) {
      if (!method.isPrivate()) {
        indexedMethods.put(type.getShortName() + '.' + method.getName(),method);
      }
    }
    for (    JField field : type.getFields()) {
      indexedFields.put(type.getShortName() + '.' + field.getName(),field);
    }
    if (name.equals("java.lang.Object")) {
      typeJavaLangObject=(JClassType)type;
    }
 else     if (name.equals("java.lang.String")) {
      typeString=(JClassType)type;
    }
 else     if (name.equals("java.lang.Enum")) {
      typeJavaLangEnum=(JClassType)type;
    }
 else     if (name.equals("java.lang.Class")) {
      typeClass=(JClassType)type;
    }
 else     if (name.equals(JAVASCRIPTOBJECT)) {
      typeSpecialJavaScriptObject=(JClassType)type;
    }
 else     if (name.equals("com.google.gwt.lang.ClassLiteralHolder")) {
      typeSpecialClassLiteralHolder=(JClassType)type;
    }
 else     if (name.equals("java.lang.Cloneable")) {
      typeJavaLangCloneable=(JInterfaceType)type;
    }
 else     if (name.equals("java.io.Serializable")) {
      typeJavaIoSerializable=(JInterfaceType)type;
    }
  }
}
