{
  if (jmethod instanceof Clinit) {
    return true;
  }
  String name=getMethodName(enclosingType,jmethod);
  Map<Class<? extends java.lang.annotation.Annotation>,java.lang.annotation.Annotation> declaredAnnotations=newAnnotationMap();
  resolveAnnotations(logger,jmethod.annotations,declaredAnnotations);
  JAbstractMethod method;
  JTypeParameter[] jtypeParameters=resolveTypeParameters(jmethod.typeParameters());
  if (jmethod.isConstructor()) {
    method=new JConstructor(enclosingType,name,declaredAnnotations,jtypeParameters);
    if (!resolveBoundsForTypeParameters(logger,method,jmethod.typeParameters())) {
      return false;
    }
  }
 else {
    if (jmethod.isAnnotationMethod()) {
      AnnotationMethodDeclaration annotationMethod=(AnnotationMethodDeclaration)jmethod;
      Object defaultValue=null;
      if (annotationMethod.defaultValue != null) {
        defaultValue=getAnnotationElementValue(logger,annotationMethod.returnType.resolvedType,annotationMethod.defaultValue);
      }
      method=new JAnnotationMethod(enclosingType,name,defaultValue,declaredAnnotations);
    }
 else {
      method=new JMethod(enclosingType,name,declaredAnnotations,jtypeParameters);
    }
    if (!resolveBoundsForTypeParameters(logger,method,jmethod.typeParameters())) {
      return false;
    }
    TypeBinding jreturnType=((MethodDeclaration)jmethod).returnType.resolvedType;
    JType returnType=resolveType(logger,jreturnType);
    if (returnType == null) {
      return false;
    }
    ((JMethod)method).setReturnType(returnType);
  }
  method.addModifierBits(Shared.bindingToModifierBits(jmethod.binding));
  if (enclosingType.isInterface() != null) {
    method.addModifierBits(Shared.MOD_PUBLIC | Shared.MOD_ABSTRACT);
  }
  Argument[] jparams=jmethod.arguments;
  if (!resolveParameters(logger,method,jparams)) {
    return false;
  }
  TypeReference[] jthrows=jmethod.thrownExceptions;
  if (!resolveThrownTypes(logger,method,jthrows)) {
    return false;
  }
  if (jmethod.javadoc != null) {
    if (!parseMetaDataTags(unitSource,method,jmethod.javadoc)) {
      return false;
    }
  }
  return true;
}
