{
  Object elementValue=null;
  if (elementValueExpression.constant != null && elementValueExpression.constant != Constant.NotAConstant) {
    Constant constant=elementValueExpression.constant;
    int expectedTypeId=expectedElementValueType.id;
    if (expectedElementValueType.isArrayType()) {
      assert(!elementValueExpression.resolvedType.isArrayType() && expectedElementValueType.dimensions() == 1);
      expectedTypeId=expectedElementValueType.leafComponentType().id;
    }
    if (elementValueExpression.resolvedType.id != expectedTypeId) {
      constant=constant.castTo((expectedTypeId << 4) + elementValueExpression.resolvedType.id);
    }
    elementValue=getConstantValue(constant);
  }
 else   if (elementValueExpression instanceof ClassLiteralAccess) {
    ClassLiteralAccess classLiteral=(ClassLiteralAccess)elementValueExpression;
    elementValue=getClassLiteral(logger,classLiteral.targetType);
  }
 else   if (elementValueExpression instanceof ArrayInitializer) {
    elementValue=getAnnotationElementValueArray(logger,(ArrayInitializer)elementValueExpression);
  }
 else   if (elementValueExpression instanceof NameReference) {
    NameReference nameRef=(NameReference)elementValueExpression;
    assert(nameRef.constant == null || nameRef.constant == Constant.NotAConstant);
    assert(nameRef.actualReceiverType.isEnum());
    Class<?> clazz=getClassLiteral(logger,nameRef.actualReceiverType);
    Class<? extends Enum> enumClass=clazz.asSubclass(Enum.class);
    String enumName=String.valueOf(nameRef.fieldBinding().name);
    elementValue=Enum.valueOf(enumClass,enumName);
  }
 else   if (elementValueExpression instanceof Annotation) {
    elementValue=createAnnotationInstance(logger,elementValueExpression);
  }
 else {
    assert(false);
    return null;
  }
  assert(elementValue != null);
  if (expectedElementValueType.isArrayType() && !elementValue.getClass().isArray()) {
    Object array=Array.newInstance(elementValue.getClass(),1);
    Array.set(array,0,elementValue);
    elementValue=array;
  }
  return elementValue;
}
