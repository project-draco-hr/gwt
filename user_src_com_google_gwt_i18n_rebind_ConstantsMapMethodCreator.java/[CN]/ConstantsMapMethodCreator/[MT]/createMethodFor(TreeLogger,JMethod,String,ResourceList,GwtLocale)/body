{
  String methodName=method.getName();
  if (method.getParameters().length > 0) {
    error(logger,methodName + " cannot have parameters; extend Messages instead if you need to create " + "parameterized messages");
  }
  enableCache();
  String constantMapClassName=ConstantMap.class.getCanonicalName();
  println(GENERIC_STRING_MAP_TYPE + " args = (" + GENERIC_STRING_MAP_TYPE+ ") cache.get("+ wrap(methodName)+ ");");
  println("if (args == null) {");
  indent();
  println("args = new " + constantMapClassName + "(new String[] {");
  String keyString;
  try {
    keyString=resourceList.getRequiredStringExt(mapName,null);
  }
 catch (  MissingResourceException e) {
    e.setDuring("getting key list");
    throw e;
  }
  String[] keys=ConstantsStringArrayMethodCreator.split(keyString);
  ResourceList resources=getResources();
  Map<String,String> map=new LinkedHashMap<String,String>();
  for (  String key : keys) {
    if (key.length() == 0) {
      continue;
    }
    try {
      String value=resources.getRequiredString(key);
      map.put(key,value);
    }
 catch (    MissingResourceException e) {
      e.setDuring("implementing map");
      throw e;
    }
  }
  indent();
  indent();
  Set<Entry<String,String>> entries=map.entrySet();
  for (  Entry<String,String> entry : entries) {
    println(wrap(entry.getKey()) + ", ");
  }
  outdent();
  println("},");
  indent();
  println("new String[] {");
  for (  Entry<String,String> entry : entries) {
    println(wrap(entry.getValue()) + ", ");
  }
  outdent();
  println("});");
  outdent();
  println("cache.put(" + wrap(methodName) + ", args);");
  outdent();
  println("};");
  println("return args;");
}
