{
  int curPos=0;
  boolean inQuote=false;
  int templateLen=template.length();
  ArrayList<TemplateChunk> chunks=new ArrayList<TemplateChunk>();
  TemplateChunk curChunk=null;
  while (curPos < templateLen) {
    char ch=template.charAt(curPos++);
switch (ch) {
case '\'':
      if (curPos < templateLen && template.charAt(curPos) == '\'') {
        curChunk=appendString(chunks,curChunk,"'");
        ++curPos;
        break;
      }
    inQuote=!inQuote;
  break;
case '{':
if (inQuote) {
  curChunk=appendString(chunks,curChunk,"{");
  break;
}
StringBuilder argBuf=new StringBuilder();
boolean argQuote=false;
while (curPos < templateLen) {
ch=template.charAt(curPos++);
if (ch == '\'') {
if (curPos < templateLen && template.charAt(curPos) == '\'') {
argBuf.append(ch);
++curPos;
}
 else {
argQuote=!argQuote;
}
}
 else {
if (!argQuote && ch == '}') {
break;
}
argBuf.append(ch);
}
}
if (ch != '}') {
throw new ParseException("Invalid message format - { not start of valid argument" + template,curPos);
}
if (curChunk != null) {
chunks.add(curChunk);
}
String arg=argBuf.toString();
int firstComma=arg.indexOf(',');
String format=null;
if (firstComma > 0) {
format=arg.substring(firstComma + 1);
arg=arg.substring(0,firstComma);
}
if (!Character.isDigit(arg.charAt(0))) {
chunks.add(new StaticArgChunk(arg,format));
}
 else {
int argNumber=Integer.valueOf(arg);
Map<String,String> formatArgs=new HashMap<String,String>();
Map<String,String> listArgs=null;
String subFormat=null;
if (format != null) {
int comma=format.indexOf(',');
if (comma >= 0) {
subFormat=format.substring(comma + 1);
format=format.substring(0,comma);
}
format=parseFormatArgs(format,formatArgs);
if ("list".equals(format)) {
listArgs=formatArgs;
formatArgs=new HashMap<String,String>();
format=subFormat;
subFormat=null;
if (format != null) {
comma=format.indexOf(',');
if (comma >= 0) {
subFormat=format.substring(comma + 1);
format=format.substring(0,comma);
}
format=parseFormatArgs(format,formatArgs);
}
}
}
chunks.add(new ArgumentChunk(argNumber,listArgs,format,formatArgs,subFormat));
}
curChunk=null;
break;
case '\n':
curChunk=appendString(chunks,curChunk,"\\n");
break;
case '\r':
curChunk=appendString(chunks,curChunk,"\\r");
break;
case '\\':
curChunk=appendString(chunks,curChunk,"\\\\");
break;
case '"':
curChunk=appendString(chunks,curChunk,"\\\"");
break;
default :
curChunk=appendString(chunks,curChunk,String.valueOf(ch));
break;
}
}
if (inQuote) {
throw new ParseException("Unterminated single quote: " + template,template.length());
}
if (curChunk != null) {
chunks.add(curChunk);
}
return chunks;
}
