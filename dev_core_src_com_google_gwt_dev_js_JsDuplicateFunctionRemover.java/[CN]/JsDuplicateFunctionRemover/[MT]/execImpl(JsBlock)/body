{
  DuplicateFunctionBodyRecorder dfbr=new DuplicateFunctionBodyRecorder();
  dfbr.accept(fragment);
  int count=0;
  Map<JsFunction,JsName> hoistMap=new HashMap<JsFunction,JsName>();
  Map<JsFunction,JsFunction> dupMethodMap=dfbr.getDuplicateMethodMap();
  for (  JsFunction x : dupMethodMap.values()) {
    if (!hoistMap.containsKey(x)) {
      JsName newName=program.getScope().declareName("_DUP" + count++);
      JsFunction newFunc=new JsFunction(x.getSourceInfo(),program.getScope(),newName,x.isFromJava());
      newFunc.setBody(x.getBody());
      newFunc.getParameters().addAll(x.getParameters());
      fragment.getStatements().add(newFunc.makeStmt());
      hoistMap.put(x,newName);
    }
  }
  ReplaceDuplicateInvocationNameRefs rdup=new ReplaceDuplicateInvocationNameRefs(dfbr.getDuplicateMap(),dfbr.getBlacklist(),dupMethodMap,hoistMap);
  rdup.accept(fragment);
  return rdup.didChange();
}
