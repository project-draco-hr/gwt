{
  boolean negative=(bits & 0x80000000) != 0;
  int exp=(bits >> 23) & 0xff;
  bits&=0x7fffff;
  if (exp == 0x0) {
    if (bits == 0) {
      return negative ? -0.0f : 0.0f;
    }
  }
 else   if (exp == 0xff) {
    if (bits == 0) {
      return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;
    }
 else {
      return NaN;
    }
  }
  if (exp == 0) {
    exp=1;
    while ((bits & 0x800000) == 0) {
      bits<<=1;
      exp--;
    }
    bits&=0x7fffff;
  }
  long bits64=negative ? 0x8000000000000000L : 0x0L;
  bits64|=((long)(exp + 896)) << 52;
  bits64|=((long)bits) << 29;
  return (float)Double.longBitsToDouble(bits64);
}
