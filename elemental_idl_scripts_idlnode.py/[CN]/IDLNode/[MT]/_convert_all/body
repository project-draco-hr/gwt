def _convert_all(self, ast, label, idlnode_ctor):
    'Converts AST elements into IDLNode elements.\n    Uses _find_all to find elements with a given label and converts\n    them into IDLNodes with a given constructor.\n    Returns:\n      A list of the converted nodes.\n    Args:\n      ast -- the ast element to start a search at.\n      label -- the element label to look for.\n      idlnode_ctor -- a constructor function of one of the IDLNode\n        sub-classes.\n    '
    res = []
    found = self._find_all(ast, label)
    if (not found):
        return res
    if (not isinstance(found, list)):
        raise RuntimeError(('Expected list but %s found' % type(found)))
    for childAst in found:
        converted = idlnode_ctor(childAst)
        res.append(converted)
    return res
