{
  Set<String> examinedModuleRefs=new HashSet<String>();
  PrintStream missingDepsStream=null;
  if (missingDepsFile != null) {
    try {
      missingDepsStream=new PrintStream(missingDepsFile);
    }
 catch (    FileNotFoundException e) {
      logger.log(TreeLogger.WARN,"Failed to open missing deps file " + missingDepsFile);
    }
  }
  for (  TypeRef recordedTypeRef : recordedTypeRefs) {
    Collection<String> fromModuleNames=depsInfoProvider.getSourceModuleNames(recordedTypeRef.fromTypeSourceName);
    List<String> toModuleNames=Lists.newArrayList(depsInfoProvider.getSourceModuleNames(recordedTypeRef.toTypeSourceName));
    Collections.sort(toModuleNames);
    if (fromModuleNames.isEmpty() || toModuleNames.isEmpty()) {
      continue;
    }
    for (    String fromModuleName : fromModuleNames) {
      String moduleRef=fromModuleName + ":" + toModuleNames;
      if (examinedModuleRefs.contains(moduleRef)) {
        continue;
      }
      examinedModuleRefs.add(moduleRef);
      if (toModuleNames.contains(fromModuleName)) {
        continue;
      }
      if (!Collections.disjoint(depsInfoProvider.getTransitiveDepModuleNames(fromModuleName),toModuleNames)) {
        continue;
      }
      if (warnMissingDeps) {
        logger.log(TreeLogger.WARN,String.format("Type '%s' wants to reference type '%s' but can't because module '%s' " + "has no dependency (neither direct nor transitive) on '%s'.",recordedTypeRef.fromTypeSourceName,recordedTypeRef.toTypeSourceName,fromModuleName,Joiner.on("|").join(toModuleNames)));
      }
      if (missingDepsStream != null) {
        missingDepsStream.printf("%s\t%s\t%s\t%s\t%s\n",fromModuleName,depsInfoProvider.getGwtXmlFilePath(fromModuleName),Joiner.on("|").join(toModuleNames),Joiner.on("|").join(Collections2.transform(toModuleNames,moduleNameToModuleFile)),"Type '" + recordedTypeRef.fromTypeSourceName + "' wants to reference type '"+ recordedTypeRef.toTypeSourceName+ "'.");
      }
    }
  }
  if (missingDepsStream != null) {
    missingDepsStream.close();
  }
}
