{
  assert(!Double.isNaN(valueHigh));
  assert(!Double.isNaN(valueLow));
  assert(!Double.isInfinite(valueHigh));
  assert(!Double.isInfinite(valueLow));
  assert(Math.floor(valueHigh) == valueHigh);
  assert(Math.floor(valueLow) == valueLow);
  valueHigh%=TWO_PWR_64_DBL;
  valueLow%=TWO_PWR_64_DBL;
{
    double diffHigh=valueHigh % TWO_PWR_32_DBL;
    double diffLow=Math.floor(valueLow / TWO_PWR_32_DBL) * TWO_PWR_32_DBL;
    valueHigh=(valueHigh - diffHigh) + diffLow;
    valueLow=(valueLow - diffLow) + diffHigh;
  }
  while (valueLow < LOW_MIN) {
    valueLow+=TWO_PWR_32_DBL;
    valueHigh-=TWO_PWR_32_DBL;
  }
  while (valueLow > LOW_MAX) {
    valueLow-=TWO_PWR_32_DBL;
    valueHigh+=TWO_PWR_32_DBL;
  }
  valueHigh=valueHigh % TWO_PWR_64_DBL;
  while (valueHigh > HIGH_MAX) {
    valueHigh-=TWO_PWR_64_DBL;
  }
  while (valueHigh < HIGH_MIN) {
    valueHigh+=TWO_PWR_64_DBL;
  }
  return createNormalized(valueLow,valueHigh);
}
