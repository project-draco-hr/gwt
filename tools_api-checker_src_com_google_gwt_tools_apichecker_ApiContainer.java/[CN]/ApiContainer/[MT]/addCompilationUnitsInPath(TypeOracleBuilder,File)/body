{
  File[] files=sourcePathEntry.listFiles();
  if (files == null) {
    return;
  }
  for (int i=0; i < files.length; i++) {
    File file=files[i];
    if (file.getName().startsWith(".") || file.getName().equals("CVS")) {
      continue;
    }
    if (isExcludedFile(file.getCanonicalPath())) {
      logger.log(TreeLogger.DEBUG,"not traversing " + file.toURL().toString(),null);
      continue;
    }
    if (file.isFile()) {
      String pkgName=null;
      if (file.getName().endsWith("java")) {
        pkgName=extractPackageNameFromFile(file);
        logger.log(TreeLogger.DEBUG,"pkgName = " + pkgName + ", file = "+ file.toString(),null);
      }
      if (isValidPackage(pkgName,sourcePathEntry.toURL().toString())) {
        URL location=file.toURL();
        CompilationUnitProvider cup=new URLCompilationUnitProvider(location,pkgName);
        logger.log(TreeLogger.DEBUG,"+ to CompilationUnit" + ", location=" + location + ", pkgName="+ pkgName,null);
        builder.addCompilationUnit(cup);
        numFilesCount++;
      }
 else {
        logger.log(TreeLogger.SPAM," not adding file " + file.toURL(),null);
      }
    }
 else {
      addCompilationUnitsInPath(builder,file);
    }
  }
}
