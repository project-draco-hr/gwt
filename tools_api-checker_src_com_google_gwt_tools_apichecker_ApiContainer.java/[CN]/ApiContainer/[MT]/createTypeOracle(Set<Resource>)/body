{
  List<CompilationUnitBuilder> builders=new ArrayList<CompilationUnitBuilder>();
  for (  Resource resource : resources) {
    CompilationUnitBuilder builder=CompilationUnitBuilder.create(resource);
    builders.add(builder);
  }
  List<CompilationUnit> units=JdtCompiler.compile(builders);
  boolean anyError=false;
  TreeLogger branch=logger.branch(TreeLogger.TRACE,"Checking for compile errors");
  for (  CompilationUnit unit : units) {
    CompilationUnitInvalidator.reportErrors(branch,unit);
    anyError|=unit.isError();
  }
  if (anyError) {
    logger.log(TreeLogger.ERROR,"Unable to build typeOracle for " + getName());
    throw new UnableToCompleteException();
  }
  TypeOracleMediator mediator=new TypeOracleMediator();
  mediator.addNewUnits(logger,units);
  logger.log(TreeLogger.INFO,"API " + name + ", Finished with building typeOracle, added "+ units.size()+ " files",null);
  return mediator.getTypeOracle();
}
