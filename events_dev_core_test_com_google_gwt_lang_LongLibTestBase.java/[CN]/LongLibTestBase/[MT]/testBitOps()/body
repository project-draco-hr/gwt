{
{
    final double[] n1=LongLib.fromInt(1234);
    final double[] n2=LongLib.fromInt(9876);
    assertEquals(LongLib.fromInt(1168),LongLib.and(n1,n2));
    assertEquals(LongLib.fromInt(9942),LongLib.or(n1,n2));
    assertEquals(LongLib.fromInt(8774),LongLib.xor(n1,n2));
    assertEquals(LongLib.fromInt(-1235),LongLib.not(n1));
    assertEquals(LongLib.fromInt(-9877),LongLib.not(n2));
  }
{
    final double[] n1=LongLib.fromInt(-1234);
    final double[] n2=LongLib.fromInt(9876);
    assertEquals(LongLib.fromInt(8708),LongLib.and(n1,n2));
    assertEquals(LongLib.fromInt(-66),LongLib.or(n1,n2));
    assertEquals(LongLib.fromInt(-8774),LongLib.xor(n1,n2));
    assertEquals(LongLib.fromInt(1233),LongLib.not(n1));
    assertEquals(LongLib.fromInt(-9877),LongLib.not(n2));
  }
{
    final double[] n1=LongLib.shl(LongLib.fromInt(0x1234),32);
    final double[] n2=LongLib.shl(LongLib.fromInt(0x9876),32);
    assertEquals(LongLib.shl(LongLib.fromInt(0x1034),32),LongLib.and(n1,n2));
    assertEquals(LongLib.shl(LongLib.fromInt(0x9a76),32),LongLib.or(n1,n2));
    assertEquals(LongLib.shl(LongLib.fromInt(0x8a42),32),LongLib.xor(n1,n2));
    assertEquals(longFromBits(0xffffedcb,0xffffffff),LongLib.not(n1));
    assertEquals(longFromBits(0xffff6789,0xffffffff),LongLib.not(n2));
  }
}
