{
  String msg="The development shell servlet received a request for '" + partialPath + "' in module '"+ moduleName+ ".gwt.xml' ";
  logger=logger.branch(TreeLogger.TRACE,msg,null);
  if (autoGenerateResources(request,response,logger,partialPath,moduleName)) {
    return;
  }
  URL foundResource;
  try {
    ModuleDef moduleDef=getModuleDef(logger,moduleName);
    foundResource=moduleDef.findPublicFile(partialPath);
    File moduleDir=new File(getOutputDir(),moduleName);
    if (foundResource == null) {
      File shellDir=new File(moduleDir,GWTShell.GWT_SHELL_PATH);
      File requestedFile=new File(shellDir,partialPath);
      if (requestedFile.exists()) {
        try {
          foundResource=requestedFile.toURI().toURL();
        }
 catch (        MalformedURLException e) {
        }
      }
    }
    if (foundResource == null) {
      File linkerDir=new File(moduleDir,moduleDef.getActiveLinkerNames()[0]);
      File requestedFile=new File(linkerDir,partialPath);
      if (requestedFile.exists()) {
        try {
          foundResource=requestedFile.toURI().toURL();
        }
 catch (        MalformedURLException e) {
        }
      }
    }
    if (foundResource == null) {
      if ("gwt.js".equals(partialPath)) {
        msg="Loading the old 'gwt.js' bootstrap script is no longer supported; please load '" + moduleName + ".nocache.js' directly";
      }
 else {
        msg="Resource not found: " + partialPath + "; "+ "(could a file be missing from the public path or a <servlet> "+ "tag misconfigured in module "+ moduleName+ ".gwt.xml ?)";
      }
      logger.log(TreeLogger.WARN,msg,null);
      throw new UnableToCompleteException();
    }
  }
 catch (  UnableToCompleteException e) {
    sendErrorResponse(response,HttpServletResponse.SC_NOT_FOUND,"Cannot find resource '" + partialPath + "' in the public path of module '"+ moduleName+ "'");
    return;
  }
  String path=foundResource.toExternalForm();
  String mimeType=null;
  try {
    mimeType=getServletContext().getMimeType(path);
  }
 catch (  UnsupportedOperationException e) {
  }
  if (mimeType == null) {
    mimeType=guessMimeType(path);
    msg="Guessed MIME type '" + mimeType + "'";
    logger.log(TreeLogger.TRACE,msg,null);
  }
  maybeIssueXhtmlWarning(logger,mimeType,partialPath);
  long cacheSeconds=getCacheTime(path);
  InputStream is=null;
  try {
    URLConnection conn=foundResource.openConnection();
    long lastModified=conn.getLastModified();
    if (isNotModified(request,lastModified)) {
      response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
      setResponseCacheHeaders(response,cacheSeconds);
      return;
    }
    response.setStatus(HttpServletResponse.SC_OK);
    long now=new Date().getTime();
    response.setHeader(HttpHeaders.DATE,HttpHeaders.toInternetDateFormat(now));
    response.setContentType(mimeType);
    String lastModifiedStr=HttpHeaders.toInternetDateFormat(lastModified);
    response.setHeader(HttpHeaders.LAST_MODIFIED,lastModifiedStr);
    setResponseCacheHeaders(response,cacheSeconds);
    int contentLength=conn.getContentLength();
    if (contentLength >= 0) {
      response.setHeader(HttpHeaders.CONTENT_LENGTH,Integer.toString(contentLength));
    }
    is=foundResource.openStream();
    streamOut(is,response.getOutputStream(),1024 * 8);
  }
  finally {
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException swallowed) {
      }
    }
  }
}
