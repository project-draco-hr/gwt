{
  RuntimeTypeCollectorVisitor visitor=new RuntimeTypeCollectorVisitor();
  visitor.accept(program);
  assignNextId(program.getJavaScriptObject());
  assignNextId(program.getTypeJavaLangObject());
  assignNextId(program.getTypeJavaLangString());
  for (  JType type : visitor.typesRequiringRuntimeIds) {
    assignNextId(type);
  }
  ReplaceRuntimeTypeReferencesVisitor replaceTypeIdsVisitor=new ReplaceRuntimeTypeReferencesVisitor();
  replaceTypeIdsVisitor.accept(program);
  for (  JCastMap castMap : program.getCastMaps()) {
    replaceTypeIdsVisitor.accept(castMap);
  }
  return typeIdLiteralsByType;
}
