{
  response.setStatus(HttpServletResponse.SC_OK);
  PrintWriter writer=response.getWriter();
  MethodName operation=getMethodName(request.getParameter("methodName"));
  try {
    Class<?> classOperation=Class.forName("com.google.gwt.sample.expenses.server.domain." + operation.getClassName());
    Method methodOperation=null;
    for (    Method method : classOperation.getDeclaredMethods()) {
      if (method.getName().equals(operation.getMethodName())) {
        methodOperation=method;
        break;
      }
    }
    if (methodOperation == null) {
      throw new IllegalArgumentException("unable to find " + operation.getMethodName() + " in "+ classOperation);
    }
    if (!Modifier.isStatic(methodOperation.getModifiers())) {
      throw new IllegalArgumentException("the " + methodOperation.getName() + " is not static");
    }
    Map<String,String[]> parameterMap=request.getParameterMap();
    Object args[]=UrlParameterManager.getObjectsFromFragment(parameterMap,methodOperation.getParameterTypes());
    Object resultList=methodOperation.invoke(null,args);
    if (!(resultList instanceof List)) {
      throw new IllegalArgumentException("return value not a list " + resultList);
    }
    JSONArray jsonArray=getJsonArray((List<?>)resultList);
    writer.print(jsonArray.toString());
    writer.flush();
  }
 catch (  ClassNotFoundException e) {
    throw new IllegalArgumentException("unable to load the class: " + operation);
  }
catch (  IllegalAccessException e) {
    throw new IllegalArgumentException(e);
  }
catch (  InvocationTargetException e) {
    throw new IllegalArgumentException(e);
  }
catch (  SecurityException e) {
    throw new IllegalArgumentException(e);
  }
catch (  JSONException e) {
    throw new IllegalArgumentException(e);
  }
catch (  NoSuchMethodException e) {
    throw new IllegalArgumentException(e);
  }
}
