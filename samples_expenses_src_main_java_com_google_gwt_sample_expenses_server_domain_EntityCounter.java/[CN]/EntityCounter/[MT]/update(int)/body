{
  EntityManager em=entityManager();
  String kindName=KIND_NAMES[kind];
  log.info("Updating count for " + kindName);
  EntityCounter oldCounter=getCounter();
  EntityCounter counter=new EntityCounter();
  copy(counter,oldCounter);
  log.info("Starting at getMaxCheckedEmployeeId() = " + counter.getMaxCheckedEmployeeId());
  log.info("Starting at getMaxCheckedExpenseId() = " + counter.getMaxCheckedExpenseId());
  log.info("Starting at getMaxCheckedReportId() = " + counter.getMaxCheckedReportId());
  log.info("Starting at getNumEmployees() = " + counter.getNumEmployees());
  log.info("Starting at getNumExpenses() = " + counter.getNumExpenses());
  log.info("Starting at getNumReports() = " + counter.getNumReports());
  long endTime=System.currentTimeMillis() + 20000;
  EntityTransaction transaction=em.getTransaction();
  transaction.begin();
  try {
    while (System.currentTimeMillis() < endTime) {
      Long min;
switch (kind) {
case KIND_EMPLOYEE:
        min=counter.getMaxCheckedEmployeeId();
      break;
case KIND_EXPENSE:
    min=counter.getMaxCheckedExpenseId();
  break;
case KIND_REPORT:
min=counter.getMaxCheckedReportId();
break;
default :
throw new RuntimeException("kind = " + kind);
}
long mmin=min == null ? 0L : min.longValue();
long mmax=mmin + 1000;
mmin=Math.max(1L,mmin);
String query="select count(o) from " + kindName + " o where id >= "+ mmin+ " and id < "+ mmax;
Number count=(Number)em.createQuery(query).getSingleResult();
long value=count.longValue();
if (value == 0 && DENSE_IDS) {
log.info("Got 0 results between " + mmin + " and "+ mmax);
break;
}
mmin=mmax;
min=Long.valueOf(mmin);
switch (kind) {
case KIND_EMPLOYEE:
counter.setMaxCheckedEmployeeId(min);
Long emp=counter.getNumEmployees();
long totalEmp=(emp == null) ? value : value + emp.longValue();
counter.setNumEmployees(Long.valueOf(totalEmp));
break;
case KIND_EXPENSE:
counter.setMaxCheckedExpenseId(min);
Long exp=counter.getNumExpenses();
long totalExp=(exp == null) ? value : value + exp.longValue();
counter.setNumExpenses(Long.valueOf(totalExp));
break;
case KIND_REPORT:
counter.setMaxCheckedReportId(min);
Long rep=counter.getNumReports();
long totalRep=(rep == null) ? value : value + rep.longValue();
counter.setNumReports(Long.valueOf(totalRep));
break;
default :
throw new RuntimeException("kind = " + kind);
}
}
em.merge(counter);
transaction.commit();
transaction=null;
log.info("Ending at getMaxCheckedEmployeeId() = " + counter.getMaxCheckedEmployeeId());
log.info("Ending at getMaxCheckedExpenseId() = " + counter.getMaxCheckedExpenseId());
log.info("Ending at getMaxCheckedReportId() = " + counter.getMaxCheckedReportId());
log.info("Ending at getNumEmployees() = " + counter.getNumEmployees());
log.info("Ending at getNumExpenses() = " + counter.getNumExpenses());
log.info("Ending at getNumReports() = " + counter.getNumReports());
}
 catch (DeadlineExceededException e) {
if (transaction != null) {
transaction.commit();
transaction=null;
log.info("Ending at getMaxCheckedEmployeeId() = " + counter.getMaxCheckedEmployeeId());
log.info("Ending at getMaxCheckedExpenseId() = " + counter.getMaxCheckedExpenseId());
log.info("Ending at getMaxCheckedReportId() = " + counter.getMaxCheckedReportId());
log.info("Ending at getNumEmployees() = " + counter.getNumEmployees());
log.info("Ending at getNumExpenses() = " + counter.getNumExpenses());
log.info("Ending at getNumReports() = " + counter.getNumReports());
}
}
catch (RuntimeException e) {
log.warning("Got exception " + e.getMessage());
throw e;
}
 finally {
if (transaction != null) {
log.warning("Rolling back transaction");
transaction.rollback();
}
transaction=null;
em.close();
}
long total;
switch (kind) {
case KIND_EMPLOYEE:
total=counter.getNumEmployees();
break;
case KIND_EXPENSE:
total=counter.getNumExpenses();
break;
case KIND_REPORT:
total=counter.getNumReports();
break;
default :
throw new RuntimeException("kind = " + kind);
}
log.info("Returning total = " + total);
return total;
}
