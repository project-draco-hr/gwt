{
  final LoggingRPCTestServiceAsync service=getServiceAsync();
  delayTestFinish(500000);
  GWT.runAsync(LoggingRPCTest.class,new com.google.gwt.core.client.RunAsyncCallback(){
    @Override public void onFailure(    Throwable reason){
    }
    @Override public void onSuccess(){
      try {
        throwException("Runtime Exception");
      }
 catch (      Exception e) {
        service.deobfuscateLogRecord(createLogRealRecord(e),new AsyncCallback<LogRecord>(){
          public void onFailure(          Throwable caught){
            TestSetValidator.rethrowException(caught);
          }
          public void onSuccess(          LogRecord record){
            Throwable thrown=record.getThrown();
            boolean found=false;
            for (            StackTraceElement e : thrown.getStackTrace()) {
              if (e.getFileName().contains("LoggingRPCTest")) {
                if (SourceMapProperty.isDetailedDeobfuscatedStackTraceSupported()) {
                  assertEquals(METHOD_EXCEPTION_LINE,e.getLineNumber());
                }
 else {
                  assertEquals(METHOD_START_LINE,e.getLineNumber());
                }
                String methodName="throwException";
                assertTrue("Method name mismatch, expected = " + methodName + " vs. actual = "+ e.getMethodName(),e.getMethodName().contains(methodName));
                String className="com.google.gwt.user.client.rpc.LoggingRPCTest";
                assertTrue("Class name mismatch, expected = " + className + " actual = "+ e.getClassName(),className.contains(e.getClassName()));
                found=true;
                break;
              }
            }
            assertTrue(found);
            finishTest();
          }
        }
);
      }
    }
  }
);
}
