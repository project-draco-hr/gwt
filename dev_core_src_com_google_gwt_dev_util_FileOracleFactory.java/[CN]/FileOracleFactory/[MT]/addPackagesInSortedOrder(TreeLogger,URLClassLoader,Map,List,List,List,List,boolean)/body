{
  List unsortedUrls=new ArrayList();
  List unsortedPackages=new ArrayList();
  List unsortedFilters=new ArrayList();
  for (Iterator itPkg=packageMap.keySet().iterator(); itPkg.hasNext(); ) {
    String curPkg=(String)itPkg.next();
    FileFilter curFilter=(FileFilter)packageMap.get(curPkg);
    try {
      Enumeration found=cl.findResources(curPkg);
      if (!recordPackages) {
        curPkg="";
      }
      while (found.hasMoreElements()) {
        URL match=(URL)found.nextElement();
        unsortedUrls.add(match);
        unsortedPackages.add(curPkg);
        unsortedFilters.add(curFilter);
      }
    }
 catch (    IOException e) {
      logger.log(TreeLogger.WARN,"Unexpected error searching classpath for " + curPkg,e);
    }
  }
  int c=unsortedUrls.size();
  String[] unsortedUrlStrings=new String[c];
  for (int i=0; i < c; ++i) {
    unsortedUrlStrings[i]=unsortedUrls.get(i).toString();
    if (unsortedUrlStrings[i].startsWith("jar:")) {
      unsortedUrlStrings[i]=unsortedUrlStrings[i].substring(4);
    }
  }
  for (Iterator itCp=classPathUrlList.iterator(); itCp.hasNext(); ) {
    URL curCpUrl=(URL)itCp.next();
    String curUrlString=curCpUrl.toExternalForm();
    for (int i=0; i < c; ++i) {
      if (unsortedUrlStrings[i].startsWith(curUrlString)) {
        sortedUrls.add(unsortedUrls.get(i));
        sortedPackages.add(unsortedPackages.get(i));
        sortedFilters.add(unsortedFilters.get(i));
      }
    }
  }
}
