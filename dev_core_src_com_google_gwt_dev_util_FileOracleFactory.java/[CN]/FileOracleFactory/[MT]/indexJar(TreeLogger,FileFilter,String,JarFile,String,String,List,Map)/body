{
  int prefixCharsToStrip=basePath.length() - pkgBase.length();
  for (Enumeration enumJar=jarFile.entries(); enumJar.hasMoreElements(); ) {
    JarEntry jarEntry=(JarEntry)enumJar.nextElement();
    String jarEntryName=jarEntry.getName();
    if (jarEntryName.startsWith(basePath) && !jarEntry.isDirectory()) {
      String logicalName=jarEntryName.substring(prefixCharsToStrip);
      String physicalUrlString=jarUrl + "!/" + jarEntryName;
      if (logicalToPhysical.containsKey(logicalName)) {
        logger.log(TreeLogger.DEBUG,"Ignoring already-resolved " + logicalName,null);
        continue;
      }
      if (filter != null && !filter.accept(logicalName)) {
        logger.log(TreeLogger.SPAM,"Filtered out " + logicalName,null);
        continue;
      }
      try {
        URL physicalUrl=new URL(physicalUrlString);
        logicalToPhysical.put(logicalName,physicalUrl);
        logicalNames.add(logicalName);
        logger.log(TreeLogger.TRACE,"Found " + logicalName,null);
      }
 catch (      MalformedURLException e) {
        logger.log(TreeLogger.WARN,"Unexpected error resolving " + physicalUrlString,e);
      }
    }
  }
}
