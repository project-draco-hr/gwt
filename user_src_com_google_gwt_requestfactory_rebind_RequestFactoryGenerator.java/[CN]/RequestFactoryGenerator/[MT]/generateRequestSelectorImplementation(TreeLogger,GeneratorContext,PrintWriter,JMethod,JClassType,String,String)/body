{
  JClassType selectorInterface=selectorMethod.getReturnType().isInterface();
  logger=logger.branch(TreeLogger.DEBUG,String.format("Generating implementation of %s",selectorInterface.getName()));
  ClassSourceFileComposerFactory f=new ClassSourceFileComposerFactory(packageName,implName);
  f.addImport(ClientRequestHelper.class.getName());
  f.addImport(RequestDataManager.class.getName());
  f.addImport(mainType.getQualifiedSourceName() + "Impl");
  f.addImplementedInterface(selectorInterface.getQualifiedSourceName());
  SourceWriter sw=f.createSourceWriter(generatorContext,out);
  sw.println();
  sw.println("private final " + mainType.getName() + "Impl factory;");
  sw.println();
  sw.println("public " + implName + "("+ mainType.getName()+ "Impl factory) {");
  sw.indent();
  sw.println("this.factory = factory;");
  sw.outdent();
  sw.println("}");
  sw.println();
  for (  JMethod method : selectorInterface.getOverridableMethods()) {
    JClassType returnType=method.getReturnType().isParameterized().getTypeArgs()[0];
    ensureRecordType(logger,generatorContext,returnType.getPackage().getName(),returnType);
    String operationName=selectorInterface.getQualifiedBinaryName() + ReflectionBasedOperationRegistry.SCOPE_SEPARATOR + method.getName();
    JClassType requestType=method.getReturnType().isClassOrInterface();
    String requestClassName=null;
    TypeOracle typeOracle=generatorContext.getTypeOracle();
    if (isRecordListRequest(typeOracle,requestType)) {
      requestClassName=asInnerImplClass("ListRequestImpl",returnType);
    }
 else     if (isRecordRequest(typeOracle,requestType)) {
      requestClassName=asInnerImplClass("ObjectRequestImpl",returnType);
    }
 else     if (isLongRequest(typeOracle,requestType)) {
      requestClassName=AbstractLongRequest.class.getName();
    }
 else     if (isIntegerRequest(typeOracle,requestType)) {
      requestClassName=AbstractIntegerRequest.class.getName();
    }
 else     if (isDoubleRequest(typeOracle,requestType)) {
      requestClassName=AbstractDoubleRequest.class.getName();
    }
 else     if (isVoidRequest(typeOracle,requestType)) {
      requestClassName=AbstractVoidRequest.class.getName();
    }
 else {
      logger.log(TreeLogger.ERROR,"Return type " + requestType + " is not yet supported");
      throw new UnableToCompleteException();
    }
    sw.println(getMethodDeclaration(method) + " {");
    sw.indent();
    sw.println("return new " + requestClassName + "(factory) {");
    sw.indent();
    sw.println("public String getRequestData() {");
    sw.indent();
    sw.println("return " + ClientRequestHelper.class.getSimpleName() + ".getRequestString("+ RequestDataManager.class.getSimpleName()+ ".getRequestMap(\""+ operationName+ "\", "+ getParametersAsString(method)+ ", null));");
    sw.outdent();
    sw.println("}");
    sw.outdent();
    sw.println("};");
    sw.outdent();
    sw.println("}");
  }
  sw.outdent();
  sw.println("}");
  generatorContext.commit(logger,out);
}
