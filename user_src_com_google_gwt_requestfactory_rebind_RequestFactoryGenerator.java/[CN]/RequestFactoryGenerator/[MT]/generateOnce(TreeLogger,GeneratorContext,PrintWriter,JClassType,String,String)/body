{
  logger=logger.branch(TreeLogger.DEBUG,String.format("Generating implementation of %s",interfaceType.getName()));
  ClassSourceFileComposerFactory f=new ClassSourceFileComposerFactory(packageName,implName);
  f.addImport(HandlerManager.class.getName());
  f.addImport(RequestFactoryJsonImpl.class.getName());
  f.addImport(interfaceType.getQualifiedSourceName());
  f.addImplementedInterface(interfaceType.getName());
  f.setSuperclass(RequestFactoryJsonImpl.class.getSimpleName());
  SourceWriter sw=f.createSourceWriter(generatorContext,out);
  sw.println();
  Set<JClassType> requestSelectors=new LinkedHashSet<JClassType>();
  for (  JMethod methodType : interfaceType.getMethods()) {
    JType returnType=methodType.getReturnType();
    if (null == returnType) {
      logger.log(TreeLogger.ERROR,String.format("Illegal return type for %s. Methods of %s must return interfaces",methodType.getName(),interfaceType.getName()));
      throw new UnableToCompleteException();
    }
    JClassType asInterface=returnType.isInterface();
    if (null == asInterface) {
      logger.log(TreeLogger.ERROR,String.format("Illegal return type for %s. Methods of %s must return interfaces",methodType.getName(),interfaceType.getName()));
      throw new UnableToCompleteException();
    }
    requestSelectors.add(asInterface);
  }
  for (  JClassType requestSelector : requestSelectors) {
    String qualifiedSourceName=requestSelector.getQualifiedSourceName();
    String simpleSourceName=requestSelector.getSimpleSourceName();
    sw.println("public " + qualifiedSourceName + " "+ getMethodName(simpleSourceName)+ "() {");
    sw.indent();
    sw.println("return new " + qualifiedSourceName + "Impl(this);");
    sw.outdent();
    sw.println("}");
    sw.println();
  }
  JClassType recordToTypeInterface=generatorContext.getTypeOracle().findType(RecordToTypeMap.class.getName());
  String recordToTypeMapName=recordToTypeInterface.getName() + "Impl";
  sw.println("public void init(HandlerManager handlerManager) {");
  sw.indent();
  sw.println("super.init(handlerManager, new " + recordToTypeMapName + "());");
  sw.outdent();
  sw.println("}");
  sw.outdent();
  sw.println("}");
  for (  JClassType nestedInterface : requestSelectors) {
    String nestedImplName=nestedInterface.getName() + "Impl";
    String nestedImplPackage=nestedInterface.getPackage().getName();
    PrintWriter pw=generatorContext.tryCreate(logger,nestedImplPackage,nestedImplName);
    if (pw != null) {
      generateRequestSelectorImplementation(logger,generatorContext,pw,nestedInterface,interfaceType,nestedImplPackage,nestedImplName);
    }
  }
  PrintWriter pw=generatorContext.tryCreate(logger,packageName,recordToTypeMapName);
  if (pw != null) {
    generateRecordToTypeMap(logger,generatorContext,pw,recordToTypeInterface,packageName,recordToTypeMapName);
  }
  generatorContext.commit(logger,out);
}
