{
  for (  ContextMethod method : model.getMethods()) {
    PrintWriter pw=context.tryCreate(logger,method.getPackageName(),method.getSimpleSourceName());
    if (pw == null) {
      continue;
    }
    ClassSourceFileComposerFactory factory=new ClassSourceFileComposerFactory(method.getPackageName(),method.getSimpleSourceName());
    factory.setSuperclass(AbstractRequestContext.class.getCanonicalName());
    factory.addImplementedInterface(method.getImplementedInterfaceQualifiedSourceName());
    SourceWriter sw=factory.createSourceWriter(context,pw);
    sw.println("public %s(%s requestFactory) {super(requestFactory);}",method.getSimpleSourceName(),AbstractRequestFactory.class.getCanonicalName());
    for (    RequestMethod request : method.getRequestMethods()) {
      JMethod jmethod=request.getDeclarationMethod();
      String operation=jmethod.getEnclosingType().getQualifiedBinaryName() + "::" + jmethod.getName();
      StringBuilder parameterArray=new StringBuilder();
      StringBuilder parameterDeclaration=new StringBuilder();
      if (request.isInstance()) {
        parameterArray.append(",null");
      }
      for (      JParameter param : jmethod.getParameters()) {
        parameterArray.append(",").append(param.getName());
        parameterDeclaration.append(",final ").append(param.getType().getParameterizedQualifiedSourceName()).append(" ").append(param.getName());
      }
      if (parameterArray.length() > 0) {
        parameterArray.deleteCharAt(0);
      }
      if (parameterDeclaration.length() > 0) {
        parameterDeclaration.deleteCharAt(0);
      }
      sw.println("public %s %s(%s) {",jmethod.getReturnType().getParameterizedQualifiedSourceName(),jmethod.getName(),parameterDeclaration);
      sw.indent();
      sw.println("class X extends %s<%s> implements %s {",AbstractRequest.class.getCanonicalName(),request.getDataType().getParameterizedQualifiedSourceName(),jmethod.getReturnType().getParameterizedQualifiedSourceName());
      sw.indent();
      sw.println("public X() { super(%s.this);}",method.getSimpleSourceName());
      sw.println("@Override public X with(String... paths) {super.with(paths); return this;}");
      sw.println("@Override protected %s makeRequestData() {",RequestData.class.getCanonicalName());
      sw.indentln("return new %s(\"%s\", new Object[] {%s}, propertyRefs);",RequestData.class.getCanonicalName(),operation,parameterArray);
      sw.println("}");
      sw.println("@Override protected void handleResult(Object obj) {");
      sw.indent();
      sw.println("Object decoded;");
      if (request.isCollectionType()) {
        Class<?> collectionType=request.getCollectionType().equals(CollectionType.LIST) ? ArrayList.class : HashSet.class;
        sw.println("decoded = new %s();",collectionType.getCanonicalName());
        String decodeMethod=request.isValueType() ? "decodeReturnValueList" : "decodeReturnObjectList";
        sw.println("%s(%s.class, obj, (%s)decoded);",decodeMethod,request.getCollectionElementType().getQualifiedSourceName(),collectionType.getCanonicalName());
      }
 else       if (request.isValueType()) {
        sw.println("decoded = %s.convertFromString(%s.class, String.valueOf(obj));",ValueCodex.class.getCanonicalName(),request.getDataType().getQualifiedSourceName());
      }
 else       if (request.isEntityType()) {
        sw.println("decoded = decodeReturnObject(%s.class, obj);",request.getEntityType().getQualifiedSourceName());
      }
 else {
        sw.println("throw new UnsupportedOperationException()");
      }
      sw.println("succeed((%s) decoded);",request.getDataType().getParameterizedQualifiedSourceName());
      sw.outdent();
      sw.println("}");
      sw.outdent();
      sw.println("}");
      sw.println("X x = new X();");
      if (!request.isInstance()) {
        sw.println("addInvocation(x);");
      }
      sw.println("return x;");
      sw.outdent();
      sw.println("}");
    }
    sw.commit(logger);
  }
}
