{
  logger=logger.branch(TreeLogger.DEBUG,String.format("Generating implementation of %s",interfaceType.getName()));
  ClassSourceFileComposerFactory f=new ClassSourceFileComposerFactory(packageName,implName);
  f.addImport(interfaceType.getQualifiedSourceName());
  f.addImport(Record.class.getName());
  f.addImport(RecordSchema.class.getName());
  f.addImport(interfaceType.getQualifiedSourceName());
  f.addImplementedInterface(interfaceType.getName());
  f.addImplementedInterface(interfaceType.getName());
  SourceWriter sw=f.createSourceWriter(generatorContext,out);
  sw.println();
  sw.println("public RecordSchema<? extends Record> getType(Class token) {");
  sw.indent();
  for (  JClassType publicRecordType : generatedRecordTypes) {
    String qualifiedSourceName=publicRecordType.getQualifiedSourceName();
    sw.println("if (token == " + qualifiedSourceName + ".class) {");
    sw.indent();
    sw.println("return " + qualifiedSourceName + "Impl.SCHEMA;");
    sw.outdent();
    sw.println("}");
  }
  sw.println("throw new IllegalArgumentException(\"Unknown token \" + token + ");
  sw.indent();
  sw.println("\", does not match any of the TOKEN vairables of a Record\");");
  sw.outdent();
  sw.outdent();
  sw.println("}");
  sw.outdent();
  sw.println("}");
  generatorContext.commit(logger,out);
}
