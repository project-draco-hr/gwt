{
  sw.println(String.format("public static class MySchema extends ProxySchema<%s> {",proxyImplTypeName));
  sw.indent();
  sw.println("private final Set<Property<?>> allProperties;");
  sw.println("{");
  sw.indent();
  sw.println("Set<Property<?>> set = new HashSet<Property<?>>();");
  sw.println("set.addAll(super.allProperties());");
  JClassType propertyType;
  try {
    propertyType=typeOracle.getType(Property.class.getName());
  }
 catch (  NotFoundException e) {
    throw new RuntimeException(e);
  }
  for (  JField field : publicProxyType.getFields()) {
    if (propertyType.getErasedType() == field.getType().getErasedType()) {
      sw.println(String.format("set.add(%s);",field.getName()));
    }
  }
  sw.println("allProperties = Collections.unmodifiableSet(set);");
  sw.outdent();
  sw.println("}");
  sw.println();
  sw.println("public Set<Property<?>> allProperties() {");
  sw.indent();
  sw.println("return allProperties;");
  sw.outdent();
  sw.println("}");
  sw.println();
  sw.println("public MySchema() {");
  sw.indent();
  sw.println("super(\"" + publicProxyType.getQualifiedSourceName() + "\");");
  sw.outdent();
  sw.println("}");
  sw.println();
  sw.println("@Override");
  sw.println(String.format("public %s create(ProxyJsoImpl jso, boolean isFuture) {",proxyImplTypeName));
  sw.indent();
  sw.println(String.format("return new %s(jso, isFuture);",proxyImplTypeName));
  sw.outdent();
  sw.println("}");
  sw.println();
  sw.println("@Override");
  sw.println(String.format("public %s createChangeEvent(EntityProxy proxy, WriteOperation writeOperation) {",eventType.getName()));
  sw.indent();
  sw.println(String.format("return new %s((%s) proxy, writeOperation);",eventType.getName(),publicProxyType.getName()));
  sw.outdent();
  sw.println("}");
  sw.println();
  sw.println("public Class getProxyClass() {");
  sw.indent();
  sw.println("return " + publicProxyType.getQualifiedSourceName() + ".class;"+ " // special field");
  sw.outdent();
  sw.println("}");
  sw.outdent();
  sw.println("}");
  return propertyType;
}
