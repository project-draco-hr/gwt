{
  TypeOracle typeOracle=generatorContext.getTypeOracle();
  if (!publicProxyType.isAssignableTo(entityProxyType)) {
    return;
  }
  if (publicProxyType.equals(entityProxyType)) {
    return;
  }
  if (generatedProxyTypes.contains(publicProxyType)) {
    return;
  }
  String proxyImplTypeName=publicProxyType.getName() + "Impl";
  PrintWriter pw=generatorContext.tryCreate(logger,packageName,proxyImplTypeName);
  Set<JClassType> transitiveDeps=new LinkedHashSet<JClassType>();
  if (pw != null) {
    logger=logger.branch(TreeLogger.DEBUG,"Generating " + publicProxyType.getName());
    ClassSourceFileComposerFactory f=new ClassSourceFileComposerFactory(packageName,proxyImplTypeName);
    f.addImport(AbstractJsonProxySetRequest.class.getName());
    f.addImport(AbstractJsonProxyListRequest.class.getName());
    f.addImport(AbstractJsonValueListRequest.class.getName());
    f.addImport(AbstractJsonObjectRequest.class.getName());
    f.addImport(RequestFactoryJsonImpl.class.getName());
    f.addImport(Property.class.getName());
    f.addImport(EnumProperty.class.getName());
    f.addImport(CollectionProperty.class.getName());
    f.addImport(EntityProxy.class.getName());
    f.addImport(ProxyImpl.class.getName());
    f.addImport(ProxyJsoImpl.class.getName());
    f.addImport(ProxySchema.class.getName());
    f.addImport(WriteOperation.class.getName().replace("$","."));
    f.addImport(Collections.class.getName());
    f.addImport(HashSet.class.getName());
    f.addImport(Set.class.getName());
    f.setSuperclass(ProxyImpl.class.getSimpleName());
    f.addImplementedInterface(publicProxyType.getName());
    List<EntityProperty> entityProperties=computeEntityPropertiesFromProxyType(publicProxyType);
    for (    EntityProperty entityProperty : entityProperties) {
      JType type=entityProperty.getType();
      if (type.isPrimitive() == null) {
        f.addImport(type.getErasedType().getQualifiedSourceName());
      }
    }
    SourceWriter sw=f.createSourceWriter(generatorContext,pw);
    sw.println();
    for (    EntityProperty entityProperty : entityProperties) {
      sw.println();
      String name=entityProperty.getName();
      if (entityProperty.getType().isEnum() != null) {
        sw.println(String.format("private static final Property<%1$s> %2$s = new EnumProperty<%1$s>(\"%2$s\", %1$s.class, %1$s.values());",entityProperty.getType().getSimpleSourceName(),name));
      }
 else       if (isCollection(typeOracle,entityProperty.getType())) {
        sw.println(String.format("private static final Property<%1$s> %2$s = new CollectionProperty<%1$s, %3$s>(\"%2$s\", %1$s.class, %3$s.class);",entityProperty.getType().getSimpleSourceName(),name,entityProperty.getType().isParameterized().getTypeArgs()[0].getQualifiedSourceName()));
      }
 else {
        sw.println(String.format("private static final Property<%1$s> %2$s = new Property<%1$s>(\"%2$s\", \"%3$s\", %1$s.class);",entityProperty.getType().getSimpleSourceName(),name,capitalize(name)));
      }
    }
    printSchema(typeOracle,publicProxyType,proxyImplTypeName,sw);
    sw.println();
    String simpleImplName=publicProxyType.getSimpleSourceName() + "Impl";
    printRequestImplClass(sw,publicProxyType,simpleImplName,CollectionType.LIST);
    printRequestImplClass(sw,publicProxyType,simpleImplName,CollectionType.SET);
    printRequestImplClass(sw,publicProxyType,simpleImplName,CollectionType.SCALAR);
    sw.println();
    sw.println(String.format("public static final ProxySchema<%s> SCHEMA = new MySchema();",proxyImplTypeName));
    sw.println();
    sw.println(String.format("private %s(ProxyJsoImpl jso, boolean isFuture) {",proxyImplTypeName));
    sw.indent();
    sw.println("super(jso, isFuture);");
    sw.outdent();
    sw.println("}");
    for (    EntityProperty entityProperty : entityProperties) {
      JClassType returnType=entityProperty.getType().isClassOrInterface();
      String returnTypeString=returnType.getQualifiedSourceName();
      JClassType collectionType=returnType.isClassOrInterface();
      if (collectionType != null && collectionType.isParameterized() != null) {
        returnType=collectionType.isParameterized().getTypeArgs()[0];
        returnTypeString=collectionType.isParameterized().getParameterizedQualifiedSourceName();
      }
      sw.println();
      sw.println(String.format("public %s get%s() {",returnTypeString,capitalize(entityProperty.getName())));
      sw.indent();
      sw.println(String.format("return get(%s);",entityProperty.getName()));
      sw.outdent();
      sw.println("}");
      sw.println();
      String varName=entityProperty.getName();
      sw.println(String.format("public void set%s(%s %s) {",capitalize(varName),returnTypeString,varName));
      sw.indent();
      sw.println(String.format("set(this.%s, this, %s);",varName,varName));
      sw.outdent();
      sw.println("}");
      if (isProxyType(typeOracle,returnType)) {
        transitiveDeps.add(returnType);
      }
    }
    sw.outdent();
    sw.println("}");
    generatorContext.commit(logger,pw);
  }
  generatedProxyTypes.add(publicProxyType);
  for (  JClassType type : transitiveDeps) {
    ensureProxyType(logger,generatorContext,type.getPackage().getName(),type);
  }
}
