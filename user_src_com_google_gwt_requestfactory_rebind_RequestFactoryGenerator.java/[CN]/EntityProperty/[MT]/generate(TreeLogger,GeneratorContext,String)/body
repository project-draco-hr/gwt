{
  TypeOracle typeOracle=generatorContext.getTypeOracle();
  listType=typeOracle.findType(List.class.getName());
  setType=typeOracle.findType(Set.class.getName());
  entityProxyType=typeOracle.findType(EntityProxy.class.getName());
  findRequestType=typeOracle.findType(FindRequest.class.getName());
  for (  Class<?> type : TypeLibrary.VALUE_TYPES) {
    allowedTypes.add(typeOracle.findType(type.getName()));
  }
  allowedTypes.add(JPrimitiveType.VOID);
  allowedTypes.add(typeOracle.findType("java.lang.Void"));
  allowedTypes.add(listType.getErasedType());
  allowedTypes.add(setType.getErasedType());
  allowedTypes.add(entityProxyType.getErasedType());
  allowedTypes.add(typeOracle.findType(EntityProxyId.class.getName()).getErasedType());
  allowedRequestParamTypes.addAll(allowedTypes);
  allowedRequestParamTypes.add(JPrimitiveType.INT);
  allowedRequestParamTypes.add(JPrimitiveType.BYTE);
  allowedRequestParamTypes.add(JPrimitiveType.DOUBLE);
  allowedRequestParamTypes.add(JPrimitiveType.FLOAT);
  allowedRequestParamTypes.add(JPrimitiveType.LONG);
  allowedRequestParamTypes.add(JPrimitiveType.SHORT);
  allowedRequestParamTypes.add(JPrimitiveType.INT);
  allowedRequestParamTypes.add(JPrimitiveType.CHAR);
  mainRequestType=typeOracle.findType(Request.class.getName());
  JClassType interfaceType=typeOracle.findType(interfaceName);
  if (interfaceType == null) {
    logger.log(TreeLogger.ERROR,"Could not find requested typeName: " + interfaceName);
    throw new UnableToCompleteException();
  }
  if (interfaceType.isInterface() == null) {
    logger.log(TreeLogger.ERROR,interfaceType.getQualifiedSourceName() + " is not an interface.",null);
    throw new UnableToCompleteException();
  }
  String packageName=interfaceType.getPackage().getName();
  String implName=interfaceType.getName().replace('.','_') + "Impl";
  PrintWriter out=generatorContext.tryCreate(logger,packageName,implName);
  if (out != null) {
    generateOnce(typeOracle.findType(RequestFactory.class.getCanonicalName()),logger,generatorContext,out,interfaceType,packageName,implName);
  }
  return packageName + "." + implName;
}
