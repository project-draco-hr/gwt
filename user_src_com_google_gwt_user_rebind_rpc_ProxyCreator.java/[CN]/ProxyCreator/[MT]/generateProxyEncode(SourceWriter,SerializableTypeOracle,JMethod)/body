{
  String methodName=method.getName();
  JParameter[] params=method.getParameters();
  w.println();
  w.print("private void __" + methodName + "("+ ClientSerializationStreamWriter.class.getName()+ " streamWriter");
  for (int i=0; i < params.length; i++) {
    JParameter param=params[i];
    w.print(", " + getJavaTypeName(param.getType()) + " "+ param.getName());
  }
  w.println(") throws " + SerializationException.class.getName() + " {");
  w.indent();
  w.println("if (getServiceEntryPoint() == null)");
  String className=NoServiceEntryPointSpecifiedException.class.getName();
  className=className.replace('$','.');
  w.indentln("throw new " + className + "();");
  w.println("streamWriter.prepareToWrite();");
  if (!shouldEnforceTypeVersioning()) {
    w.println("streamWriter.addFlags(" + ClientSerializationStreamReader.class.getName() + ".SERIALIZATION_STREAM_FLAGS_NO_TYPE_VERSIONING);");
  }
  JClassType remoteService=method.getEnclosingType();
  String remoteServiceBinaryName=serializableTypeOracle.getSerializedTypeName(remoteService);
  w.println("streamWriter.writeString(\"" + remoteServiceBinaryName + "\");");
  w.println("streamWriter.writeString(\"" + methodName + "\");");
  w.println("streamWriter.writeInt(" + params.length + ");");
  for (int i=0; i < params.length; ++i) {
    JParameter param=params[i];
    w.println("streamWriter.writeString(\"" + serializableTypeOracle.getSerializedTypeName(param.getType()) + "\");");
  }
  for (int i=0; i < params.length; i++) {
    JParameter param=params[i];
    generateEncodeCall(w,param);
  }
  w.outdent();
  w.println("}");
}
