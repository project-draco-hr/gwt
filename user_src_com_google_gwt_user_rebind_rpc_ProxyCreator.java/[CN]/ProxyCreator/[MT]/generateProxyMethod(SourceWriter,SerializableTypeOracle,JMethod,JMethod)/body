{
  w.println();
  JType asyncReturnType=asyncMethod.getReturnType();
  w.print("public ");
  w.print(asyncReturnType.getQualifiedSourceName());
  w.print(" ");
  w.print(asyncMethod.getName() + "(");
  boolean needsComma=false;
  boolean needsTryCatchBlock=false;
  NameFactory nameFactory=new NameFactory();
  JParameter[] asyncParams=asyncMethod.getParameters();
  for (int i=0; i < asyncParams.length; ++i) {
    JParameter param=asyncParams[i];
    if (needsComma) {
      w.print(", ");
    }
 else {
      needsComma=true;
    }
    JType paramType=param.getType();
    if (i < asyncParams.length - 1 && paramType.isPrimitive() == null && !paramType.getQualifiedSourceName().equals(String.class.getCanonicalName())) {
      needsTryCatchBlock=true;
    }
    w.print(paramType.getParameterizedQualifiedSourceName());
    w.print(" ");
    String paramName=param.getName();
    nameFactory.addName(paramName);
    w.print(paramName);
  }
  w.println(") {");
  w.indent();
  w.println("long requestId = getNextRequestId();");
  String statsMethodExpr=getProxySimpleName() + "." + syncMethod.getName()+ ":\" + getRequestId() + \"";
  w.println("boolean toss = isStatsAvailable() && stats(\"" + statsMethodExpr + ":requestStart\", timeStat(\""+ statsMethodExpr+ "\", getRequestId()));");
  w.print(ClientSerializationStreamWriter.class.getSimpleName());
  w.print(" ");
  String streamWriterName=nameFactory.createName("streamWriter");
  w.println(streamWriterName + " = createStreamWriter();");
  w.println("// createStreamWriter() prepared the stream");
  w.println(streamWriterName + ".writeString(REMOTE_SERVICE_INTERFACE_NAME);");
  if (needsTryCatchBlock) {
    w.println("try {");
    w.indent();
  }
  if (!shouldEnforceTypeVersioning()) {
    w.println(streamWriterName + ".addFlags(" + ClientSerializationStreamReader.class.getName()+ ".SERIALIZATION_STREAM_FLAGS_NO_TYPE_VERSIONING);");
  }
  w.println(streamWriterName + ".writeString(\"" + syncMethod.getName()+ "\");");
  JParameter[] syncParams=syncMethod.getParameters();
  w.println(streamWriterName + ".writeInt(" + syncParams.length+ ");");
  for (  JParameter param : syncParams) {
    w.println(streamWriterName + ".writeString(\"" + serializableTypeOracle.getSerializedTypeName(param.getType())+ "\");");
  }
  for (int i=0; i < asyncParams.length - 1; ++i) {
    JParameter asyncParam=asyncParams[i];
    w.print(streamWriterName + ".");
    w.print(Shared.getStreamWriteMethodNameFor(asyncParam.getType()));
    w.println("(" + asyncParam.getName() + ");");
  }
  JParameter callbackParam=asyncParams[asyncParams.length - 1];
  String callbackName=callbackParam.getName();
  if (needsTryCatchBlock) {
    w.outdent();
    w.print("} catch (SerializationException ");
    String exceptionName=nameFactory.createName("ex");
    w.println(exceptionName + ") {");
    w.indent();
    w.println(callbackName + ".onFailure(" + exceptionName+ ");");
    w.outdent();
    w.println("}");
  }
  w.println();
  if (asyncReturnType != JPrimitiveType.VOID) {
    w.print("return ");
  }
  w.println("String payload = " + streamWriterName + ".toString();");
  w.println("boolean toss2 = isStatsAvailable() && stats(\"" + statsMethodExpr + ":requestSerialized\", timeStat(\""+ statsMethodExpr+ "\", getRequestId()));");
  w.print("doInvoke(");
  JType returnType=syncMethod.getReturnType();
  w.print("ResponseReader." + getResponseReaderFor(returnType).name());
  w.print(", \"" + statsMethodExpr + "\", getRequestId(), payload, ");
  w.println(callbackName + ");");
  w.outdent();
  w.println("}");
}
