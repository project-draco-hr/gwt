{
  TypeOracle typeOracle=context.getTypeOracle();
  JClassType serviceAsync=typeOracle.findType(serviceIntf.getQualifiedSourceName() + "Async");
  if (serviceAsync == null) {
    logger.branch(TreeLogger.ERROR,"Could not find an asynchronous version for the service interface " + serviceIntf.getQualifiedSourceName(),null);
    RemoteServiceAsyncValidator.logValidAsyncInterfaceDeclaration(logger,serviceIntf);
    throw new UnableToCompleteException();
  }
  SourceWriter srcWriter=getSourceWriter(logger,context,serviceAsync);
  if (srcWriter == null) {
    return getProxyQualifiedName();
  }
  RemoteServiceAsyncValidator rsav=new RemoteServiceAsyncValidator(logger,typeOracle);
  Map<JMethod,JMethod> syncMethToAsyncMethMap=rsav.validate(logger,serviceIntf,serviceAsync);
  SerializableTypeOracleBuilder typesSentFromBrowserBuilder=new SerializableTypeOracleBuilder(logger,context.getPropertyOracle(),typeOracle);
  SerializableTypeOracleBuilder typesSentToBrowserBuilder=new SerializableTypeOracleBuilder(logger,context.getPropertyOracle(),typeOracle);
  try {
    addRequiredRoots(logger,typeOracle,typesSentFromBrowserBuilder);
    addRequiredRoots(logger,typeOracle,typesSentToBrowserBuilder);
    addRemoteServiceRootTypes(logger,typeOracle,typesSentFromBrowserBuilder,typesSentToBrowserBuilder,serviceIntf);
  }
 catch (  NotFoundException e) {
    logger.log(TreeLogger.ERROR,"",e);
    throw new UnableToCompleteException();
  }
  try {
    elideTypeNames=Boolean.parseBoolean(context.getPropertyOracle().getPropertyValue(logger,TypeSerializerCreator.GWT_ELIDE_TYPE_NAMES_FROM_RPC));
  }
 catch (  BadPropertyValueException e) {
    logger.log(TreeLogger.ERROR,"Configuration property " + TypeSerializerCreator.GWT_ELIDE_TYPE_NAMES_FROM_RPC + " is not defined. Is RemoteService.gwt.xml inherited?");
    throw new UnableToCompleteException();
  }
  OutputStream pathInfo=context.tryCreateResource(logger,serviceIntf.getQualifiedSourceName() + ".rpc.log");
  typesSentFromBrowserBuilder.setLogOutputStream(pathInfo);
  SerializableTypeOracle typesSentFromBrowser=typesSentFromBrowserBuilder.build(logger);
  SerializableTypeOracle typesSentToBrowser=typesSentToBrowserBuilder.build(logger);
  if (pathInfo != null) {
    context.commitResource(logger,pathInfo).setPrivate(true);
  }
  TypeSerializerCreator tsc=new TypeSerializerCreator(logger,typesSentFromBrowser,typesSentToBrowser,context,SerializationUtils.getTypeSerializerQualifiedName(serviceIntf));
  tsc.realize(logger);
  typeStrings=new HashMap<JType,String>(tsc.getTypeStrings());
  typeStrings.put(serviceIntf,TypeNameObfuscator.SERVICE_INTERFACE_ID);
  String serializationPolicyStrongName=writeSerializationPolicyFile(logger,context,typesSentFromBrowser,typesSentToBrowser);
  String remoteServiceInterfaceName=elideTypeNames ? TypeNameObfuscator.SERVICE_INTERFACE_ID : TypeOracleMediator.computeBinaryClassName(serviceIntf);
  generateProxyFields(srcWriter,typesSentFromBrowser,serializationPolicyStrongName,remoteServiceInterfaceName);
  generateProxyContructor(srcWriter);
  generateProxyMethods(srcWriter,typesSentFromBrowser,syncMethToAsyncMethMap);
  if (elideTypeNames) {
    generateStreamWriterOverride(srcWriter);
  }
  srcWriter.commit(logger);
  return getProxyQualifiedName();
}
