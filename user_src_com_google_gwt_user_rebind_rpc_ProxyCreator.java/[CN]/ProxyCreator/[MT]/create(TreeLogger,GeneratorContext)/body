{
  SourceWriter srcWriter=getSourceWriter(logger,context);
  if (srcWriter == null) {
    return getProxyQualifiedName();
  }
  TypeOracle typeOracle=context.getTypeOracle();
  RemoteServiceAsyncValidator rsav=new RemoteServiceAsyncValidator(logger,typeOracle);
  rsav.validateRemoteServiceAsync(logger,serviceIntf);
  SerializableTypeOracleBuilder stob=new SerializableTypeOracleBuilder(logger,typeOracle);
  SerializableTypeOracle sto=stob.build(context.getPropertyOracle(),serviceIntf);
  TypeSerializerCreator tsc=new TypeSerializerCreator(logger,sto,context,serviceIntf);
  tsc.realize(logger);
  enforceTypeVersioning=Shared.shouldEnforceTypeVersioning(logger,context.getPropertyOracle());
  generateProxyFields(srcWriter,sto);
  generateServiceDefTargetImpl(srcWriter);
  generateProxyMethods(srcWriter,sto);
  srcWriter.commit(logger);
  return getProxyQualifiedName();
}
