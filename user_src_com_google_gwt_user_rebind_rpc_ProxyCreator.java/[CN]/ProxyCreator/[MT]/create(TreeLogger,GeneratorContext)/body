{
  TypeOracle typeOracle=context.getTypeOracle();
  TreeLogger javadocAnnotationDeprecationBranch=null;
  if (GenUtil.warnAboutMetadata()) {
    javadocAnnotationDeprecationBranch=logger.branch(TreeLogger.TRACE,"Scanning this RemoteService for deprecated annotations; " + "Please see " + RemoteServiceRelativePath.class.getName() + " for more information.",null);
  }
  JClassType serviceAsync=typeOracle.findType(serviceIntf.getQualifiedSourceName() + "Async");
  if (serviceAsync == null) {
    logger.branch(TreeLogger.ERROR,"Could not find an asynchronous version for the service interface " + serviceIntf.getQualifiedSourceName(),null);
    RemoteServiceAsyncValidator.logValidAsyncInterfaceDeclaration(logger,serviceIntf);
    throw new UnableToCompleteException();
  }
  SourceWriter srcWriter=getSourceWriter(logger,context,serviceAsync);
  if (srcWriter == null) {
    return getProxyQualifiedName();
  }
  RemoteServiceAsyncValidator rsav=new RemoteServiceAsyncValidator(logger,typeOracle);
  Map<JMethod,JMethod> syncMethToAsyncMethMap=rsav.validate(logger,serviceIntf,serviceAsync);
  SerializableTypeOracleBuilder stob=new SerializableTypeOracleBuilder(logger,context.getPropertyOracle(),typeOracle);
  try {
    addRequiredRoots(logger,typeOracle,stob);
    addRemoteServiceRootTypes(logger,typeOracle,stob,serviceIntf);
  }
 catch (  NotFoundException e) {
    logger.log(TreeLogger.ERROR,"",e);
    throw new UnableToCompleteException();
  }
  OutputStream pathInfo=context.tryCreateResource(logger,serviceIntf.getQualifiedSourceName() + ".rpc.log");
  stob.setLogOutputStream(pathInfo);
  SerializableTypeOracle sto=stob.build(logger);
  if (pathInfo != null) {
    context.commitResource(logger,pathInfo).setPrivate(true);
  }
  TypeSerializerCreator tsc=new TypeSerializerCreator(logger,sto,context,sto.getTypeSerializerQualifiedName(serviceIntf));
  tsc.realize(logger);
  enforceTypeVersioning=Shared.shouldEnforceTypeVersioning(logger,context.getPropertyOracle());
  String serializationPolicyStrongName=writeSerializationPolicyFile(logger,context,sto);
  generateProxyFields(srcWriter,sto,serializationPolicyStrongName);
  generateProxyContructor(javadocAnnotationDeprecationBranch,srcWriter);
  generateProxyMethods(srcWriter,sto,syncMethToAsyncMethMap);
  srcWriter.commit(logger);
  return getProxyQualifiedName();
}
