{
  TypeOracle typeOracle=context.getTypeOracle();
  JClassType serviceAsync=typeOracle.findType(serviceIntf.getQualifiedSourceName() + "Async");
  if (serviceAsync == null) {
    logger.branch(TreeLogger.ERROR,"Could not find an asynchronous version for the service interface " + serviceIntf.getQualifiedSourceName(),null);
    RemoteServiceAsyncValidator.logValidAsyncInterfaceDeclaration(logger,serviceIntf);
    throw new UnableToCompleteException();
  }
  SourceWriter srcWriter=getSourceWriter(logger,context,serviceAsync);
  if (srcWriter == null) {
    return getProxyQualifiedName();
  }
  RemoteServiceAsyncValidator rsav=new RemoteServiceAsyncValidator(logger,typeOracle);
  Map<JMethod,JMethod> syncMethToAsyncMethMap=rsav.validate(logger,serviceIntf,serviceAsync);
  final PropertyOracle propertyOracle=context.getPropertyOracle();
  TypeFilter blacklistTypeFilter=new BlacklistTypeFilter(logger,propertyOracle);
  SerializableTypeOracleBuilder typesSentFromBrowserBuilder=new SerializableTypeOracleBuilder(logger,propertyOracle,typeOracle);
  typesSentFromBrowserBuilder.setTypeFilter(blacklistTypeFilter);
  SerializableTypeOracleBuilder typesSentToBrowserBuilder=new SerializableTypeOracleBuilder(logger,propertyOracle,typeOracle);
  typesSentToBrowserBuilder.setTypeFilter(blacklistTypeFilter);
  addRoots(logger,typeOracle,typesSentFromBrowserBuilder,typesSentToBrowserBuilder);
  try {
    ConfigurationProperty prop=context.getPropertyOracle().getConfigurationProperty(TypeSerializerCreator.GWT_ELIDE_TYPE_NAMES_FROM_RPC);
    elideTypeNames=Boolean.parseBoolean(prop.getValues().get(0));
  }
 catch (  BadPropertyValueException e) {
    logger.log(TreeLogger.ERROR,"Configuration property " + TypeSerializerCreator.GWT_ELIDE_TYPE_NAMES_FROM_RPC + " is not defined. Is RemoteService.gwt.xml inherited?");
    throw new UnableToCompleteException();
  }
  OutputStream pathInfo=context.tryCreateResource(logger,serviceIntf.getQualifiedSourceName() + ".rpc.log");
  PrintWriter writer=null;
  SerializableTypeOracle typesSentFromBrowser;
  SerializableTypeOracle typesSentToBrowser;
  try {
    writer=new PrintWriter(pathInfo);
    typesSentFromBrowserBuilder.setLogOutputStream(pathInfo);
    typesSentToBrowserBuilder.setLogOutputStream(pathInfo);
    writer.write("====================================\n");
    writer.write("Types potentially sent from browser:\n");
    writer.write("====================================\n\n");
    writer.flush();
    typesSentFromBrowser=typesSentFromBrowserBuilder.build(logger);
    writer.write("===================================\n");
    writer.write("Types potentially sent from server:\n");
    writer.write("===================================\n\n");
    writer.flush();
    typesSentToBrowser=typesSentToBrowserBuilder.build(logger);
    if (pathInfo != null) {
      context.commitResource(logger,pathInfo).setPrivate(true);
    }
  }
  finally {
    if (writer != null) {
      writer.close();
    }
  }
  generateTypeHandlers(logger,context,typesSentFromBrowser,typesSentToBrowser);
  String serializationPolicyStrongName=writeSerializationPolicyFile(logger,context,typesSentFromBrowser,typesSentToBrowser);
  String remoteServiceInterfaceName=elideTypeNames ? TypeNameObfuscator.SERVICE_INTERFACE_ID : TypeOracleMediator.computeBinaryClassName(serviceIntf);
  generateProxyFields(srcWriter,typesSentFromBrowser,serializationPolicyStrongName,remoteServiceInterfaceName);
  generateProxyContructor(srcWriter);
  generateProxyMethods(srcWriter,typesSentFromBrowser,syncMethToAsyncMethMap);
  if (elideTypeNames) {
    generateStreamWriterOverride(srcWriter);
  }
  srcWriter.commit(logger);
  return getProxyQualifiedName();
}
