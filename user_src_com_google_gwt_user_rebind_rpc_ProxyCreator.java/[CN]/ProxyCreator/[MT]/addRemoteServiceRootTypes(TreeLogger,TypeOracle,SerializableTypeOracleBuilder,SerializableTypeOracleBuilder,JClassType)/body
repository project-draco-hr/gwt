{
  logger=logger.branch(TreeLogger.DEBUG,"Analyzing '" + remoteService.getParameterizedQualifiedSourceName() + "' for serializable types",null);
  JMethod[] methods=remoteService.getOverridableMethods();
  JClassType exceptionClass=typeOracle.getType(Exception.class.getName());
  TreeLogger validationLogger=logger.branch(TreeLogger.DEBUG,"Analyzing methods:",null);
  for (  JMethod method : methods) {
    TreeLogger methodLogger=validationLogger.branch(TreeLogger.DEBUG,method.toString(),null);
    JType returnType=method.getReturnType();
    if (returnType != JPrimitiveType.VOID) {
      TreeLogger returnTypeLogger=methodLogger.branch(TreeLogger.DEBUG,"Return type: " + returnType.getParameterizedQualifiedSourceName(),null);
      typesSentToBrowser.addRootType(returnTypeLogger,returnType);
    }
    JParameter[] params=method.getParameters();
    for (    JParameter param : params) {
      TreeLogger paramLogger=methodLogger.branch(TreeLogger.DEBUG,"Parameter: " + param.toString(),null);
      JType paramType=param.getType();
      typesSentFromBrowser.addRootType(paramLogger,paramType);
    }
    JType[] exs=method.getThrows();
    if (exs.length > 0) {
      TreeLogger throwsLogger=methodLogger.branch(TreeLogger.DEBUG,"Throws:",null);
      for (      JType ex : exs) {
        if (!exceptionClass.isAssignableFrom(ex.isClass())) {
          throwsLogger=throwsLogger.branch(TreeLogger.WARN,"'" + ex.getQualifiedSourceName() + "' is not a checked exception; only checked exceptions may be used",null);
        }
        typesSentToBrowser.addRootType(throwsLogger,ex);
      }
    }
  }
}
