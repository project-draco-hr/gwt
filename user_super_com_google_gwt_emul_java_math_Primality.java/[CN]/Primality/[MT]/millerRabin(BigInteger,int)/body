{
  BigInteger x;
  BigInteger y;
  BigInteger nMinus1=n.subtract(BigInteger.ONE);
  int bitLength=nMinus1.bitLength();
  int k=nMinus1.getLowestSetBit();
  BigInteger q=nMinus1.shiftRight(k);
  Random rnd=new Random();
  for (int i=0; i < t; i++) {
    if (i < primes.length) {
      x=BIprimes[i];
    }
 else {
      do {
        x=new BigInteger(bitLength,rnd);
      }
 while ((x.compareTo(n) >= BigInteger.EQUALS) || (x.sign == 0) || x.isOne());
    }
    y=x.modPow(q,n);
    if (y.isOne() || y.equals(nMinus1)) {
      continue;
    }
    for (int j=1; j < k; j++) {
      if (y.equals(nMinus1)) {
        continue;
      }
      y=y.multiply(y).mod(n);
      if (y.isOne()) {
        return false;
      }
    }
    if (!y.equals(nMinus1)) {
      return false;
    }
  }
  return true;
}
