{
  final String resourceHash="12345";
  final String resourcePath=SerializationPolicyLoader.getSerializationPolicyFileName(resourceHash);
  MockServletConfig mockConfig=new MockServletConfig();
  MockServletContext mockContext=new MockServletContext(){
    public InputStream getResourceAsStream(    String resource){
      if (resourcePath.equals(resource)) {
        try {
          String payLoad=Foo.class.getName() + ",true\n" + Bar.class.getName()+ ",false\n";
          return new ByteArrayInputStream(payLoad.getBytes(SerializationPolicyLoader.SERIALIZATION_POLICY_FILE_ENCODING));
        }
 catch (        UnsupportedEncodingException e) {
          return null;
        }
      }
      return null;
    }
  }
;
  mockConfig.context=mockContext;
  mockContext.config=mockConfig;
  RemoteServiceServlet rss=new RemoteServiceServlet();
  MockHttpServletRequestContextPath mockRequest=new MockHttpServletRequestContextPath();
  rss.init(mockConfig);
  mockRequest.contextPath="/MyModule";
  SerializationPolicy serializationPolicy=rss.doGetSerializationPolicy(mockRequest,"http://www.google.com/MyModule",resourceHash);
  assertNotNull(serializationPolicy);
  assertDeserializeFields(serializationPolicy,Foo.class);
  assertValidDeserialize(serializationPolicy,Foo.class);
  assertDeserializeFields(serializationPolicy,Bar.class);
  assertNotValidDeserialize(serializationPolicy,Bar.class);
  assertNotDeserializeFields(serializationPolicy,Baz.class);
  assertNotValidDeserialize(serializationPolicy,Baz.class);
}
