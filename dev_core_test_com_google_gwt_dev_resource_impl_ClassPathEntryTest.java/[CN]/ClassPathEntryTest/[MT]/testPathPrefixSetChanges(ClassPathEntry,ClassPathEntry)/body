{
  TreeLogger logger=createTestTreeLogger();
{
    PathPrefixSet pps=new PathPrefixSet();
    pps.add(new PathPrefix("com/google/gwt/user/",null));
    pps.add(new PathPrefix("com/google/gwt/i18n/",null));
    Set<AbstractResource> r1=cpe1.findApplicableResources(logger,pps).keySet();
    assertEquals(4,r1.size());
    assertPathIncluded(r1,"com/google/gwt/user/User.gwt.xml");
    assertPathIncluded(r1,"com/google/gwt/user/client/Command.java");
    assertPathIncluded(r1,"com/google/gwt/user/client/Timer.java");
    assertPathIncluded(r1,"com/google/gwt/user/client/ui/Widget.java");
    Set<AbstractResource> r2=cpe2.findApplicableResources(logger,pps).keySet();
    assertEquals(3,r2.size());
    assertPathIncluded(r2,"com/google/gwt/i18n/I18N.gwt.xml");
    assertPathIncluded(r2,"com/google/gwt/i18n/client/Messages.java");
    assertPathIncluded(r2,"com/google/gwt/i18n/rebind/LocalizableGenerator.java");
  }
{
    ResourceFilter excludeXmlFiles=new ResourceFilter(){
      public boolean allows(      String path){
        return !path.endsWith(".xml");
      }
    }
;
    PathPrefixSet pps=new PathPrefixSet();
    pps.add(new PathPrefix("com/google/gwt/user/",excludeXmlFiles));
    pps.add(new PathPrefix("com/google/gwt/i18n/",excludeXmlFiles));
    Set<AbstractResource> r1=cpe1.findApplicableResources(logger,pps).keySet();
    assertEquals(3,r1.size());
    assertPathNotIncluded(r1,"com/google/gwt/user/User.gwt.xml");
    assertPathIncluded(r1,"com/google/gwt/user/client/Command.java");
    assertPathIncluded(r1,"com/google/gwt/user/client/Timer.java");
    assertPathIncluded(r1,"com/google/gwt/user/client/ui/Widget.java");
    Set<AbstractResource> r2=cpe2.findApplicableResources(logger,pps).keySet();
    assertEquals(2,r2.size());
    assertPathNotIncluded(r1,"com/google/gwt/user/User.gwt.xml");
    assertPathIncluded(r2,"com/google/gwt/i18n/client/Messages.java");
    assertPathIncluded(r2,"com/google/gwt/i18n/rebind/LocalizableGenerator.java");
  }
{
    PathPrefixSet pps=new PathPrefixSet();
    pps.add(new PathPrefix("",new ResourceFilter(){
      public boolean allows(      String path){
        return false;
      }
    }
));
    Set<AbstractResource> r1=cpe1.findApplicableResources(logger,pps).keySet();
    assertEquals(0,r1.size());
    Set<AbstractResource> r2=cpe2.findApplicableResources(logger,pps).keySet();
    assertEquals(0,r2.size());
  }
}
