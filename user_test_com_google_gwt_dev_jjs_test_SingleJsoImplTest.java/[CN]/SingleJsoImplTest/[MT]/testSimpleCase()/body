{
{
    JsoSimple asJso=makeSimple();
    assertTrue(asJso instanceof Object);
    assertTrue(asJso instanceof Simple);
    assertEquals("a",asJso.a());
    assertEquals("OK",asJso.a(false));
    try {
      asJso.ex();
      fail("Should have thrown IOException");
    }
 catch (    IOException e) {
    }
    try {
      asJso.rte();
      fail("Should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException e) {
    }
  }
{
    Simple asSimple=makeSimple();
    assertTrue(asSimple instanceof Object);
    assertTrue(asSimple instanceof JavaScriptObject);
    assertTrue(asSimple instanceof JsoSimple);
    assertEquals("a",asSimple.a());
    assertEquals("OK",asSimple.a(false));
    assertEquals("a",((JsoSimple)asSimple).a());
    assertEquals("OK",((JsoSimple)asSimple).a(false));
    try {
      asSimple.ex();
      fail("Should have thrown IOException");
    }
 catch (    IOException e) {
    }
    try {
      asSimple.rte();
      fail("Should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException e) {
    }
  }
{
    Object asObject="Defeat type-tightening";
    assertTrue(asObject instanceof String);
    asObject=makeSimple();
    assertTrue(asObject instanceof Object);
    assertTrue(asObject instanceof JavaScriptObject);
    assertTrue(asObject instanceof JsoSimple);
    assertTrue(asObject instanceof Simple);
    assertEquals("a",((Simple)asObject).a());
    assertEquals("a",((JsoSimple)asObject).a());
    assertEquals("OK",((Simple)asObject).a(false));
    assertEquals("OK",((JsoSimple)asObject).a(false));
    assertTrue(asObject instanceof JsoRandom);
    assertEquals("b",((JsoRandom)asObject).b());
    assertEquals(-1,((JsoRandom)asObject).add(1,1));
  }
{
    Object o="Defeat type-tightening";
    assertTrue(o instanceof String);
    o=new SimpleOnlyJava();
    assertTrue(o instanceof SimpleOnlyJavaInterface);
    assertEquals("simpleOnlyJava",((SimpleOnlyJava)o).simpleOnlyJava());
  }
}
