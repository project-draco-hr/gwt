{
  ensureChildContainer().setInnerHTML(tree.getLoadingHtml());
  ensureAnimationFrame().getStyle().setProperty("display","");
  final SavedInfo<C> localSavedInfo=new SavedInfo<C>();
  localSavedInfo.nodeInfo=nodeInfo;
  localSavedInfo.values=new ArrayList<C>();
  TreeNodeView.this.savedInfo=localSavedInfo;
  final ProvidesKey<C> providesKey=nodeInfo.getProvidesKey();
  ListView<C> view=new ListView<C>(){
    public Range getRange(){
      return new DefaultRange(0,100);
    }
    public void setData(    int start,    int length,    List<C> values){
      int end=start + length;
      while (localSavedInfo.values.size() < end) {
        savedInfo.values.add(null);
      }
      int index=start;
      for (      C childValue : values) {
        localSavedInfo.values.set(index++,childValue);
      }
      Map<Object,TreeNodeView<?>> map=new HashMap<Object,TreeNodeView<?>>();
      if (children != null) {
        for (        TreeNodeView<?> child : children) {
          if (child.getState()) {
            map.put(child.getValueKey(),child);
          }
        }
      }
      if (tree.isAnimationEnabled()) {
        ensureAnimationFrame().getStyle().setDisplay(Display.NONE);
      }
      List<TreeNodeView<?>> savedViews=new ArrayList<TreeNodeView<?>>();
      for (      C childValue : values) {
        TreeNodeView<?> savedView=map.get(providesKey.getKey(childValue));
        if (savedView != null) {
          savedView.getContainer().getFirstChild().removeFromParent();
        }
        savedViews.add(savedView);
      }
      StringBuilder sb=new StringBuilder();
      emitHtml(sb,values,nodeInfo.getHasCells(),savedViews);
      childContainer.setInnerHTML(sb.toString());
      children=new ArrayList<TreeNodeView<?>>();
      Element childElem=childContainer.getFirstChildElement();
      int idx=0;
      for (      C childValue : values) {
        TreeNodeView<C> child=createTreeNodeView(nodeInfo,childElem,childValue,null,idx);
        TreeNodeView<?> savedChild=map.get(providesKey.getKey(childValue));
        if (savedChild != null) {
          child.children=savedChild.children;
          child.childContainer=savedChild.childContainer;
          child.nodeInfo=savedChild.nodeInfo;
          child.nodeInfoLoaded=savedChild.nodeInfoLoaded;
          child.open=savedChild.getState();
          child.getContainer().appendChild(savedChild.childContainer.getParentElement());
        }
        children.add(child);
        childElem=childElem.getNextSiblingElement();
        idx++;
      }
      if (tree.isAnimationEnabled()) {
        tree.maybeAnimateTreeNode(TreeNodeView.this);
      }
    }
    public void setDataSize(    int size,    boolean isExact){
      if (size == 0 && isExact) {
        ensureChildContainer().setInnerHTML("<i>no data</i>");
        if (children != null) {
          for (          TreeNodeView<?> child : children) {
            child.cleanup();
          }
          children=null;
        }
      }
    }
    public void setDelegate(    ListView.Delegate<C> delegate){
    }
  }
;
  nodeInfo.setView(view);
  this.listView=view;
}
