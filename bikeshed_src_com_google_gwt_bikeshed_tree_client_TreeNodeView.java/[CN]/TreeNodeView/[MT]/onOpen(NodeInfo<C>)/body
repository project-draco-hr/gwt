{
  ensureChildContainer().setInnerHTML(tree.getLoadingHtml());
  ensureAnimationFrame().getStyle().setProperty("display","");
  final ProvidesKey<C> providesKey=nodeInfo.getProvidesKey();
  ListView<C> view=new ListView<C>(){
    public Range getRange(){
      return new DefaultRange(0,100);
    }
    public void onDataChanged(    ListEvent<C> event){
      Map<Object,TreeNodeView<?>> map=new HashMap<Object,TreeNodeView<?>>();
      if (children != null) {
        for (        TreeNodeView<?> child : children) {
          if (child.getState()) {
            map.put(child.getValueKey(),child);
          }
        }
      }
      if (tree.isAnimationEnabled()) {
        ensureAnimationFrame().getStyle().setDisplay(Display.NONE);
      }
      List<TreeNodeView<?>> savedViews=new ArrayList<TreeNodeView<?>>();
      for (      C childValue : event.getValues()) {
        TreeNodeView<?> savedView=map.get(providesKey.getKey(childValue));
        if (savedView != null) {
          savedView.getContainer().getFirstChild().removeFromParent();
        }
        savedViews.add(savedView);
      }
      StringBuilder sb=new StringBuilder();
      emitHtml(sb,event.getValues(),nodeInfo.getHasCells(),savedViews);
      childContainer.setInnerHTML(sb.toString());
      children=new ArrayList<TreeNodeView<?>>();
      Element childElem=childContainer.getFirstChildElement();
      int idx=0;
      for (      C childValue : event.getValues()) {
        TreeNodeView<C> child=createTreeNodeView(nodeInfo,childElem,childValue,null,idx);
        TreeNodeView<?> savedChild=map.get(providesKey.getKey(childValue));
        if (savedChild != null) {
          child.children=savedChild.children;
          child.childContainer=savedChild.childContainer;
          child.nodeInfo=savedChild.nodeInfo;
          child.nodeInfoLoaded=savedChild.nodeInfoLoaded;
          child.open=savedChild.getState();
          child.getContainer().appendChild(savedChild.childContainer.getParentElement());
        }
        children.add(child);
        childElem=childElem.getNextSiblingElement();
        idx++;
      }
      if (tree.isAnimationEnabled()) {
        tree.maybeAnimateTreeNode(TreeNodeView.this);
      }
    }
    public void onSizeChanged(    SizeChangeEvent event){
      if (event.getSize() == 0 && event.isExact()) {
        ensureChildContainer().setInnerHTML("<i>no data</i>");
        if (children != null) {
          for (          TreeNodeView<?> child : children) {
            child.cleanup();
          }
          children=null;
        }
      }
    }
    public void setDelegate(    ListView.Delegate<C> delegate){
      if (delegate != null) {
        delegate.onRangeChanged(this);
      }
    }
  }
;
  nodeInfo.setView(view);
  this.listView=view;
}
