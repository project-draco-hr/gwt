{
  set.getTypeIndex().findAssignableTo(ChildA.class);
  SortedSet<RootComparable> subset=set.tailSet(new ChildAChild(4));
  ChildA newlyAdded=new ChildA(5);
  subset.add(new ChildA(5));
  childAs.add(newlyAdded);
  assertEquals(childAs,set.getTypeIndex().findAssignableTo(ChildA.class));
  try {
    subset.add(new ChildA(-1));
    fail("The backing sets should reject this add to the view");
  }
 catch (  IllegalArgumentException ignored) {
  }
  assertEquals(childAs,set.getTypeIndex().findAssignableTo(ChildA.class));
  subset.remove(newlyAdded);
  childAs.remove(newlyAdded);
  assertEquals(childAs,set.getTypeIndex().findAssignableTo(ChildA.class));
  subset.clear();
  assertEquals(new ChildA(2),set.iterator().next());
  assertEquals(new ChildA(2),set.getTypeIndex().findAssignableTo(ChildA.class).iterator().next());
  Iterator<?> iterator=set.iterator();
  iterator.next();
  iterator.remove();
  assertTrue(set.isEmpty());
  assertTrue(set.getTypeIndex().findAssignableTo(RootComparable.class).isEmpty());
}
