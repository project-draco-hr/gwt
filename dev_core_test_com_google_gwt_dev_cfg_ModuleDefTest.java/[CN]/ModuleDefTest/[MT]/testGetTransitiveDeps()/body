{
  ModuleDef module=new ModuleDef("Level1");
  module.addDirectDependency("Level1","Level2Left");
  module.addDirectDependency("Level1","Level2Right");
  module.addDirectDependency("Level2Left","Level3LeftCircular");
{
    module.addDirectDependency("Level3LeftCircular","BranchA");
    module.addDirectDependency("Level3LeftCircular","Level3MiddleCircular");
    module.addDirectDependency("Level3LeftCircular","BranchB");
    module.addDirectDependency("Level3MiddleCircular","BranchC");
    module.addDirectDependency("Level3MiddleCircular","Level3LeftCircular");
    module.addDirectDependency("Level3MiddleCircular","Level3RightCircular");
    module.addDirectDependency("Level3MiddleCircular","BranchD");
    module.addDirectDependency("Level3RightCircular","BranchE");
    module.addDirectDependency("Level3RightCircular","Level3MiddleCircular");
    module.addDirectDependency("Level3RightCircular","BranchF");
  }
  module.addDirectDependency("BranchA","LeafA");
  module.addDirectDependency("BranchB","LeafB");
  module.addDirectDependency("BranchC","LeafC");
  module.addDirectDependency("BranchD","LeafD");
  module.addDirectDependency("BranchE","LeafE");
  module.addDirectDependency("BranchF","LeafF");
  assertEquals(Sets.newHashSet("Level1","Level2Left","Level2Right","Level3LeftCircular","Level3MiddleCircular","Level3RightCircular","BranchA","BranchB","BranchC","BranchD","BranchE","BranchF","LeafA","LeafB","LeafC","LeafD","LeafE","LeafF"),module.getTransitiveDepModuleNames("Level1"));
  assertEquals(Sets.newHashSet("Level2Left","Level3LeftCircular","Level3MiddleCircular","Level3RightCircular","BranchA","BranchB","BranchC","BranchD","BranchE","BranchF","LeafA","LeafB","LeafC","LeafD","LeafE","LeafF"),module.getTransitiveDepModuleNames("Level2Left"));
  assertEquals(Sets.newHashSet("Level2Right"),module.getTransitiveDepModuleNames("Level2Right"));
  assertEquals(Sets.newHashSet("Level3LeftCircular","Level3MiddleCircular","Level3RightCircular","BranchA","BranchB","BranchC","BranchD","BranchE","BranchF","LeafA","LeafB","LeafC","LeafD","LeafE","LeafF"),module.getTransitiveDepModuleNames("Level3LeftCircular"));
  assertEquals(Sets.newHashSet("Level3LeftCircular","Level3MiddleCircular","Level3RightCircular","BranchA","BranchB","BranchC","BranchD","BranchE","BranchF","LeafA","LeafB","LeafC","LeafD","LeafE","LeafF"),module.getTransitiveDepModuleNames("Level3MiddleCircular"));
  assertEquals(Sets.newHashSet("Level3LeftCircular","Level3MiddleCircular","Level3RightCircular","BranchA","BranchB","BranchC","BranchD","BranchE","BranchF","LeafA","LeafB","LeafC","LeafD","LeafE","LeafF"),module.getTransitiveDepModuleNames("Level3RightCircular"));
}
