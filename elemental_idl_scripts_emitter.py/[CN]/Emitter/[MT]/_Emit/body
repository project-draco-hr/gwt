def _Emit(self, template_source, parameters):
    'Implementation of Emit, with map in place of named parameters.'
    template = self._ParseTemplate(template_source)
    parameter_bindings = self._bindings.Extend(parameters)
    hole_names = template._holes
    if hole_names:
        hole_map = {}
        replacements = {}
        for name in hole_names:
            emitter = Emitter(parameter_bindings)
            replacements[name] = emitter._items
            hole_map[name] = emitter
        full_bindings = parameter_bindings.Extend(replacements)
    else:
        full_bindings = parameter_bindings
    self._ApplyTemplate(template, full_bindings)
    if (not hole_names):
        return None
    if (len(hole_names) == 1):
        return hole_map[hole_names[0]]
    else:
        return tuple((hole_map[name] for name in hole_names))
