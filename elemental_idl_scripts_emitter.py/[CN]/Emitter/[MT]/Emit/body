def Emit(self, template_source, **parameters):
    "Emits a template, substituting named parameters and returning emitters to\n    fill the named holes.\n\n    Ordinary substitution occurs at $NAME or $(NAME).  If there is no parameter\n    called NAME, the text is left as-is. So long as you don't bind FOO as a\n    parameter, $FOO in the template will pass through to the generated text.\n\n    Substitution of $?NAME and $(?NAME) yields an empty string if NAME is not a\n    parameter.\n\n    Values passed as named parameters should be strings or simple integral\n    values (int or long).\n\n    Named holes are created at $!NAME or $(!NAME).  A hole marks a position in\n    the template that may be filled in later.  An Emitter is returned for each\n    named hole in the template.  The holes are filled by emitting to the\n    corresponding emitter.\n\n    Emit returns either a single Emitter if the template contains one hole or a\n    tuple of emitters for several holes, in the order that the holes occur in\n    the template.\n\n    The emitters for the holes remember the parameters passed to the initial\n    call to Emit.  Holes can be used to provide a binding context.\n    "
    return self._Emit(template_source, parameters)
