{
  JReferenceType argType=(JReferenceType)x.getExpr().getType();
  JReferenceType toType=x.getTestType();
  assert(toType == toType.getUnderlyingType());
  if (program.typeOracle.canTriviallyCast(argType,toType) || (program.typeOracle.isEffectivelyJavaScriptObject(argType) && program.typeOracle.isEffectivelyJavaScriptObject(toType))) {
    JNullLiteral nullLit=program.getLiteralNull();
    JBinaryOperation eq=new JBinaryOperation(x.getSourceInfo(),program.getTypePrimitiveBoolean(),JBinaryOperator.NEQ,x.getExpr(),nullLit);
    ctx.replaceMe(eq);
  }
 else {
    JMethod method;
    boolean isJsoCast=false;
    if (program.typeOracle.isDualJsoInterface(toType)) {
      method=program.getIndexedMethod("Cast.instanceOfOrJso");
    }
 else     if (program.typeOracle.isEffectivelyJavaScriptObject(toType)) {
      isJsoCast=true;
      method=program.getIndexedMethod("Cast.instanceOfJso");
    }
 else {
      method=program.getIndexedMethod("Cast.instanceOf");
    }
    JMethodCall call=new JMethodCall(x.getSourceInfo(),null,method);
    call.addArg(x.getExpr());
    if (!isJsoCast) {
      JIntLiteral qId=program.getLiteralInt(queryIds.get(toType));
      call.addArg(qId);
    }
    ctx.replaceMe(call);
  }
}
