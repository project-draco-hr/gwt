{
  if (type == null || alreadyRan.contains(type)) {
    return;
  }
  assert(type == type.getUnderlyingType());
  alreadyRan.add(type);
  if (type instanceof JClassType) {
    computeSourceType(((JClassType)type).getSuperClass());
  }
  if (!program.typeOracle.isInstantiatedType(type) || program.isJavaScriptObject(type)) {
    return;
  }
  Set<JsQueryType> castableTypes=new TreeSet<JsQueryType>(JSQUERY_COMPARATOR);
  for (  JReferenceType qType : queriedTypes.keySet()) {
    Set<JReferenceType> querySet=queriedTypes.get(qType);
    if (canTriviallyCastJsoSemantics(type,qType)) {
      for (      JReferenceType argType : querySet) {
        if (canTriviallyCastJsoSemantics(type,argType) || program.isJavaScriptObject(qType)) {
          int queryId=queryIdsByType.get(qType);
          if (queryId > 0) {
            castableTypes.add(new JsQueryType(SourceOrigin.UNKNOWN,qType,queryId));
          }
          break;
        }
      }
    }
  }
  if (castableTypes.isEmpty() && type != program.getTypeJavaLangObject() && type != program.getTypeJavaLangString()) {
    return;
  }
  castableTypesMap.put(type,new JsCastMap(SourceOrigin.UNKNOWN,Lists.create(castableTypes),program.getJavaScriptObject()));
}
