{
  if (type == null || alreadyRan.contains(type)) {
    return;
  }
  assert(type == type.getUnderlyingType());
  alreadyRan.add(type);
  if (type instanceof JClassType) {
    computeSourceType(((JClassType)type).getSuperClass());
  }
  if (!program.typeOracle.isInstantiatedType(type) || program.isJavaScriptObject(type)) {
    return;
  }
  Set<JReferenceType> castableTypes=new TreeSet<JReferenceType>(TYPE_COMPARATOR);
  for (  JReferenceType castTargetType : castSourceTypesPerCastTargetType.keySet()) {
    if (!canTriviallyCastJsoSemantics(type,castTargetType)) {
      continue;
    }
    Collection<JReferenceType> castSourceTypes=castSourceTypesPerCastTargetType.get(castTargetType);
    for (    JReferenceType castSourceType : castSourceTypes) {
      if (canTriviallyCastJsoSemantics(type,castSourceType) || program.isJavaScriptObject(castTargetType)) {
        if (castTargetType != program.getTypeJavaLangObject() && castTargetType != program.getJavaScriptObject()) {
          castableTypes.add(castTargetType);
        }
        break;
      }
    }
  }
  if (castableTypes.isEmpty() && type != program.getTypeJavaLangObject() && type != program.getTypeJavaLangString()) {
    return;
  }
  castableTypesMap.put(type,new JCastMap(SourceOrigin.UNKNOWN,program.getTypeJavaLangObject(),Collections.unmodifiableSet(castableTypes)));
}
