{
  try {
    RPC.decodeRequest(generateGDClassRaw1());
  }
 catch (  Exception e) {
    fail("Unexpected Exception from testNestedGenericClasses (0a): " + e.getMessage());
  }
  try {
    RPC.decodeRequest(generateGDClassRaw2());
  }
 catch (  Exception e) {
    fail("Unexpected Exception from testNestedGenericClasses (0b): " + e.getMessage());
  }
  try {
    RPC.decodeRequest(generateGDClassXSpoofing());
    fail("Expected IncompatibleRemoteServiceException from testNestedGenericClasses (1)");
  }
 catch (  IncompatibleRemoteServiceException e) {
    assertEquals(SerializedTypeViolationException.class,e.getCause().getClass());
    assertTrue(e.getCause().getMessage().matches(".*HashSet.*Integer.*"));
  }
  try {
    RPC.decodeRequest(generateGDClassYSpoofing());
    fail("Expected IncompatibleRemoteServiceException from testNestedGenericClasses (2)");
  }
 catch (  IncompatibleRemoteServiceException e) {
    assertEquals(SerializedTypeViolationException.class,e.getCause().getClass());
    assertTrue(e.getCause().getMessage().matches(".*HashSet.*String.*"));
  }
  try {
    RPC.decodeRequest(generateGEClassXSpoofing());
    fail("Expected IncompatibleRemoteServiceException from testNestedGenericClasses (3)");
  }
 catch (  IncompatibleRemoteServiceException e) {
    assertEquals(SerializedTypeViolationException.class,e.getCause().getClass());
    assertTrue(e.getCause().getMessage().matches(".*HashSet.*Integer.*"));
  }
  try {
    RPC.decodeRequest(generateGEClassYSpoofing());
    fail("Expected IncompatibleRemoteServiceException from testNestedGenericClasses (4)");
  }
 catch (  IncompatibleRemoteServiceException e) {
    assertEquals(SerializedTypeViolationException.class,e.getCause().getClass());
    assertTrue(e.getCause().getMessage().matches(".*HashSet.*String.*"));
  }
  try {
    RPC.decodeRequest(generateHDClassXSpoofing());
    fail("Expected IncompatibleRemoteServiceException from testNestedGenericClasses (5)");
  }
 catch (  IncompatibleRemoteServiceException e) {
    assertEquals(SerializedTypeViolationException.class,e.getCause().getClass());
    assertTrue(e.getCause().getMessage().matches(".*HashSet.*Integer.*"));
  }
  try {
    RPC.decodeRequest(generateHDClassYSpoofing());
    fail("Expected IncompatibleRemoteServiceException from testNestedGenericClasses (6)");
  }
 catch (  IncompatibleRemoteServiceException e) {
    assertEquals(SerializedTypeViolationException.class,e.getCause().getClass());
    assertTrue(e.getCause().getMessage().matches(".*HashSet.*String.*"));
  }
  try {
    RPC.decodeRequest(generateHEClassXSpoofing());
    fail("Expected IncompatibleRemoteServiceException from testNestedGenericClasses (7)");
  }
 catch (  IncompatibleRemoteServiceException e) {
    assertEquals(SerializedTypeViolationException.class,e.getCause().getClass());
    assertTrue(e.getCause().getMessage().matches(".*HashSet.*Integer.*"));
  }
  try {
    RPC.decodeRequest(generateHEClassYSpoofing());
    fail("Expected IncompatibleRemoteServiceException from testNestedGenericClasses (8)");
  }
 catch (  IncompatibleRemoteServiceException e) {
    assertEquals(SerializedTypeViolationException.class,e.getCause().getClass());
    assertTrue(e.getCause().getMessage().matches(".*HashSet.*String.*"));
  }
}
