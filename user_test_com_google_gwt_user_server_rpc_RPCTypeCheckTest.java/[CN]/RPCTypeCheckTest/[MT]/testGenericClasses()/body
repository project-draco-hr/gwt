{
  try {
    RPC.decodeRequest(generateDClassRaw());
  }
 catch (  Exception e) {
    fail("Unexpected assertion from testGenericClasses (1-): " + e.getMessage());
  }
  try {
    RPC.decodeRequest(generateDClassXSpoofing());
    fail("Expected IncompatibleRemoteServiceException from testGenericClasses (1)");
  }
 catch (  IncompatibleRemoteServiceException e) {
    assertEquals(SerializedTypeViolationException.class,e.getCause().getClass());
    assertTrue(e.getCause().getMessage().matches(".*HashSet.*Integer.*"));
  }
  try {
    RPC.decodeRequest(generateDClassYSpoofing());
    fail("Expected IncompatibleRemoteServiceException from testGenericClasses (2)");
  }
 catch (  IncompatibleRemoteServiceException e) {
    assertEquals(SerializedTypeViolationException.class,e.getCause().getClass());
    assertTrue(e.getCause().getMessage().matches(".*HashSet.*String.*"));
  }
  try {
    RPC.decodeRequest(generateEClassXSpoofing());
    fail("Expected IncompatibleRemoteServiceException from testGenericClasses (3)");
  }
 catch (  IncompatibleRemoteServiceException e) {
    assertEquals(SerializedTypeViolationException.class,e.getCause().getClass());
    assertTrue(e.getCause().getMessage().matches(".*HashSet.*String.*"));
  }
  try {
    RPC.decodeRequest(generateEClassYSpoofing());
    fail("Expected IncompatibleRemoteServiceException from testGenericClasses (4)");
  }
 catch (  IncompatibleRemoteServiceException e) {
    assertEquals(SerializedTypeViolationException.class,e.getCause().getClass());
    assertTrue(e.getCause().getMessage().matches(".*HashSet.*Integer.*"));
  }
  try {
    RPC.decodeRequest(generateFClassRaw());
  }
 catch (  Exception e) {
    fail("Unexpected assertion from testGenericClasses (5-): " + e.getMessage());
  }
  try {
    RPC.decodeRequest(generateFClassXSpoofing());
    fail("Expected IncompatibleRemoteServiceException from testGenericClasses (5)");
  }
 catch (  IncompatibleRemoteServiceException e) {
    assertEquals(SerializedTypeViolationException.class,e.getCause().getClass());
    assertTrue(e.getCause().getMessage().matches(".*HashSet.*Integer.*"));
  }
  try {
    RPC.decodeRequest(generateFClassYSpoofing());
    fail("Expected IncompatibleRemoteServiceException from testGenericClasses (6)");
  }
 catch (  IncompatibleRemoteServiceException e) {
    assertEquals(SerializedTypeViolationException.class,e.getCause().getClass());
    assertTrue(e.getCause().getMessage().matches(".*HashSet.*String.*"));
  }
}
