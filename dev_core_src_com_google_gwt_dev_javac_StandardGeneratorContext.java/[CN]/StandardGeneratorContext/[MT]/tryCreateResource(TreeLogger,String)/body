{
  logger=logger.branch(TreeLogger.DEBUG,"Preparing pending output resource '" + partialPath + "'",null);
  if (partialPath == null || partialPath.trim().equals("")) {
    logger.log(TreeLogger.ERROR,"The resource name must be a non-empty string",null);
    throw new UnableToCompleteException();
  }
  if (new File(partialPath).isAbsolute()) {
    logger.log(TreeLogger.ERROR,"Resource paths are intended to be relative to the compiled output directory and cannot be absolute",null);
    throw new UnableToCompleteException();
  }
  if (partialPath.indexOf('\\') >= 0) {
    logger.log(TreeLogger.ERROR,"Resource paths must contain forward slashes (not backslashes) to denote subdirectories",null);
    throw new UnableToCompleteException();
  }
  if (compilerContext.getModule().findPublicFile(partialPath) != null) {
    logger.log(TreeLogger.WARN,"Cannot create resource '" + partialPath + "' because it already exists on the public path",null);
    return null;
  }
  SortedSet<GeneratedResource> resources=allGeneratedArtifacts.find(GeneratedResource.class);
  for (  GeneratedResource resource : resources) {
    if (partialPath.equals(resource.getPartialPath())) {
      return null;
    }
  }
  if (pendingResources.containsKey(partialPath)) {
    logger.log(TreeLogger.WARN,"The file '" + partialPath + "' is already a pending resource",null);
    return null;
  }
  PendingResource pendingResource=new PendingResource(partialPath);
  pendingResources.put(partialPath,pendingResource);
  return pendingResource;
}
