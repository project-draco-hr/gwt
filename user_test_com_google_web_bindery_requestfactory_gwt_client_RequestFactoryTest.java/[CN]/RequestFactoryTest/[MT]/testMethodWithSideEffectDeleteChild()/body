{
  delayTestFinish(DELAY_TEST_FINISH);
  final SimpleFooEventHandler<SimpleFooProxy> fooHandler=new SimpleFooEventHandler<SimpleFooProxy>();
  EntityProxyChange.registerForProxyType(req.getEventBus(),SimpleFooProxy.class,fooHandler);
  final SimpleFooEventHandler<SimpleBarProxy> barHandler=new SimpleFooEventHandler<SimpleBarProxy>();
  EntityProxyChange.registerForProxyType(req.getEventBus(),SimpleBarProxy.class,barHandler);
  SimpleBarRequest context=req.simpleBarRequest();
  final SimpleBarProxy bar=context.create(SimpleBarProxy.class);
  context.persistAndReturnSelf().using(bar).fire(new Receiver<SimpleBarProxy>(){
    @Override public void onSuccess(    SimpleBarProxy persistentBar){
      persistentBar=checkSerialization(persistentBar);
      SimpleFooRequest context=req.simpleFooRequest();
      SimpleFooProxy foo=context.create(SimpleFooProxy.class);
      final Request<SimpleFooProxy> persistRequest=context.persistAndReturnSelf().using(foo).with("barField");
      foo=context.edit(foo);
      foo.setUserName("John");
      foo.setBarField(bar);
      persistRequest.fire(new Receiver<SimpleFooProxy>(){
        @Override public void onSuccess(        SimpleFooProxy persistentFoo){
          persistentFoo=checkSerialization(persistentFoo);
          SimpleFooRequest context=req.simpleFooRequest();
          final Request<Void> deleteRequest=context.deleteBar().using(persistentFoo);
          deleteRequest.fire(new Receiver<Void>(){
            @Override public void onSuccess(            Void response){
              assertEquals(1,fooHandler.persistEventCount);
              assertEquals(2,fooHandler.updateEventCount);
              assertEquals(3,fooHandler.totalEventCount);
              assertEquals(1,barHandler.persistEventCount);
              assertEquals(1,barHandler.updateEventCount);
              assertEquals(1,barHandler.deleteEventCount);
              assertEquals(3,barHandler.totalEventCount);
              finishTestAndReset();
            }
          }
);
        }
      }
);
    }
  }
);
}
