{
  delayTestFinish(DELAY_TEST_FINISH);
  simpleFooRequest().returnValueProxy().fire(new Receiver<SimpleValueProxy>(){
    @Override public void onSuccess(    SimpleValueProxy response){
      final SimpleValueProxy original=checkSerialization(response);
      SimpleFooRequest req=simpleFooRequest();
      final SimpleValueProxy value=req.edit(response);
      value.setShouldBeNull("Hello world");
      SimpleFooProxy foo=req.create(SimpleFooProxy.class);
      foo.setSimpleValue(value);
      req.echo(foo).fire(new Receiver<SimpleFooProxy>(){
        @Override public void onConstraintViolation(        Set<ConstraintViolation<?>> errors){
          assertEquals(1,errors.size());
          ConstraintViolation<?> v=errors.iterator().next();
          assertEquals(value,v.getRootBean());
          assertEquals(value,v.getLeafBean());
          assertEquals("shouldBeNull",v.getPropertyPath().toString());
          super.onConstraintViolation(errors);
        }
        @Override public void onSuccess(        SimpleFooProxy response){
          fail();
        }
        @SuppressWarnings("deprecation") @Override public void onViolation(        Set<com.google.web.bindery.requestfactory.shared.Violation> errors){
          assertEquals(1,errors.size());
          com.google.web.bindery.requestfactory.shared.Violation v=errors.iterator().next();
          assertEquals(value,v.getInvalidProxy());
          assertEquals(original,v.getOriginalProxy());
          assertEquals("shouldBeNull",v.getPath());
          assertNull(v.getProxyId());
          finishTestAndReset();
        }
      }
);
    }
  }
);
}
