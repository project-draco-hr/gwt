{
  LowLevelSaf.pushExecState(execState);
  try {
    Class[] paramTypes=method.getParameterTypes();
    int argc=paramTypes.length;
    Object args[]=new Object[argc];
    if (jsargs.length < argc) {
      throw new RuntimeException("Not enough arguments to " + method);
    }
    Object jthis=null;
    if ((method.getModifiers() & Modifier.STATIC) == 0) {
      jthis=SwtWebKitGlue.convertJSValToObject(method.getDeclaringClass(),jsthis);
    }
    for (int i=0; i < argc; ++i) {
      args[i]=SwtWebKitGlue.convertJSValToObject(paramTypes[i],jsargs[i]);
    }
    try {
      Object result;
      try {
        result=method.invoke(jthis,args);
      }
 catch (      IllegalAccessException e) {
        e.printStackTrace();
        throw new RuntimeException(e);
      }
      return SwtWebKitGlue.convertObjectToJSVal(scriptObject,classLoader,method.getReturnType(),result);
    }
 catch (    InvocationTargetException e) {
      Throwable t=e.getTargetException();
      RuntimeException re;
      if (t instanceof RuntimeException) {
        re=(RuntimeException)t;
      }
 else {
        re=new RuntimeException("Checked exception thrown into JavaScript" + " (Web Mode behavior may differ)",t);
      }
      ModuleSpaceSaf.setThrownJavaException(re);
      LowLevelSaf.raiseJavaScriptException(execState,LowLevelSaf.jsNull());
      return LowLevelSaf.jsUndefined();
    }
  }
  finally {
    LowLevelSaf.popExecState(execState);
  }
}
