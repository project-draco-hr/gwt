{
  StringBuffer sb=new StringBuffer();
  for (int i=0; i < expectedHeaderLines; ++i) {
    sb.append('\n');
  }
  String methodDecl=method.getReadableDeclaration(false,true,false,false,false);
  sb.append(methodDecl + " {");
  JType returnType=method.getReturnType();
  boolean isJavaScriptObject=isJavaScriptObject(returnType);
  JPrimitiveType primType;
  if (isJavaScriptObject) {
    String returnTypeName=returnType.getQualifiedSourceName();
    sb.append("return (" + returnTypeName + ")"+ Jsni.JAVASCRIPTHOST_NAME+ ".invokeNativeHandle");
  }
 else   if (null != (primType=returnType.isPrimitive())) {
    char[] primTypeSuffix=primType.getSimpleSourceName().toCharArray();
    primTypeSuffix[0]=Character.toUpperCase(primTypeSuffix[0]);
    String invokeMethodName="invokeNative" + String.valueOf(primTypeSuffix);
    if (primType != JPrimitiveType.VOID) {
      sb.append("return ");
    }
    sb.append(Jsni.JAVASCRIPTHOST_NAME);
    sb.append(".");
    sb.append(invokeMethodName);
  }
 else   if (returnType == coreTypes.javaLangString) {
    sb.append("return ");
    sb.append(Jsni.JAVASCRIPTHOST_NAME);
    sb.append(".invokeNativeString");
  }
 else {
    String returnTypeName=returnType.getQualifiedSourceName();
    sb.append("return (");
    sb.append(returnTypeName);
    sb.append(")");
    sb.append(Jsni.JAVASCRIPTHOST_NAME);
    sb.append(".invokeNativeObject");
  }
  sb.append("(\"@");
  String jsniSig=Jsni.getJsniSignature(method);
  sb.append(jsniSig);
  if (method.isStatic()) {
    sb.append("\", null, ");
  }
 else {
    sb.append("\", this, ");
  }
  if (isJavaScriptObject) {
    String returnTypeName=returnType.getQualifiedSourceName();
    sb.append(returnTypeName);
    sb.append(".class, ");
  }
  sb.append(Jsni.buildTypeList(method));
  sb.append(',');
  sb.append(Jsni.buildArgList(method));
  sb.append(");}");
  for (int i=0; i < expectedBodyLines; ++i) {
    sb.append('\n');
  }
  return sb.toString();
}
