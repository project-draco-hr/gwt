{
  StringBuffer sb=new StringBuffer();
  String nl=pretty ? "\n " : "";
  if (!pretty) {
    for (int i=0; i < expectedHeaderLines; ++i) {
      sb.append('\n');
    }
  }
  String methodDecl=method.getReadableDeclaration(false,true,false,false,false);
  sb.append(methodDecl + " {" + nl);
  sb.append("try {" + nl);
  JType returnType=method.getReturnType();
  boolean isJavaScriptObject=isJavaScriptObject(returnType);
  JPrimitiveType primType;
  if (isJavaScriptObject) {
    String returnTypeName=returnType.getParameterizedQualifiedSourceName();
    sb.append("return (" + returnTypeName + ")"+ Jsni.JAVASCRIPTHOST_NAME+ ".invokeNativeHandle");
  }
 else   if (null != (primType=returnType.isPrimitive())) {
    char[] primTypeSuffix=primType.getSimpleSourceName().toCharArray();
    primTypeSuffix[0]=Character.toUpperCase(primTypeSuffix[0]);
    String invokeMethodName="invokeNative" + String.valueOf(primTypeSuffix);
    if (primType != JPrimitiveType.VOID) {
      sb.append("return ");
    }
    sb.append(Jsni.JAVASCRIPTHOST_NAME);
    sb.append(".");
    sb.append(invokeMethodName);
  }
 else   if (returnType == coreTypes.javaLangString) {
    sb.append("return ");
    sb.append(Jsni.JAVASCRIPTHOST_NAME);
    sb.append(".invokeNativeString");
  }
 else {
    String returnTypeName=returnType.getParameterizedQualifiedSourceName();
    sb.append("return (");
    sb.append(returnTypeName);
    sb.append(")");
    sb.append(Jsni.JAVASCRIPTHOST_NAME);
    sb.append(".invokeNativeObject");
  }
  sb.append("(\"@");
  String jsniSig=Jsni.getJsniSignature(method);
  sb.append(jsniSig);
  if (method.isStatic()) {
    sb.append("\", null, ");
  }
 else {
    sb.append("\", this, ");
  }
  if (isJavaScriptObject) {
    String returnTypeName=returnType.getErasedType().getQualifiedSourceName();
    sb.append(returnTypeName);
    sb.append(".class, ");
  }
  sb.append(Jsni.buildTypeList(method));
  sb.append(',');
  sb.append(Jsni.buildArgList(method));
  sb.append(");" + nl);
  sb.append("} catch (java.lang.Throwable __gwt_exception) {" + nl);
  sb.append("if (__gwt_exception instanceof java.lang.RuntimeException) throw (java.lang.RuntimeException) __gwt_exception;" + nl);
  JType[] throwTypes=method.getThrows();
  for (int i=0; i < throwTypes.length; ++i) {
    String typeName=throwTypes[i].getQualifiedSourceName();
    sb.append("if (__gwt_exception instanceof " + typeName + ") throw ("+ typeName+ ") __gwt_exception;"+ nl);
  }
  sb.append("throw new java.lang.RuntimeException(\"Undeclared checked exception thrown out of JavaScript; web mode behavior may differ.\", __gwt_exception);" + nl);
  sb.append("}" + nl);
  sb.append("}" + nl);
  if (!pretty) {
    for (int i=0; i < expectedBodyLines; ++i) {
      sb.append('\n');
    }
  }
  return sb.toString();
}
