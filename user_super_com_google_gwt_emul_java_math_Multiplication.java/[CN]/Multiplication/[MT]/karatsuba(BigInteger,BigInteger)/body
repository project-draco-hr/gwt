{
  BigInteger temp;
  if (op2.numberLength > op1.numberLength) {
    temp=op1;
    op1=op2;
    op2=temp;
  }
  if (op2.numberLength < whenUseKaratsuba) {
    return multiplyPAP(op1,op2);
  }
  int ndiv2=(op1.numberLength & 0xFFFFFFFE) << 4;
  BigInteger upperOp1=op1.shiftRight(ndiv2);
  BigInteger upperOp2=op2.shiftRight(ndiv2);
  BigInteger lowerOp1=op1.subtract(upperOp1.shiftLeft(ndiv2));
  BigInteger lowerOp2=op2.subtract(upperOp2.shiftLeft(ndiv2));
  BigInteger upper=karatsuba(upperOp1,upperOp2);
  BigInteger lower=karatsuba(lowerOp1,lowerOp2);
  BigInteger middle=karatsuba(upperOp1.subtract(lowerOp1),lowerOp2.subtract(upperOp2));
  middle=middle.add(upper).add(lower);
  middle=middle.shiftLeft(ndiv2);
  upper=upper.shiftLeft(ndiv2 << 1);
  return upper.add(middle).add(lower);
}
