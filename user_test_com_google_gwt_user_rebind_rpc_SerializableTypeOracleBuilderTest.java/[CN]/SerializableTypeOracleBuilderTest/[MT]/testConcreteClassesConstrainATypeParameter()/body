{
  Set<CompilationUnit> units=new HashSet<CompilationUnit>();
  addStandardClasses(units);
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public abstract class Holder<T extends Serializable> implements Serializable {\n");
    code.append("  T x;\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("Holder",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class StringHolder extends Holder<String> implements Serializable {\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("StringHolder",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class DateHolder extends Holder<Date> implements Serializable {\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("DateHolder",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class Date implements Serializable {\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("Date",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class UnrelatedClass implements Serializable {\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("UnrelatedClass",code));
  }
  TreeLogger logger=createLogger();
  TypeOracle to=TypeOracleTestingUtils.buildTypeOracle(logger,units);
  JGenericType holder=to.getType("Holder").isGenericType();
  JClassType stringHolder=to.getType("StringHolder");
  JClassType dateHolder=to.getType("DateHolder");
  JClassType unrelatedClass=to.getType("UnrelatedClass");
  SerializableTypeOracleBuilder sob=createSerializableTypeOracleBuilder(logger,to);
  sob.addRootType(logger,holder.getRawType());
  SerializableTypeOracle so=sob.build(logger);
  JClassType string=to.getType(String.class.getCanonicalName());
  JClassType date=to.getType("Date");
  assertSerializableTypes(so,holder.getRawType(),stringHolder,dateHolder,string,date);
  assertFieldSerializable(so,holder.getRawType());
  assertInstantiable(so,stringHolder);
  assertInstantiable(so,dateHolder);
  assertInstantiable(so,string);
  assertInstantiable(so,date);
  assertNotInstantiableOrFieldSerializable(so,unrelatedClass);
}
