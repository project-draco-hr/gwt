{
  Set<CompilationUnit> units=new HashSet<CompilationUnit>();
  addStandardClasses(units);
{
    StringBuilder code=new StringBuilder();
    code.append("public class NotSerializable {\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("NotSerializable",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class AutoSerializable {\n");
    code.append("  interface IFoo extends Serializable {};\n");
    code.append("  IFoo createFoo() { return new IFoo(){};}\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("AutoSerializable",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class OuterClass {\n");
    code.append("  static class StaticNested implements Serializable {};\n");
    code.append("  class NonStaticNested implements Serializable {};\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("OuterClass",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public abstract class AbstractSerializableClass implements Serializable {\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("AbstractSerializableClass",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class NonDefaultInstantiableSerializable implements Serializable {\n");
    code.append("  NonDefaultInstantiableSerializable(int i) {}\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("NonDefaultInstantiableSerializable",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class PublicOuterClass {\n");
    code.append("  private static class PrivateStaticInner {\n");
    code.append("    public static class PublicStaticInnerInner implements Serializable {\n");
    code.append("    }\n");
    code.append("  }\n");
    code.append("  static class DefaultStaticInner {\n");
    code.append("    static class DefaultStaticInnerInner implements Serializable {\n");
    code.append("    }\n");
    code.append("  }\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("PublicOuterClass",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("public enum EnumWithSubclasses {\n");
    code.append("  A {\n");
    code.append("    @Override\n");
    code.append("    public String value() {\n");
    code.append("      return \"X\";\n");
    code.append("    }\n");
    code.append("  },\n");
    code.append("  B {\n");
    code.append("    @Override\n");
    code.append("    public String value() {\n");
    code.append("      return \"Y\";\n");
    code.append("    };\n");
    code.append("  };\n");
    code.append("  public abstract String value();\n");
    code.append("};\n");
    units.add(createMockCompilationUnit("EnumWithSubclasses",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("public enum EnumWithNonDefaultCtors {\n");
    code.append("  A(\"X\"), B(\"Y\");\n");
    code.append("  String value;");
    code.append("  private EnumWithNonDefaultCtors(String value) {\n");
    code.append("    this.value = value;\n");
    code.append("  }\n");
    code.append("};\n");
    units.add(createMockCompilationUnit("EnumWithNonDefaultCtors",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("package java.lang;\n");
    code.append("import java.io.Serializable;\n");
    code.append("public class Enum<E extends Enum<E>> implements Serializable {\n");
    code.append("  protected Enum(String name, int ordinal) {\n");
    code.append("  }\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("java.lang.Enum",code));
  }
  TreeLogger logger=createLogger();
  TypeOracle to=TypeOracleTestingUtils.buildTypeOracle(logger,units);
  SerializableTypeOracleBuilder sob=createSerializableTypeOracleBuilder(logger,to);
  JClassType notSerializable=to.getType("NotSerializable");
  ProblemReport problems=new ProblemReport();
  assertFalse(sob.shouldConsiderFieldsForSerialization(notSerializable,problems));
  JClassType iFoo=to.getType("AutoSerializable.IFoo");
  problems=new ProblemReport();
  assertFalse(sob.shouldConsiderFieldsForSerialization(iFoo.getSubtypes()[0],problems));
  JClassType staticNested=to.getType("OuterClass.StaticNested");
  problems=new ProblemReport();
  assertTrue(sob.shouldConsiderFieldsForSerialization(staticNested,problems));
  JClassType nonStaticNested=to.getType("OuterClass.NonStaticNested");
  problems=new ProblemReport();
  assertFalse(sob.shouldConsiderFieldsForSerialization(nonStaticNested,problems));
  JClassType abstractSerializableClass=to.getType("AbstractSerializableClass");
  problems=new ProblemReport();
  assertTrue(sob.shouldConsiderFieldsForSerialization(abstractSerializableClass,problems));
  problems=new ProblemReport();
  assertFalse(SerializableTypeOracleBuilder.canBeInstantiated(abstractSerializableClass,problems));
  JClassType nonDefaultInstantiableSerializable=to.getType("NonDefaultInstantiableSerializable");
  problems=new ProblemReport();
  assertTrue(sob.shouldConsiderFieldsForSerialization(nonDefaultInstantiableSerializable,problems));
  problems=new ProblemReport();
  assertFalse(SerializableTypeOracleBuilder.canBeInstantiated(nonDefaultInstantiableSerializable,problems));
  JClassType publicStaticInnerInner=to.getType("PublicOuterClass.PrivateStaticInner.PublicStaticInnerInner");
  problems=new ProblemReport();
  assertFalse(sob.shouldConsiderFieldsForSerialization(publicStaticInnerInner,problems));
  JClassType defaultStaticInnerInner=to.getType("PublicOuterClass.DefaultStaticInner.DefaultStaticInnerInner");
  problems=new ProblemReport();
  assertTrue(sob.shouldConsiderFieldsForSerialization(defaultStaticInnerInner,problems));
  JClassType enumWithSubclasses=to.getType("EnumWithSubclasses");
  problems=new ProblemReport();
  assertTrue(sob.shouldConsiderFieldsForSerialization(enumWithSubclasses,problems));
  problems=new ProblemReport();
  assertFalse(sob.shouldConsiderFieldsForSerialization(enumWithSubclasses.getSubtypes()[0],problems));
  JClassType enumWithNonDefaultCtors=to.getType("EnumWithNonDefaultCtors");
  problems=new ProblemReport();
  assertTrue(sob.shouldConsiderFieldsForSerialization(enumWithNonDefaultCtors,problems));
}
