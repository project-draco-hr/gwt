{
  Set<CompilationUnit> units=new HashSet<CompilationUnit>();
  addStandardClasses(units);
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class A<T> implements Serializable {\n");
    code.append("  T t;\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("A",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class AList<T> implements Serializable {\n");
    code.append("  A<T>[] as;\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("AList",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class B<T> implements Serializable {\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("B",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class BList<T> implements Serializable {\n");
    code.append("  B<T>[] bs;\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("BList",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class Ser1 implements Serializable {\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("Ser1",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class Ser2 implements Serializable {\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("Ser2",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class Root implements Serializable {\n");
    code.append("  AList<Ser1> alist;\n");
    code.append("  BList<Ser2> blist;\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("Root",code));
  }
  TreeLogger logger=createLogger();
  TypeOracle to=TypeOracleTestingUtils.buildTypeOracle(logger,units);
  JGenericType a=to.getType("A").isGenericType();
  JGenericType b=to.getType("B").isGenericType();
  JGenericType alist=to.getType("AList").isGenericType();
  JGenericType blist=to.getType("BList").isGenericType();
  JClassType ser1=to.getType("Ser1");
  JClassType ser2=to.getType("Ser2");
  JClassType root=to.getType("Root");
  SerializableTypeOracleBuilder sob=new SerializableTypeOracleBuilder(logger,to);
  sob.addRootType(logger,root);
  assertEquals(EXPOSURE_DIRECT,sob.getTypeParameterExposure(a,0));
  assertEquals(EXPOSURE_NONE,sob.getTypeParameterExposure(b,0));
  assertEquals(EXPOSURE_DIRECT,sob.getTypeParameterExposure(alist,0));
  assertEquals(EXPOSURE_NONE,sob.getTypeParameterExposure(blist,0));
  SerializableTypeOracle so=sob.build(logger);
  JArrayType aArray=to.getArrayType(a.getRawType());
  JArrayType bArray=to.getArrayType(b.getRawType());
  assertSerializableTypes(so,root,alist.getRawType(),blist.getRawType(),aArray,bArray,a.getRawType(),b.getRawType(),ser1);
  assertInstantiable(so,alist.getRawType());
  assertInstantiable(so,blist.getRawType());
  assertInstantiable(so,a.getRawType());
  assertInstantiable(so,b.getRawType());
  assertInstantiable(so,aArray);
  assertInstantiable(so,bArray);
  assertInstantiable(so,ser1);
  assertNotInstantiableOrFieldSerializable(so,ser2);
}
