{
  Set<CompilationUnit> units=new HashSet<CompilationUnit>();
  addStandardClasses(units);
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class HashSet<T extends SerClass> implements Serializable {\n");
    code.append("  T[] x;\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("HashSet",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class NameSet extends HashSet implements Serializable {\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("NameSet",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class SerClass implements Serializable {\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("SerClass",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class SerClassSub extends SerClass {\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("SerClassSub",code));
  }
  TreeLogger logger=createLogger();
  TypeOracle to=TypeOracleTestingUtils.buildTypeOracle(logger,units);
  JGenericType hashSet=to.getType("HashSet").isGenericType();
  JClassType nameSet=to.getType("NameSet");
  JClassType serClass=to.getType("SerClass");
  JClassType serClassSub=to.getType("SerClassSub");
  SerializableTypeOracleBuilder sob=createSerializableTypeOracleBuilder(logger,to);
  sob.addRootType(logger,nameSet);
  SerializableTypeOracle so=sob.build(logger);
  JArrayType arrayOfSerClass=to.getArrayType(serClass);
  JArrayType arrayOfSerClassSub=to.getArrayType(serClassSub);
  assertSerializableTypes(so,hashSet.getRawType(),nameSet,serClass,serClassSub,arrayOfSerClass,arrayOfSerClassSub);
  assertFieldSerializable(so,hashSet.getRawType());
  assertNotInstantiable(so,hashSet.getRawType());
  assertInstantiable(so,nameSet);
  assertInstantiable(so,serClass);
  assertInstantiable(so,serClassSub);
  assertInstantiable(so,arrayOfSerClass);
  assertInstantiable(so,arrayOfSerClassSub);
}
