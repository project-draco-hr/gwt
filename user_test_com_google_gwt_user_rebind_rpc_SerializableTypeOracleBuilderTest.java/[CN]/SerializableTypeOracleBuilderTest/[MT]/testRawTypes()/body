{
  Set<Resource> resources=new HashSet<Resource>();
  addStandardClasses(resources);
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class A<T extends SerializableClass> implements Serializable {\n");
    code.append("  T x;\n");
    code.append("}\n");
    resources.add(new StaticJavaResource("A",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class SerializableClass implements Serializable {\n");
    code.append("}\n");
    resources.add(new StaticJavaResource("SerializableClass",code));
  }
  TreeLogger logger=createLogger();
  TypeOracle to=TypeOracleTestingUtils.buildTypeOracle(logger,resources);
  JGenericType a=to.getType("A").isGenericType();
  JRawType rawA=a.getRawType();
  JClassType serializableClass=to.getType("SerializableClass");
  SerializableTypeOracleBuilder sob=createSerializableTypeOracleBuilder(logger,to);
  sob.addRootType(logger,rawA);
  SerializableTypeOracle so=sob.build(logger);
  assertInstantiable(so,a.getRawType());
  assertSerializableTypes(so,rawA,serializableClass);
}
