{
  Set<Resource> resources=new HashSet<Resource>();
  addStandardClasses(resources);
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class A<T> implements Serializable {\n");
    code.append("  B<T> b;\n");
    code.append("}\n");
    resources.add(new StaticJavaResource("A",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class B<T> extends A<T> implements Serializable {\n");
    code.append("  A<B<T>> ab;\n");
    code.append("}\n");
    resources.add(new StaticJavaResource("B",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class UnusedSerializableArgument implements Serializable {\n");
    code.append("}\n");
    resources.add(new StaticJavaResource("UnusedSerializableArgument",code));
  }
  TreeLogger logger=createLogger();
  TypeOracle to=TypeOracleTestingUtils.buildTypeOracle(logger,resources);
  JGenericType a=to.getType("A").isGenericType();
  JGenericType b=to.getType("B").isGenericType();
  JClassType unusedSerializableArgument=to.getType("UnusedSerializableArgument");
  JParameterizedType aOfString=to.getParameterizedType(a,makeArray(unusedSerializableArgument));
  SerializableTypeOracleBuilder sob=createSerializableTypeOracleBuilder(logger,to);
  sob.addRootType(logger,aOfString);
  SerializableTypeOracle so=sob.build(logger);
  assertInstantiable(so,a.getRawType());
  assertInstantiable(so,b.getRawType());
  assertNotInstantiableOrFieldSerializable(so,unusedSerializableArgument);
  assertSerializableTypes(so,a.getRawType(),b.getRawType());
}
