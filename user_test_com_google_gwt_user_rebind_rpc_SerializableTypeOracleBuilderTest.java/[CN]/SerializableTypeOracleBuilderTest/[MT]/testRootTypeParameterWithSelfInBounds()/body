{
  Set<Resource> resources=new HashSet<Resource>();
  addStandardClasses(resources);
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class A<Ta extends A<Ta>> implements Serializable {\n");
    code.append("  Ta ta;\n");
    code.append("}\n");
    resources.add(new StaticJavaResource("A",code));
  }
  TreeLogger logger=createLogger();
  TypeOracle to=TypeOracleTestingUtils.buildTypeOracle(logger,resources);
  JGenericType a=to.getType("A").isGenericType();
  JClassType rawA=a.getRawType();
  JTypeParameter ta=a.getTypeParameters()[0];
  SerializableTypeOracleBuilder sob=createSerializableTypeOracleBuilder(logger,to);
  sob.addRootType(logger,ta);
  SerializableTypeOracle so=sob.build(logger);
  assertSerializableTypes(so,rawA);
}
