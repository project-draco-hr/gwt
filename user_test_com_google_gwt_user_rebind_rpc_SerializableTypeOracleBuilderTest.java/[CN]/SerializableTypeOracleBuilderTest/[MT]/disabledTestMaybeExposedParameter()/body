{
  Set<Resource> resources=new HashSet<Resource>();
  addStandardClasses(resources);
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public abstract class List<T> implements Serializable {\n");
    code.append("}\n");
    resources.add(new StaticJavaResource("List",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("public class EmptyList<T> extends List<T> {\n");
    code.append("}\n");
    resources.add(new StaticJavaResource("EmptyList",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("public class LinkedList<T> extends List<T> {\n");
    code.append("  T head;\n");
    code.append("  LinkedList<T> next;\n");
    code.append("}\n");
    resources.add(new StaticJavaResource("LinkedList",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("public class CantSerialize {\n");
    code.append("}\n");
    resources.add(new StaticJavaResource("CantSerialize",code));
  }
  TreeLogger logger=createLogger();
  TypeOracle to=TypeOracleTestingUtils.buildTypeOracle(logger,resources);
  JGenericType list=to.getType("List").isGenericType();
  JGenericType emptyList=to.getType("EmptyList").isGenericType();
  JClassType cantSerialize=to.getType("CantSerialize");
  JParameterizedType listOfCantSerialize=to.getParameterizedType(list,makeArray(cantSerialize));
  SerializableTypeOracleBuilder sob=createSerializableTypeOracleBuilder(logger,to);
  sob.addRootType(logger,listOfCantSerialize);
  SerializableTypeOracle so=sob.build(logger);
  assertFieldSerializable(so,listOfCantSerialize);
  assertSerializableTypes(so,list.getRawType(),emptyList.getRawType());
}
