{
  Set<CompilationUnit> units=new HashSet<CompilationUnit>();
  addStandardClasses(units);
  addSerializationStreamReader(units);
  addSerializationStreamWriter(units);
{
    StringBuffer code=new StringBuffer();
    code.append("import java.io.Serializable;\n");
    code.append("class Bar implements Serializable { }\n");
    units.add(createMockCompilationUnit("Bar",code));
  }
{
    StringBuffer code=new StringBuffer();
    code.append("import java.io.Serializable;\n");
    code.append("class Foo {\n");
    code.append(" final Bar bar = new Bar();\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("Foo",code));
  }
{
    StringBuffer code=new StringBuffer();
    code.append("import com.google.gwt.user.client.rpc.SerializationStreamReader;\n");
    code.append("import com.google.gwt.user.client.rpc.SerializationStreamWriter;\n");
    code.append("class Foo_CustomFieldSerializer {\n");
    code.append("  public static void serialize(SerializationStreamWriter ssw, Foo instance) {\n");
    code.append("  }\n");
    code.append("\n");
    code.append("  public static void deserialize(SerializationStreamReader ssr, Foo instance) {\n");
    code.append("  }\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("Foo_CustomFieldSerializer",code));
  }
  UnitTestTreeLogger.Builder treeLoggerBuilder=new UnitTestTreeLogger.Builder();
  treeLoggerBuilder.setLowestLogLevel(TreeLogger.WARN);
  UnitTestTreeLogger logger=treeLoggerBuilder.createLogger();
  TypeOracle to=TypeOracleTestingUtils.buildTypeOracle(logger,units);
  JClassType foo=to.getType("Foo");
  SerializableTypeOracleBuilder stob=createSerializableTypeOracleBuilder(logger,to);
  stob.addRootType(logger,foo);
  SerializableTypeOracle so=stob.build(logger);
  logger.assertCorrectLogEntries();
  assertSerializableTypes(so,foo);
}
