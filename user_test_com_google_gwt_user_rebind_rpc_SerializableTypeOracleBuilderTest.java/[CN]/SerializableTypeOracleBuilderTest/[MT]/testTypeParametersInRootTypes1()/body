{
  Set<CompilationUnit> units=new HashSet<CompilationUnit>();
  addStandardClasses(units);
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class A<T> implements Serializable {\n");
    code.append("  T t;\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("A",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class B implements Serializable {\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("B",code));
  }
  TreeLogger logger=createLogger();
  TypeOracle to=TypeOracleTestingUtils.buildTypeOracle(logger,units);
  JGenericType a=to.getType("A").isGenericType();
  JRawType rawA=a.getRawType();
  JClassType b=to.getType("B");
  JTypeParameter syntheticTypeParam=new JTypeParameter("U",0);
  new JGenericType(to,a.getPackage(),null,false,"C",false,new JTypeParameter[]{syntheticTypeParam});
  syntheticTypeParam.setBounds(makeArray(b));
  JParameterizedType parameterizedType=to.getParameterizedType(a,new JClassType[]{syntheticTypeParam});
  SerializableTypeOracleBuilder sob=createSerializableTypeOracleBuilder(logger,to);
  sob.addRootType(logger,parameterizedType);
  SerializableTypeOracle so=sob.build(logger);
  assertInstantiable(so,rawA);
  assertInstantiable(so,b);
  assertSerializableTypes(so,rawA,b);
}
