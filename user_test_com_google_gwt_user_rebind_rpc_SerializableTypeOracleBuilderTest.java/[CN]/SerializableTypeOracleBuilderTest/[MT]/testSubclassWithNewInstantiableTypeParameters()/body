{
  Set<Resource> resources=new HashSet<Resource>();
  addStandardClasses(resources);
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class A implements Serializable {\n");
    code.append("}\n");
    resources.add(new StaticJavaResource("A",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class B<T extends C> extends A {\n");
    code.append("  T c;\n");
    code.append("}\n");
    resources.add(new StaticJavaResource("B",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class C implements Serializable {\n");
    code.append("}\n");
    resources.add(new StaticJavaResource("C",code));
  }
  TreeLogger logger=createLogger();
  TypeOracle to=TypeOracleTestingUtils.buildTypeOracle(logger,resources);
  JClassType a=to.getType("A");
  JRawType rawB=to.getType("B").isGenericType().getRawType();
  JClassType c=to.getType("C");
  SerializableTypeOracleBuilder sob=createSerializableTypeOracleBuilder(logger,to);
  sob.addRootType(logger,a);
  SerializableTypeOracle so=sob.build(logger);
  assertInstantiable(so,a);
  assertSerializableTypes(so,a,rawB,c);
}
