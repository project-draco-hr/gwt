{
  Set<CompilationUnit> units=new HashSet<CompilationUnit>();
  addStandardClasses(units);
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class A<T> implements Serializable {\n");
    code.append("  B<T> b;\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("A",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class B<T> extends A<T> implements Serializable {\n");
    code.append("  A<T[]> ab;\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("B",code));
  }
  TreeLogger logger=createLogger();
  TypeOracle to=TypeOracleTestingUtils.buildTypeOracle(logger,units);
  JGenericType a=to.getType("A").isGenericType();
  JGenericType b=to.getType("B").isGenericType();
  JClassType javaLangString=to.getType(String.class.getName());
  JParameterizedType aOfString=to.getParameterizedType(a,makeArray(javaLangString));
  SerializableTypeOracleBuilder sob=new SerializableTypeOracleBuilder(logger,to);
  sob.addRootType(logger,aOfString);
  SerializableTypeOracle so=sob.build(logger);
  assertInstantiable(so,a.getRawType());
  assertInstantiable(so,b.getRawType());
  assertNotInstantiableOrFieldSerializable(so,javaLangString);
  assertSerializableTypes(so,a.getRawType(),b.getRawType());
}
