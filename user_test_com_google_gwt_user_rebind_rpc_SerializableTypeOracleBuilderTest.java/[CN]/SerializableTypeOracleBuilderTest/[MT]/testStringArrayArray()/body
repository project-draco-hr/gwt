{
  Set<Resource> resources=new HashSet<Resource>();
  addStandardClasses(resources);
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class Data implements Serializable {\n");
    code.append("  String justOneString;");
    code.append("  String[][] stringsGalore;\n");
    code.append("}\n");
    resources.add(new StaticJavaResource("Data",code));
  }
  TreeLogger logger=createLogger();
  TypeOracle to=TypeOracleTestingUtils.buildTypeOracle(logger,resources);
  JClassType data=to.getType("Data");
  JClassType string=to.getType(String.class.getCanonicalName());
  JArrayType stringArray=to.getArrayType(string);
  JArrayType stringArrayArray=to.getArrayType(stringArray);
  SerializableTypeOracleBuilder sob=createSerializableTypeOracleBuilder(logger,to);
  sob.addRootType(logger,data);
  SerializableTypeOracle so=sob.build(logger);
  assertSerializableTypes(so,data,string,stringArray,stringArrayArray);
  assertInstantiable(so,data);
  assertInstantiable(so,stringArrayArray);
  assertInstantiable(so,stringArray);
}
