{
  Set<CompilationUnit> units=new HashSet<CompilationUnit>();
  addStandardClasses(units);
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class A<T> implements Serializable {\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("A",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class B extends A<String> implements Serializable {\n");
    code.append("  Object o;\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("B",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class C extends A<Ser> implements Serializable {\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("C",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("import java.io.Serializable;\n");
    code.append("public class Ser implements Serializable {\n");
    code.append("}\n");
    units.add(createMockCompilationUnit("Ser",code));
  }
  TreeLogger logger=createLogger();
  TypeOracle to=TypeOracleTestingUtils.buildTypeOracle(logger,units);
  JGenericType a=to.getType("A").isGenericType();
  JClassType b=to.getType("B");
  JClassType c=to.getType("C");
  JClassType ser=to.getType("Ser");
  JClassType javaLangString=to.getType(String.class.getName());
  JParameterizedType aOfString=to.getParameterizedType(a,new JClassType[]{javaLangString});
  SerializableTypeOracleBuilder stob=new SerializableTypeOracleBuilder(logger,to);
  stob.addRootType(logger,aOfString);
  assertTrue(stob.getTypeParameterExposure(a,0) < 0);
  SerializableTypeOracle so=stob.build(logger);
  assertSerializableTypes(so,a.getRawType());
  assertInstantiable(so,a.getRawType());
  assertNotInstantiableOrFieldSerializable(so,b);
  assertNotInstantiableOrFieldSerializable(so,c);
  assertNotInstantiableOrFieldSerializable(so,javaLangString);
  assertNotInstantiableOrFieldSerializable(so,ser);
}
