{
  delayTestFinish(TEST_DELAY);
  Context ctx=factory.ctx();
  ctx.AasA().to(CastAndCheckReceiver.of(AProxy.class));
  ctx.BasA().to(CastAndCheckReceiver.of(B1Proxy.class));
  ctx.BasB().to(CastAndCheckReceiver.of(B1Proxy.class));
  ctx.CasA().to(CastAndCheckReceiver.of(C1Proxy.class));
  ctx.CasB().to(CastAndCheckReceiver.of(C1Proxy.class));
  ctx.DasA().to(CastAndCheckReceiver.of(MoreDerivedProxy.class));
  ctx.DasD().to(CastAndCheckReceiver.of(MoreDerivedProxy.class));
  ctx.W().to(CastAndCheckReceiver.of(WProxy.class));
  ctx.W2().to(CastAndCheckReceiver.of(WZProxy.class));
  ctx.Z().to(CastAndCheckReceiver.of(ZProxy.class));
  ctx.Z2().to(CastAndCheckReceiver.of(ZWProxy.class));
  ctx.fire(new Receiver<Void>(){
    @Override public void onSuccess(    Void response){
      finishTest();
    }
  }
);
}
