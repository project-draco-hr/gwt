{
  Set<String> allRootTypes=new TreeSet<String>(Arrays.asList(entryPoints));
  for (  MockJavaResource resource : getCompilerTypes()) {
    allRootTypes.add(resource.getTypeName());
  }
  CompilationResults units=BasicWebModeCompiler.getCompilationUnitDeclarations(logger,state,linker,allRootTypes.toArray(new String[allRootTypes.size()]));
  CompilationUnitDeclaration[] goldenCuds=units.compiledUnits;
  JavaToJavaScriptCompiler.checkForErrors(logger,goldenCuds,false);
  for (  CompilationUnitDeclaration jdtCud : goldenCuds) {
    jdtCud.traverse(new FindDeferredBindingSitesVisitor(),jdtCud.scope);
  }
  JavaToJavaScriptCompiler.checkForErrors(logger,goldenCuds,true);
  CorrelationFactory correlator=DummyCorrelationFactory.INSTANCE;
  JProgram jprogram=new JProgram(correlator);
  JsProgram jsProgram=new JsProgram(correlator);
  TypeMap typeMap=new TypeMap(jprogram);
  TypeDeclaration[] allTypeDeclarations=BuildTypeMap.exec(typeMap,units,jsProgram,linker);
  JavaToJavaScriptCompiler.checkForErrors(logger,goldenCuds,true);
  jprogram.typeOracle.computeBeforeAST();
  JJSOptionsImpl options=new JJSOptionsImpl();
  options.setEnableAssertions(true);
  GenerateJavaAST.exec(allTypeDeclarations,typeMap,jprogram,options);
  JavaToJavaScriptCompiler.checkForErrors(logger,goldenCuds,true);
  FixAssignmentToUnbox.exec(jprogram);
  AssertionNormalizer.exec(jprogram);
  for (  String entryPoint : entryPoints) {
    JDeclaredType entryType=jprogram.getFromTypeMap(entryPoint);
    for (    JMethod method : entryType.getMethods()) {
      if (method.isStatic() && JProgram.isClinit(method)) {
        jprogram.addEntryMethod(method);
      }
    }
  }
  ImplementClassLiteralsAsFields.exec(jprogram);
  return jprogram;
}
