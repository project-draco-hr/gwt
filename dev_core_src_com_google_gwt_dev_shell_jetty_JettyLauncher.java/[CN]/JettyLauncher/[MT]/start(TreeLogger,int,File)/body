{
  TreeLogger branch=logger.branch(TreeLogger.TRACE,"Starting Jetty on port " + port,null);
  checkStartParams(branch,port,appRootDir);
  Log.setLog(new JettyTreeLogger(branch));
  jreLeakPrevention(logger);
  System.setProperty("org.eclipse.jetty.xml.XmlParser.Validating","false");
  Server server=new Server();
  ServerConnector connector=getConnector(server,logger);
  setupConnector(connector,bindAddress,port);
  server.addConnector(connector);
  WebAppContext wac=createWebAppContext(logger,appRootDir);
  RequestLogHandler logHandler=new RequestLogHandler();
  logHandler.setRequestLog(new JettyRequestLogger(logger,getBaseLogLevel()));
  logHandler.setHandler(wac);
  server.setHandler(logHandler);
  server.start();
  server.setStopAtShutdown(true);
  Log.setLog(new JettyTreeLogger(logger));
  int connectorPort=connector.getLocalPort();
  if (connector.getLocalPort() < 0) {
    branch.log(TreeLogger.ERROR,String.format("Failed to connect to open channel with port %d (return value %d)",port,connectorPort));
  }
  return createServletContainer(logger,appRootDir,server,wac,connectorPort);
}
