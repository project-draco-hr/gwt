{
class ReplaceStringLiterals extends JModVisitor {
    @Override public void endVisit(    JStringLiteral stringLiteral,    Context ctx){
      ctx.replaceMe(program.getLiteralString(stringLiteral.getSourceInfo().makeChild(ControlFlowAnalyzer.class,"remove string literals"),""));
    }
  }
  final JModVisitor stringLiteralReplacer=new ReplaceStringLiterals();
  final CloneExpressionVisitor cloner=new CloneExpressionVisitor(program);
class ClassLitTraverser extends JVisitor {
    @Override public void endVisit(    JClassLiteral classLiteral,    Context ctx){
      JExpression initializer=classLiteral.getField().getInitializer();
      JExpression initializerWithoutStrings=stringLiteralReplacer.accept(cloner.cloneExpression(initializer));
      rescuer.accept(initializerWithoutStrings);
    }
  }
  (new ClassLitTraverser()).accept(program);
}
