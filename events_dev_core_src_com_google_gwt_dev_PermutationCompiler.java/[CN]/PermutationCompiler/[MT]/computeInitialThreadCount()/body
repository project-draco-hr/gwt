{
  int result=tasks.size();
  result=Math.min(Runtime.getRuntime().availableProcessors(),result);
  result=Math.min(result,Integer.getInteger("gwt.jjs.maxThreads",result));
  if (result == 1) {
    return 1;
  }
  if (JProgram.isTracingEnabled()) {
    logger.log(TreeLogger.INFO,"Parallel compilation disabled due to gwt.jjs.traceMethods being enabled");
    return 1;
  }
  int desiredThreads=result;
  long potentialFreeMemory=getPotentialFreeMemory();
  int extraMemUsageThreads=(int)(potentialFreeMemory / astMemoryUsage);
  logger.log(TreeLogger.TRACE,"Extra threads constrained by estimated memory usage: " + extraMemUsageThreads + " = "+ potentialFreeMemory+ " / "+ astMemoryUsage);
  int memUsageThreads=extraMemUsageThreads + 1;
  if (memUsageThreads < desiredThreads) {
    long currentMaxMemory=Runtime.getRuntime().maxMemory();
    currentMaxMemory/=1024 * 1024;
    long suggestedMaxMemory=currentMaxMemory * 2;
    logger.log(TreeLogger.WARN,desiredThreads + " threads could be run concurrently, but only " + memUsageThreads+ " threads will be run due to limited memory; "+ "increasing the amount of memory by using the -Xmx flag "+ "at startup (java -Xmx"+ suggestedMaxMemory+ "M ...) may result in faster compiles");
  }
  result=Math.min(memUsageThreads,desiredThreads);
  return result;
}
