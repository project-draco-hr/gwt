{
  int shift=numberOfLeadingZeros(b) - numberOfLeadingZeros(a);
  BigLong bshift=BigLongLib.shl(b,shift);
  BigLong quotient=create();
  while (shift >= 0) {
    boolean gte=trialSubtract(a,bshift);
    if (gte) {
      setBit(quotient,shift);
      if (isZero(a)) {
        break;
      }
    }
    toShru1(bshift);
    shift--;
  }
  if (negative) {
    negate(quotient);
  }
  if (computeRemainder) {
    if (aIsNegative) {
      remainder=BigLongLib.neg(a);
      if (aIsMinValue) {
        remainder=BigLongLib.sub(remainder,BigLongLib.Const.ONE);
      }
    }
 else {
      remainder=create(a);
    }
  }
  return quotient;
}
