{
  String installPath=Utility.getInstallPath();
  Map<String,String> replacements=new HashMap<String,String>();
  String userJarPath=installPath + '/' + "gwt-user.jar";
  replacements.put("@gwtUserPath",userJarPath);
  if (!CreatorUtilities.validatePathsAndModules(userJarPath,extraClassPaths,null)) {
    return;
  }
  Utility.getDirectory(outDir,"src",true);
  Utility.getDirectory(outDir,"test",true);
  if (ant != null) {
    replacements.put("@projectName",ant);
    StringBuilder buf=new StringBuilder();
    if (extraClassPaths != null) {
      for (      String path : extraClassPaths) {
        buf.append("    <pathelement path=\"" + path + "\"/>");
      }
    }
    replacements.put("@extraAntPathElements",buf.toString());
    File antXML=Utility.createNormalFile(outDir,ant + ".ant.xml",overwrite,ignore);
    if (antXML != null) {
      String out=Utility.getFileFromClassPath(PACKAGE_PATH + "project.ant.xmlsrc");
      Utility.writeTemplateFile(antXML,out,replacements);
    }
  }
  if (eclipse != null) {
    replacements.put("@projectName",eclipse);
    File dotProject=Utility.createNormalFile(outDir,".project",overwrite,ignore);
    if (dotProject != null) {
      String out=Utility.getFileFromClassPath(PACKAGE_PATH + ".projectsrc");
      Utility.writeTemplateFile(dotProject,out,replacements);
    }
    StringBuilder classpathEntries=new StringBuilder();
    if (extraClassPaths != null) {
      for (      String path : extraClassPaths) {
        File f=new File(path);
        if (!f.exists()) {
          throw new FileNotFoundException("extraClassPath: " + path + " must be present before .launch file can be created.");
        }
        String kindString;
        if (f.isDirectory()) {
          kindString="output";
        }
 else         if (path.endsWith(".jar")) {
          kindString="lib";
        }
 else {
          throw new RuntimeException("Don't know how to handle path: " + path + ". It doesn't appear to be a directory or a .jar file");
        }
        classpathEntries.append("   <classpathentry kind=\"");
        classpathEntries.append(kindString);
        classpathEntries.append("\" path=\"");
        classpathEntries.append(path);
        classpathEntries.append("\"/>\n");
      }
    }
    replacements.put("@eclipseClassPathEntries",classpathEntries.toString());
    File dotClasspath=Utility.createNormalFile(outDir,".classpath",overwrite,ignore);
    if (dotClasspath != null) {
      String out=Utility.getFileFromClassPath(PACKAGE_PATH + ".classpathsrc");
      Utility.writeTemplateFile(dotClasspath,out,replacements);
    }
  }
}
