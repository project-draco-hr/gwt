{
  String className=rescue.getClassName();
  int arrayDims=0;
  while (className.endsWith("[]")) {
    className=className.substring(0,className.length() - 2);
    ++arrayDims;
  }
  char[][] compoundName=CharOperation.splitOn('.',className.toCharArray());
  TypeBinding typeBinding=cud.scope.getType(compoundName,compoundName.length);
  if (typeBinding == null) {
    error(notFound(className));
    return;
  }
  if (typeBinding instanceof ProblemReferenceBinding) {
    ProblemReferenceBinding problem=(ProblemReferenceBinding)typeBinding;
    if (problem.problemId() == ProblemReasons.NotVisible) {
    }
 else     if (problem.problemId() == ProblemReasons.NotFound) {
      error(notFound(className));
    }
 else {
      error(unknownProblem(className,problem));
    }
    return;
  }
  if (arrayDims > 0) {
    typeBinding=cud.scope.createArrayType(typeBinding,arrayDims);
  }
  if (rescue.isInstantiable()) {
    currentBindings.add(typeBinding);
  }
  if (typeBinding instanceof BaseTypeBinding || arrayDims > 0) {
    if (rescue.getMethods().length > 0) {
      error(noMethodsAllowed());
    }
    if (rescue.getFields().length > 0) {
      error(noFieldsAllowed());
    }
    return;
  }
  ReferenceBinding ref=(ReferenceBinding)typeBinding;
  for (  String field : rescue.getFields()) {
    FieldBinding fieldBinding=ref.getField(field.toCharArray(),false);
    if (fieldBinding == null) {
      error(unknownField(field));
    }
 else {
      currentBindings.add(fieldBinding);
    }
  }
  for (  String method : rescue.getMethods()) {
    if (method.contains("@")) {
      error(nameAndTypesOnly());
      continue;
    }
    JsniRef jsni=JsniRef.parse("@foo::" + method);
    if (jsni == null) {
      error(badMethodSignature(method));
      continue;
    }
    MethodBinding[] methodBindings;
    if (jsni.memberName().equals(String.valueOf(ref.compoundName[ref.compoundName.length - 1]))) {
      methodBindings=ref.getMethods("<init>".toCharArray());
    }
 else {
      methodBindings=ref.getMethods(jsni.memberName().toCharArray());
    }
    boolean found=false;
    for (    MethodBinding methodBinding : methodBindings) {
      if (jsni.matchesAnyOverload() || jsni.paramTypesString().equals(sig(methodBinding))) {
        currentBindings.add(methodBinding);
        found=true;
      }
    }
    if (!found) {
      error(noMethod(className,jsni.memberSignature()));
      continue;
    }
  }
}
