{
  super("click","keydown");
  if (format == null) {
    throw new IllegalArgumentException("format == null");
  }
  if (renderer == null) {
    throw new IllegalArgumentException("renderer == null");
  }
  this.format=format;
  this.renderer=renderer;
  this.datePicker=new DatePicker();
  this.panel=new PopupPanel(true,true){
    @Override protected void onPreviewNativeEvent(    NativePreviewEvent event){
      if (Event.ONKEYUP == event.getTypeInt()) {
        if (event.getNativeEvent().getKeyCode() == ESCAPE) {
          panel.hide();
        }
      }
    }
  }
;
  panel.addCloseHandler(new CloseHandler<PopupPanel>(){
    public void onClose(    CloseEvent<PopupPanel> event){
      lastKey=null;
      lastValue=null;
      if (lastParent != null && !event.isAutoClosed()) {
        lastParent.focus();
      }
      lastParent=null;
    }
  }
);
  panel.add(datePicker);
  datePicker.addValueChangeHandler(new ValueChangeHandler<Date>(){
    public void onValueChange(    ValueChangeEvent<Date> event){
      panel.hide();
      Date date=event.getValue();
      setViewData(lastKey,date);
      setValue(lastParent,lastValue,lastKey);
      if (valueUpdater != null) {
        valueUpdater.update(date);
      }
    }
  }
);
}
