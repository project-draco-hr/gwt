{
  int numPermutations=new PropertyPermutations(module.getProperties(),module.getActiveLinkerNames()).collapseProperties().size();
  List<File> resultFiles=new ArrayList<File>(numPermutations);
  for (int i=0; i < numPermutations; ++i) {
    File f=CompilePerms.makePermFilename(compilerWorkDir,i);
    if (!f.exists()) {
      logger.log(TreeLogger.ERROR,"File not found '" + f.getAbsolutePath() + "'; please compile all permutations");
      return false;
    }
    resultFiles.add(f);
  }
  TreeLogger branch=logger.branch(TreeLogger.INFO,"Linking module " + module.getName());
  StandardLinkerContext linkerContext=new StandardLinkerContext(branch,module,publicResourceOracle,precompileOptions.getOutput());
  try {
    ArtifactSet artifacts=scanCompilePermResults(logger,resultFiles);
    artifacts.addAll(linkerContext.getArtifactsForPublicResources(logger,module));
    artifacts=linkerContext.invokeFinalLink(logger,artifacts);
    doProduceOutput(logger,artifacts,linkerContext,module,precompileOptions.shouldSaveSource(),options);
  }
 catch (  IOException e) {
    logger.log(TreeLogger.ERROR,"Exception during final linking",e);
    throw new UnableToCompleteException();
  }
  return true;
}
