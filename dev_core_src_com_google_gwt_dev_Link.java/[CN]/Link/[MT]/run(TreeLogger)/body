{
  loop_modules:   for (  String moduleName : options.getModuleNames()) {
    ModuleDef module=ModuleDefLoader.loadFromClassPath(logger,moduleName);
    File compilerWorkDir=options.getCompilerWorkDir(moduleName);
    PrecompilationResult precompileResults;
    try {
      precompileResults=Util.readFileAsObject(new File(compilerWorkDir,Precompile.PRECOMPILE_FILENAME),PrecompilationResult.class);
    }
 catch (    ClassNotFoundException e) {
      logger.log(TreeLogger.ERROR,"Error reading " + Precompile.PRECOMPILE_FILENAME);
      return false;
    }
catch (    IOException e) {
      logger.log(TreeLogger.ERROR,"Error reading " + Precompile.PRECOMPILE_FILENAME);
      return false;
    }
    if (precompileResults instanceof PrecompileOptions) {
      if (!doLinkFinal(logger,compilerWorkDir,module,(JJSOptions)precompileResults)) {
        return false;
      }
      continue loop_modules;
    }
 else {
      Precompilation precomp=(Precompilation)precompileResults;
      Permutation[] perms=precomp.getPermutations();
      List<FileBackedObject<PermutationResult>> resultFiles=CompilePerms.makeResultFiles(compilerWorkDir,perms);
      for (      FileBackedObject<PermutationResult> file : resultFiles) {
        if (!file.getFile().exists()) {
          logger.log(TreeLogger.ERROR,"File not found '" + file.getFile().getAbsolutePath() + "'; please compile all permutations");
          return false;
        }
      }
      TreeLogger branch=logger.branch(TreeLogger.INFO,"Linking module " + module.getName());
      try {
        link(branch,module,precomp.getGeneratedArtifacts(),perms,resultFiles,options.getWarDir(),options.getDeployDir(),options.getExtraDir(),precomp.getUnifiedAst().getOptions());
      }
 catch (      IOException e) {
        logger.log(TreeLogger.ERROR,"Unexpected exception while producing output",e);
        throw new UnableToCompleteException();
      }
    }
  }
  return true;
}
