{
  String[] javaScript=compilation.getJavaScript();
  int numSplitPoints=CodeSplitter.numSplitPointsForFragments(javaScript.length);
  int maxTotalSize;
  if (numSplitPoints == 0) {
    maxTotalSize=javaScript[0].length();
  }
 else {
    maxTotalSize=javaScript[0].length();
    for (int sp=1; sp <= numSplitPoints; sp++) {
      int excl=CodeSplitter.getExclusiveFragmentNumber(sp,numSplitPoints);
      maxTotalSize+=javaScript[excl].length();
    }
    boolean first=true;
    int adjustment=0;
    for (int sp=1; sp <= numSplitPoints; sp++) {
      int excl=CodeSplitter.getExclusiveFragmentNumber(sp,numSplitPoints);
      int base=CodeSplitter.getBaseFragmentNumber(sp,numSplitPoints);
      int leftovers=CodeSplitter.getLeftoversFragmentNumber(sp,numSplitPoints);
      int thisAdjustment=javaScript[base].length() + javaScript[leftovers].length() - javaScript[excl].length();
      if (first || (thisAdjustment > adjustment)) {
        adjustment=thisAdjustment;
      }
      first=false;
    }
    maxTotalSize+=adjustment;
  }
  logger.log(TreeLogger.DEBUG,"Permutation " + permId + " (strong name "+ compilation.getStrongName()+ ") has an initial download size of "+ javaScript[0].length()+ " and max total script size of "+ maxTotalSize);
}
