{
  ListModel<C> listModel=nodeInfo.getListModel();
  listReg=listModel.addListHandler(new ListHandler<C>(){
    public void onDataChanged(    ListEvent<C> event){
      TreeViewModel model=tree.getTreeViewModel();
      int imageWidth=tree.getImageWidth();
      Cell<C> theCell=nodeInfo.getCell();
      StringBuilder sb=new StringBuilder();
      children=new ArrayList<TreeNodeView<?>>();
      for (      C childValue : event.getValues()) {
        sb.append("<div style=\"position:relative;padding-left:");
        sb.append(imageWidth);
        sb.append("px;\">");
        if (model.isLeaf(childValue)) {
          sb.append(LEAF_IMAGE);
        }
 else {
          sb.append(tree.getClosedImageHtml());
        }
        sb.append("<div>");
        theCell.render(childValue,sb);
        sb.append("</div>");
        sb.append("</div>");
      }
      if (childContainer == null) {
        Element elem=getElement();
        initChildContainer(Document.get().createDivElement());
        elem.appendChild(childContainer);
      }
      childContainer.setInnerHTML(sb.toString());
      children=new ArrayList<TreeNodeView<?>>();
      Element childElem=childContainer.getFirstChildElement();
      for (      C childValue : event.getValues()) {
        TreeNodeView<C> child=new TreeNodeView<C>(tree,TreeNodeView.this,nodeInfo,childElem,childValue);
        children.add(child);
        childElem=childElem.getNextSiblingElement();
      }
    }
    public void onSizeChanged(    SizeChangeEvent event){
      if (children == null) {
        return;
      }
      int size=event.getSize();
      int currentSize=children.size();
      for (int i=currentSize - 1; i >= size; i--) {
        childContainer.getLastChild().removeFromParent();
        children.remove(i);
      }
    }
  }
);
  listReg.setRangeOfInterest(0,100);
}
