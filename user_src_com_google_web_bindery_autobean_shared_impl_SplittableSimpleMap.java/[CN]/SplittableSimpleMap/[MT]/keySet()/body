{
  return new AbstractSet<K>(){
    final List<String> keys=data.getPropertyKeys();
    @Override public Iterator<K> iterator(){
      return new Iterator<K>(){
        final Iterator<String> it=keys.iterator();
        String lastEncodedKey;
        public boolean hasNext(){
          return it.hasNext();
        }
        public K next(){
          lastEncodedKey=it.next();
          @SuppressWarnings("unchecked") K toReturn=(K)keyCoder.decode(state,StringQuoter.split(StringQuoter.quote(lastEncodedKey)));
          return toReturn;
        }
        public void remove(){
          Splittable.NULL.assign(data,lastEncodedKey);
          reified.setReified(lastEncodedKey,null);
        }
      }
;
    }
    @Override public int size(){
      return keys.size();
    }
  }
;
}
