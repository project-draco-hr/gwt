{
  logger=logger.branch(TreeLogger.DEBUG,"Refreshing module from source");
  graveyardUnits=new HashMap<String,CompilationUnit>();
  for (Iterator<CompilationUnit> it=unitMap.values().iterator(); it.hasNext(); ) {
    CompilationUnit unit=it.next();
    if (unit.isGenerated()) {
      if (unit.getState() == State.CHECKED) {
        unit.setGraveyard();
        graveyardUnits.put(unit.getTypeName(),unit);
      }
 else {
        unit.setFresh();
      }
      it.remove();
    }
  }
  refreshFromSourceOracle();
  invalidateClassFileMaps();
  Set<CompilationUnit> allUnitsPlusGraveyard=concatSet(unitMap.values(),graveyardUnits.values());
  CompilationUnitInvalidator.invalidateUnitsWithInvalidRefs(TreeLogger.NULL,allUnitsPlusGraveyard);
  removeInvalidatedGraveyardUnits(graveyardUnits);
  Set<CompilationUnit> toRetain=new HashSet<CompilationUnit>(unitMap.values());
  for (Iterator<CompilationUnit> it=toRetain.iterator(); it.hasNext(); ) {
    CompilationUnit unit=it.next();
    if (unit.getState() != State.CHECKED) {
      it.remove();
    }
  }
  invalidatorState.retainAll(toRetain);
  jdtCompiler=new JdtCompiler();
  compile(logger,unitMap.values(),Collections.<CompilationUnit>emptySet());
  mediator.refresh(logger,unitMap.values());
  markSurvivorsChecked(unitMap.values());
}
