{
  logger=logger.branch(TreeLogger.DEBUG,"Refreshing module from source");
  for (Iterator<CompilationUnit> it=unitMap.values().iterator(); it.hasNext(); ) {
    CompilationUnit unit=it.next();
    if (unit.isGenerated()) {
      unit.setState(State.FRESH);
      it.remove();
    }
  }
  refreshFromSourceOracle();
  updateExposedUnits();
  CompilationUnitInvalidator.invalidateUnitsWithInvalidRefs(TreeLogger.NULL,getCompilationUnits());
  Set<CompilationUnit> toRetain=new HashSet<CompilationUnit>(exposedUnits);
  for (Iterator<CompilationUnit> it=toRetain.iterator(); it.hasNext(); ) {
    CompilationUnit unit=it.next();
    if (unit.getState() != State.CHECKED) {
      it.remove();
    }
  }
  invalidatorState.retainAll(toRetain);
  jdtCompiler=new JdtCompiler();
  compile(logger,getCompilationUnits());
  mediator.refresh(logger,getCompilationUnits());
  markSurvivorsChecked(getCompilationUnits());
}
