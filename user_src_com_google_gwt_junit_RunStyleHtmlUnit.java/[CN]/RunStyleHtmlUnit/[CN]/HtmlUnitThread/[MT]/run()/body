{
  WebClient webClient=new WebClient(browser);
  webClient.setAlertHandler(this);
  webClient.setIncorrectnessListener(this);
  webClient.getOptions().setThrowExceptionOnFailingStatusCode(false);
  webClient.getOptions().setThrowExceptionOnScriptError(developmentMode);
  webClient.setOnbeforeunloadHandler(this);
  webClient.setJavaScriptErrorListener(new JavaScriptErrorListener(){
    @Override public void loadScriptError(    InteractivePage htmlPage,    URL scriptUrl,    Exception exception){
      treeLogger.log(TreeLogger.ERROR,"Load Script Error: " + exception,exception);
    }
    @Override public void malformedScriptURL(    InteractivePage htmlPage,    String url,    MalformedURLException malformedURLException){
      treeLogger.log(TreeLogger.ERROR,"Malformed Script URL: " + malformedURLException.getLocalizedMessage());
    }
    @Override public void scriptException(    InteractivePage htmlPage,    ScriptException scriptException){
      treeLogger.log(TreeLogger.DEBUG,"Script Exception: " + scriptException.getLocalizedMessage() + ", line "+ scriptException.getFailingLine());
    }
    @Override public void timeoutError(    InteractivePage htmlPage,    long allowedTime,    long executionTime){
      treeLogger.log(TreeLogger.ERROR,"Script Timeout Error " + executionTime + " > "+ allowedTime);
    }
  }
);
  setupWebClient(webClient);
  try {
    Page page=webClient.getPage(url);
    webClient.waitForBackgroundJavaScriptStartingBefore(2000);
    if (treeLogger.isLoggable(TreeLogger.SPAM)) {
      treeLogger.log(TreeLogger.SPAM,"getPage returned " + ((HtmlPage)page).asXml());
    }
  }
 catch (  FailingHttpStatusCodeException e) {
    treeLogger.log(TreeLogger.ERROR,"HTTP request failed",e);
    return;
  }
catch (  MalformedURLException e) {
    treeLogger.log(TreeLogger.ERROR,"Bad URL",e);
    return;
  }
catch (  IOException e) {
    treeLogger.log(TreeLogger.ERROR,"I/O error on HTTP request",e);
    return;
  }
}
