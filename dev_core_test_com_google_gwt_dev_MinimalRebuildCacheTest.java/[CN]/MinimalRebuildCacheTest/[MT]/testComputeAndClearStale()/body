{
  Map<String,Long> currentModifiedBySourcePath=new ImmutableMap.Builder<String,Long>().put("Foo.java",0L).put("Bar.java",0L).put("Baz.java",0L).build();
  minimalRebuildCache.recordDiskSourceResources(currentModifiedBySourcePath);
  minimalRebuildCache.recordNestedTypeName("Foo","Foo");
  minimalRebuildCache.recordNestedTypeName("Foo","Foo$Inner");
  minimalRebuildCache.recordNestedTypeName("Bar","Bar");
  minimalRebuildCache.recordNestedTypeName("Bar","Bar$Inner");
  minimalRebuildCache.recordNestedTypeName("Baz","Baz");
  minimalRebuildCache.recordNestedTypeName("Baz","Baz$Inner");
  minimalRebuildCache.setJsForType(TreeLogger.NULL,"Foo","Some Js for Foo");
  minimalRebuildCache.setJsForType(TreeLogger.NULL,"Foo$Inner","Some Js for Foo");
  minimalRebuildCache.setJsForType(TreeLogger.NULL,"Bar","Some Js for Bar");
  minimalRebuildCache.setJsForType(TreeLogger.NULL,"Bar$Inner","Some Js for Bar");
  minimalRebuildCache.setJsForType(TreeLogger.NULL,"Baz","Some Js for Baz");
  minimalRebuildCache.setJsForType(TreeLogger.NULL,"Baz$Inner","Some Js for Baz");
  minimalRebuildCache.addTypeReference("Bar","Foo");
  minimalRebuildCache.getImmediateTypeRelations().getImmediateSuperclassesByClass().put("Baz","Foo");
  minimalRebuildCache.addTypeReference("Foo","Foo$Inner");
  minimalRebuildCache.addTypeReference("Bar","Bar$Inner");
  minimalRebuildCache.addTypeReference("Baz","Baz$Inner");
  Map<String,Long> laterModifiedBySourcePath=new ImmutableMap.Builder<String,Long>().put("Foo.java",9999L).put("Bar.java",0L).put("Baz.java",0L).build();
  minimalRebuildCache.recordDiskSourceResources(laterModifiedBySourcePath);
  minimalRebuildCache.setRootTypeNames(Sets.newHashSet("Foo","Bar","Baz"));
  minimalRebuildCache.computeReachableTypeNames();
  minimalRebuildCache.computeAndClearStaleTypesCache(TreeLogger.NULL,new JTypeOracle(null,minimalRebuildCache,true));
  assertNull(minimalRebuildCache.getJs("Foo"));
  assertNull(minimalRebuildCache.getJs("Foo$Inner"));
  assertNull(minimalRebuildCache.getJs("Bar"));
  assertNull(minimalRebuildCache.getJs("Baz"));
  assertNotNull(minimalRebuildCache.getJs("Bar$Inner"));
  assertNotNull(minimalRebuildCache.getJs("Baz$Inner"));
}
