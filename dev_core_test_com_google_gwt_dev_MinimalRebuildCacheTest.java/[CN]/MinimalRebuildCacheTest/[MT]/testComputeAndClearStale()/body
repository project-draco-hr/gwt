{
  Map<String,Long> currentModifiedBySourcePath=new ImmutableMap.Builder<String,Long>().put("Foo.java",0L).put("Bar.java",0L).put("Baz.java",0L).build();
  minimalRebuildCache.recordDiskSourceResources(currentModifiedBySourcePath);
  StringAnalyzableTypeEnvironment typeEnvironment=minimalRebuildCache.getTypeEnvironment();
  minimalRebuildCache.recordNestedTypeName("Foo","Foo");
  typeEnvironment.recordTypeEnclosesMethod("Foo","Foo::$clinit()V");
  minimalRebuildCache.recordNestedTypeName("Foo","Foo$Inner");
  typeEnvironment.recordTypeEnclosesMethod("Foo$Inner","Foo$Inner::$clinit()V");
  minimalRebuildCache.recordNestedTypeName("Bar","Bar");
  typeEnvironment.recordTypeEnclosesMethod("Bar","Bar::$clinit()V");
  minimalRebuildCache.recordNestedTypeName("Bar","Bar$Inner");
  typeEnvironment.recordTypeEnclosesMethod("Bar$Inner","Bar$Inner::$clinit()V");
  minimalRebuildCache.recordNestedTypeName("Baz","Baz");
  typeEnvironment.recordTypeEnclosesMethod("Baz","Baz::$clinit()V");
  minimalRebuildCache.recordNestedTypeName("Baz","Baz$Inner");
  typeEnvironment.recordTypeEnclosesMethod("Baz$Inner","Baz$Inner::$clinit()V");
  minimalRebuildCache.setJsForType(TreeLogger.NULL,"Foo","Some Js for Foo");
  minimalRebuildCache.setJsForType(TreeLogger.NULL,"Foo$Inner","Some Js for Foo");
  minimalRebuildCache.setJsForType(TreeLogger.NULL,"Bar","Some Js for Bar");
  minimalRebuildCache.setJsForType(TreeLogger.NULL,"Bar$Inner","Some Js for Bar");
  minimalRebuildCache.setJsForType(TreeLogger.NULL,"Baz","Some Js for Baz");
  minimalRebuildCache.setJsForType(TreeLogger.NULL,"Baz$Inner","Some Js for Baz");
  minimalRebuildCache.addTypeReference("Bar","Foo");
  typeEnvironment.recordMethodCallsMethod("Bar::start()","Foo::run()");
  typeEnvironment.recordStaticReferenceInMethod("Foo","Bar::start()");
  typeEnvironment.recordTypeEnclosesMethod("Bar","Bar::start()");
  typeEnvironment.recordTypeEnclosesMethod("Foo","Foo::run()");
  minimalRebuildCache.getImmediateTypeRelations().getImmediateSuperclassesByClass().put("Baz","Foo");
  typeEnvironment.recordMethodCallsMethod("Foo::run()","Baz::run()");
  typeEnvironment.recordStaticReferenceInMethod("Baz","Foo::run()");
  typeEnvironment.recordTypeEnclosesMethod("Baz","Baz::run()");
  minimalRebuildCache.addTypeReference("Foo","Foo$Inner");
  minimalRebuildCache.addTypeReference("Bar","Bar$Inner");
  minimalRebuildCache.addTypeReference("Baz","Baz$Inner");
  typeEnvironment.recordStaticReferenceInMethod("Bar$Inner","Bar::start()");
  typeEnvironment.recordStaticReferenceInMethod("Foo$Inner","Foo::run()");
  typeEnvironment.recordStaticReferenceInMethod("Baz$Inner","Baz::run()");
  Map<String,Long> laterModifiedBySourcePath=new ImmutableMap.Builder<String,Long>().put("Foo.java",9999L).put("Bar.java",0L).put("Baz.java",0L).build();
  minimalRebuildCache.recordDiskSourceResources(laterModifiedBySourcePath);
  minimalRebuildCache.setRootTypeNames(Sets.newHashSet("Foo","Bar","Baz"));
  minimalRebuildCache.setEntryMethodNames(Lists.newArrayList("Bar::start()"));
  minimalRebuildCache.computeReachableTypeNames();
  minimalRebuildCache.computeAndClearStaleTypesCache(TreeLogger.NULL,new JTypeOracle(null,minimalRebuildCache));
  assertNull(minimalRebuildCache.getJs("Foo"));
  assertNull(minimalRebuildCache.getJs("Foo$Inner"));
  assertNull(minimalRebuildCache.getJs("Bar"));
  assertNull(minimalRebuildCache.getJs("Baz"));
  assertNotNull(minimalRebuildCache.getJs("Bar$Inner"));
  assertNotNull(minimalRebuildCache.getJs("Baz$Inner"));
}
