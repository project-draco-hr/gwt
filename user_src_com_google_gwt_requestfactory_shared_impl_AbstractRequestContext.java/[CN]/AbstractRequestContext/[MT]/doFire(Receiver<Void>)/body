{
  checkLocked();
  locked=true;
  freezeEntities(true);
  String payload=makePayload();
  requestFactory.getRequestTransport().send(payload,new TransportReceiver(){
    public void onTransportFailure(    ServerFailure failure){
      fail(receiver,failure);
    }
    public void onTransportSuccess(    String payload){
      ResponseMessage response=AutoBeanCodex.decode(MessageFactoryHolder.FACTORY,ResponseMessage.class,payload).as();
      if (response.getGeneralFailure() != null) {
        ServerFailureMessage failure=response.getGeneralFailure();
        ServerFailure fail=new ServerFailure(failure.getMessage(),failure.getExceptionType(),failure.getStackTrace(),failure.isFatal());
        fail(receiver,fail);
        return;
      }
      if (response.getViolations() != null) {
        Set<Violation> errors=new HashSet<Violation>();
        for (        ViolationMessage message : response.getViolations()) {
          errors.add(new MyViolation(message));
        }
        reuse();
        for (        AbstractRequest<?> request : new ArrayList<AbstractRequest<?>>(invocations)) {
          request.onViolation(errors);
        }
        if (receiver != null) {
          receiver.onViolation(errors);
        }
        return;
      }
      processReturnOperations(response);
      for (int i=0, j=invocations.size(); i < j; i++) {
        if (response.getStatusCodes().get(i)) {
          invocations.get(i).onSuccess(response.getInvocationResults().get(i));
        }
 else {
          ServerFailureMessage failure=AutoBeanCodex.decode(MessageFactoryHolder.FACTORY,ServerFailureMessage.class,response.getInvocationResults().get(i)).as();
          invocations.get(i).onFail(new ServerFailure(failure.getMessage(),failure.getExceptionType(),failure.getStackTrace(),failure.isFatal()));
        }
      }
      if (receiver != null) {
        receiver.onSuccess(null);
      }
      editedProxies.clear();
      invocations.clear();
      returnedProxies.clear();
    }
    private void fail(    Receiver<Void> receiver,    ServerFailure failure){
      reuse();
      for (      AbstractRequest<?> request : new ArrayList<AbstractRequest<?>>(invocations)) {
        request.onFail(failure);
      }
      if (receiver != null) {
        receiver.onFailure(failure);
      }
    }
  }
);
}
