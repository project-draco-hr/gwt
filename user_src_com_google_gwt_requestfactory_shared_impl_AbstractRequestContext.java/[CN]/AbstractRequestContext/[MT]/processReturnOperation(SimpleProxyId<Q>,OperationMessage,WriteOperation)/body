{
  AutoBean<Q> toMutate=getProxyForReturnPayloadGraph(id);
  toMutate.setTag(Constants.VERSION_PROPERTY_B64,op.getVersion());
  final Map<String,Splittable> properties=op.getPropertyMap();
  if (properties != null) {
    toMutate.accept(new AutoBeanVisitor(){
      @Override public boolean visitReferenceProperty(      String propertyName,      AutoBean<?> value,      PropertyContext ctx){
        if (ctx.canSet()) {
          if (properties.containsKey(propertyName)) {
            Splittable raw=properties.get(propertyName);
            Class<?> elementType=ctx instanceof CollectionPropertyContext ? ((CollectionPropertyContext)ctx).getElementType() : null;
            Object decoded=EntityCodex.decode(AbstractRequestContext.this,ctx.getType(),elementType,raw);
            ctx.set(decoded);
          }
        }
        return false;
      }
      @Override public boolean visitValueProperty(      String propertyName,      Object value,      PropertyContext ctx){
        if (ctx.canSet()) {
          if (properties.containsKey(propertyName)) {
            Splittable raw=properties.get(propertyName);
            Object decoded=ValueCodex.decode(ctx.getType(),raw);
            if (Date.class.equals(ctx.getType())) {
              decoded=new DatePoser((Date)decoded);
            }
            ctx.set(decoded);
          }
        }
        return false;
      }
    }
);
  }
  makeImmutable(toMutate);
  Q proxy=toMutate.as();
  if (operations != null && requestFactory.isEntityType(id.getProxyClass())) {
    for (    WriteOperation writeOperation : operations) {
      if (writeOperation.equals(WriteOperation.UPDATE) && !requestFactory.hasVersionChanged(id,op.getVersion())) {
        continue;
      }
      requestFactory.getEventBus().fireEventFromSource(new EntityProxyChange<EntityProxy>((EntityProxy)proxy,writeOperation),id.getProxyClass());
    }
  }
  return proxy;
}
