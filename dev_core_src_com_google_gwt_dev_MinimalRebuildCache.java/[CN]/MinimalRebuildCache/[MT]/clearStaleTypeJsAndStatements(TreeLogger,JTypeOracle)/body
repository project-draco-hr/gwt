{
  if (immediateTypeRelations.isEmpty()) {
    return Sets.newHashSet();
  }
  generatedCompilationUnitNamesByReboundTypeNames.clear();
  Multimaps.invertFrom(reboundTypeNamesByGeneratedCompilationUnitNames,generatedCompilationUnitNamesByReboundTypeNames);
  staleTypeNames.clear();
  Set<String> modifiedTypeNames=computeModifiedTypeNames();
{
    staleTypeNames.addAll(modifiedTypeNames);
    appendSubTypes(staleTypeNames,modifiedTypeNames,typeOracle);
    ImmutableList<String> modifiedTypeAndSubTypeNames=ImmutableList.copyOf(staleTypeNames);
    appendReferencingTypes(staleTypeNames,modifiedTypeAndSubTypeNames);
    appendReferencingTypes(staleTypeNames,jsoStatusChangedTypeNames);
    staleTypeNames.addAll(computeTypesThatRebindTypes(computeReboundTypesAffectedByModifiedResources()));
    appendTypesToRegenerateStaleGeneratedTypes(staleTypeNames);
    staleTypeNames.removeAll(JProgram.SYNTHETIC_TYPE_NAMES);
  }
  if (logger.isLoggable(TreeLogger.DEBUG)) {
    logger.log(TreeLogger.DEBUG,"known modified types = " + modifiedTypeNames);
    logger.log(TreeLogger.DEBUG,"known modified resources = " + modifiedResourcePaths);
    logger.log(TreeLogger.DEBUG,"clearing cached output for resulting stale types = " + staleTypeNames);
  }
  for (  String staleTypeName : staleTypeNames) {
    clearCachedTypeOutput(staleTypeName);
  }
  return Sets.newHashSet(staleTypeNames);
}
