{
  SpeedTracerLogger.Event optimizeEvent=SpeedTracerLogger.start(CompilerEventType.OPTIMIZE,"optimizer",NAME);
  CanObserveSubclassUninitializedFieldsVisitor visitor=new CanObserveSubclassUninitializedFieldsVisitor();
  visitor.accept(program);
  Set<JType> classesThatCanPotentiallyObserveUninitializedSubclassFields=visitor.classesThatCanPotentiallyObserveUninitializedSubclassFields;
  for (  JType type : classesThatCanPotentiallyObserveUninitializedSubclassFields) {
    if (classesWhoseFieldsCanBeObservedUninitialized.contains(type)) {
      continue;
    }
    classesWhoseFieldsCanBeObservedUninitialized.addAll(program.getSubclasses(type));
  }
  optimizeEvent.end();
  return new Predicate<JField>(){
    @Override public boolean apply(    JField field){
      return isUninitializedValueObservable(field);
    }
  }
;
}
