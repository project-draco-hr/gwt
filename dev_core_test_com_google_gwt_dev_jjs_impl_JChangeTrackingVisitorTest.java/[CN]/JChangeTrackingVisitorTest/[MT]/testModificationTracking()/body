{
  addSnippetClassDecl("static class A {","  public double field;","  public static int staticField = 1 < 2 ? 1 : 0;","  public int instanceField = 1 + 1;","  public A(double f) { field = f; }","  public void fun1 () { for(int i = 3; i < 4; i++) i = 8; }","  public int fun2 (int a) { return a > 1 ? 1 : 0; }","  public void fun3 () { int a; for(int i = 3; i < 4; i++) a = i < 4 ? 1 : 0; }","  public int fun4 (int a, int b) { return a + b; }","  public int fun5 (int a, int b, int c) { return c > 0 ? a + b : a - b; }","}");
  addSnippetClassDecl("static class B{","  public int field1;","  public boolean field2;","  public char field3;","  public short field5;","}");
  JProgram program=compileSnippet("void","");
  OptimizerContext optimizerCtx=new FullOptimizerContext(program);
  int first=optimizerCtx.getOptimizationStep();
  ReplaceConditionalExprWithItsThenExprVisitor repalceConditionalExprVisitor=new ReplaceConditionalExprWithItsThenExprVisitor(optimizerCtx);
  repalceConditionalExprVisitor.accept(program.getFromTypeMap("test.EntryPoint$A"));
  optimizerCtx.incOptimizationStep();
  Set<JMethod> modifiedMethodsInIteration1=ImmutableSet.copyOf(getMethods(program,"test.EntryPoint$A","fun2","fun3","fun5",GwtAstBuilder.CLINIT_NAME));
  Set<JField> modifiedFieldsInIteration1=ImmutableSet.copyOf(getFields(program,"test.EntryPoint$A","staticField"));
  assertEquals(modifiedFieldsInIteration1,optimizerCtx.getModifiedFieldsSince(first));
  assertEquals(modifiedMethodsInIteration1,optimizerCtx.getModifiedMethodsSince(first));
  int second=optimizerCtx.getOptimizationStep();
  ReplaceAddOperationWithItsFirstOperandVisitor replaceAddOperationVisitor=new ReplaceAddOperationWithItsFirstOperandVisitor(optimizerCtx);
  replaceAddOperationVisitor.accept(program.getFromTypeMap("test.EntryPoint$A"));
  optimizerCtx.incOptimizationStep();
  Set<JMethod> modifiedMethodsInIteration2=ImmutableSet.copyOf(getMethods(program,"test.EntryPoint$A","fun4","fun5",GwtAstBuilder.INIT_NAME));
  Set<JField> modifiedFieldsInIteration2=ImmutableSet.copyOf(getFields(program,"test.EntryPoint$A","instanceField","field"));
  assertEquals(modifiedFieldsInIteration2,optimizerCtx.getModifiedFieldsSince(second));
  assertEquals(modifiedMethodsInIteration2,optimizerCtx.getModifiedMethodsSince(second));
  assertEquals(Sets.union(modifiedFieldsInIteration1,modifiedFieldsInIteration2),optimizerCtx.getModifiedFieldsSince(first));
  assertEquals(Sets.union(modifiedMethodsInIteration1,modifiedMethodsInIteration2),optimizerCtx.getModifiedMethodsSince(first));
  int third=optimizerCtx.getOptimizationStep();
  SetFieldOfIntToLongVisitor setFieldOfIntToLongVisitor=new SetFieldOfIntToLongVisitor(optimizerCtx);
  setFieldOfIntToLongVisitor.accept(program.getFromTypeMap("test.EntryPoint$B"));
  optimizerCtx.incOptimizationStep();
  Set<JMethod> modifiedMethodsInIteration3=ImmutableSet.of();
  Set<JField> modifiedFieldsInIteration3=ImmutableSet.copyOf(getFields(program,"test.EntryPoint$B","field1"));
  assertEquals(modifiedFieldsInIteration3,optimizerCtx.getModifiedFieldsSince(third));
  assertEquals(modifiedMethodsInIteration3,optimizerCtx.getModifiedMethodsSince(third));
  assertEquals(Sets.union(modifiedFieldsInIteration2,modifiedFieldsInIteration3),optimizerCtx.getModifiedFieldsSince(second));
  assertEquals(Sets.union(modifiedMethodsInIteration2,modifiedMethodsInIteration3),optimizerCtx.getModifiedMethodsSince(second));
  assertEquals(Sets.union(Sets.union(modifiedFieldsInIteration1,modifiedFieldsInIteration2),modifiedFieldsInIteration3),optimizerCtx.getModifiedFieldsSince(first));
  assertEquals(Sets.union(Sets.union(modifiedMethodsInIteration1,modifiedMethodsInIteration2),modifiedMethodsInIteration3),optimizerCtx.getModifiedMethodsSince(first));
  Set<JMethod> methodsDeletedInIteration4=getMethods(program,"test.EntryPoint$A","fun5");
  RemoveMethodsWithThreeParamsVisitor removeMethodsWithThreeParamsVisitor=new RemoveMethodsWithThreeParamsVisitor(optimizerCtx);
  removeMethodsWithThreeParamsVisitor.accept(program.getFromTypeMap("test.EntryPoint$A"));
  assertEquals(Sets.difference(Sets.union(Sets.union(modifiedMethodsInIteration1,modifiedMethodsInIteration2),modifiedMethodsInIteration3),methodsDeletedInIteration4),optimizerCtx.getModifiedMethodsSince(first));
  Set<JField> fieldsDeletedInIteration4=getFields(program,"test.EntryPoint$B","field1");
  RemoveFieldsOfLongType removeFieldsOfLongType=new RemoveFieldsOfLongType(optimizerCtx);
  removeFieldsOfLongType.accept(program.getFromTypeMap("test.EntryPoint$B"));
  assertEquals(Sets.difference(Sets.union(Sets.union(modifiedFieldsInIteration1,modifiedFieldsInIteration2),modifiedFieldsInIteration3),fieldsDeletedInIteration4),optimizerCtx.getModifiedFieldsSince(first));
}
