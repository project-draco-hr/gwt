{
  addSnippetClassDecl("static class A {","  public double field;","  public A(double f) { field = f; }","  public void fun1 () { for(int i = 3; i < 4; i++) i = 8; }","  public int fun2 (int a) { return a > 1 ? 1 : 0; }","  public void fun3 () { int a; for(int i = 3; i < 4; i++) a = i < 4 ? 1 : 0; }","  public int fun4 (int a, int b) { return a + b; }","  public int fun5 (int a, int b, int c) { return c > 0 ? a + b : a - b; }","}");
  addSnippetClassDecl("static class B{","  public int field1;","  public boolean field2;","  public char field3;","  public short field5;","}");
  JProgram program=compileSnippet("void","");
  OptimizerContext optimizerCtx=new FullOptimizerContext(program);
  int first=optimizerCtx.getOptimizationStep();
  ReplaceConditionalExprWithItsThenExprVisitor repalceConditionalExprVisitor=new ReplaceConditionalExprWithItsThenExprVisitor(optimizerCtx);
  repalceConditionalExprVisitor.accept(program.getFromTypeMap("test.EntryPoint$A"));
  optimizerCtx.incOptimizationStep();
  assertEquals(0,optimizerCtx.getModifiedFieldsSince(first).size());
  assertEquals(3,optimizerCtx.getModifiedMethodsSince(first).size());
  assertTrue(optimizerCtx.getModifiedMethodsSince(first).contains(JJSTestBase.findMethod(program.getFromTypeMap("test.EntryPoint$A"),"fun2")));
  assertTrue(optimizerCtx.getModifiedMethodsSince(first).contains(JJSTestBase.findMethod(program.getFromTypeMap("test.EntryPoint$A"),"fun3")));
  assertTrue(optimizerCtx.getModifiedMethodsSince(first).contains(JJSTestBase.findMethod(program.getFromTypeMap("test.EntryPoint$A"),"fun5")));
  int second=optimizerCtx.getOptimizationStep();
  ReplaceAddOperationWithItsFirstOperandVisitor replaceAddOperationVisitor=new ReplaceAddOperationWithItsFirstOperandVisitor(optimizerCtx);
  replaceAddOperationVisitor.accept(program.getFromTypeMap("test.EntryPoint$A"));
  optimizerCtx.incOptimizationStep();
  assertEquals(0,optimizerCtx.getModifiedFieldsSince(second).size());
  assertEquals(2,optimizerCtx.getModifiedMethodsSince(second).size());
  assertTrue(optimizerCtx.getModifiedMethodsSince(second).contains(JJSTestBase.findMethod(program.getFromTypeMap("test.EntryPoint$A"),"fun4")));
  assertTrue(optimizerCtx.getModifiedMethodsSince(second).contains(JJSTestBase.findMethod(program.getFromTypeMap("test.EntryPoint$A"),"fun5")));
  assertEquals(0,optimizerCtx.getModifiedFieldsSince(first).size());
  assertEquals(4,optimizerCtx.getModifiedMethodsSince(first).size());
  assertTrue(optimizerCtx.getModifiedMethodsSince(first).contains(JJSTestBase.findMethod(program.getFromTypeMap("test.EntryPoint$A"),"fun2")));
  assertTrue(optimizerCtx.getModifiedMethodsSince(first).contains(JJSTestBase.findMethod(program.getFromTypeMap("test.EntryPoint$A"),"fun3")));
  assertTrue(optimizerCtx.getModifiedMethodsSince(first).contains(JJSTestBase.findMethod(program.getFromTypeMap("test.EntryPoint$A"),"fun4")));
  assertTrue(optimizerCtx.getModifiedMethodsSince(first).contains(JJSTestBase.findMethod(program.getFromTypeMap("test.EntryPoint$A"),"fun5")));
  int third=optimizerCtx.getOptimizationStep();
  SetFieldOfIntToLongVisitor setFieldOfIntToLongVisitor=new SetFieldOfIntToLongVisitor(optimizerCtx);
  setFieldOfIntToLongVisitor.accept(program.getFromTypeMap("test.EntryPoint$B"));
  optimizerCtx.incOptimizationStep();
  assertEquals(1,optimizerCtx.getModifiedFieldsSince(third).size());
  assertTrue(optimizerCtx.getModifiedFieldsSince(third).contains(JJSTestBase.findField(program.getFromTypeMap("test.EntryPoint$B"),"field1")));
  assertEquals(0,optimizerCtx.getModifiedMethodsSince(third).size());
  assertEquals(1,optimizerCtx.getModifiedFieldsSince(second).size());
  assertTrue(optimizerCtx.getModifiedFieldsSince(second).contains(JJSTestBase.findField(program.getFromTypeMap("test.EntryPoint$B"),"field1")));
  assertEquals(2,optimizerCtx.getModifiedMethodsSince(second).size());
  assertTrue(optimizerCtx.getModifiedMethodsSince(second).contains(JJSTestBase.findMethod(program.getFromTypeMap("test.EntryPoint$A"),"fun4")));
  assertTrue(optimizerCtx.getModifiedMethodsSince(second).contains(JJSTestBase.findMethod(program.getFromTypeMap("test.EntryPoint$A"),"fun5")));
  assertEquals(1,optimizerCtx.getModifiedFieldsSince(first).size());
  assertTrue(optimizerCtx.getModifiedFieldsSince(first).contains(JJSTestBase.findField(program.getFromTypeMap("test.EntryPoint$B"),"field1")));
  assertEquals(4,optimizerCtx.getModifiedMethodsSince(first).size());
  assertTrue(optimizerCtx.getModifiedMethodsSince(first).contains(JJSTestBase.findMethod(program.getFromTypeMap("test.EntryPoint$A"),"fun2")));
  assertTrue(optimizerCtx.getModifiedMethodsSince(first).contains(JJSTestBase.findMethod(program.getFromTypeMap("test.EntryPoint$A"),"fun3")));
  assertTrue(optimizerCtx.getModifiedMethodsSince(first).contains(JJSTestBase.findMethod(program.getFromTypeMap("test.EntryPoint$A"),"fun4")));
  assertTrue(optimizerCtx.getModifiedMethodsSince(first).contains(JJSTestBase.findMethod(program.getFromTypeMap("test.EntryPoint$A"),"fun5")));
  RemoveMethodsWithThreeParamsVisitor removeMethodsWithThreeParamsVisitor=new RemoveMethodsWithThreeParamsVisitor(optimizerCtx);
  removeMethodsWithThreeParamsVisitor.accept(program.getFromTypeMap("test.EntryPoint$A"));
  assertEquals(3,optimizerCtx.getModifiedMethodsSince(first).size());
  assertTrue(optimizerCtx.getModifiedMethodsSince(first).contains(JJSTestBase.findMethod(program.getFromTypeMap("test.EntryPoint$A"),"fun2")));
  assertTrue(optimizerCtx.getModifiedMethodsSince(first).contains(JJSTestBase.findMethod(program.getFromTypeMap("test.EntryPoint$A"),"fun3")));
  assertTrue(optimizerCtx.getModifiedMethodsSince(first).contains(JJSTestBase.findMethod(program.getFromTypeMap("test.EntryPoint$A"),"fun4")));
  RemoveFieldsOfLongType removeFieldsOfLongType=new RemoveFieldsOfLongType(optimizerCtx);
  removeFieldsOfLongType.accept(program.getFromTypeMap("test.EntryPoint$B"));
  assertEquals(0,optimizerCtx.getModifiedFieldsSince(first).size());
}
