{
  if (!ArchivePreloader.ARCHIVES_ENABLED) {
    return;
  }
  logger.log(TreeLogger.TRACE,"Looking for precompiled archives.  To disable, use -Dgwt.usearchives=false");
  SpeedTracerLogger.Event loadArchive=SpeedTracerLogger.start(CompilerEventType.LOAD_ARCHIVE);
  try {
    Collection<URL> archiveURLs=module.getAllCompilationUnitArchiveURLs();
    for (    URL archiveURL : archiveURLs) {
      Long lastModifiedTime=Util.getResourceModifiedTime(archiveURL);
      String toLoad=archiveURL.toExternalForm();
      Long previousLoadTime=alreadyLoaded.get(toLoad);
      if (previousLoadTime == null || !previousLoadTime.equals(lastModifiedTime)) {
        logger.log(TreeLogger.TRACE,"Loading archived module: " + archiveURL);
        try {
          CompilationUnitArchive archive=CompilationUnitArchive.createFromURL(archiveURL);
          CompilationStateBuilder.addArchive(archive);
        }
 catch (        IOException ex) {
          logger.log(TreeLogger.WARN,"Unable to read: " + archiveURL + ". Skipping: "+ ex);
        }
catch (        ClassNotFoundException ex) {
          logger.log(TreeLogger.WARN,"Incompatible archived module: " + archiveURL + ". Skipping: "+ ex);
        }
        alreadyLoaded.put(toLoad,lastModifiedTime);
      }
 else {
        logger.log(TreeLogger.TRACE,"Skipping already loaded archive: " + archiveURL);
      }
    }
  }
  finally {
    loadArchive.end();
  }
}
