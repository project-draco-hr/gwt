{
  Set<String> toReturn=new HashSet<String>();
  Set<JClassType> seen=new HashSet<JClassType>();
  List<JClassType> queue=new LinkedList<JClassType>();
  for (  String intf : interfaces) {
    JClassType type=typeOracle.findType(InternalName.toSourceName(intf));
    if (type == null) {
      throw new RuntimeException("Unknown type " + intf);
    }
    queue.add(type);
  }
  while (!queue.isEmpty()) {
    JClassType intf=queue.remove(0);
    if (seen.contains(intf)) {
      continue;
    }
    seen.add(intf);
    toReturn.add(intf.getQualifiedBinaryName().replace('.','/'));
    queue.addAll(Arrays.asList(intf.getImplementedInterfaces()));
  }
  String[] array=toReturn.toArray(new String[toReturn.size()]);
  Arrays.sort(array);
  return array;
}
