{
  StringBuilder sb=new StringBuilder();
  sb.append("package java.lang;");
  sb.append("public class Object { }");
  addResource("java.lang.Object",sb);
  sb=new StringBuilder();
  sb.append("package test.refresh.with.errors;");
  sb.append("public class UnmodifiedClass { }");
  addResource("test.refresh.with.errors.UnmodifiedClass",sb);
  sb=new StringBuilder();
  sb.append("package test.refresh.with.errors;\n");
  sb.append("public class GoodClass {\n");
  sb.append("  ClassThatWillGoBad ctwgb;\n");
  sb.append("}\n");
  addResource("test.refresh.with.errors.GoodClass",sb);
  MutableJavaResource unitThatWillGoBad=new MutableJavaResource("test.refresh.with.errors","test.refresh.with.errors.ClassThatWillGoBad"){
    private String source="package test.refresh.with.errors;\n" + "public class ClassThatWillGoBad { }\n";
    @Override public String getSource(){
      return source;
    }
    @Override public void touch(){
      super.touch();
      source="This will cause a syntax error.";
    }
  }
;
  resources.add(unitThatWillGoBad);
  buildTypeOracle();
  assertNotNull(typeOracle.findType("test.refresh.with.errors.UnmodifiedClass"));
  assertNotNull(typeOracle.findType("test.refresh.with.errors.GoodClass"));
  assertNotNull(typeOracle.findType("test.refresh.with.errors.ClassThatWillGoBad"));
  sb=new StringBuilder();
  sb.append("package test.refresh.with.errors;\n");
  sb.append("public class AnotherGoodClass {\n");
  sb.append("  UnmodifiedClass uc; // This will cause the runaway pruning.\n");
  sb.append("}\n");
  addResource("test.refresh.with.errors.AnotherGoodClass",sb);
  sb=new StringBuilder();
  sb.append("package test.refresh.with.errors;\n");
  sb.append("public class BadClass {\n");
  sb.append("  This will trigger a syntax error.\n");
  sb.append("}\n");
  addResource("test.refresh.with.errors.BadClass",sb);
  unitThatWillGoBad.touch();
  buildTypeOracle();
  assertNotNull(typeOracle.findType("test.refresh.with.errors.UnmodifiedClass"));
  assertNotNull(typeOracle.findType("test.refresh.with.errors.AnotherGoodClass"));
  assertNull(typeOracle.findType("test.refresh.with.errors.BadClass"));
  assertNull(typeOracle.findType("test.refresh.with.errors.ClassThatWillGoBad"));
  assertNull(typeOracle.findType("test.refresh.with.errors.GoodClass"));
}
