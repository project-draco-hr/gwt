{
  JMethod calledMethod=x.getTarget();
  JDeclaredType enclosingTypeOfCalledMethod=calledMethod.getEnclosingType();
  if (isNonStaticJsoClassDispatch(calledMethod,enclosingTypeOfCalledMethod)) {
    logError(x,"JSNI method %s calls non-static method %s on an instance which is a " + "subclass of JavaScriptObject. Only static method calls on JavaScriptObject subclasses " + "are allowed in JSNI.",currentJsniMethod.getQualifiedName(),calledMethod.getQualifiedName());
  }
 else   if (isJsoInterface(enclosingTypeOfCalledMethod)) {
    logError(x,"JSNI method %s calls method %s on an instance which might be a " + "JavaScriptObject. Such a method call is only allowed in pure Java (non-JSNI) " + "functions.",currentJsniMethod.getQualifiedName(),calledMethod.getQualifiedName());
  }
 else   if (jprogram.isRepresentedAsNativeJsPrimitive(enclosingTypeOfCalledMethod) && !calledMethod.isStatic() && !calledMethod.isConstructor()) {
    logError(x,"JSNI method %s calls method %s. Instance methods on %s " + "cannot be called from JSNI.",currentJsniMethod.getQualifiedName(),calledMethod.getQualifiedName(),enclosingTypeOfCalledMethod.getName());
  }
 else   if (typesRequiringTrampolineDispatch.contains(enclosingTypeOfCalledMethod) && !calledMethod.isStatic() && !calledMethod.isConstructor()) {
    log(x,Type.WARN,"JSNI method %s calls method %s. Instance methods from %s should " + "not be called on Boolean, Double, String, Array or JSO instances from JSNI.",currentJsniMethod.getQualifiedName(),calledMethod.getQualifiedName(),enclosingTypeOfCalledMethod.getName());
  }
  return true;
}
