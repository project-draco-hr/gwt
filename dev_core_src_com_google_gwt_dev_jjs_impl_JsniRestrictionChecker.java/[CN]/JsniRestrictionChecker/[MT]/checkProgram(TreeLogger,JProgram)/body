{
  final Set<JDeclaredType> typesRequiringTrampolineDispatch=Sets.newHashSet();
  for (  JDeclaredType type : program.getRepresentedAsNativeTypes()) {
    collectAllSuperTypes(type,typesRequiringTrampolineDispatch);
  }
  new JVisitor(){
    @Override public boolean visit(    JMethodBody x,    Context ctx){
      return false;
    }
    @Override public boolean visit(    final JsniMethodBody x,    Context ctx){
      final Map<String,JsniMethodRef> methodsByJsniReference=Maps.newHashMap();
      for (      JsniMethodRef ref : x.getJsniMethodRefs()) {
        methodsByJsniReference.put(ref.getIdent(),ref);
      }
      if (methodsByJsniReference.isEmpty()) {
        return false;
      }
      new JsModVisitor(){
        @Override public boolean visit(        JsInvocation x,        JsContext ctx){
          if (!(x.getQualifier() instanceof JsNameRef)) {
            return true;
          }
          JsNameRef ref=(JsNameRef)x.getQualifier();
          if (!ref.isJsniReference()) {
            return true;
          }
          JsExpression methodQualifier=ref.getQualifier();
          if (methodQualifier != null) {
            accept(methodQualifier);
          }
          return false;
        }
        @Override public void endVisit(        JsNameRef x,        JsContext ctx){
          JsniMethodRef jsniMethodReference=methodsByJsniReference.get(x.getIdent());
          if (jsniMethodReference != null) {
            checkJsniMethodReference(jsniMethodReference);
          }
        }
      }
.accept(x.getFunc());
      return false;
    }
    private void checkJsniMethodReference(    JsniMethodRef jsniMethodReference){
      JMethod method=jsniMethodReference.getTarget();
      JDeclaredType enclosingType=method.getEnclosingType();
      if (isNonStaticJsoClassDispatch(method,enclosingType) || isJsoInterface(enclosingType)) {
        logError(jsniMethodReference,"Method %s is implemented by a JSO and can only be used in calls " + "within a JSNI method body.",getDescription(method));
      }
 else       if (program.isRepresentedAsNativeJsPrimitive(enclosingType) && !method.isStatic() && !method.isConstructor()) {
        logError(jsniMethodReference,"Method %s is implemented by devirtualized type %s JSO and can only be used in " + "calls within a JSNI method body.",getDescription(method),getDescription(enclosingType));
      }
 else       if (typesRequiringTrampolineDispatch.contains(enclosingType) && !method.isStatic() && !method.isConstructor()) {
        logWarning(jsniMethodReference,"Unsafe reference to method %s. Instance methods from %s should " + "not be called on Boolean, Double, String, Array or JSO instances " + "from  within a JSNI method body.",getDescription(method),getDescription(enclosingType));
      }
    }
    private boolean isJsoInterface(    JDeclaredType type){
      return program.typeOracle.isSingleJsoImpl(type) || program.typeOracle.isDualJsoInterface(type);
    }
  }
.accept(program);
  boolean hasErrors=reportErrorsAndWarnings(logger);
  if (hasErrors) {
    throw new UnableToCompleteException();
  }
}
