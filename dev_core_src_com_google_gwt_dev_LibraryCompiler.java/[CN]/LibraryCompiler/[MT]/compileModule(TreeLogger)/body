{
  long beforeCompileMs=System.currentTimeMillis();
  LibraryWriter libraryWriter=compilerContext.getLibraryWriter();
  try {
    if (compilerOptions.isValidateOnly()) {
      boolean valid=Precompile.validate(logger,compilerContext);
      if (!valid) {
        throw new UnableToCompleteException();
      }
    }
    Precompilation precompilation=Precompile.precompile(logger,compilerContext);
    if (precompilation == null) {
      throw new UnableToCompleteException();
    }
    if (!compilerOptions.shouldSaveSource()) {
      precompilation.removeSourceArtifacts(logger);
    }
    Event compilePermutationsEvent=SpeedTracerLogger.start(CompilerEventType.COMPILE_PERMUTATIONS);
    permutations=new Permutation[]{precompilation.getPermutations()[0]};
    List<PersistenceBackedObject<PermutationResult>> permutationResultFiles=new ArrayList<PersistenceBackedObject<PermutationResult>>();
    permutationResultFiles.add(libraryWriter.getPermutationResultHandle());
    CompilePerms.compile(logger,compilerContext,precompilation,permutations,compilerOptions.getLocalWorkers(),permutationResultFiles);
    compilePermutationsEvent.end();
    generatedArtifacts=precompilation.getGeneratedArtifacts();
    libraryWriter.addGeneratedArtifacts(generatedArtifacts);
    libraryWriter.setCompilationErrorsIndex(compilerContext.getLocalCompilationErrorsIndex());
  }
  finally {
    libraryWriter.write();
  }
  long durationMs=System.currentTimeMillis() - beforeCompileMs;
  TreeLogger detailBranch=logger.branch(TreeLogger.INFO,String.format("%.3fs -- Translating Java to Javascript",durationMs / 1000d));
  TinyCompileSummary tinyCompileSummary=compilerContext.getTinyCompileSummary();
  boolean shouldWarn=tinyCompileSummary.getTypesForGeneratorsCount() + tinyCompileSummary.getTypesForAstCount() > 1500;
  String recommendation=shouldWarn ? " This module should probably be split into smaller " + "modules or should trigger fewer generators since its current size hurts " + "incremental compiles." : "";
  detailBranch.log(shouldWarn ? TreeLogger.WARN : TreeLogger.INFO,String.format("There were %s static source files, %s generated source files, %s types loaded for " + "generators and %s types loaded for AST construction. %s",tinyCompileSummary.getStaticSourceFilesCount(),tinyCompileSummary.getGeneratedSourceFilesCount(),tinyCompileSummary.getTypesForGeneratorsCount(),tinyCompileSummary.getTypesForAstCount(),recommendation));
}
