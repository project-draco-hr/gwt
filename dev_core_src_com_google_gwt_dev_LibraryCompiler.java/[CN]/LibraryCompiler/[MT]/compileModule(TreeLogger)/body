{
  long beforeCompileMs=System.currentTimeMillis();
  TreeLogger branch=logger.branch(TreeLogger.INFO,"Compiling module " + module.getCanonicalName());
  LibraryWriter libraryWriter=compilerContext.getLibraryWriter();
  if (compilerOptions.isValidateOnly()) {
    boolean valid=Precompile.validate(logger,compilerContext);
    if (!valid) {
      throw new UnableToCompleteException();
    }
  }
  Precompilation precompilation=Precompile.precompile(branch,compilerContext);
  if (!compilerOptions.shouldSaveSource()) {
    precompilation.removeSourceArtifacts(logger);
  }
  permutations=new Permutation[]{precompilation.getPermutations()[0]};
  permutationResultFiles=new ArrayList<PersistenceBackedObject<PermutationResult>>();
  permutationResultFiles.add(libraryWriter.getPermutationResultHandle());
  CompilePerms.compile(branch,compilerContext,precompilation,permutations,compilerOptions.getLocalWorkers(),permutationResultFiles);
  generatedArtifacts=precompilation.getGeneratedArtifacts();
  libraryWriter.addGeneratedArtifacts(generatedArtifacts);
  libraryWriter.write();
  long durationMs=System.currentTimeMillis() - beforeCompileMs;
  branch.log(TreeLogger.INFO,"Library compilation succeeded -- " + String.format("%.3f",durationMs / 1000d) + "s");
}
