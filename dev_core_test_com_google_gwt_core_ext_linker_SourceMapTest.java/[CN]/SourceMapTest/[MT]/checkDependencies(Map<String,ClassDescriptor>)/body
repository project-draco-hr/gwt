{
  return new DefaultHandler(){
    Set<Integer> currentDependencies=Sets.newHashSet();
    String methodName(    String mName){
      if (mName.startsWith("$") && !mName.equals("$init") && !mName.equals("$clinit")) {
        return mName.substring(1);
      }
      return mName;
    }
    boolean compareMethodNames(    String strictName,    String relaxName){
      if (strictName.equals(relaxName)) {
        return true;
      }
      if (relaxName.startsWith("$") && !relaxName.startsWith("$create")) {
        return strictName.equals(relaxName.substring(1));
      }
      return false;
    }
    @Override public void startElement(    String uri,    String localName,    String qName,    Attributes attributes) throws SAXException {
      super.startElement(uri,localName,qName,attributes);
      if (qName.equals("method")) {
        currentDependencies.clear();
        String[] fullName=attributes.getValue("name").split("::");
        for (        MethodDescriptor method : classDescriptorByName.get(fullName[0]).getMethods()) {
          if (compareMethodNames(method.getName(),methodName(fullName[1]))) {
            currentDependencies.addAll(Ints.asList(method.getDependentPointers()));
          }
        }
        assertTrue(currentDependencies.size() > 0);
      }
 else       if (qName.equals("called")) {
        assertTrue(currentDependencies.size() > 0);
        String[] fullName=attributes.getValue("by").split("::");
        boolean present=false;
        for (        MethodDescriptor method : classDescriptorByName.get(fullName[0]).getMethods()) {
          if (compareMethodNames(method.getName(),methodName(fullName[1]))) {
            if (currentDependencies.contains(method.getUniqueId())) {
              present=true;
              break;
            }
          }
        }
        assertTrue(present);
      }
    }
  }
;
}
