{
  this.style=resources.cellTableStyle();
  this.style.ensureInjected();
  setElement(table=Document.get().createTableElement());
  table.setCellSpacing(0);
  thead=table.createTHead();
  table.appendChild(tbody=Document.get().createTBodyElement());
  tfoot=table.createTFoot();
  setStyleName(this.style.cellTable());
  this.impl=new CellListImpl<T>(this,pageSize,tbody){
    private final TableElement tmpElem=Document.get().createTableElement();
    @Override public void setData(    List<T> values,    int start){
      createHeadersAndFooters();
      super.setData(values,start);
    }
    @Override protected Element convertToElements(    String html){
      tmpElem.setInnerHTML("<tbody>" + html + "</tbody>");
      return tmpElem.getTBodies().getItem(0);
    }
    @Override protected boolean dependsOnSelection(){
      for (      Column<T,?> column : columns) {
        if (column.dependsOnSelection()) {
          return true;
        }
      }
      return false;
    }
    @Override protected void emitHtml(    StringBuilder sb,    List<T> values,    int start,    SelectionModel<? super T> selectionModel){
      int length=values.size();
      int end=start + length;
      for (int i=start; i < end; i++) {
        T value=values.get(i - start);
        boolean isSelected=(selectionModel == null || value == null) ? false : selectionModel.isSelected(value);
        sb.append("<tr __idx='").append(i).append("'");
        sb.append(" class='");
        sb.append(i % 2 == 0 ? style.evenRow() : style.oddRow());
        if (isSelected) {
          sb.append(" ").append(style.selectedRow());
        }
        sb.append("'>");
        boolean first=true;
        for (        Column<T,?> column : columns) {
          sb.append("<td class='").append(style.cell());
          if (first) {
            first=false;
            sb.append(" ").append(style.firstColumn());
          }
          sb.append("'>");
          if (value != null) {
            column.render(value,sb);
          }
          sb.append("</td>");
        }
        sb.append("</tr>");
      }
    }
    @Override protected void setSelected(    Element elem,    boolean selected){
      setStyleName(elem,style.selectedRow(),selected);
    }
    @Override protected void updateSelection(){
      for (      Header<?> header : headers) {
        if (header != null && header.dependsOnSelection()) {
          createHeaders(false);
          break;
        }
      }
      for (      Header<?> footer : footers) {
        if (footer != null && footer.dependsOnSelection()) {
          createHeaders(true);
          break;
        }
      }
      super.updateSelection();
    }
  }
;
  setPageSize(pageSize);
  sinkEvents(Event.ONCLICK | Event.MOUSEEVENTS | Event.KEYEVENTS| Event.ONCHANGE| Event.FOCUSEVENTS);
}
