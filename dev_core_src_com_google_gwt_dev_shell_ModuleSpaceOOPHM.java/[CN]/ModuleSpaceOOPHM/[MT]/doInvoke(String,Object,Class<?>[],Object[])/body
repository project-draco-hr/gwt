{
  TreeLogger branch=host.getLogger().branch(TreeLogger.SPAM,"Invoke native method " + name,null);
  Event javaToJsCallEvent=SpeedTracerLogger.start(DevModeEventType.JAVA_TO_JS_CALL);
  if (SpeedTracerLogger.jsniCallLoggingEnabled()) {
    javaToJsCallEvent.addData("name",name);
  }
  CompilingClassLoader isolatedClassLoader=getIsolatedClassLoader();
  JsValueOOPHM jsthis=new JsValueOOPHM();
  Class<?> jthisType=(jthis == null) ? Object.class : jthis.getClass();
  JsValueGlue.set(jsthis,isolatedClassLoader,jthisType,jthis);
  branch.log(TreeLogger.SPAM,"  this=" + jsthis);
  int argc=args.length;
  JsValueOOPHM argv[]=new JsValueOOPHM[argc];
  for (int i=0; i < argc; ++i) {
    argv[i]=new JsValueOOPHM();
    JsValueGlue.set(argv[i],isolatedClassLoader,types[i],args[i]);
    branch.log(TreeLogger.SPAM,"  arg[" + i + "]="+ argv[i]);
  }
  JsValueOOPHM returnVal=new JsValueOOPHM();
  try {
    channel.invokeJavascript(isolatedClassLoader,jsthis,name,argv,returnVal);
    branch.log(TreeLogger.SPAM,"  returned " + returnVal);
    return returnVal;
  }
 catch (  Throwable t) {
    branch.log(TreeLogger.SPAM,"exception thrown",t);
    throw t;
  }
 finally {
    javaToJsCallEvent.end();
  }
}
