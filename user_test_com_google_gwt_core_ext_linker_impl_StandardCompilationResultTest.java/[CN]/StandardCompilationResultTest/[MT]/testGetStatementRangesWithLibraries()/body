{
  StatementRanges[] applicationStatementRanges=new StatementRanges[]{new StandardStatementRanges(Lists.newArrayList(0),Lists.newArrayList(30))};
  StatementRanges[] libraryStatementRanges1=new StatementRanges[]{new StandardStatementRanges(Lists.newArrayList(0),Lists.newArrayList(10))};
  StatementRanges[] libraryStatementRanges2=new StatementRanges[]{new StandardStatementRanges(Lists.newArrayList(0),Lists.newArrayList(20))};
  MockPermutationResult applicationPermutationResult=new MockPermutationResult(new byte[][]{getBytes("[application JavaScriptCode]")},"",applicationStatementRanges,new byte[0]);
  MockPermutationResult libraryPermutationResult1=new MockPermutationResult(new byte[][]{getBytes("[library 1 JavaScript code]")},"",libraryStatementRanges1,new byte[0]);
  MockPermutationResult libraryPermutationResult2=new MockPermutationResult(new byte[][]{getBytes("[library 2 JavaScript code]")},"",libraryStatementRanges2,new byte[0]);
  StandardCompilationResult compilationResult=new StandardCompilationResult(applicationPermutationResult,Sets.newLinkedHashSet(Lists.<PermutationResult>newArrayList(libraryPermutationResult1,libraryPermutationResult2)));
  StatementRanges combinedStatementRanges=compilationResult.getStatementRanges()[0];
  assertEquals(0,combinedStatementRanges.start(0));
  assertEquals(10,combinedStatementRanges.end(0));
  assertEquals(10,combinedStatementRanges.start(1));
  assertEquals(30,combinedStatementRanges.end(1));
  assertEquals(30,combinedStatementRanges.start(2));
  assertEquals(60,combinedStatementRanges.end(2));
}
