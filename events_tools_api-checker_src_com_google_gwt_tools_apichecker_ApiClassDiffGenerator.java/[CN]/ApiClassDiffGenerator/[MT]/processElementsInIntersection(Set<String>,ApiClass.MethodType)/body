{
  Set<ApiAbstractMethod> missingElements=missingMethods.get(methodType);
  Map<ApiAbstractMethod,Set<ApiChange>> intersectingElements=intersectingMethods.get(methodType);
  Set<ApiAbstractMethod> onlyInExisting=new HashSet<ApiAbstractMethod>();
  Set<ApiAbstractMethod> onlyInNew=new HashSet<ApiAbstractMethod>();
  Set<String> commonSignature=new HashSet<String>();
  for (  String elementName : intersection) {
    Set<ApiAbstractMethod> methodsInNew=newClass.getApiMethodsByName(elementName,methodType);
    Set<ApiAbstractMethod> methodsInExisting=oldClass.getApiMethodsByName(elementName,methodType);
    onlyInNew.addAll(methodsInNew);
    onlyInExisting.addAll(methodsInExisting);
    if (isIncompatibileDueToMethodOverloading(methodsInNew,methodsInExisting)) {
      ApiAbstractMethod methodInExisting=methodsInExisting.toArray(new ApiAbstractMethod[0])[0];
      addProperty(intersectingElements,methodInExisting,new ApiChange(methodInExisting,ApiChange.Status.OVERLOADED_METHOD_CALL,"Many methods in the new API with similar signatures. Methods = " + methodsInNew + " This might break API source compatibility"));
    }
    for (    ApiAbstractMethod methodInExisting : methodsInExisting) {
      Set<ApiChange> allPossibleApiChanges=new HashSet<ApiChange>();
      ApiAbstractMethod sameSignatureMethod=null;
      for (      ApiAbstractMethod methodInNew : methodsInNew) {
        Set<ApiChange> currentApiChange=new HashSet<ApiChange>();
        boolean hasSameSignature=false;
        if (methodInExisting.isCompatible(methodInNew)) {
          if (methodInExisting.isOverridable()) {
            currentApiChange.addAll(methodInExisting.getAllChangesInApi(methodInNew));
          }
 else {
            currentApiChange.addAll(methodInExisting.checkExceptionsAndReturnType(methodInNew));
          }
          for (          ApiChange.Status status : methodInExisting.getModifierChanges(methodInNew)) {
            currentApiChange.add(new ApiChange(methodInExisting,status));
          }
          if (methodInNew.getInternalSignature().equals(methodInExisting.getInternalSignature())) {
            currentApiChange.add(new ApiChange(methodInExisting,ApiChange.Status.COMPATIBLE));
            hasSameSignature=true;
          }
 else {
            currentApiChange.add(new ApiChange(methodInExisting,ApiChange.Status.COMPATIBLE_WITH,methodInNew.getApiSignature()));
          }
        }
        if (currentApiChange.size() > 0) {
          if (hasSameSignature) {
            allPossibleApiChanges=currentApiChange;
            sameSignatureMethod=methodInNew;
          }
 else           if (sameSignatureMethod == null) {
            allPossibleApiChanges.addAll(currentApiChange);
          }
        }
      }
      if (allPossibleApiChanges.size() > 0) {
        onlyInExisting.remove(methodInExisting);
        String signatureInExisting=methodInExisting.getInternalSignature();
        if (sameSignatureMethod != null && signatureInExisting.equals(sameSignatureMethod.getInternalSignature())) {
          commonSignature.add(signatureInExisting);
        }
        for (        ApiChange apiChange : allPossibleApiChanges) {
          addProperty(intersectingElements,methodInExisting,apiChange);
        }
      }
    }
    for (    ApiAbstractMethod methodInNew : methodsInNew) {
      ApiAbstractMethod sameSignatureMethod=null;
      for (      ApiAbstractMethod methodInExisting : methodsInExisting) {
        if (methodInNew.getInternalSignature().equals(methodInExisting.getInternalSignature())) {
          sameSignatureMethod=methodInExisting;
          break;
        }
      }
      if (sameSignatureMethod != null) {
        continue;
      }
      for (      ApiAbstractMethod methodInExisting : methodsInExisting) {
        if (methodInNew.isCompatible(methodInExisting)) {
          for (          ApiChange apiChange : methodInExisting.checkExceptionsAndReturnType(methodInNew)) {
            addProperty(intersectingElements,methodInExisting,apiChange);
          }
        }
      }
    }
  }
  missingElements.addAll(onlyInExisting);
}
