{
  Splittable s=StringQuoter.createSplittable();
  assertFalse(s.isIndexed());
  assertTrue(s.isKeyed());
  assertFalse(s.isString());
  assertTrue(s.getPropertyKeys().isEmpty());
  string("bar").assign(s,"foo");
  string("quux").assign(s,"baz");
  assertEquals(new HashSet<String>(Arrays.asList("foo","baz")),new HashSet<String>(s.getPropertyKeys()));
  assertFalse(s.isNull("foo"));
  assertTrue(s.isNull("bar"));
  assertEquals("bar",s.get("foo").asString());
  assertEquals("quux",s.get("baz").asString());
  String payload=s.getPayload();
  assertTrue(payload.startsWith("{"));
  assertTrue(payload.endsWith("}"));
  assertTrue(payload.contains("\"foo\":\"bar\""));
  assertTrue(payload.contains("\"baz\":\"quux\""));
  Splittable s2=s.deepCopy();
  assertNotSame(s,s2);
  assertEquals("bar",s2.get("foo").asString());
  assertEquals("quux",s2.get("baz").asString());
  Object o=new Object();
  s.setReified("reified",o);
  assertFalse("Should not see reified in " + s.getPayload(),s.getPayload().contains("reified"));
  assertFalse("Should not see __s in " + s.getPayload(),s.getPayload().contains("__s"));
  assertSame(o,s.getReified("reified"));
}
