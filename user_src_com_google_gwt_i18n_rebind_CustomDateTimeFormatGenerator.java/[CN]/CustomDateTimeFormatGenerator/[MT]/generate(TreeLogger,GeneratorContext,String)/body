{
  TypeOracle typeOracle=context.getTypeOracle();
  PropertyOracle propertyOracle=context.getPropertyOracle();
  LocaleUtils localeUtils=LocaleUtils.getInstance(logger,propertyOracle,context);
  JClassType targetClass;
  try {
    targetClass=typeOracle.getType(typeName);
  }
 catch (  NotFoundException e) {
    logger.log(TreeLogger.ERROR,"No such type " + typeName,e);
    throw new UnableToCompleteException();
  }
  JClassType cdtfClass;
  try {
    cdtfClass=typeOracle.getType(CustomDateTimeFormat.class.getName());
  }
 catch (  NotFoundException e) {
    logger.log(TreeLogger.ERROR,"No such type " + CustomDateTimeFormat.class.getName(),e);
    throw new UnableToCompleteException();
  }
  if (!cdtfClass.isAssignableFrom(targetClass)) {
    logger.log(TreeLogger.ERROR,typeName + " is not assignable to " + CustomDateTimeFormat.class.getName());
    throw new UnableToCompleteException();
  }
  JClassType oldDateTimeFormat;
  try {
    oldDateTimeFormat=typeOracle.getType(com.google.gwt.i18n.client.DateTimeFormat.class.getName());
  }
 catch (  NotFoundException e) {
    logger.log(TreeLogger.ERROR,"No client DateTimeFormat type?",e);
    throw new UnableToCompleteException();
  }
  JClassType dateTimeFormat;
  try {
    dateTimeFormat=typeOracle.getType(DateTimeFormat.class.getName());
  }
 catch (  NotFoundException e) {
    logger.log(TreeLogger.ERROR,"No DateTimeFormat type?",e);
    throw new UnableToCompleteException();
  }
  GwtLocale gwtLocale=localeUtils.getCompileLocale();
  DateTimePatternGenerator dtpg=new DateTimePatternGenerator(gwtLocale);
  String packageName=targetClass.getPackage().getName();
  String className=targetClass.getName().replace('.','_') + "_" + gwtLocale.getAsString();
  PrintWriter pw=context.tryCreate(logger,packageName,className);
  if (pw != null) {
    ClassSourceFileComposerFactory factory=new ClassSourceFileComposerFactory(packageName,className);
    factory.addImplementedInterface(targetClass.getQualifiedSourceName());
    factory.addImport("com.google.gwt.i18n.client.DateTimeFormat");
    SourceWriter writer=factory.createSourceWriter(context,pw);
    writer.indent();
    for (    JMethod method : targetClass.getMethods()) {
      JType returnType=method.getReturnType();
      if (returnType != dateTimeFormat && returnType != oldDateTimeFormat) {
        logger.log(TreeLogger.ERROR,typeName + "." + method.getName()+ " must return DateTimeFormat");
        throw new UnableToCompleteException();
      }
      String pattern;
      Pattern annotation=method.getAnnotation(Pattern.class);
      if (annotation == null) {
        com.google.gwt.i18n.client.CustomDateTimeFormat.Pattern oldAnnotation=method.getAnnotation(com.google.gwt.i18n.client.CustomDateTimeFormat.Pattern.class);
        if (oldAnnotation == null) {
          logger.log(TreeLogger.ERROR,typeName + "." + method.getName()+ " must have an @Pattern annotation");
          throw new UnableToCompleteException();
        }
        pattern=oldAnnotation.value();
      }
 else {
        pattern=annotation.value();
      }
      pattern=dtpg.getBestPattern(pattern);
      writer.println();
      String retTypeName=method.getReturnType().getQualifiedSourceName();
      writer.println("public " + retTypeName + " "+ method.getName()+ "() {");
      writer.println("  return " + retTypeName + ".getFormat(\""+ pattern+ "\");");
      writer.println("}");
    }
    writer.commit(logger);
  }
  return packageName + "." + className;
}
