{
  PerfLogger.start("ModuleDef.normalize");
  for (Iterator<Property> iter=getProperties().iterator(); iter.hasNext(); ) {
    Property prop=iter.next();
    if (prop.getActiveValue() == null) {
      String[] knownValues=prop.getKnownValues();
      assert(knownValues.length > 0);
      if (knownValues.length > 1) {
        if (prop.getProvider() == null) {
          prop.setProvider(new DefaultPropertyProvider(this,prop));
        }
      }
 else {
        prop.setActiveValue(knownValues[0]);
      }
    }
  }
  TreeLogger branch=Messages.SOURCE_PATH_LOCATIONS.branch(logger,null);
  lazySourceOracle=sourcePathEntries.create(branch);
  if (lazySourceOracle.isEmpty()) {
    branch.log(TreeLogger.WARN,"No source path entries; expect subsequent failures",null);
  }
 else {
    String[] allFiles=lazySourceOracle.getAllFiles();
    Set<String> files=new HashSet<String>();
    files.addAll(Arrays.asList(allFiles));
    files.removeAll(alreadySeenFiles);
    for (Iterator<String> iter=files.iterator(); iter.hasNext(); ) {
      String fileName=iter.next();
      int pos=fileName.lastIndexOf('/');
      String packageName;
      if (pos >= 0) {
        packageName=fileName.substring(0,pos);
        packageName=packageName.replace('/','.');
      }
 else {
        packageName="";
      }
      URL url=lazySourceOracle.find(fileName);
      allCups.add(new URLCompilationUnitProvider(url,packageName));
    }
    alreadySeenFiles.addAll(files);
    this.cups=allCups.toArray(this.cups);
  }
  branch=Messages.PUBLIC_PATH_LOCATIONS.branch(logger,null);
  lazyPublicOracle=publicPathEntries.create(branch);
  boolean badLinker=false;
  for (  Map.Entry<String,String> entry : linkerTypesByName.entrySet()) {
    try {
      Class<?> clazz=Class.forName(entry.getValue());
      Class<? extends Linker> linkerClazz=clazz.asSubclass(Linker.class);
      linkersByName.put(entry.getKey(),linkerClazz.newInstance());
    }
 catch (    ClassCastException e) {
      logger.log(TreeLogger.ERROR,"Not actually a Linker",e);
      badLinker=true;
    }
catch (    ClassNotFoundException e) {
      logger.log(TreeLogger.ERROR,"Unable to find Linker",e);
      badLinker=true;
    }
catch (    InstantiationException e) {
      logger.log(TreeLogger.ERROR,"Unable to create Linker",e);
      badLinker=true;
    }
catch (    IllegalAccessException e) {
      logger.log(TreeLogger.ERROR,"Linker does not have a public constructor",e);
      badLinker=true;
    }
  }
  for (  String linkerName : activeLinkerNames) {
    if (!linkersByName.containsKey(linkerName)) {
      logger.log(TreeLogger.ERROR,"Unknown linker name " + linkerName,null);
      badLinker=true;
    }
  }
  if (badLinker) {
    throw new UnableToCompleteException();
  }
  PerfLogger.end();
}
