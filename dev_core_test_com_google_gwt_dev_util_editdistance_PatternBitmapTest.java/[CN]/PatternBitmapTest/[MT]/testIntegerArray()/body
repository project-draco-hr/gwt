{
  String string="x012345678901234567890123456789" + "01234567890123456789x0123456789" + "01234x567890123456789";
  int wordSize=31;
  CharIndex idx=CharIndex.getInstance(string);
  int[][] map=PatternBitmap.map(string,idx,new int[idx.size()][],wordSize);
  assertEquals(1 << 0,map[idx.lookup('x')][0]);
  assertEquals(1 << 20,map[idx.lookup('x')][1]);
  assertEquals(1 << 5,map[idx.lookup('x')][2]);
  int[] notThere=map[idx.lookup('\u0000')];
  for (int i=0; i < 0xffff; i++) {
    char c=(char)i;
    int where=string.indexOf(c);
    if (where >= 0) {
      assertTrue("Map for pattern character '" + c + "'"+ " should be non-zero",(map[idx.lookup(c)] != notThere));
      int bit=map[idx.lookup(c)][where / wordSize] & (1 << (where % wordSize));
      assertTrue("Map for pattern character '" + c + "'"+ " should have "+ where+ " bit on",(bit != 0));
    }
 else {
      assertEquals("Map for unused character '" + c + "' should be none",notThere,map[idx.lookup(c)]);
    }
  }
}
