{
  Set<Resource> newResources=oracle.getResources();
  if (newResources == cachedResources) {
    return;
  }
  Set<Resource> unchanged=new HashSet<Resource>(cachedResources);
  unchanged.retainAll(newResources);
  Set<Resource> changed=new HashSet<Resource>(newResources);
  changed.removeAll(unchanged);
  for (Iterator<JavaSourceFileImpl> it=sourceFiles.iterator(); it.hasNext(); ) {
    JavaSourceFileImpl sourceFile=it.next();
    if (!unchanged.contains(sourceFile.getResource())) {
      sourceFile.invalidate();
      it.remove();
    }
  }
  for (  Resource newResource : changed) {
    sourceFiles.add(new JavaSourceFileImpl(newResource));
  }
  Map<String,JavaSourceFile> sourceMap=new HashMap<String,JavaSourceFile>();
  for (  JavaSourceFileImpl sourceFile : sourceFiles) {
    sourceMap.put(sourceFile.getTypeName(),sourceFile);
  }
  exposedSourceMap=Collections.unmodifiableMap(sourceMap);
  exposedClassNames=Collections.unmodifiableSet(sourceMap.keySet());
  HashSet<JavaSourceFile> sourceFilesConstantLookup=new HashSet<JavaSourceFile>(sourceMap.values());
  exposedSourceFiles=Collections.unmodifiableSet(sourceFilesConstantLookup);
  cachedResources=newResources;
}
