{
  ByteArrayOutputStream bytes=new ByteArrayOutputStream();
  OutputStreamWriter out;
  try {
    out=new OutputStreamWriter(compress ? new GZIPOutputStream(bytes) : bytes);
  }
 catch (  IOException e) {
    logger.log(TreeLogger.ERROR,"Unable to set up gzip stream",e);
    throw new UnableToCompleteException();
  }
  PrintWriter pw=new PrintWriter(out);
  HtmlTextOutput htmlOut=new HtmlTextOutput(pw,false);
  String curLine="<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
  htmlOut.printRaw(curLine);
  htmlOut.newline();
  curLine="<soyc>";
  htmlOut.printRaw(curLine);
  htmlOut.newline();
  htmlOut.indentIn();
  htmlOut.indentIn();
  Map<Integer,String> splitPointMap=new TreeMap<Integer,String>(report.getSplitPointMap());
  if (splitPointMap.size() > 0) {
    curLine="<splitpoints>";
    htmlOut.printRaw(curLine);
    htmlOut.newline();
    htmlOut.indentIn();
    htmlOut.indentIn();
    for (    Integer splitPointCount : splitPointMap.keySet()) {
      curLine="<splitpoint id=\"" + splitPointCount + "\" location=\""+ splitPointMap.get(splitPointCount)+ "\"/>";
      htmlOut.printRaw(curLine);
      htmlOut.newline();
    }
    htmlOut.indentOut();
    htmlOut.indentOut();
    curLine="</splitpoints>";
    htmlOut.printRaw(curLine);
    htmlOut.newline();
  }
  emitMembers(report,htmlOut);
  Map<Story,Integer> storyIds=emitStories(report,htmlOut);
  emitJs(report,htmlOut,storyIds);
  htmlOut.indentOut();
  htmlOut.indentOut();
  curLine="</soyc>";
  htmlOut.printRaw(curLine);
  htmlOut.newline();
  pw.close();
  Utility.close(out);
  SyntheticArtifact toReturn=emitBytes(logger,bytes.toByteArray(),partialPath);
  return toReturn;
}
