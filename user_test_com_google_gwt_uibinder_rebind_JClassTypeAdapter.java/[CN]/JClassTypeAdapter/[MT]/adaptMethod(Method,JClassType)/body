{
  final JMethod method=createMock(JMethod.class);
  addCommonAbstractMethodBehaviour(realMethod,method,enclosingType);
  addAnnotationBehaviour(realMethod,method);
  addGenericsBehaviour(realMethod,method);
  when(method.isStatic()).thenReturn(Modifier.isStatic(realMethod.getModifiers()));
  when(method.getReturnType()).thenAnswer(new Answer<JType>(){
    @Override public JType answer(    InvocationOnMock invocation) throws Throwable {
      return adaptType(realMethod.getReturnType());
    }
  }
);
  when(method.getParameters()).thenAnswer(new Answer<JParameter[]>(){
    @Override public JParameter[] answer(    InvocationOnMock invocation) throws Throwable {
      return adaptParameters(realMethod.getParameterTypes(),realMethod.getParameterAnnotations(),method);
    }
  }
);
  when(method.getThrows()).thenAnswer(new Answer<JClassType[]>(){
    @Override public JClassType[] answer(    InvocationOnMock invocation) throws Throwable {
      Class<?>[] realThrows=realMethod.getExceptionTypes();
      JClassType[] gwtThrows=new JClassType[realThrows.length];
      for (int i=0; i < realThrows.length; i++) {
        gwtThrows[i]=(JClassType)adaptType(realThrows[i]);
      }
      return gwtThrows;
    }
  }
);
  return method;
}
