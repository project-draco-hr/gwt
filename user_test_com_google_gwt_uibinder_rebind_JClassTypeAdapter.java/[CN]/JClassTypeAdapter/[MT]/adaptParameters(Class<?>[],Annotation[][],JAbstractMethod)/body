{
  JParameter[] parameters=new JParameter[parameterTypes.length];
  for (int i=0; i < parameterTypes.length; i++) {
    final Class<?> realParameterType=parameterTypes[i];
    JParameter parameter=createMock(JParameter.class);
    parameters[i]=parameter;
    when(parameter.getEnclosingMethod()).thenReturn(method);
    when(parameter.getType()).thenAnswer(new Answer<JType>(){
      @Override public JType answer(      InvocationOnMock invocation) throws Throwable {
        return adaptType(realParameterType);
      }
    }
);
    final Annotation[] annotations=parameterAnnotations[i];
    when(parameter.isAnnotationPresent(any(Class.class))).thenAnswer(new Answer<Boolean>(){
      @Override public Boolean answer(      InvocationOnMock invocation) throws Throwable {
        Class<? extends Annotation> annotationClass=(Class<? extends Annotation>)invocation.getArguments()[0];
        for (        Annotation annotation : annotations) {
          if (annotation.equals(annotationClass)) {
            return true;
          }
        }
        return false;
      }
    }
);
    when(parameter.getAnnotation(any(Class.class))).thenAnswer(new Answer<Annotation>(){
      @Override public Annotation answer(      InvocationOnMock invocation) throws Throwable {
        Class<? extends Annotation> annotationClass=(Class<? extends Annotation>)invocation.getArguments()[0];
        for (        Annotation annotation : annotations) {
          if (annotation.equals(annotationClass)) {
            return annotation;
          }
        }
        return null;
      }
    }
);
  }
  return parameters;
}
