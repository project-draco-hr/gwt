{
  final JConstructor constructor=createMock(JConstructor.class);
  addCommonAbstractMethodBehaviour(realConstructor,constructor,enclosingType);
  addAnnotationBehaviour(realConstructor,constructor);
  when(constructor.getParameters()).thenAnswer(new Answer<JParameter[]>(){
    @Override public JParameter[] answer(    InvocationOnMock invocation) throws Throwable {
      return adaptParameters(realConstructor.getParameterTypes(),realConstructor.getParameterAnnotations(),constructor);
    }
  }
);
  when(constructor.getThrows()).thenAnswer(new Answer<JClassType[]>(){
    @Override public JClassType[] answer(    InvocationOnMock invocation) throws Throwable {
      Class<?>[] realThrows=realConstructor.getExceptionTypes();
      JClassType[] gwtThrows=new JClassType[realThrows.length];
      for (int i=0; i < realThrows.length; i++) {
        gwtThrows[i]=(JClassType)adaptType(realThrows[i]);
      }
      return gwtThrows;
    }
  }
);
  return constructor;
}
