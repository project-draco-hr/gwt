{
  if (clazz.isPrimitive()) {
    throw new RuntimeException("Only classes can be passed to adaptJavaClass");
  }
  JClassType type=adaptedClasses.get(clazz);
  if (type != null) {
    return type;
  }
  type=createMock(JClassType.class);
  final JClassType finalType=type;
  adaptedClasses.put(clazz,type);
  addAnnotationBehaviour(clazz,type);
  expect(type.getMethods()).andStubAnswer(new IAnswer<JMethod[]>(){
    public JMethod[] answer() throws Throwable {
      Method[] realMethods=clazz.getDeclaredMethods();
      JMethod[] methods=new JMethod[realMethods.length];
      for (int i=0; i < realMethods.length; i++) {
        methods[i]=adaptMethod(realMethods[i],finalType);
      }
      return methods;
    }
  }
);
  expect(type.getConstructors()).andStubAnswer(new IAnswer<JConstructor[]>(){
    public JConstructor[] answer() throws Throwable {
      Constructor<?>[] realConstructors=clazz.getDeclaredConstructors();
      JConstructor[] constructors=new JConstructor[realConstructors.length];
      for (int i=0; i < realConstructors.length; i++) {
        constructors[i]=adaptConstructor(realConstructors[i],finalType);
      }
      return constructors;
    }
  }
);
  expect(type.getFields()).andStubAnswer(new IAnswer<JField[]>(){
    public JField[] answer() throws Throwable {
      Field[] realFields=clazz.getDeclaredFields();
      JField[] fields=new JField[realFields.length];
      for (int i=0; i < realFields.length; i++) {
        fields[i]=adaptField(realFields[i],finalType);
      }
      return fields;
    }
  }
);
  expect(type.getName()).andStubReturn(clazz.getName());
  expect(type.getQualifiedSourceName()).andStubReturn(clazz.getCanonicalName());
  expect(type.getSimpleSourceName()).andStubReturn(clazz.getSimpleName());
  int modifiers=clazz.getModifiers();
  expect(type.isAbstract()).andStubReturn(Modifier.isAbstract(modifiers));
  expect(type.isFinal()).andStubReturn(Modifier.isFinal(modifiers));
  expect(type.isPublic()).andStubReturn(Modifier.isPublic(modifiers));
  expect(type.isProtected()).andStubReturn(Modifier.isProtected(modifiers));
  expect(type.isPrivate()).andStubReturn(Modifier.isPrivate(modifiers));
  expect(type.isArray()).andStubReturn(null);
  expect(type.isEnum()).andStubReturn(null);
  expect(type.isPrimitive()).andStubReturn(null);
  expect(type.isClassOrInterface()).andStubReturn(type);
  if (clazz.isInterface()) {
    expect(type.isClass()).andStubReturn(null);
    expect(type.isInterface()).andStubReturn(type);
  }
 else {
    expect(type.isClass()).andStubReturn(type);
    expect(type.isInterface()).andStubReturn(null);
  }
  expect(type.getEnclosingType()).andStubAnswer(new IAnswer<JClassType>(){
    public JClassType answer() throws Throwable {
      Class<?> enclosingClass=clazz.getEnclosingClass();
      if (enclosingClass == null) {
        return null;
      }
      return adaptJavaClass(enclosingClass);
    }
  }
);
  expect(type.getSuperclass()).andStubAnswer(new IAnswer<JClassType>(){
    public JClassType answer() throws Throwable {
      Class<?> superclass=clazz.getSuperclass();
      if (superclass == null) {
        return null;
      }
      return adaptJavaClass(superclass);
    }
  }
);
  EasyMock.replay(type);
  return type;
}
