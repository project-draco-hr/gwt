{
  JsFunction jsFunc=x.getFunc();
  new JsModVisitor(){
    @Override public void endVisit(    JsNameRef x,    JsContext<JsExpression> ctx){
      String ident=x.getIdent();
      if (ident.charAt(0) == '@') {
        HasEnclosingType node=program.jsniMap.get(ident);
        assert(node != null);
        if (node instanceof JField) {
          JField field=(JField)node;
          JsName jsName=names.get(field);
          assert(jsName != null);
          x.resolve(jsName);
          JsInvocation clinitCall=maybeCreateClinitCall(field);
          if (clinitCall != null) {
            JsExpression commaExpr=createCommaExpression(clinitCall,x);
            ctx.replaceMe(commaExpr);
          }
        }
 else {
          JMethod method=(JMethod)node;
          if (x.getQualifier() == null) {
            JsName jsName=names.get(method);
            assert(jsName != null);
            x.resolve(jsName);
          }
 else {
            JsName jsName=polymorphicNames.get(method);
            if (jsName == null) {
              jsName=nullMethodName;
            }
            x.resolve(jsName);
          }
        }
      }
    }
  }
.accept(jsFunc);
  push(jsFunc);
  return false;
}
