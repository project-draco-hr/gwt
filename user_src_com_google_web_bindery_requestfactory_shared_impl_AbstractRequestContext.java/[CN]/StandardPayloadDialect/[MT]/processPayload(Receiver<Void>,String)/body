{
  ResponseMessage response=AutoBeanCodex.decode(MessageFactoryHolder.FACTORY,ResponseMessage.class,payload).as();
  if (response.getGeneralFailure() != null) {
    ServerFailureMessage failure=response.getGeneralFailure();
    ServerFailure fail=new ServerFailure(failure.getMessage(),failure.getExceptionType(),failure.getStackTrace(),failure.isFatal());
    fail(receiver,fail);
    return;
  }
  if (response.getViolations() != null) {
    Set<ConstraintViolation<?>> errors=new HashSet<ConstraintViolation<?>>();
    for (    ViolationMessage message : response.getViolations()) {
      errors.add(new MyConstraintViolation(message));
    }
    violation(receiver,errors);
    return;
  }
  processReturnOperations(response);
  Set<Throwable> causes=null;
  for (int i=0, j=state.invocations.size(); i < j; i++) {
    try {
      if (response.getStatusCodes().get(i)) {
        state.invocations.get(i).onSuccess(response.getInvocationResults().get(i));
      }
 else {
        ServerFailureMessage failure=AutoBeanCodex.decode(MessageFactoryHolder.FACTORY,ServerFailureMessage.class,response.getInvocationResults().get(i)).as();
        state.invocations.get(i).onFail(new ServerFailure(failure.getMessage(),failure.getExceptionType(),failure.getStackTrace(),failure.isFatal()));
      }
    }
 catch (    Throwable t) {
      if (causes == null) {
        causes=new HashSet<Throwable>();
      }
      causes.add(t);
    }
  }
  if (receiver != null) {
    try {
      receiver.onSuccess(null);
    }
 catch (    Throwable t) {
      if (causes == null) {
        causes=new HashSet<Throwable>();
      }
      causes.add(t);
    }
  }
  state.editedProxies.clear();
  state.invocations.clear();
  state.returnedProxies.clear();
  if (causes != null) {
    throw new UmbrellaException(causes);
  }
}
