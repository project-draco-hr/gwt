{
  Set<CompilationUnit> units=new HashSet<CompilationUnit>();
{
    StringBuilder code=new StringBuilder();
    code.append("interface A<T> { }\n");
    units.add(createMockCompilationUnit("A",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("interface B extends A<String> { }\n");
    units.add(createMockCompilationUnit("A",code));
  }
  TreeLogger logger=createLogger();
  TypeOracle to=TypeOracleTestingUtils.buildStandardTypeOracleWith(logger,units);
  JClassType a=to.getType("A");
  JClassType b=to.getType("B");
  List<JClassType> subtypesOfA=TypeHierarchyUtils.getImmediateSubtypes(a);
  assertEquals(1,subtypesOfA.size());
  assertTrue(subtypesOfA.contains(b));
}
