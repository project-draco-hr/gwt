{
  Set<Resource> resources=new HashSet<Resource>();
{
    StringBuilder code=new StringBuilder();
    code.append("interface A<T> { }\n");
    resources.add(new StaticJavaResource("A",code));
  }
{
    StringBuilder code=new StringBuilder();
    code.append("interface B extends A<String> { }\n");
    resources.add(new StaticJavaResource("B",code));
  }
  TreeLogger logger=createLogger();
  TypeOracle to=TypeOracleTestingUtils.buildStandardTypeOracleWith(logger,resources);
  JClassType a=to.getType("A");
  JClassType b=to.getType("B");
  List<JClassType> subtypesOfA=TypeHierarchyUtils.getImmediateSubtypes(a);
  assertEquals(1,subtypesOfA.size());
  assertTrue(subtypesOfA.contains(b));
}
