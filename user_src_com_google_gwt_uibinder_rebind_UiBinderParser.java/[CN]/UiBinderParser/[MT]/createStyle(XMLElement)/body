{
  String body=elem.consumeUnescapedInnerText();
  if (body.length() > 0 && elem.hasAttribute(SOURCE_ATTRIBUTE)) {
    writer.die("In %s, cannot use both a source attribute and inline css text.",elem);
  }
  String source=elem.consumeAttribute(SOURCE_ATTRIBUTE);
  String name=elem.consumeAttribute(FIELD_ATTRIBUTE,"style");
  JClassType publicType=consumeCssResourceType(elem);
  String importTypeNames=elem.consumeAttribute(IMPORT_ATTRIBUTE,null);
  LinkedHashSet<JClassType> importTypes=new LinkedHashSet<JClassType>();
  if (importTypeNames != null) {
    String[] typeNames=importTypeNames.split("\\s+");
    for (    String type : typeNames) {
      importTypes.add(findCssResourceType(elem,type));
    }
  }
  ImplicitCssResource cssMethod=bundleClass.createCssResource(name,source,publicType,body,importTypes);
  FieldWriter field=fieldManager.registerFieldOfGeneratedType(cssMethod.getPackageName(),cssMethod.getClassName(),cssMethod.getName());
  field.setInitializer(String.format("%s.%s()",bundleClass.getFieldName(),cssMethod.getName()));
}
