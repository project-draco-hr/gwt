{
  try {
    RPC.decodeRequest(generateSetValid("testSet"));
  }
 catch (  Exception e) {
    fail("Received unexpected Exception from testSetSpoofingSet (1)" + e.getMessage());
  }
  try {
    RPC.decodeRequest(generateSetStringSpoofingSetInteger());
    fail("Expected IncompatibleRemoteServiceException from testSetSpoofingSet (2)");
  }
 catch (  IncompatibleRemoteServiceException e) {
    assertEquals(SerializedTypeViolationException.class,e.getCause().getClass());
    assertTrue(e.getCause().getMessage().matches(".*String.*Integer.*"));
  }
  try {
    RPC.decodeRequest(generateHashSetHashSetSpoofingSetInteger());
    fail("Expected IncompatibleRemoteServiceException from testSetSpoofingSet (3)");
  }
 catch (  IncompatibleRemoteServiceException e) {
    assertEquals(SerializedTypeViolationException.class,e.getCause().getClass());
    assertTrue(e.getCause().getMessage().matches(".*HashSet.*Integer.*"));
  }
  try {
    RPC.decodeRequest(generateLinkedHashSetHashSetSpoofingSetInteger());
    fail("Expected IncompatibleRemoteServiceException from testSetSpoofingSet (4)");
  }
 catch (  IncompatibleRemoteServiceException e) {
    assertEquals(SerializedTypeViolationException.class,e.getCause().getClass());
    assertTrue(e.getCause().getMessage().matches(".*HashSet.*Integer.*"));
  }
  try {
    RPC.decodeRequest(generateTreeSetHashSetSpoofingSetInteger());
    fail("Expected IncompatibleRemoteServiceException from testSetSpoofingSet (5)");
  }
 catch (  IncompatibleRemoteServiceException e) {
    assertEquals(SerializedTypeViolationException.class,e.getCause().getClass());
    assertTrue(e.getCause().getMessage().matches(".*HashSet.*Integer.*"));
  }
}
