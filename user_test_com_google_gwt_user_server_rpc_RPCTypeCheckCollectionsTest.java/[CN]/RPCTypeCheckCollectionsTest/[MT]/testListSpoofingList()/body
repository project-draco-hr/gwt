{
  try {
    RPC.decodeRequest(generateListValid("testList"));
  }
 catch (  Exception e) {
    fail("Received unexpected Exception from testListSpoofingList (a)" + e.getMessage());
  }
  try {
    RPC.decodeRequest(generateListStringSpoofingListInteger());
    fail("Expected IncompatibleRemoteServiceException from testListSpoofingList (1)");
  }
 catch (  IncompatibleRemoteServiceException e) {
    assertEquals(SerializedTypeViolationException.class,e.getCause().getClass());
    assertTrue(e.getCause().getMessage().matches(".*String.*Integer.*"));
  }
  try {
    RPC.decodeRequest(generateArrayListHashSetSpoofingList());
    fail("Expected IncompatibleRemoteServiceException from testListSpoofingList (2)");
  }
 catch (  IncompatibleRemoteServiceException e) {
    assertEquals(SerializedTypeViolationException.class,e.getCause().getClass());
    assertTrue(e.getCause().getMessage().matches(".*HashSet.*Integer.*"));
  }
  try {
    RPC.decodeRequest(generateArraysAsListHashSetSpoofingList());
    fail("Expected IncompatibleRemoteServiceException from testListSpoofingList (3)");
  }
 catch (  IncompatibleRemoteServiceException e) {
    assertEquals(SerializedTypeViolationException.class,e.getCause().getClass());
    assertTrue(e.getCause().getMessage().matches(".*HashSet.*Integer.*"));
  }
  try {
    RPC.decodeRequest(generateLinkedListHashSetSpoofingList());
    fail("Expected IncompatibleRemoteServiceException from testListSpoofingList (4)");
  }
 catch (  IncompatibleRemoteServiceException e) {
    assertEquals(SerializedTypeViolationException.class,e.getCause().getClass());
    assertTrue(e.getCause().getMessage().matches(".*HashSet.*Integer.*"));
  }
  try {
    RPC.decodeRequest(generateSingletonListHashSetSpoofingList());
    fail("Expected IncompatibleRemoteServiceException from testListSpoofingList (5)");
  }
 catch (  IncompatibleRemoteServiceException e) {
    assertEquals(SerializedTypeViolationException.class,e.getCause().getClass());
    assertTrue(e.getCause().getMessage().matches(".*HashSet.*Integer.*"));
  }
}
