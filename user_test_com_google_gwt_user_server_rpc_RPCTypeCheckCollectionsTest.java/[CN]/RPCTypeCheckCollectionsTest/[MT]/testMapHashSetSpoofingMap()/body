{
  try {
    RPC.decodeRequest(generateHashMapKeyHashSetSpoofingHashMap());
    fail("Expected IncompatibleRemoteServiceException from " + "testHashMapHashSetSpoofingHashMap (1)");
  }
 catch (  IncompatibleRemoteServiceException e) {
    assertEquals(SerializedTypeViolationException.class,e.getCause().getClass());
    assertTrue(e.getCause().getMessage().matches(".*HashSet.*String.*"));
  }
  try {
    RPC.decodeRequest(generateHashMapValueHashSetSpoofingHashMap());
    fail("Expected IncompatibleRemoteServiceException from " + "testHashMapHashSetSpoofingHashMap (2)");
  }
 catch (  IncompatibleRemoteServiceException e) {
    assertEquals(SerializedTypeViolationException.class,e.getCause().getClass());
    assertTrue(e.getCause().getMessage().matches(".*HashSet.*Integer.*"));
  }
  try {
    RPC.decodeRequest(generateIdentityHashMapKeyHashSetSpoofingIdentityHashMap());
    fail("Expected IncompatibleRemoteServiceException from " + "testHashMapHashSetSpoofingHashMap (3)");
  }
 catch (  IncompatibleRemoteServiceException e) {
    assertEquals(SerializedTypeViolationException.class,e.getCause().getClass());
    assertTrue(e.getCause().getMessage().matches(".*HashSet.*String.*"));
  }
  try {
    RPC.decodeRequest(generateIdentityHashMapValueHashSetSpoofingIdentityHashMap());
    fail("Expected IncompatibleRemoteServiceException from " + "testHashMapHashSetSpoofingHashMap (4)");
  }
 catch (  IncompatibleRemoteServiceException e) {
    assertEquals(SerializedTypeViolationException.class,e.getCause().getClass());
    assertTrue(e.getCause().getMessage().matches(".*HashSet.*Integer.*"));
  }
  try {
    RPC.decodeRequest(generateLinkedHashMapKeyHashSetSpoofingLinkedHashMap());
    fail("Expected IncompatibleRemoteServiceException from " + "testHashMapHashSetSpoofingHashMap (5)");
  }
 catch (  IncompatibleRemoteServiceException e) {
    assertEquals(SerializedTypeViolationException.class,e.getCause().getClass());
    assertTrue(e.getCause().getMessage().matches(".*HashSet.*String.*"));
  }
  try {
    RPC.decodeRequest(generateLinkedHashMapValueHashSetSpoofingLinkedHashMap());
    fail("Expected IncompatibleRemoteServiceException from " + "testHashMapHashSetSpoofingHashMap (6)");
  }
 catch (  IncompatibleRemoteServiceException e) {
    assertEquals(SerializedTypeViolationException.class,e.getCause().getClass());
    assertTrue(e.getCause().getMessage().matches(".*HashSet.*Integer.*"));
  }
  try {
    RPC.decodeRequest(generateTreeMapKeyHashSetSpoofingTreeMap());
    fail("Expected IncompatibleRemoteServiceException from " + "testHashMapHashSetSpoofingHashMap (7)");
  }
 catch (  IncompatibleRemoteServiceException e) {
    assertEquals(SerializedTypeViolationException.class,e.getCause().getClass());
    assertTrue(e.getCause().getMessage().matches(".*HashSet.*String.*"));
  }
  try {
    RPC.decodeRequest(generateTreeMapValueHashSetSpoofingTreeMap());
    fail("Expected IncompatibleRemoteServiceException from " + "testHashMapHashSetSpoofingHashMap (8)");
  }
 catch (  IncompatibleRemoteServiceException e) {
    assertEquals(SerializedTypeViolationException.class,e.getCause().getClass());
    assertTrue(e.getCause().getMessage().matches(".*HashSet.*Integer.*"));
  }
}
