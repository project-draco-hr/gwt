{
  List<JConstructor> delegatedSuperConstructors=FluentIterable.from(type.getConstructors()).filter(new Predicate<JConstructor>(){
    @Override public boolean apply(    JConstructor constructor){
      return getDelegatedThisOrSuperConstructor(constructor).getEnclosingType() != type;
    }
  }
).limit(2).toList();
  if (delegatedSuperConstructors.size() == 1) {
    return delegatedSuperConstructors.get(0);
  }
  return null;
}
