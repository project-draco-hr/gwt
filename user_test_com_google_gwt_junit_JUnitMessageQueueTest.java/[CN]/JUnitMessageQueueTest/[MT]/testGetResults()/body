{
  JUnitMessageQueue queue=createQueue(3,2,3);
  TestInfo[] testBlock0=queue.getTestBlocks().get(0);
  TestInfo test0_0=testBlock0[0];
  JUnitResult result0=new JUnitResult();
  result0.setException(new IllegalArgumentException("0"));
  JUnitResult result1=new JUnitResult();
  result0.setException(new IllegalArgumentException("1"));
  JUnitResult result2=new JUnitResult();
  result0.setException(new IllegalArgumentException("2"));
{
    Map<TestInfo,JUnitResult> results=new HashMap<TestInfo,JUnitResult>();
    results.put(test0_0,result0);
    queue.reportResults("client0","desc0","ie6",results);
  }
{
    Map<TestInfo,JUnitResult> results=new HashMap<TestInfo,JUnitResult>();
    results.put(test0_0,result1);
    queue.reportResults("client1","desc1","ie6",results);
  }
{
    Map<TestInfo,JUnitResult> results=new HashMap<TestInfo,JUnitResult>();
    results.put(test0_0,result2);
    queue.reportResults("client2","desc2","ie6",results);
  }
  Map<ClientStatus,JUnitResult> results=queue.getResults(test0_0);
  assertEquals(3,results.size());
  for (  Entry<ClientStatus,JUnitResult> entry : results.entrySet()) {
    ClientStatus client=entry.getKey();
    JUnitResult result=entry.getValue();
    if ("client0".equals(client.clientId)) {
      assertEquals(result0,result);
    }
 else     if ("client1".equals(client.clientId)) {
      assertEquals(result1,result);
    }
 else     if ("client2".equals(client.clientId)) {
      assertEquals(result2,result);
    }
 else {
      fail("Unexpected client");
    }
  }
}
