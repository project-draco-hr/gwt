{
  JUnitMessageQueue queue=createQueue(3,2,3);
  TestInfo[] testBlock0=queue.getTestBlocks().get(0);
  TestInfo test0_0=testBlock0[0];
  JUnitResult result0=new JUnitResult();
  result0.setException(new IllegalArgumentException("0"));
  JUnitResult result1=new JUnitResult();
  result0.setException(new IllegalArgumentException("1"));
  JUnitResult result2=new JUnitResult();
  result0.setException(new IllegalArgumentException("2"));
{
    Map<TestInfo,JUnitResult> results=new HashMap<TestInfo,JUnitResult>();
    results.put(test0_0,result0);
    queue.reportResults(createClientInfo(0,"ie6"),results);
  }
{
    Map<TestInfo,JUnitResult> results=new HashMap<TestInfo,JUnitResult>();
    results.put(test0_0,result1);
    queue.reportResults(createClientInfo(1,"ie6"),results);
  }
{
    Map<TestInfo,JUnitResult> results=new HashMap<TestInfo,JUnitResult>();
    results.put(test0_0,result2);
    queue.reportResults(createClientInfo(2,"ie6"),results);
  }
  Map<ClientStatus,JUnitResult> results=queue.getResults(test0_0);
  assertEquals(3,results.size());
  for (  Entry<ClientStatus,JUnitResult> entry : results.entrySet()) {
    ClientStatus client=entry.getKey();
    JUnitResult result=entry.getValue();
switch (client.getId()) {
case 0:
      assertEquals(result0,result);
    break;
case 1:
  assertEquals(result1,result);
break;
case 2:
assertEquals(result2,result);
break;
default :
fail("Unexpected client");
break;
}
}
}
