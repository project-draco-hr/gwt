{
  String simpleName=serviceIntf.getSimpleSourceName() + "_TypeOverridesFactory";
  PrintWriter out=ctx.tryCreate(logger,serviceIntf.getPackage().getName(),simpleName);
  if (out == null) {
    return;
  }
  TypeOracle typeOracle=ctx.getTypeOracle();
  JClassType objectType=typeOracle.getJavaLangObject();
  Set<JType> classLiterals=new LinkedHashSet<JType>();
  Map<JType,JMethod> serializerMethods=new LinkedHashMap<JType,JMethod>();
  Map<JType,List<String>> fields=new LinkedHashMap<JType,List<String>>();
  StringBuilder sb=writeArtificialRescues(typeOracle,serializationSto,deserializationSto);
  ClassSourceFileComposerFactory composerFactory=new ClassSourceFileComposerFactory(serviceIntf.getPackage().getName(),simpleName);
  composerFactory.addImport(ArtificialRescue.class.getCanonicalName());
  composerFactory.addImport(GWT.class.getCanonicalName());
  composerFactory.addImport(Impl.class.getCanonicalName());
  composerFactory.addImport(Rescue.class.getCanonicalName());
  composerFactory.addImport(TypeOverrides.class.getCanonicalName());
  composerFactory.addImport(TypeOverrides.SerializeFunction.class.getCanonicalName());
  composerFactory.addAnnotationDeclaration(sb.toString());
  SourceWriter sw=composerFactory.createSourceWriter(ctx,out);
  sw.println("public static TypeOverrides create() {");
  sw.indent();
  sw.println("TypeOverrides toReturn = TypeOverrides.create();");
  for (  JType type : serializationSto.getSerializableTypes()) {
    JClassType classType=type.isClass();
    if (classType == null) {
      continue;
    }
    boolean allFieldsAreSerializable=true;
    List<String> fieldRefs=new ArrayList<String>();
    JMethod serializerMethod=null;
    do {
      JClassType customSerializer=SerializableTypeOracleBuilder.findCustomFieldSerializer(typeOracle,classType);
      serializerMethod=customSerializer == null ? null : CustomFieldSerializerValidator.getSerializationMethod(customSerializer,type.isClass());
      if (serializerMethod != null) {
        break;
      }
      JField[] serializableFields=SerializationUtils.getSerializableFields(typeOracle,classType);
      allFieldsAreSerializable&=serializableFields.length == classType.getFields().length;
      for (      JField field : serializableFields) {
        fieldRefs.add("@" + field.getEnclosingType().getQualifiedSourceName() + "::"+ field.getName());
      }
      classType=classType.getSuperclass();
    }
 while (classType != objectType);
    if (allFieldsAreSerializable && serializerMethod == null) {
      continue;
    }
    if (serializerMethod != null || !fieldRefs.isEmpty()) {
      classLiterals.add(type);
      String mangledTypeName=type.getQualifiedSourceName().replace('.','_');
      sw.println("toReturn.set(class_" + mangledTypeName + "().getName()");
      if (serializerMethod == null) {
      }
 else {
        serializerMethods.put(type,serializerMethod);
        sw.indentln(",serializer_" + mangledTypeName + "()");
      }
      if (fieldRefs.isEmpty()) {
        sw.indentln(");");
      }
 else {
        fields.put(type,fieldRefs);
        sw.indentln(",fields_" + mangledTypeName + "());");
      }
    }
  }
  sw.println("return toReturn;");
  sw.outdent();
  sw.println("}");
  for (  JType classLiteral : classLiterals) {
    sw.println("public static native Class class_" + classLiteral.getQualifiedSourceName().replace('.','_') + "() /*-{");
    sw.indentln("return @" + classLiteral.getQualifiedSourceName() + "::class;");
    sw.println("}-*/;");
    sw.println();
  }
  for (  Map.Entry<JType,JMethod> entry : serializerMethods.entrySet()) {
    sw.println("public static native " + TypeOverrides.SerializeFunction.class.getSimpleName() + " serializer_"+ entry.getKey().getQualifiedSourceName().replace('.','_')+ "() /*-{");
    sw.indentln("return " + entry.getValue().getJsniSignature() + ";");
    sw.println("}-*/;");
    sw.println();
  }
  for (  Map.Entry<JType,List<String>> entry : fields.entrySet()) {
    sw.println("public static String[] fields_" + entry.getKey().getQualifiedSourceName().replace('.','_') + "() {");
    sw.print("return new String[] {");
    for (    String fieldRef : entry.getValue()) {
      sw.print("Impl.getNameOf(\"" + fieldRef + "\"),");
    }
    sw.println("};");
    sw.println("}");
    sw.println();
  }
  sw.commit(logger);
  typeOverrideName=composerFactory.getCreatedClassName();
}
