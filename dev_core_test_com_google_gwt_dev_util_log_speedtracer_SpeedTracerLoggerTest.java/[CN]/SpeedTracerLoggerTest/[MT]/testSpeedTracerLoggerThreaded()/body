{
  final int NUM_THREADS=3;
  Writer writer=new StringWriter();
  SpeedTracerLogger logger=new SpeedTracerLogger(writer,Format.HTML);
  Thread threads[]=new Thread[NUM_THREADS];
  threads[0]=new TestLoggerThreadedThread(dummyOne,logger);
  threads[1]=new TestLoggerThreadedThread(dummyTwo,logger);
  threads[2]=new TestLoggerThreadedThread(dummyThree,logger);
  for (int i=0; i < NUM_THREADS; i++) {
    threads[i].start();
  }
  for (int i=0; i < NUM_THREADS; i++) {
    threads[i].join();
  }
  logger.flush();
  BufferedReader jsonReader=extractJsonFromWriter(writer);
  int tally[]=new int[NUM_THREADS];
  for (int i=0; i < MAX_EVENT_LOGS * NUM_THREADS; i++) {
    JsonObject result=null;
    try {
      result=JsonObject.parse(jsonReader).asObject();
    }
 catch (    JsonException ex) {
      fail("Failed to parse json after " + i + " iterations.  "+ ex.toString());
    }
    if (compareJsonToEvent(result,dummyOne)) {
      tally[0]++;
    }
 else     if (compareJsonToEvent(result,dummyTwo)) {
      tally[1]++;
    }
 else     if (compareJsonToEvent(result,dummyThree)) {
      tally[2]++;
    }
 else {
      fail("Node with typeName " + result.get("typeName").asString().getString() + " doesn't match expected");
    }
  }
  for (int i=0; i < NUM_THREADS; i++) {
    assertEquals("dummy" + i + " has the wrong number of logs.",tally[i],MAX_EVENT_LOGS);
  }
}
