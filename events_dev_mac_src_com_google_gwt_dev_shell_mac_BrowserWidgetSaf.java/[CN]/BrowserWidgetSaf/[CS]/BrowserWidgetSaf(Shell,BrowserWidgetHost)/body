{
  super(shell,host);
  Browser.setWebInspectorEnabled(true);
  browser.addWindowScriptObjectListener(new Browser.WindowScriptObjectListener(){
    public void windowScriptObjectAvailable(    int windowScriptObject){
      int jsGlobalContext=browser.getGlobalContextForWindowObject(windowScriptObject);
      int jsGlobalObject=LowLevelSaf.getGlobalJsObject(jsGlobalContext);
      LowLevelSaf.pushJsContext(jsGlobalContext);
      try {
        globalContexts.put(Integer.valueOf(jsGlobalObject),Integer.valueOf(jsGlobalContext));
        int external=LowLevelSaf.wrapDispatchObject(jsGlobalContext,new ExternalObject());
        LowLevelSaf.executeScript(jsGlobalContext,"function __defineExternal(x) {" + "  window.external = x;" + "}");
        int ignoredResult=LowLevelSaf.invoke(jsGlobalContext,jsGlobalObject,"__defineExternal",jsGlobalObject,new int[]{external});
        LowLevelSaf.gcUnprotect(jsGlobalContext,ignoredResult);
      }
  finally {
        LowLevelSaf.popJsContext(jsGlobalContext);
      }
    }
  }
);
  getDisplay().timerExec(REDRAW_PERIOD,new Runnable(){
    public void run(){
      if (browser.isDisposed() || isDisposed()) {
        return;
      }
      browser.setNeedsDisplay(true);
      getDisplay().timerExec(REDRAW_PERIOD,this);
    }
  }
);
}
