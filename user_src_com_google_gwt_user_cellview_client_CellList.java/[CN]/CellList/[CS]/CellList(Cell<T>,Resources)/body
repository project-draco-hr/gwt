{
  this.cell=cell;
  this.style=resources.cellListStyle();
  this.style.ensureInjected();
  childContainer=Document.get().createDivElement();
  emptyMessageElem=Document.get().createDivElement();
  showOrHide(emptyMessageElem,false);
  DivElement outerDiv=Document.get().createDivElement();
  outerDiv.appendChild(childContainer);
  outerDiv.appendChild(emptyMessageElem);
  setElement(outerDiv);
  sinkEvents(Event.ONCLICK | Event.ONCHANGE | Event.MOUSEEVENTS);
  impl=new CellListImpl<T>(this,DEFAULT_PAGE_SIZE,childContainer){
    @Override protected boolean dependsOnSelection(){
      return cell.dependsOnSelection();
    }
    @Override protected void emitHtml(    StringBuilder sb,    List<T> values,    int start,    SelectionModel<? super T> selectionModel){
      int length=values.size();
      int end=start + length;
      for (int i=start; i < end; i++) {
        T value=values.get(i - start);
        boolean isSelected=selectionModel == null ? false : selectionModel.isSelected(value);
        sb.append("<div onclick='' __idx='").append(i).append("'");
        sb.append(" class='");
        sb.append(i % 2 == 0 ? style.evenItem() : style.oddItem());
        if (isSelected) {
          sb.append(" ").append(style.selectedItem());
        }
        sb.append("'>");
        cell.render(value,null,sb);
        sb.append("</div>");
      }
    }
    @Override protected void onSizeChanged(){
      super.onSizeChanged();
      showOrHide(emptyMessageElem,impl.getDataSize() == 0);
    }
    @Override protected void setSelected(    Element elem,    boolean selected){
      setStyleName(elem,style.selectedItem(),selected);
    }
  }
;
}
