{
  EventTarget eventTarget=event.getEventTarget();
  if (!Element.is(eventTarget)) {
    return;
  }
  final Element target=event.getEventTarget().cast();
  String idxString="";
  Element cellTarget=target;
  while ((cellTarget != null) && ((idxString=cellTarget.getAttribute("__idx")).length() == 0)) {
    cellTarget=cellTarget.getParentElement();
  }
  if (idxString.length() > 0) {
    String eventType=event.getType();
    boolean isClick="click".equals(eventType);
    int idx=Integer.parseInt(idxString);
    int indexOnPage=idx - getPageStart();
    if (!isRowWithinBounds(indexOnPage)) {
      return;
    }
    boolean isSelectionHandled=cell.handlesSelection() || KeyboardSelectionPolicy.BOUND_TO_SELECTION == getKeyboardSelectionPolicy();
    Element cellParent=getCellParent(cellTarget);
    T value=getVisibleItem(indexOnPage);
    CellPreviewEvent<T> previewEvent=CellPreviewEvent.fire(this,event,this,indexOnPage,value,cellIsEditing,isSelectionHandled);
    if (isClick && !cellIsEditing && !isSelectionHandled) {
      doSelection(event,value,indexOnPage);
    }
    if (isClick && getPresenter().getKeyboardSelectedRowInView() != indexOnPage) {
      boolean isFocusable=CellBasedWidgetImpl.get().isFocusable(target);
      isFocused=isFocused || isFocusable;
      getPresenter().setKeyboardSelectedRow(indexOnPage,!isFocusable);
    }
    if (!previewEvent.isCanceled()) {
      fireEventToCell(event,cellParent,value);
    }
  }
}
