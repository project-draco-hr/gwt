{
  Class<?> superclass=targetClass.getSuperclass();
  if (superclass != null) {
    findMostDerivedMembers(members,superclass,false);
  }
  for (  Class<?> intf : targetClass.getInterfaces()) {
    findMostDerivedMembers(members,intf,false);
  }
  if (addConstructors) {
    for (    Constructor<?> ctor : targetClass.getDeclaredConstructors()) {
      ctor.setAccessible(true);
      addMember(members,ctor,getJsniSignature(ctor,false));
      addMember(members,ctor,getJsniSignature(ctor,true));
    }
  }
  for (  Method method : targetClass.getDeclaredMethods()) {
    method.setAccessible(true);
    addMember(members,method,getJsniSignature(method,false));
    addMember(members,method,getJsniSignature(method,true));
  }
  Field[] fields=targetClass.getDeclaredFields();
  for (  Field field : fields) {
    field.setAccessible(true);
    addMember(members,field,field.getName());
  }
  addMember(members,new SyntheticClassMember(targetClass),"class");
}
