{
  Set<String> dependentTypeNames=new HashSet<String>();
  FindDeferredBindingSitesVisitor v=new FindDeferredBindingSitesVisitor();
  cud.traverse(v,cud.scope);
  Map<String,DeferredBindingSite> requestedTypes=v.getSites();
  for (  String reqType : requestedTypes.keySet()) {
    DeferredBindingSite site=requestedTypes.get(reqType);
    try {
      String[] resultTypes=rebindPermOracle.getAllPossibleRebindAnswers(logger,reqType);
      for (int i=0; i < resultTypes.length; ++i) {
        String typeName=resultTypes[i];
        ReferenceBinding type=resolvePossiblyNestedType(typeName);
        if (type == null) {
          FindDeferredBindingSitesVisitor.reportRebindProblem(site,"Rebind result '" + typeName + "' could not be found");
          continue;
        }
        if (!type.isClass()) {
          FindDeferredBindingSitesVisitor.reportRebindProblem(site,"Rebind result '" + typeName + "' must be a class");
          continue;
        }
        if (type.isAbstract()) {
          FindDeferredBindingSitesVisitor.reportRebindProblem(site,"Rebind result '" + typeName + "' cannot be abstract");
          continue;
        }
        if (type.isNestedType() && !type.isStatic()) {
          FindDeferredBindingSitesVisitor.reportRebindProblem(site,"Rebind result '" + typeName + "' cannot be a non-static nested class");
          continue;
        }
        if (type.isLocalType()) {
          FindDeferredBindingSitesVisitor.reportRebindProblem(site,"Rebind result '" + typeName + "' cannot be a local class");
          continue;
        }
        MethodBinding noArgCtor=type.getExactMethod("<init>".toCharArray(),TypeBinding.NO_PARAMETERS,cud.scope);
        if (noArgCtor == null) {
          FindDeferredBindingSitesVisitor.reportRebindProblem(site,"Rebind result '" + typeName + "' has no default (zero argument) constructors");
          continue;
        }
        dependentTypeNames.add(typeName);
      }
      Util.addAll(dependentTypeNames,resultTypes);
    }
 catch (    UnableToCompleteException e) {
      FindDeferredBindingSitesVisitor.reportRebindProblem(site,"Failed to resolve '" + reqType + "' via deferred binding");
    }
  }
  return dependentTypeNames.toArray(Empty.STRINGS);
}
