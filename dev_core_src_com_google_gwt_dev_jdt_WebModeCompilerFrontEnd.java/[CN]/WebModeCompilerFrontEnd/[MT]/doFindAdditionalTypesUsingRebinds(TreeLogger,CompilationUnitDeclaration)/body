{
  Set<String> dependentTypeNames=new HashSet<String>();
  FindDeferredBindingSitesVisitor v=new FindDeferredBindingSitesVisitor();
  cud.traverse(v,cud.scope);
  Map<String,MessageSendSite> requestedTypes=v.getSites();
  Map<String,String[]> rebindAnswers=new HashMap<String,String[]>();
  boolean doFinish=false;
  for (  Map.Entry<String,MessageSendSite> entry : requestedTypes.entrySet()) {
    String reqType=entry.getKey();
    MessageSendSite site=entry.getValue();
    try {
      String[] resultTypes=rebindPermOracle.getAllPossibleRebindAnswers(logger,reqType);
      rebindAnswers.put(reqType,resultTypes);
      Collections.addAll(dependentTypeNames,resultTypes);
      doFinish=true;
    }
 catch (    UnableToCompleteException e) {
      FindDeferredBindingSitesVisitor.reportRebindProblem(site,"Failed to resolve '" + reqType + "' via deferred binding");
      rebindAnswers.put(reqType,new String[0]);
    }
  }
  for (  MessageSendSite site : v.getRunAsyncSites()) {
    String resultType;
    try {
      resultType=fragmentLoaderCreator.create(logger);
      dependentTypeNames.add(resultType);
      doFinish=true;
    }
 catch (    UnableToCompleteException e) {
      FindDeferredBindingSitesVisitor.reportRebindProblem(site,"Failed to create a runAsync fragment loader");
    }
  }
  if (doFinish) {
    try {
      rebindPermOracle.getGeneratorContext().finish(logger);
    }
 catch (    UnableToCompleteException e) {
      throw new RuntimeException("Unable to commit generated files",e);
    }
  }
  for (  Map.Entry<String,MessageSendSite> entry : requestedTypes.entrySet()) {
    String reqType=entry.getKey();
    MessageSendSite site=entry.getValue();
    String[] resultTypes=rebindAnswers.get(reqType);
    for (    String typeName : resultTypes) {
      checkRebindResultInstantiable(site,typeName);
    }
  }
  return dependentTypeNames.toArray(Empty.STRINGS);
}
