{
  try {
    Socket s=new Socket(options.getCompileHost(),options.getCompilePort());
    logger.log(TreeLogger.DEBUG,"Socket opened");
    ObjectOutputStream out=new ObjectOutputStream(s.getOutputStream());
    ObjectInputStream in=new ObjectInputStream(s.getInputStream());
    out.writeUTF(options.getCookie());
    out.flush();
    File astFile=(File)in.readObject();
    ObjectInputStream astIn=new ObjectInputStream(new FileInputStream(astFile));
    UnifiedAst ast=(UnifiedAst)astIn.readObject();
    ast.prepare();
    logger.log(TreeLogger.SPAM,"Created new UnifiedAst instance");
    long estimatedMemory=Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    out.writeLong(estimatedMemory);
    out.flush();
    boolean keepGoing=in.readBoolean();
    while (keepGoing) {
      compilePermutation(logger,ast,in,out);
      keepGoing=in.readBoolean();
      logger.log(TreeLogger.SPAM,"keepGoing = " + keepGoing);
    }
    logger.log(TreeLogger.DEBUG,"Successfully terminating");
    return true;
  }
 catch (  UnknownHostException e) {
    logger.log(TreeLogger.ERROR,"Invalid hostname",e);
  }
catch (  IOException e) {
    logger.log(TreeLogger.ERROR,"Communication error",e);
  }
catch (  ClassNotFoundException e) {
    logger.log(TreeLogger.ERROR,"Probable client/server mismatch or " + "classpath misconfiguration",e);
  }
catch (  UnableToCompleteException e) {
    logger.log(TreeLogger.ERROR,"Internal compiler error",e);
  }
  return false;
}
