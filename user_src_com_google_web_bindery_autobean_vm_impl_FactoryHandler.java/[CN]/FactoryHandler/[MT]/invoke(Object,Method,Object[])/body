{
  Class<?> beanType;
  Object toWrap=null;
  String name=method.getName();
  if (BeanMethod.OBJECT.matches(method)) {
    return method.invoke(this,args);
  }
  if (name.equals("create")) {
    beanType=(Class<?>)args[0];
    if (args.length == 2) {
      toWrap=args[1];
    }
  }
 else   if (name.equals("getEnum")) {
    Class<?> clazz=(Class<?>)args[0];
    String token=(String)args[1];
    return getEnum(clazz,token);
  }
 else   if (name.equals("getToken")) {
    Enum<?> e=(Enum<?>)args[0];
    return getToken(e);
  }
 else {
    ParameterizedType returnType=(ParameterizedType)method.getGenericReturnType();
    beanType=(Class<?>)returnType.getActualTypeArguments()[0];
    if (args != null && args.length == 1) {
      toWrap=args[0];
    }
  }
  ProxyAutoBean<Object> toReturn=(ProxyAutoBean<Object>)AutoBeanUtils.getAutoBean(toWrap);
  if (toReturn == null) {
    if (toWrap == null) {
      toReturn=new ProxyAutoBean<Object>((AutoBeanFactory)proxy,beanType,configuration);
    }
 else {
      toReturn=new ProxyAutoBean<Object>((AutoBeanFactory)proxy,beanType,configuration,toWrap);
    }
  }
  return toReturn;
}
