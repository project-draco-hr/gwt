{
  MockCompilationUnit nestedTypeCompilationUnit=new MockCompilationUnit("com.google.gwt.user.Outer","superblah"){
    @Override public Collection<CompiledClass> getCompiledClasses(){
      MockCompiledClass outerCompiledClass=new MockCompiledClass(null,"com/google/gwt/user/Outer","com.google.gwt.user.Outer");
      MockCompiledClass innerCompiledClass=new MockCompiledClass(outerCompiledClass,"com/google/gwt/user/Outer$Inner","com.google.gwt.user.Outer.Inner");
      return Lists.<CompiledClass>newArrayList(outerCompiledClass,innerCompiledClass);
    }
  }
;
  MockLibrary regularLibrary=new MockLibrary("LibraryA");
  regularLibrary.addCompilationUnit(nestedTypeCompilationUnit);
  LibraryGroup libraryGroup=LibraryGroup.fromLibraries(Lists.<Library>newArrayList(regularLibrary),true);
  assertEquals(nestedTypeCompilationUnit,libraryGroup.getCompilationUnitByTypeSourceName("com.google.gwt.user.Outer.Inner"));
  assertEquals(nestedTypeCompilationUnit,libraryGroup.getCompilationUnitByTypeBinaryName("com.google.gwt.user.Outer$Inner"));
}
