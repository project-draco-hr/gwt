{
  boolean fail=false;
  resourceContext.setCurrentResourceGenerator(rg);
  try {
    rg.createFields(logger.branch(TreeLogger.DEBUG,"Creating fields"),resourceContext,fields);
  }
 catch (  UnableToCompleteException e) {
    return false;
  }
  for (  JMethod m : generatorMethods) {
    String rhs;
    try {
      rhs=rg.createAssignment(logger.branch(TreeLogger.DEBUG,"Creating assignment for " + m.getName() + "()"),resourceContext,m);
    }
 catch (    UnableToCompleteException e) {
      fail=true;
      continue;
    }
    String ident=fields.define(m.getReturnType().isClassOrInterface(),m.getName(),null,true,false);
    String initializerName=m.getName() + "Initializer";
    sw.println("private void " + initializerName + "() {");
    sw.indentln(ident + " = " + rhs+ ";");
    sw.println("}");
    sw.println("private static class " + initializerName + " {");
    sw.indent();
    sw.println("static {");
    sw.indentln(INSTANCE_NAME + "." + initializerName+ "();");
    sw.println("}");
    sw.print("static ");
    sw.print(m.getReturnType().getParameterizedQualifiedSourceName());
    sw.println(" get() {");
    sw.indentln("return " + ident + ";");
    sw.println("}");
    sw.outdent();
    sw.println("}");
    sw.print(m.getReadableDeclaration(false,true,true,true,true));
    sw.println(" {");
    sw.indentln("return " + initializerName + ".get();");
    sw.println("}");
  }
  if (fail) {
    return false;
  }
  return true;
}
