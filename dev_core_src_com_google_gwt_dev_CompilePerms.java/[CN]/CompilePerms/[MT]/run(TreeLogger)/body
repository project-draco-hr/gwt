{
  for (  String moduleName : options.getModuleNames()) {
    int[] permsToRun=options.getPermsToCompile();
    File compilerWorkDir=options.getCompilerWorkDir(moduleName);
    Collection<PrecompilationFile> precomps;
    try {
      precomps=PrecompilationFile.scanJarFile(new File(compilerWorkDir,Precompile.PRECOMPILE_FILENAME));
    }
 catch (    IOException e) {
      logger.log(TreeLogger.ERROR,"Failed to scan " + Precompile.PRECOMPILE_FILENAME + "; has Precompile been run?",e);
      return false;
    }
    if (permsToRun != null) {
      checking_perms:       for (      int perm : permsToRun) {
        for (        PrecompilationFile precomp : precomps) {
          if (precomp.isForPermutation(perm)) {
            continue checking_perms;
          }
        }
        logger.log(TreeLogger.ERROR,"No precompilation file found for permutation " + perm);
        return false;
      }
    }
 else {
    }
    for (    PrecompilationFile precompilationFile : precomps) {
      if (!isPrecompileForAnyOf(precompilationFile,permsToRun)) {
        continue;
      }
      Precompilation precompilation;
      try {
        precompilation=precompilationFile.newInstance(logger);
      }
 catch (      UnableToCompleteException e) {
        return false;
      }
      Permutation[] subPerms=selectPermutationsForPrecompilation(permsToRun,precompilationFile,precompilation);
      List<FileBackedObject<PermutationResult>> resultFiles=makeResultFiles(compilerWorkDir,subPerms);
      compile(logger,precompilation,subPerms,options.getLocalWorkers(),resultFiles);
    }
  }
  return true;
}
