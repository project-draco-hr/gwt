{
  File precompilationFile=new File(options.getCompilerWorkDir(),Precompile.PRECOMPILATION_FILENAME);
  if (!precompilationFile.exists()) {
    logger.log(TreeLogger.ERROR,"File not found '" + precompilationFile.getAbsolutePath() + "'; please run Precompile first");
    return false;
  }
  Precompilation precompilation;
  try {
    precompilation=Util.readFileAsObject(precompilationFile,Precompilation.class);
  }
 catch (  ClassNotFoundException e) {
    logger.log(TreeLogger.ERROR,"Unable to deserialize '" + precompilationFile.getAbsolutePath() + "'",e);
    return false;
  }
  Permutation[] perms=precompilation.getPermutations();
  Permutation[] subPerms;
  int[] permsToRun=options.getPermsToCompile();
  if (permsToRun.length == 0) {
    subPerms=perms;
  }
 else {
    int i=0;
    subPerms=new Permutation[permsToRun.length];
    for (    int permToRun : permsToRun) {
      if (permToRun >= perms.length) {
        logger.log(TreeLogger.ERROR,"The specified perm number '" + permToRun + "' is too big; the maximum value is "+ (perms.length - 1)+ "'");
        return false;
      }
      subPerms[i++]=perms[permToRun];
    }
  }
  File[] resultFiles=makeResultFiles(options.getCompilerWorkDir(),perms);
  return compile(logger,precompilation,subPerms,options.getLocalWorkers(),resultFiles);
}
