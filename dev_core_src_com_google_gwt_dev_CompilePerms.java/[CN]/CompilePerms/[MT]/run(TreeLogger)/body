{
  for (  String moduleName : options.getModuleNames()) {
    int[] permsToRun=options.getPermsToCompile();
    File compilerWorkDir=options.getCompilerWorkDir(moduleName);
    File precompilationFile=new File(compilerWorkDir,Precompile.PRECOMPILE_FILENAME);
    PrecompilationResult precompileResults=readPrecompilationFile(logger,precompilationFile);
    if (precompileResults instanceof PrecompileTaskOptions) {
      PrecompileTaskOptions precompilationOptions=(PrecompileTaskOptions)precompileResults;
      if (!precompileAndCompile(logger,moduleName,compilerWorkDir,precompilationOptions)) {
        return false;
      }
    }
 else {
      Precompilation precompilation=(Precompilation)precompileResults;
      CompilerContext compilerContext=new CompilerContext.Builder().options(options).build();
      Permutation[] subPerms=selectPermutationsForPrecompilation(permsToRun,precompilation);
      List<PersistenceBackedObject<PermutationResult>> resultFiles=makeResultFiles(compilerWorkDir,subPerms);
      compile(logger,compilerContext,precompilation,subPerms,options.getLocalWorkers(),resultFiles);
    }
  }
  return true;
}
