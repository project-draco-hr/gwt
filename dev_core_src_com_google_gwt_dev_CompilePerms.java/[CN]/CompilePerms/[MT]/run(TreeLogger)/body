{
  for (  String moduleName : options.getModuleNames()) {
    int[] permsToRun=options.getPermsToCompile();
    File compilerWorkDir=options.getCompilerWorkDir(moduleName);
    File precompilationFile=new File(compilerWorkDir,Precompile.PRECOMPILE_FILENAME);
    PrecompilationResult precompileResults;
    try {
      precompileResults=Util.readFileAsObject(precompilationFile,PrecompilationResult.class);
    }
 catch (    IOException e) {
      logger.log(TreeLogger.ERROR,"Failed to read " + Precompile.PRECOMPILE_FILENAME + "; has Precompile been run?");
      return false;
    }
catch (    ClassNotFoundException e) {
      logger.log(TreeLogger.ERROR,"Failed to read " + Precompile.PRECOMPILE_FILENAME,e);
      return false;
    }
    if (precompileResults instanceof PrecompileOptions) {
      PrecompileOptions precompilationOptions=(PrecompileOptions)precompileResults;
      if (!precompileAndCompile(logger,moduleName,compilerWorkDir,precompilationOptions)) {
        return false;
      }
    }
 else {
      Precompilation precompilation=(Precompilation)precompileResults;
      Permutation[] subPerms=selectPermutationsForPrecompilation(permsToRun,precompilation);
      List<FileBackedObject<PermutationResult>> resultFiles=makeResultFiles(compilerWorkDir,subPerms);
      compile(logger,precompilation,subPerms,options.getLocalWorkers(),resultFiles);
    }
  }
  return true;
}
