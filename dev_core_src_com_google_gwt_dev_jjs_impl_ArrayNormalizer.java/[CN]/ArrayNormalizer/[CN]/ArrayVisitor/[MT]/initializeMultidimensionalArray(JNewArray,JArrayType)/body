{
  SourceInfo sourceInfo=x.getSourceInfo();
  JsonArray castableTypeMaps=new JsonArray(sourceInfo,program.getJavaScriptObject());
  JsonArray elementTypeReferences=new JsonArray(sourceInfo,program.getJavaScriptObject());
  JsonArray dimList=new JsonArray(sourceInfo,program.getJavaScriptObject());
  JType currentElementType=arrayType;
  JLiteral classLit=x.getLeafTypeClassLiteral();
  for (int i=0; i < x.getDimensionExpressions().size(); ++i) {
    JArrayType curArrayType=(JArrayType)currentElementType;
    JExpression castableTypeMap=getOrCreateCastMap(sourceInfo,curArrayType);
    castableTypeMaps.getExpressions().add(castableTypeMap);
    JRuntimeTypeReference elementTypeIdLit=getElementRuntimeTypeReference(sourceInfo,curArrayType);
    elementTypeReferences.getExpressions().add(elementTypeIdLit);
    dimList.getExpressions().add(x.getDimensionExpressions().get(i));
    currentElementType=curArrayType.getElementType();
  }
  JType leafElementType=currentElementType;
  JIntLiteral leafElementTypeCategory=getTypeCategoryLiteral(leafElementType);
  JMethodCall call=new JMethodCall(sourceInfo,null,initializeMultidimensionalArrayMethod);
  call.overrideReturnType(arrayType);
  call.addArgs(classLit,castableTypeMaps,elementTypeReferences,leafElementTypeCategory,dimList,program.getLiteralInt(x.getDimensionExpressions().size()));
  return call;
}
