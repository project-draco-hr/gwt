{
  JClassType edited=delegateData.getEditedType();
  JClassType editor=delegateData.getEditorType();
  Map<EditorData,String> delegateFields=new IdentityHashMap<EditorData,String>();
  NameFactory nameFactory=new NameFactory();
  StringBuilder maybeParameterizedName=new StringBuilder(BinaryName.getClassName(editor.getQualifiedBinaryName()));
  if (editor.isParameterized() != null) {
    for (    JClassType type : editor.isParameterized().getTypeArgs()) {
      maybeParameterizedName.append("$").append(type.getQualifiedBinaryName());
    }
  }
  String delegateSimpleName=String.format("%s_%s",escapedBinaryName(maybeParameterizedName.toString()),BinaryName.getShortClassName(Name.getBinaryNameForClass(getEditorDelegateType())));
  String packageName=editor.getPackage().getName();
  PrintWriter pw=context.tryCreate(logger,packageName,delegateSimpleName);
  if (pw != null) {
    ClassSourceFileComposerFactory factory=new ClassSourceFileComposerFactory(packageName,delegateSimpleName);
    factory.setSuperclass(String.format("%s",Name.getSourceNameForClass(getEditorDelegateType())));
    SourceWriter sw=factory.createSourceWriter(context,pw);
    EditorData[] data=model.getEditorData(editor);
    sw.println("private %s editor;",editor.getQualifiedSourceName());
    sw.println("@Override protected %s getEditor() {return editor;}",editor.getQualifiedSourceName());
    sw.println("protected void setEditor(%s editor) {this.editor=(%s)editor;}",Editor.class.getCanonicalName(),editor.getQualifiedSourceName());
    sw.println("private %s object;",edited.getQualifiedSourceName());
    sw.println("@Override public %s getObject() {return object;}",edited.getQualifiedSourceName());
    sw.println("@Override protected void setObject(Object object) {this.object=(%s)object;}",edited.getQualifiedSourceName());
    if (delegateData.isCompositeEditor()) {
      sw.println("@Override protected %s createComposedDelegate() {",Name.getSourceNameForClass(this.getEditorDelegateType()));
      sw.indentln("return new %s();",getEditorDelegate(delegateData.getComposedData()));
      sw.println("}");
    }
    for (    EditorData d : data) {
      if (d.isDelegateRequired()) {
        String fieldName=nameFactory.createName(d.getPropertyName() + "Delegate");
        delegateFields.put(d,fieldName);
        sw.println("%s %s;",Name.getSourceNameForClass(getEditorDelegateType()),fieldName);
      }
    }
    sw.println("@Override protected void initializeSubDelegates() {");
    sw.indent();
    if (delegateData.isCompositeEditor()) {
      sw.println("createChain(%s.class);",delegateData.getComposedData().getEditedType().getQualifiedSourceName());
    }
    for (    EditorData d : data) {
      String subDelegateType=getEditorDelegate(d);
      if (d.isDelegateRequired()) {
        sw.println("if (editor.%s != null) {",d.getSimpleExpression());
        sw.indent();
        sw.println("%s = new %s();",delegateFields.get(d),subDelegateType);
        sw.println("addSubDelegate(%s, appendPath(\"%s\"), editor.%s);",delegateFields.get(d),d.getPropertyName(),d.getSimpleExpression());
        sw.outdent();
        sw.println("}");
      }
    }
    sw.outdent();
    sw.println("}");
    sw.println("@Override public void accept(%s visitor) {",EditorVisitor.class.getCanonicalName());
    sw.indent();
    if (delegateData.isCompositeEditor()) {
      sw.println("getEditorChain().accept(visitor);");
    }
    for (    EditorData d : data) {
      if (d.isDelegateRequired()) {
        sw.println("if (%s != null) ",delegateFields.get(d));
      }
      sw.println("{");
      sw.indent();
      String editorContextName=getEditorContext(delegateData,d);
      sw.println("%s ctx = new %s(getObject(), editor.%s, appendPath(\"%s\"));",editorContextName,editorContextName,d.getSimpleExpression(),d.getDeclaredPath());
      if (d.isDelegateRequired()) {
        sw.println("ctx.setEditorDelegate(%s);",delegateFields.get(d));
      }
      sw.println("ctx.traverse(visitor, %s);",d.isDelegateRequired() ? delegateFields.get(d) : "null");
      sw.outdent();
      sw.println("}");
    }
    sw.outdent();
    sw.println("}");
    sw.commit(logger);
  }
  return packageName + "." + delegateSimpleName;
}
