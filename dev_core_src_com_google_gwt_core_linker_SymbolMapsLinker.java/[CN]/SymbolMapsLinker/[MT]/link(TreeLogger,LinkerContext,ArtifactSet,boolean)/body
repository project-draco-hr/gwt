{
  if (onePermutation) {
    artifacts=new ArtifactSet(artifacts);
    Map<Integer,String> permMap=new HashMap<Integer,String>();
    Event writeSymbolMapsEvent=SpeedTracerLogger.start(CompilerEventType.WRITE_SYMBOL_MAPS);
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    for (    CompilationResult result : artifacts.find(CompilationResult.class)) {
      boolean makeSymbolMaps=true;
      for (      SoftPermutation perm : result.getSoftPermutations()) {
        for (        Entry<SelectionProperty,String> propMapEntry : perm.getPropertyMap().entrySet()) {
          if (propMapEntry.getKey().getName().equals(MAKE_SYMBOL_MAPS)) {
            makeSymbolMaps=Boolean.valueOf(propMapEntry.getValue());
          }
        }
      }
      permMap.put(result.getPermutationId(),result.getStrongName());
      if (makeSymbolMaps) {
        PrintWriter pw=new PrintWriter(out);
        doWriteSymbolMap(logger,result,pw);
        pw.close();
        doEmitSymbolMap(logger,artifacts,result,out);
        out.reset();
      }
    }
    writeSymbolMapsEvent.end();
    Event writeSourceMapsEvent=SpeedTracerLogger.start(CompilerEventType.WRITE_SOURCE_MAPS);
    for (    SourceMapArtifact se : artifacts.find(SourceMapArtifact.class)) {
      String sourceMapString=Util.readStreamAsString(se.getContents(logger));
      String strongName=permMap.get(se.getPermutationId());
      String partialPath=strongName + "_sourceMap" + se.getFragment()+ ".json";
      artifacts.add(emitSourceMapString(logger,sourceMapString,partialPath));
      artifacts.remove(se);
    }
    writeSourceMapsEvent.end();
  }
  return artifacts;
}
