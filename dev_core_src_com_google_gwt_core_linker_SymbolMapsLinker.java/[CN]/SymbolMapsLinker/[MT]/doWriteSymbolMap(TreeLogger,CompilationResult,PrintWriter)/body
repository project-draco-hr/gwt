{
  pw.println("# { " + result.getPermutationId() + " }");
  for (  SortedMap<SelectionProperty,String> map : result.getPropertyMap()) {
    pw.print("# { ");
    printPropertyMap(pw,map);
    pw.println(" }");
  }
  pw.println("# jsName, jsniIdent, className, memberName, sourceUri, sourceLine");
  StringBuilder sb=new StringBuilder(1024);
  char[] buf=new char[1024];
  for (  SymbolData symbol : result.getSymbolMap()) {
    sb.append(symbol.getSymbolName());
    sb.append(',');
    String jsniIdent=symbol.getJsniIdent();
    if (jsniIdent != null) {
      sb.append(jsniIdent);
    }
    sb.append(',');
    sb.append(symbol.getClassName());
    sb.append(',');
    String memberName=symbol.getMemberName();
    if (memberName != null) {
      sb.append(memberName);
    }
    sb.append(',');
    String sourceUri=symbol.getSourceUri();
    if (sourceUri != null) {
      sb.append(sourceUri);
    }
    sb.append(',');
    sb.append(symbol.getSourceLine());
    sb.append('\n');
    int sbLen=sb.length();
    if (buf.length < sbLen) {
      int bufLen=buf.length;
      while (bufLen < sbLen) {
        bufLen<<=1;
      }
      buf=new char[bufLen];
    }
    sb.getChars(0,sbLen,buf,0);
    pw.write(buf,0,sbLen);
    sb.setLength(0);
  }
}
