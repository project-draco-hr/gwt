{
  defaultSchema=new DefaultSchema(logger);
  topSchema.setParent(defaultSchema);
  argStack.push(null);
  setArgsAndPushLevel(null,topSchema);
  Throwable caught=null;
  try {
    this.reader=reader;
    SAXParser parser=createNewSaxParser();
    InputSource inputSource=new InputSource(this.reader);
    XMLReader xmlReader=parser.getXMLReader();
    xmlReader.setContentHandler(this);
    xmlReader.parse(inputSource);
  }
 catch (  SAXException e) {
    caught=e;
    Exception inner=e.getException();
    if (inner instanceof RuntimeException) {
      throw (RuntimeException)inner;
    }
 else     if (inner != null) {
      caught=inner;
    }
  }
catch (  ParserConfigurationException e) {
    caught=e;
  }
catch (  IOException e) {
    caught=e;
  }
 finally {
    Utility.close(reader);
  }
  if (caught instanceof UnableToCompleteException) {
    throw (UnableToCompleteException)caught;
  }
 else   if (caught instanceof SAXParseException) {
    SAXParseException parseException=((SAXParseException)caught);
    logger.log(Type.ERROR,"Line " + parseException.getLineNumber() + ", column "+ parseException.getColumnNumber()+ " : "+ parseException.getMessage());
  }
 else   if (caught != null) {
    Messages.XML_PARSE_FAILED.log(logger,caught);
  }
  if (caught != null) {
    throw new UnableToCompleteException();
  }
}
