{
  FileOracleFactory fof=new FileOracleFactory();
  fof.addPackage("",new FileFilter(){
    public boolean accept(    String string){
      return string.endsWith(".java");
    }
  }
);
  final FileOracle fo=fof.create(logger);
  final SourceOracle host=new SourceOracle(){
    public CompilationUnitProvider findCompilationUnit(    TreeLogger logger,    String typeName){
      CompilationUnitProvider cup=(CompilationUnitProvider)cups.get(typeName);
      if (cup == null) {
        String path=typeName.replace('.','/') + ".java";
        URL url=fo.find(path);
        if (url != null) {
          String pkgName="";
          int len=findLengthOfPackagePart(typeName);
          if (len > 0) {
            pkgName=typeName.substring(0,len);
          }
          return new URLCompilationUnitProvider(url,pkgName);
        }
 else {
          return null;
        }
      }
      return cup;
    }
    public boolean isPackage(    String possiblePackageName){
      String path=possiblePackageName.replace('.','/') + "/";
      URL url=fo.find(path);
      if (url != null) {
        return true;
      }
 else {
        return false;
      }
    }
    private int findLengthOfPackagePart(    String typeName){
      int maxDotIndex=0;
      int i=typeName.indexOf('.');
      while (i != -1) {
        if (!isPackage(typeName.substring(0,i))) {
          break;
        }
 else {
          maxDotIndex=i;
          i=typeName.indexOf('.',i + 1);
        }
      }
      return maxDotIndex;
    }
    private Map cups=new HashMap();
  }
;
  ByteCodeCompiler cs=new ByteCodeCompiler(host);
  String[] allJava=fo.getAllFiles();
  for (int i=0; i < 3; ++i) {
    long before=System.currentTimeMillis();
    for (int j=0; j < allJava.length; j++) {
      String typeName=allJava[j].substring(0,allJava[j].length() - 5).replace('/','.');
      cs.getClassBytes(logger,typeName);
    }
    long after=System.currentTimeMillis();
    System.out.println("Iter " + i + " took "+ (after - before)+ " ms");
  }
}
