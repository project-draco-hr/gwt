{
  Map<Class<? extends Annotation>,Annotation> declaredAnnotations=Maps.newHashMap();
  resolveAnnotations(logger,methodData.getAnnotations(),declaredAnnotations);
  String name=methodData.getName();
  if ("<clinit>".equals(name) || (methodData.getAccess() & Opcodes.ACC_SYNTHETIC) != 0) {
    return true;
  }
  if (unresolvedType.isEnum() != null && "<init>".equals(name)) {
    return true;
  }
  JAbstractMethod method;
  JTypeParameter[] typeParams=collectTypeParams(methodData.getSignature());
  typeParamLookup.pushScope(typeParams);
  boolean hasReturnType=true;
  if ("<init>".equals(name)) {
    name=unresolvedType.getSimpleSourceName();
    method=newConstructor(unresolvedType,name,declaredAnnotations,typeParams);
    hasReturnType=false;
  }
 else {
    if (unresolvedType.isAnnotation() != null) {
      method=newAnnotationMethod(unresolvedType,name,declaredAnnotations,typeParams,null);
    }
 else {
      method=newMethod(unresolvedType,name,declaredAnnotations,typeParams);
    }
  }
  addModifierBits(method,mapBits(ASM_TO_SHARED_MODIFIERS,methodData.getAccess()));
  if (unresolvedType.isInterface() != null) {
    addModifierBits(method,Shared.MOD_PUBLIC | Shared.MOD_ABSTRACT);
  }
  if ((methodData.getAccess() & Opcodes.ACC_VARARGS) != 0) {
    setVarArgs(method);
  }
  String signature=methodData.getSignature();
  if (signature != null) {
    SignatureReader reader=new SignatureReader(signature);
    ResolveMethodSignature methodResolver=new ResolveMethodSignature(context.resolver,logger,method,typeParamLookup,hasReturnType,methodData,methodData.getArgTypes(),methodData.getArgNames(),methodData.hasActualArgNames(),context.allMethodArgs);
    reader.accept(methodResolver);
    if (!methodResolver.finish()) {
      logger.log(TreeLogger.ERROR,"Failed to resolve.");
      return false;
    }
  }
 else {
    if (hasReturnType) {
      Type returnType=Type.getReturnType(methodData.getDesc());
      JType returnJType=resolveType(returnType);
      if (returnJType == null) {
        logger.log(TreeLogger.ERROR,"Unable to resolve return type " + returnType.getInternalName());
        return false;
      }
      setReturnType(method,returnJType);
    }
    if (!resolveParameters(logger,method,methodData,context)) {
      return false;
    }
  }
  if (!resolveThrows(logger,method,methodData)) {
    return false;
  }
  typeParamLookup.popScope();
  return true;
}
