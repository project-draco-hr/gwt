{
  Map<Class<? extends Annotation>,Annotation> declaredAnnotations=Maps.newHashMap();
  resolveAnnotations(logger,field.getAnnotations(),declaredAnnotations);
  String name=field.getName();
  JField jfield;
  if ((field.getAccess() & Opcodes.ACC_ENUM) != 0) {
    assert(unresolvedType.isEnum() != null);
    jfield=newEnumConstant(unresolvedType,name,declaredAnnotations,nextEnumOrdinal[0]++);
  }
 else {
    JField newField=newField(unresolvedType,name,declaredAnnotations);
    jfield=newField;
  }
  addModifierBits(jfield,mapBits(ASM_TO_SHARED_MODIFIERS,field.getAccess()));
  String signature=field.getSignature();
  JType fieldJType;
  if (signature != null) {
    SignatureReader reader=new SignatureReader(signature);
    JType[] fieldTypeRef=new JType[1];
    reader.acceptType(new ResolveTypeSignature(context.resolver,logger,fieldTypeRef,typeParamLookup,null));
    fieldJType=fieldTypeRef[0];
    if (fieldJType == null) {
      logger.log(TreeLogger.ERROR,"Unable to resolve type in field signature " + signature);
      return false;
    }
  }
 else {
    Type fieldType=Type.getType(field.getDesc());
    fieldJType=resolveType(fieldType);
    if (fieldJType == null) {
      logger.log(TreeLogger.ERROR,"Unable to resolve type " + fieldType.getInternalName() + " of field "+ field.getName());
      return false;
    }
  }
  setFieldType(jfield,fieldJType);
  return true;
}
