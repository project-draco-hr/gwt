{
  Event typeOracleUpdaterEvent=SpeedTracerLogger.start(CompilerEventType.TYPE_ORACLE_UPDATER);
  Event visitClassFileEvent=SpeedTracerLogger.start(CompilerEventType.TYPE_ORACLE_UPDATER,"phase","Visit Class Files");
  TypeOracleBuildContext context=new TypeOracleBuildContext(argsLookup);
  for (  TypeData typeData : typeDataList) {
    CollectClassData classData=typeData.getCollectClassData();
    if (!classData.hasNoExternalName()) {
      context.classDataByInternalName.put(typeData.internalName,classData);
    }
  }
  visitClassFileEvent.end();
  Event identityEvent=SpeedTracerLogger.start(CompilerEventType.TYPE_ORACLE_UPDATER,"phase","Establish Identity");
  Set<JRealClassType> unresolvedTypes=new LinkedHashSet<JRealClassType>();
  for (  TypeData typeData : typeDataList) {
    CollectClassData classData=context.classDataByInternalName.get(typeData.internalName);
    if (classData == null) {
      continue;
    }
    JRealClassType type=createType(typeData,unresolvedTypes,context);
    if (type != null) {
      typesByInternalName.put(typeData.internalName,type);
      context.classDataByType.put(type,classData);
    }
  }
  identityEvent.end();
  Event resolveEnclosingEvent=SpeedTracerLogger.start(CompilerEventType.TYPE_ORACLE_UPDATER,"phase","Resolve Enclosing Classes");
  TreeLogger branch=logger.branch(TreeLogger.SPAM,"Resolving enclosing classes");
  for (Iterator<JRealClassType> unresolvedTypesIterator=unresolvedTypes.iterator(); unresolvedTypesIterator.hasNext(); ) {
    JRealClassType unresolvedType=unresolvedTypesIterator.next();
    if (!resolveEnclosingClass(branch,unresolvedType,context)) {
      unresolvedTypesIterator.remove();
    }
  }
  resolveEnclosingEvent.end();
  Event resolveUnresolvedEvent=SpeedTracerLogger.start(CompilerEventType.TYPE_ORACLE_UPDATER,"phase","Resolve Unresolved Types");
  for (  JRealClassType unresolvedType : unresolvedTypes) {
    branch=logger.branch(TreeLogger.SPAM,"Resolving " + unresolvedType.getQualifiedSourceName());
    if (!resolveClass(branch,unresolvedType,context)) {
    }
  }
  resolveUnresolvedEvent.end();
  Event finishEvent=SpeedTracerLogger.start(CompilerEventType.TYPE_ORACLE_UPDATER,"phase","Finish");
  super.finish();
  finishEvent.end();
  context=null;
  typeOracleUpdaterEvent.end();
}
