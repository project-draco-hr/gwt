{
  for (  ContextMethod method : model.getMethods()) {
    PrintWriter pw=context.tryCreate(logger,method.getPackageName(),method.getSimpleSourceName());
    if (pw == null) {
      continue;
    }
    ClassSourceFileComposerFactory factory=new ClassSourceFileComposerFactory(method.getPackageName(),method.getSimpleSourceName());
    factory.setSuperclass(AbstractRequestContext.class.getCanonicalName());
    factory.addImplementedInterface(method.getImplementedInterfaceQualifiedSourceName());
    SourceWriter sw=factory.createSourceWriter(context,pw);
    sw.println("public %s(%s requestFactory) {super(requestFactory, %s.%s);}",method.getSimpleSourceName(),AbstractRequestFactory.class.getCanonicalName(),Dialect.class.getCanonicalName(),method.getDialect().name());
    Set<EntityProxyModel> models=findReferencedEntities(method);
    Set<JEnumType> extraEnumTypes=findExtraEnums(method);
    writeAutoBeanFactory(sw,models,extraEnumTypes);
    for (    RequestMethod request : method.getRequestMethods()) {
      JMethod jmethod=request.getDeclarationMethod();
      String operation=request.getOperation();
      StringBuilder parameterArray=new StringBuilder();
      StringBuilder parameterDeclaration=new StringBuilder();
      StringBuilder typeParameterDeclaration=new StringBuilder();
      if (request.isInstance()) {
        parameterArray.append(",null");
      }
      for (      JTypeParameter param : jmethod.getTypeParameters()) {
        typeParameterDeclaration.append(",").append(param.getQualifiedSourceName());
      }
      for (      JParameter param : jmethod.getParameters()) {
        parameterArray.append(",").append(param.getName());
        parameterDeclaration.append(",final ").append(param.getType().getParameterizedQualifiedSourceName()).append(" ").append(param.getName());
      }
      if (parameterArray.length() > 0) {
        parameterArray.deleteCharAt(0);
      }
      if (parameterDeclaration.length() > 0) {
        parameterDeclaration.deleteCharAt(0);
      }
      if (typeParameterDeclaration.length() > 0) {
        typeParameterDeclaration.deleteCharAt(0).insert(0,"<").append(">");
      }
      sw.println("public %s %s %s(%s) {",typeParameterDeclaration,jmethod.getReturnType().getParameterizedQualifiedSourceName(),jmethod.getName(),parameterDeclaration);
      sw.indent();
      sw.println("class X extends %s<%s, %s> implements %s {",AbstractRequest.class.getCanonicalName(),request.getInstanceType() == null ? BaseProxy.class.getCanonicalName() : request.getInstanceType().getQualifiedSourceName(),request.getDataType().getParameterizedQualifiedSourceName(),jmethod.getReturnType().getParameterizedQualifiedSourceName());
      sw.indent();
      sw.println("public X() { super(%s.this);}",method.getSimpleSourceName());
      sw.println("@Override public X with(String... paths) {super.with(paths); return this;}");
      sw.println("@Override protected %s makeRequestData() {",RequestData.class.getCanonicalName());
      String elementType=request.isCollectionType() ? request.getCollectionElementType().getQualifiedSourceName() + ".class" : "null";
      String returnTypeBaseQualifiedName=ModelUtils.ensureBaseType(request.getDataType()).getQualifiedSourceName();
      sw.indentln("return new %s(\"%s\", new Object[] {%s}, propertyRefs, %s.class, %s);",RequestData.class.getCanonicalName(),operation,parameterArray,returnTypeBaseQualifiedName,elementType);
      sw.println("}");
      if (method.getDialect().equals(Dialect.JSON_RPC)) {
        for (        JMethod setter : request.getExtraSetters()) {
          PropertyName propertyNameAnnotation=setter.getAnnotation(PropertyName.class);
          String propertyName=propertyNameAnnotation == null ? JBeanMethod.SET.inferName(setter) : propertyNameAnnotation.value();
          String maybeReturn=JBeanMethod.SET_BUILDER.matches(setter) ? "return this;" : "";
          sw.println("%s { getRequestData().setNamedParameter(\"%s\", %s); %s}",setter.getReadableDeclaration(false,false,false,false,true),propertyName,setter.getParameters()[0].getName(),maybeReturn);
        }
      }
      sw.outdent();
      sw.println("}");
      sw.println("X x = new X();");
      if (request.getApiVersion() != null) {
        sw.println("x.getRequestData().setApiVersion(\"%s\");",Generator.escape(request.getApiVersion()));
      }
      if (method.getDialect().equals(Dialect.JSON_RPC)) {
        for (        JParameter param : jmethod.getParameters()) {
          PropertyName annotation=param.getAnnotation(PropertyName.class);
          String propertyName=annotation == null ? param.getName() : annotation.value();
          boolean isContent=param.isAnnotationPresent(JsonRpcContent.class);
          if (isContent) {
            sw.println("x.getRequestData().setRequestContent(%s);",param.getName());
          }
 else {
            sw.println("x.getRequestData().setNamedParameter(\"%s\", %s);",propertyName,param.getName());
          }
        }
      }
      if (!request.isInstance()) {
        sw.println("addInvocation(x);");
      }
      sw.println("return x;");
      sw.outdent();
      sw.println("}");
    }
    sw.commit(logger);
  }
}
