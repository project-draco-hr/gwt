{
  sw.println("private static final %1$s<String, Class<?>> tokensToTypes" + " = new %1$s<String, Class<?>>();",HashMap.class.getCanonicalName());
  sw.println("private static final %1$s<Class<?>, String> typesToTokens" + " = new %1$s<Class<?>, String>();",HashMap.class.getCanonicalName());
  sw.println("private static final %1$s<Class<?>> entityProxyTypes = new %1$s<Class<?>>();",HashSet.class.getCanonicalName());
  sw.println("private static final %1$s<Class<?>> valueProxyTypes = new %1$s<Class<?>>();",HashSet.class.getCanonicalName());
  sw.println("static {");
  sw.indent();
  for (  EntityProxyModel type : model.getAllProxyModels()) {
    sw.println("tokensToTypes.put(\"%s\", %s.class);",OperationKey.hash(type.getQualifiedBinaryName()),type.getQualifiedSourceName());
    sw.println("typesToTokens.put(%s.class, \"%s\");",type.getQualifiedSourceName(),OperationKey.hash(type.getQualifiedBinaryName()));
    sw.println("%s.add(%s.class);",type.getType().equals(Type.ENTITY) ? "entityProxyTypes" : "valueProxyTypes",type.getQualifiedSourceName());
  }
  sw.outdent();
  sw.println("}");
  sw.println("@Override public String getFactoryTypeToken() {");
  sw.indentln("return \"%s\";",model.getFactoryType().getQualifiedBinaryName());
  sw.println("}");
  sw.println("@Override protected Class getTypeFromToken(String typeToken) {");
  sw.indentln("return tokensToTypes.get(typeToken);");
  sw.println("}");
  sw.println("@Override protected String getTypeToken(Class type) {");
  sw.indentln("return typesToTokens.get(type);");
  sw.println("}");
  sw.println("@Override public boolean isEntityType(Class<?> type) {");
  sw.indentln("return entityProxyTypes.contains(type);");
  sw.println("}");
  sw.println("@Override public boolean isValueType(Class<?> type) {");
  sw.indentln("return valueProxyTypes.contains(type);");
  sw.println("}");
}
