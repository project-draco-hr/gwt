{
  Cell<T> cell=getCell();
  String keyboardSelectedItem=" " + style.cellBrowserKeyboardSelectedItem();
  String selectedItem=" " + style.cellBrowserSelectedItem();
  String openItem=" " + style.cellBrowserOpenItem();
  String evenItem=style.cellBrowserEvenItem();
  String oddItem=style.cellBrowserOddItem();
  int keyboardSelectedRow=getKeyboardSelectedRow() + getPageStart();
  int length=values.size();
  int end=start + length;
  for (int i=start; i < end; i++) {
    T value=values.get(i - start);
    boolean isSelected=selectionModel == null ? false : selectionModel.isSelected(value);
    boolean isOpen=isOpen(i);
    StringBuilder classesBuilder=new StringBuilder();
    classesBuilder.append(i % 2 == 0 ? evenItem : oddItem);
    if (isOpen) {
      classesBuilder.append(openItem);
    }
    if (isSelected) {
      classesBuilder.append(selectedItem);
    }
    SafeHtmlBuilder cellBuilder=new SafeHtmlBuilder();
    Context context=new Context(i,0,getValueKey(value));
    cell.render(context,value,cellBuilder);
    SafeHtml image;
    if (isOpen) {
      image=openImageHtml;
    }
 else     if (isLeaf(value)) {
      image=LEAF_IMAGE;
    }
 else {
      image=closedImageHtml;
    }
    SafeStyles padding=SafeStylesUtils.fromTrustedString("padding-right: " + imageWidth + "px;");
    if (i == keyboardSelectedRow) {
      if (isFocused) {
        classesBuilder.append(keyboardSelectedItem);
      }
      char accessKey=getAccessKey();
      if (accessKey != 0) {
        sb.append(template.divFocusableWithKey(i,classesBuilder.toString(),padding,getTabIndex(),getAccessKey(),image,cellBuilder.toSafeHtml()));
      }
 else {
        sb.append(template.divFocusable(i,classesBuilder.toString(),padding,getTabIndex(),image,cellBuilder.toSafeHtml()));
      }
    }
 else {
      sb.append(template.div(i,classesBuilder.toString(),padding,image,cellBuilder.toSafeHtml()));
    }
  }
  updateChildState(this,true);
}
