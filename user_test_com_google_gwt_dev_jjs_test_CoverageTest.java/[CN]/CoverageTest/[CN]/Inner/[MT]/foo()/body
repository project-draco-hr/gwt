{
  final int z=this.y;
  new Inner(){
{
      x=z;
      this.x=z;
      Inner.this.x=z;
      next=CoverageTest.this.next;
      next.foo();
      CoverageTest.this.next.foo();
      CoverageTest.this.x=z;
      CoverageTest.super.x=z;
    }
    @Override public void foo(){
      x=z;
      this.x=z;
      Inner.this.x=z;
      next=CoverageTest.this.next;
      next.foo();
      CoverageTest.this.next.foo();
      CoverageTest.this.x=z;
      CoverageTest.super.x=z;
    }
  }
;
class NamedLocal extends Inner {
    @Override @SuppressWarnings("unused") public void foo(){
      CoverageTest.this.getNext();
      Inner.this.bar();
      super.bar();
      int x=z;
    }
class NamedLocalSub extends NamedLocal {
      @Override @SuppressWarnings("unused") public void foo(){
        Inner.this.bar();
        NamedLocal.this.foo();
        super.foo();
        int x=z;
      }
    }
  }
  testEmptyStatement();
  new InnerSub().new InnerSubSub().fda();
  new SecondMain().new FunkyInner();
}
