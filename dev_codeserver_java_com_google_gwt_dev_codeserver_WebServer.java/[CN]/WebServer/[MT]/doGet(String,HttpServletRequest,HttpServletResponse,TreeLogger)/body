{
  TreeLogger logger=parentLogger.branch(Type.TRACE,"GET " + target);
  if (!target.endsWith(".cache.js")) {
    PageUtil.setNoCacheHeaders(response);
  }
  if (target.equals("/")) {
    setHandled(request);
    JsonObject json=jsonExporter.exportFrontPageVars();
    PageUtil.sendJsonAndHtml("config",json,"frontpage.html",response,logger);
    return;
  }
  if (target.equals("/dev_mode_on.js")) {
    setHandled(request);
    JsonObject json=jsonExporter.exportDevModeOnVars();
    PageUtil.sendJsonAndJavaScript("__gwt_codeserver_config",json,"dev_mode_on.js",response,logger);
    return;
  }
  if (target.startsWith("/recompile/")) {
    setHandled(request);
    String moduleName=target.substring("/recompile/".length());
    Outbox outbox=outboxes.findByOutputModuleName(moduleName);
    if (outbox == null) {
      response.sendError(HttpServletResponse.SC_NOT_FOUND);
      logger.log(TreeLogger.WARN,"not found: " + target);
      return;
    }
    Job job=outbox.makeJob(getBindingProperties(request),logger);
    runner.submit(job);
    Job.Result result=job.waitForResult();
    JsonObject json=jsonExporter.exportRecompileResponse(result);
    sendJsonResult(json,request,response,logger);
    return;
  }
  if (target.startsWith("/log/")) {
    setHandled(request);
    String moduleName=target.substring("/log/".length());
    File file=outboxes.findByOutputModuleName(moduleName).getCompileLog();
    sendLogPage(moduleName,file,response);
    return;
  }
  if (target.equals("/favicon.ico")) {
    InputStream faviconStream=getClass().getResourceAsStream("favicon.ico");
    if (faviconStream != null) {
      setHandled(request);
      PageUtil.sendStream("image/x-icon",faviconStream,response);
    }
    return;
  }
  if (target.equals("/policies/")) {
    setHandled(request);
    sendPolicyIndex(response);
    return;
  }
  if (target.equals("/progress")) {
    setHandled(request);
    JobEvent event=eventTable.getCompilingJobEvent();
    JsonObject json;
    if (event == null) {
      json=new JsonObject();
      json.put("status","idle");
    }
 else {
      json=jsonExporter.exportProgressResponse(event);
    }
    sendJsonResult(json,request,response,logger);
    return;
  }
  Matcher matcher=SAFE_MODULE_PATH.matcher(target);
  if (matcher.matches()) {
    setHandled(request);
    sendModulePage(matcher.group(1),response,logger);
    return;
  }
  matcher=SAFE_DIRECTORY_PATH.matcher(target);
  if (matcher.matches() && handler.isSourceMapRequest(target)) {
    setHandled(request);
    handler.handle(target,request,response,logger);
    return;
  }
  matcher=SAFE_FILE_PATH.matcher(target);
  if (matcher.matches()) {
    setHandled(request);
    if (handler.isSourceMapRequest(target)) {
      handler.handle(target,request,response,logger);
      return;
    }
    if (target.startsWith("/policies/")) {
      sendPolicyFile(target,response,logger);
      return;
    }
    sendOutputFile(target,request,response,logger);
    return;
  }
  logger.log(TreeLogger.WARN,"ignored get request: " + target);
}
