{
  job.onProgress("Loading modules");
  CompilerOptions loadOptions=new CompilerOptionsImpl(compileDir,inputModuleName,options);
  compilerContext=compilerContextBuilder.options(loadOptions).build();
  ModuleDef module=loadModule(compileLogger);
  String recompileJs=generateModuleRecompileJs(module,compileLogger);
  Map<String,String> bindingProperties=restrictPermutations(compileLogger,module,job.getBindingProperties());
  String newModuleName=module.getName();
  outputModuleName.set(newModuleName);
  InputSummary input=new InputSummary(bindingProperties,module);
  if (input.equals(lastBuildInput)) {
    compileLogger.log(Type.INFO,"skipped compile because no input files have changed");
    job.setCompileStrategy(CompileStrategy.SKIPPED);
    return true;
  }
  lastBuildInput=null;
  job.onProgress("Compiling");
  CompilerOptions runOptions=new CompilerOptionsImpl(compileDir,newModuleName,options);
  compilerContext=compilerContextBuilder.options(runOptions).build();
  MinimalRebuildCache minimalRebuildCache=new NullRebuildCache();
  if (options.isIncrementalCompileEnabled()) {
    minimalRebuildCache=minimalRebuildCacheManager.getCache(inputModuleName,bindingProperties);
  }
  job.setCompileStrategy(minimalRebuildCache.isPopulated() ? CompileStrategy.INCREMENTAL : CompileStrategy.FULL);
  boolean success=new Compiler(runOptions,minimalRebuildCache).run(compileLogger,module);
  if (success) {
    publishedCompileDir=compileDir;
    lastBuildInput=input;
    if (options.isIncrementalCompileEnabled()) {
      minimalRebuildCacheManager.putCache(inputModuleName,bindingProperties,minimalRebuildCache);
    }
    String moduleName=outputModuleName.get();
    writeRecompileNoCacheJs(new File(publishedCompileDir.getWarDir(),moduleName),moduleName,recompileJs,compileLogger);
    if (launcherDir != null) {
      launcherDir.update(module,compileDir,compileLogger);
    }
  }
  return success;
}
