{
  ProgressTable dummy=new ProgressTable();
  Map<String,String> bindingProps=ImmutableMap.of();
  Job job=new Job(originalModuleName,bindingProps,parentLogger);
  job.onSubmitted(dummy);
  long startTime=System.currentTimeMillis();
  CompileDir compileDir=makeCompileDir(++compilesDone,job.getLogger());
  TreeLogger compileLogger=makeCompileLogger(compileDir,job.getLogger());
  ModuleDef module=loadModule(compileLogger);
  String newModuleName=module.getName();
  moduleName.set(newModuleName);
  lastBuild.set(compileDir);
  try {
    File outputDir=new File(compileDir.getWarDir().getCanonicalPath() + "/" + getModuleName());
    if (!outputDir.exists()) {
      if (!outputDir.mkdir()) {
        compileLogger.log(TreeLogger.Type.WARN,"cannot create directory: " + outputDir);
      }
    }
    String moduleScript=PageUtil.loadResource(Recompiler.class,"nomodule.nocache.js");
    moduleScript=moduleScript.replace("__MODULE_NAME__",getModuleName());
    PageUtil.writeFile(outputDir.getCanonicalPath() + "/" + getModuleName()+ ".nocache.js",moduleScript);
  }
 catch (  IOException e) {
    compileLogger.log(TreeLogger.Type.ERROR,"Error creating uncompiled module.",e);
  }
  long elapsedTime=System.currentTimeMillis() - startTime;
  compileLogger.log(TreeLogger.Type.INFO,"Module setup completed in " + elapsedTime + " ms");
  Result result=new Result(job,compileDir,null);
  job.onFinished(result);
  return result;
}
