{
  ZipFileClassPathEntry.clearCache();
  ResourceOracleImpl.clearCache();
  ResourceLoader resources=ResourceLoaders.forClassLoader(Thread.currentThread());
  resources=ResourceLoaders.forPathAndFallback(options.getSourcePath(),resources);
  this.resourceLoader.set(resources);
  ModuleDef moduleDef=ModuleDefLoader.loadFromResources(logger,compilerContext,inputModuleName,resources,true);
  compilerContext=compilerContextBuilder.module(moduleDef).build();
  ConfigProps config=new ConfigProps(moduleDef);
  if (IFrameLinker.class.isAssignableFrom(moduleDef.getActivePrimaryLinker())) {
    moduleDef.addLinker("xsiframe");
  }
  Class<? extends Linker> linker=moduleDef.getActivePrimaryLinker();
  if (!CrossSiteIframeLinker.class.isAssignableFrom(linker)) {
    logger.log(TreeLogger.ERROR,"linkers other than CrossSiteIFrameLinker aren't supported. Found: " + linker.getName());
    throw new UnableToCompleteException();
  }
  if (moduleDef.deactivateLinker("precompress")) {
    logger.log(TreeLogger.WARN,"Deactivated PrecompressLinker");
  }
  if (config.getStrings("devModeRedirectEnabled").isEmpty()) {
    throw new RuntimeException("devModeRedirectEnabled isn't set for module: " + moduleDef.getName());
  }
  overrideConfig(moduleDef,"devModeRedirectEnabled","false");
  if (config.getBoolean("installCode",true)) {
    overrideConfig(moduleDef,"installCode","false");
    overrideConfig(moduleDef,"installScriptJs","com/google/gwt/core/ext/linker/impl/installScriptDirect.js");
  }
  overrideConfig(moduleDef,"computeScriptBaseJs","com/google/gwt/dev/codeserver/computeScriptBase.js");
  overrideConfig(moduleDef,"includeSourceMapUrl","http://" + serverPrefix + SourceHandler.sourceMapLocationTemplate(moduleDef.getName()));
  maybeOverrideConfig(moduleDef,"includeBootstrapInPrimaryFragment","false");
  maybeOverrideConfig(moduleDef,"permutationsJs","com/google/gwt/core/ext/linker/impl/permutations.js");
  maybeOverrideConfig(moduleDef,"propertiesJs","com/google/gwt/core/ext/linker/impl/properties.js");
  if (options.shouldCompilePerFile()) {
    maybeOverrideConfig(moduleDef,"CssResource.style","stable");
  }
  overrideBinding(moduleDef,"compiler.useSourceMaps","true");
  overrideBinding(moduleDef,"compiler.useSymbolMaps","false");
  overrideBinding(moduleDef,"superdevmode","on");
  return moduleDef;
}
