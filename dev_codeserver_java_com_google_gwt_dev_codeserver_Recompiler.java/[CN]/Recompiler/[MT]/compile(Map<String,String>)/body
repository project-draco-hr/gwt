{
  if (compilesDone == 0) {
    System.setProperty("java.awt.headless","true");
    if (System.getProperty("gwt.speedtracerlog") == null) {
      System.setProperty("gwt.speedtracerlog",appSpace.getSpeedTracerLogFile().getAbsolutePath());
    }
    CompilationStateBuilder.init(logger,appSpace.getUnitCacheDir());
  }
  long startTime=System.currentTimeMillis();
  int compileId=++compilesDone;
  CompileDir compileDir=makeCompileDir(compileId);
  TreeLogger compileLogger=makeCompileLogger(compileDir);
  boolean listenerFailed=false;
  try {
    options.getRecompileListener().startedCompile(originalModuleName,compileId,compileDir);
  }
 catch (  Exception e) {
    compileLogger.log(TreeLogger.Type.WARN,"listener threw exception",e);
    listenerFailed=true;
  }
  boolean success=false;
  try {
    CompilerOptions compilerOptions=new CompilerOptionsImpl(compileDir,options.getModuleNames(),options.getSourceLevel(),options.enforceStrictResources());
    compilerContext=compilerContextBuilder.options(compilerOptions).build();
    ModuleDef module=loadModule(compileLogger,bindingProperties);
    String newModuleName=module.getName();
    moduleName.set(newModuleName);
    compilerOptions=new CompilerOptionsImpl(compileDir,Lists.newArrayList(newModuleName),options.getSourceLevel(),options.enforceStrictResources());
    compilerContext=compilerContextBuilder.options(compilerOptions).build();
    success=new Compiler(compilerOptions).run(compileLogger,module);
    lastBuild.set(compileDir);
  }
  finally {
    try {
      options.getRecompileListener().finishedCompile(originalModuleName,compileId,success);
    }
 catch (    Exception e) {
      compileLogger.log(TreeLogger.Type.WARN,"listener threw exception",e);
      listenerFailed=true;
    }
  }
  if (!success) {
    compileLogger.log(TreeLogger.Type.ERROR,"Compiler returned " + success);
    throw new UnableToCompleteException();
  }
  long elapsedTime=System.currentTimeMillis() - startTime;
  compileLogger.log(TreeLogger.Type.INFO,"Compile completed in " + elapsedTime + " ms");
  if (options.isCompileTest() && listenerFailed) {
    throw new UnableToCompleteException();
  }
  return compileDir;
}
