{
  if (compilesDone == 0) {
    System.setProperty("java.awt.headless","true");
    if (System.getProperty("gwt.speedtracerlog") == null) {
      System.setProperty("gwt.speedtracerlog",appSpace.getSpeedTracerLogFile().getAbsolutePath());
    }
    compilerContext=compilerContextBuilder.unitCache(UnitCacheSingleton.get(logger,appSpace.getUnitCacheDir())).build();
  }
  long startTime=System.currentTimeMillis();
  int compileId=++compilesDone;
  CompileDir compileDir=makeCompileDir(compileId);
  TreeLogger compileLogger=makeCompileLogger(compileDir);
  boolean listenerFailed=false;
  try {
    options.getRecompileListener().startedCompile(originalModuleName,compileId,compileDir);
  }
 catch (  Exception e) {
    compileLogger.log(TreeLogger.Type.WARN,"listener threw exception",e);
    listenerFailed=true;
  }
  boolean success=false;
  try {
    if (options.shouldCompileIncremental()) {
      progress.set(new Progress.Compiling(moduleName.get(),compilesDone,0,1,"Compiling"));
      success=compileIncremental(compileLogger,compileDir);
    }
 else {
      success=compileMonolithic(compileLogger,bindingProperties,compileDir,progress,minimalRebuildCache);
    }
  }
  finally {
    try {
      options.getRecompileListener().finishedCompile(originalModuleName,compilesDone,success);
    }
 catch (    Exception e) {
      compileLogger.log(TreeLogger.Type.WARN,"listener threw exception",e);
      listenerFailed=true;
    }
  }
  if (!success) {
    compileLogger.log(TreeLogger.Type.ERROR,"Compiler returned false");
    throw new UnableToCompleteException();
  }
  this.minimalRebuildCache=minimalRebuildCache;
  long elapsedTime=System.currentTimeMillis() - startTime;
  compileLogger.log(TreeLogger.Type.INFO,String.format("%.3fs total -- Compile completed",elapsedTime / 1000d));
  if (options.isCompileTest() && listenerFailed) {
    throw new UnableToCompleteException();
  }
  return publishedCompileDir;
}
