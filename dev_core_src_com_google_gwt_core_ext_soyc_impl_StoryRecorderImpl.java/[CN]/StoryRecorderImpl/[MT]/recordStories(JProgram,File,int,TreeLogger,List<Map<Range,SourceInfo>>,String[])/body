{
  logger=logger.branch(TreeLogger.INFO,"Creating Stories file for SOYC");
  this.js=js;
  File storiesFile=new File(workDir,"stories" + Integer.toString(permutationId) + ".xml.gz");
  try {
    stream=new FileOutputStream(storiesFile,true);
    writer=new OutputStreamWriter(new GZIPOutputStream(stream),"UTF-8");
    storiesFile.getParentFile().mkdirs();
    pw=new PrintWriter(writer);
    htmlOut=new HtmlTextOutput(pw,false);
    String curLine="<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
    htmlOut.printRaw(curLine);
    htmlOut.newline();
    curLine="<soyc>";
    htmlOut.printRaw(curLine);
    htmlOut.newline();
    htmlOut.indentIn();
    htmlOut.indentIn();
    curLine="<stories>";
    htmlOut.printRaw(curLine);
    htmlOut.newline();
    htmlOut.indentIn();
    htmlOut.indentIn();
    MemberFactory memberFactory=new MemberFactory();
    TreeSet<ClassMember> classesMutable=new TreeSet<ClassMember>(Member.SOURCE_NAME_COMPARATOR);
    TreeSet<FunctionMember> functionsMutable=new TreeSet<FunctionMember>(Member.SOURCE_NAME_COMPARATOR);
    Set<SourceInfo> sourceInfoSeen=new HashSet<SourceInfo>();
    int fragment=0;
    for (    Map<Range,SourceInfo> sourceInfoMap : sourceInfoMaps) {
      lastEnd=0;
      analyzeFragment(memberFactory,classesMutable,functionsMutable,sourceInfoMap,sourceInfoSeen,fragment++);
    }
    membersByCorrelation=null;
    storyCache=null;
    htmlOut.indentOut();
    htmlOut.indentOut();
    curLine="</stories>";
    htmlOut.printRaw(curLine);
    htmlOut.newline();
    htmlOut.indentOut();
    htmlOut.indentOut();
    curLine="</soyc>";
    htmlOut.printRaw(curLine);
    htmlOut.newline();
    Utility.close(writer);
    pw.close();
    logger.log(TreeLogger.INFO,"Done");
  }
 catch (  Throwable e) {
    logger.log(TreeLogger.ERROR,"Could not open dependency file.",e);
  }
  return storiesFile;
}
