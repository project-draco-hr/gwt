{
  alreadySeen.add(type);
  JMethod method=type.getClinitMethod();
  assert(JProgram.isClinit(method));
  CheckClinitVisitor v=new CheckClinitVisitor();
  v.accept(method);
  if (v.hasLiveCode()) {
    return type;
  }
  Collection<JDeclaredType> clinitTargets=v.getClinitTargets();
  if (clinitTargets.size() == 1) {
    JDeclaredType singleTarget=clinitTargets.iterator().next();
    if (isSuperClass(type,singleTarget)) {
      return singleTarget.getClinitTarget();
    }
  }
  for (  JDeclaredType target : clinitTargets) {
    if (!target.hasClinit()) {
      continue;
    }
    if (target.hasClinit() && computed.contains(target)) {
      return type;
    }
    if (alreadySeen.contains(target)) {
      continue;
    }
    if (computeClinitTargetRecursive(target,computed,alreadySeen) != null) {
      return type;
    }
 else {
      continue;
    }
  }
  return null;
}
