{
  Set<JInterfaceType> couldImplementSet=new IdentityHashSet<JInterfaceType>();
  couldImplementSet.addAll(get(implementsMap,type));
  List<JClassType> subclasses=new ArrayList<JClassType>(ImmutableList.copyOf(Iterables.filter(get(subClassMap,type),JClassType.class)));
  for (  JClassType subclass : subclasses) {
    for (    JInterfaceType intf : subclass.getImplements()) {
      couldImplementSet.add(intf);
      for (      JInterfaceType isup : get(superInterfaceMap,intf)) {
        couldImplementSet.add(isup);
      }
    }
  }
  if (!couldImplementSet.isEmpty()) {
    couldImplementMap.put(type,IdentitySets.normalize(couldImplementSet));
    for (    JInterfaceType couldImpl : couldImplementSet) {
      add(couldBeImplementedMap,couldImpl,type);
    }
  }
}
