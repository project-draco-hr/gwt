{
  Set<JDeclaredType> computed=Sets.newIdentityHashSet();
  if (hasWholeWorldKnowledge) {
    if (optimize) {
      for (      JDeclaredType type : declaredTypes) {
        computeClinitTarget(type,computed);
      }
    }
    nextDual:     for (Iterator<String> it=dualImplInterfaces.iterator(); it.hasNext(); ) {
      String dualIntf=it.next();
      for (      String implementorName : classesByImplementingInterface.get(dualIntf)) {
        JClassType implementor=(JClassType)referenceTypesByName.get(implementorName);
        if (isInstantiatedType(implementor) && !isJavaScriptObject(implementor)) {
          continue nextDual;
        }
      }
      it.remove();
    }
    Iterator<Entry<String,String>> jit=jsoByInterface.entrySet().iterator();
    while (jit.hasNext()) {
      Entry<String,String> jsoSingleImplEntry=jit.next();
      JClassType clazz=(JClassType)referenceTypesByName.get(jsoSingleImplEntry.getValue());
      if (isInstantiatedType(clazz)) {
        continue;
      }
      dualImplInterfaces.remove(jsoSingleImplEntry.getKey());
      jit.remove();
    }
  }
}
