{
  Multimap<String,String> superTypesByType=HashMultimap.create();
  superTypesByType.putAll(immediateTypeRelations.immediateImplementedInterfacesByClass);
  superTypesByType.putAll(Multimaps.forMap(immediateTypeRelations.immediateSuperclassesByClass));
  superTypesByType.putAll(immediateTypeRelations.immediateSuperInterfacesByInterface);
  Multimap<String,String> superTypesByTypeClosure=transitiveClosure(superTypesByType);
  implementedInterfacesByClass=ImmutableSetMultimap.copyOf(Multimaps.filterEntries(superTypesByTypeClosure,new Predicate<Entry<String,String>>(){
    @Override public boolean apply(    Entry<String,String> typeTypeEntry){
      return allClasses.contains(typeTypeEntry.getKey()) && !allClasses.contains(typeTypeEntry.getValue());
    }
  }
));
  classesByImplementingInterface=ImmutableSetMultimap.copyOf(inverse(implementedInterfacesByClass));
}
