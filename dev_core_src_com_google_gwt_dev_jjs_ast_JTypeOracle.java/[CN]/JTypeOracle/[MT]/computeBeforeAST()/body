{
  javaLangObject=program.getTypeJavaLangObject();
  superClassMap.clear();
  subClassMap.clear();
  superInterfaceMap.clear();
  subInterfaceMap.clear();
  implementsMap.clear();
  couldImplementMap.clear();
  isImplementedMap.clear();
  couldBeImplementedMap.clear();
  for (int i=0; i < program.getDeclaredTypes().size(); ++i) {
    JReferenceType type=(JReferenceType)program.getDeclaredTypes().get(i);
    if (type instanceof JClassType) {
      recordSuperSubInfo((JClassType)type);
    }
 else {
      recordSuperSubInfo((JInterfaceType)type);
    }
  }
  for (int i=0; i < program.getDeclaredTypes().size(); ++i) {
    JReferenceType type=(JReferenceType)program.getDeclaredTypes().get(i);
    if (type instanceof JClassType) {
      computeImplements((JClassType)type);
    }
  }
  for (int i=0; i < program.getDeclaredTypes().size(); ++i) {
    JReferenceType type=(JReferenceType)program.getDeclaredTypes().get(i);
    if (type instanceof JClassType) {
      computeCouldImplement((JClassType)type);
    }
  }
  for (int i=0; i < program.getDeclaredTypes().size(); ++i) {
    JReferenceType type=(JReferenceType)program.getDeclaredTypes().get(i);
    if (type instanceof JClassType) {
      computeVirtualUpRefs((JClassType)type);
    }
  }
}
