{
  program=new JProgram();
  typeOracle=program.typeOracle;
  synthSource=SourceOrigin.UNKNOWN;
  classObject=createClass("java.lang.Object",null,false,false);
  classString=createClass("java.lang.String",classObject,false,true);
  createClass("com.google.gwt.lang.Array",classObject,false,true);
  classJso=createClass("com.google.gwt.core.client.JavaScriptObject",classObject,false,false);
  intfSerializable=createInterface("java.io.Serializable");
  intfCloneable=createInterface("java.lang.Cloneable");
  intfIBase=createInterface("IBase");
  intfI=createInterface("I");
  intfI.addImplements(intfIBase);
  intfJ=createInterface("J");
  intfK=createInterface("K");
  classBase=createClass("Base",classObject,false,false);
  classA=createClass("A",classBase,false,false);
  classB=createClass("B",classBase,false,false);
  classB.addImplements(intfI);
  classC=createClass("C",classObject,false,false);
  classC.addImplements(intfI);
  classBSub=createClass("BSub",classB,false,false);
  classJso1=createClass("Jso1",classJso,false,false);
  classJso1.addImplements(intfJ);
  classJso2=createClass("Jso2",classJso,false,false);
  classJso2.addImplements(intfK);
  program.typeOracle.computeBeforeAST();
  typeNull=program.getTypeNull();
  classBnn=classB.getNonNull();
  classBaseNn=classBase.getNonNull();
  arrayOfA=program.getTypeArray(classA);
  arrayOfB=program.getTypeArray(classB);
  arrayOfBSub=program.getTypeArray(classBSub);
  arrayOfC=program.getTypeArray(classC);
  arrayOfObject=program.getTypeArray(classObject);
  arrayOfInt=program.getTypeArray(program.getTypePrimitiveInt());
  arrayOfArrayOfInt=program.getTypeArray(program.getTypePrimitiveInt(),2);
  arrayOfArrayOfB=program.getTypeArray(classB,2);
}
