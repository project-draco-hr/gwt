{
  assertFalse(typeOracle.canTheoreticallyCast(classBnn,typeNull));
  assertTrue(typeOracle.canTheoreticallyCast(classBSub,classB));
  assertTrue(typeOracle.canTheoreticallyCast(classB,classBSub));
  assertTrue(typeOracle.canTheoreticallyCast(classB,classBnn));
  assertTrue(typeOracle.canTheoreticallyCast(classBnn,classB));
  assertTrue(typeOracle.canTheoreticallyCast(classB,classB));
  assertTrue(typeOracle.canTheoreticallyCast(classObject,arrayOfB));
  assertFalse(typeOracle.canTheoreticallyCast(arrayOfA,arrayOfArrayOfB));
  assertTrue(typeOracle.canTheoreticallyCast(arrayOfObject,arrayOfArrayOfB));
  assertTrue(typeOracle.canTheoreticallyCast(arrayOfB,arrayOfBSub));
  assertTrue(typeOracle.canTheoreticallyCast(classBase,intfI));
  assertFalse(typeOracle.canTheoreticallyCast(classA,intfJ));
  assertTrue(typeOracle.canTheoreticallyCast(intfIBase,intfI));
  assertTrue(typeOracle.canTheoreticallyCast(intfIBase,classBase));
  assertFalse(typeOracle.canTheoreticallyCast(intfJ,classA));
  assertTrue(typeOracle.canTheoreticallyCast(arrayOfA,intfSerializable));
  assertTrue(typeOracle.canTheoreticallyCast(intfSerializable,arrayOfA));
  assertTrue(typeOracle.canTheoreticallyCast(arrayOfA,intfCloneable));
  assertTrue(typeOracle.canTheoreticallyCast(intfCloneable,arrayOfA));
  assertTrue(typeOracle.canTheoreticallyCast(intfList,intfIterable));
  assertTrue(typeOracle.canTheoreticallyCast(classArrayList,intfIterable));
}
