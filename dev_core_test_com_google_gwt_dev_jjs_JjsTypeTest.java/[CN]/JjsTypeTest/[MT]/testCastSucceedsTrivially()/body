{
  assertTrue(typeOracle.castSucceedsTrivially(classB,classB));
  assertTrue(typeOracle.castSucceedsTrivially(classBSub,classB));
  assertFalse(typeOracle.castSucceedsTrivially(classB,classBSub));
  assertFalse(typeOracle.castSucceedsTrivially(classC,classA));
  assertFalse(typeOracle.castSucceedsTrivially(classA,classC));
  assertTrue(typeOracle.castSucceedsTrivially(classB,intfI));
  assertFalse(typeOracle.castSucceedsTrivially(intfI,classB));
  assertTrue(typeOracle.castSucceedsTrivially(classB,classObject));
  assertFalse(typeOracle.castSucceedsTrivially(classObject,classB));
  assertTrue(typeOracle.castSucceedsTrivially(classB,intfI));
  assertFalse(typeOracle.castSucceedsTrivially(intfI,classB));
  assertTrue(typeOracle.castSucceedsTrivially(classBnn,classB));
  assertFalse(typeOracle.castSucceedsTrivially(classB,classBnn));
  assertTrue(typeOracle.castSucceedsTrivially(typeNull,classB));
  assertFalse(typeOracle.castSucceedsTrivially(classB,typeNull));
  assertTrue(typeOracle.castSucceedsTrivially(arrayOfA,classObject));
  assertTrue(typeOracle.castSucceedsTrivially(arrayOfBSub,arrayOfB));
  assertFalse(typeOracle.castSucceedsTrivially(arrayOfB,arrayOfBSub));
  assertFalse(typeOracle.castSucceedsTrivially(arrayOfA,arrayOfB));
  assertFalse(typeOracle.castSucceedsTrivially(arrayOfB,arrayOfA));
  assertFalse(typeOracle.castSucceedsTrivially(arrayOfArrayOfB,arrayOfB));
  assertFalse(typeOracle.castSucceedsTrivially(arrayOfB,arrayOfArrayOfB));
  assertTrue(typeOracle.castSucceedsTrivially(arrayOfArrayOfB,arrayOfObject));
  assertFalse(typeOracle.castSucceedsTrivially(arrayOfObject,arrayOfArrayOfB));
  assertTrue(typeOracle.castSucceedsTrivially(classJso1,classJso));
  assertTrue(typeOracle.castSucceedsTrivially(arrayOfA,intfSerializable));
  assertFalse(typeOracle.castSucceedsTrivially(intfSerializable,arrayOfA));
  assertTrue(typeOracle.castSucceedsTrivially(arrayOfA,intfCloneable));
  assertFalse(typeOracle.castSucceedsTrivially(intfCloneable,arrayOfA));
  for (  JReferenceType type1 : severalTypes()) {
    for (    JReferenceType type2 : severalTypes()) {
      if (type1 != type2) {
        assertFalse(typeOracle.castSucceedsTrivially(type1,type2) && typeOracle.castSucceedsTrivially(type2,type1));
      }
    }
  }
}
