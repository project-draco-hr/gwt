{
  assertShouldSucceedTrivially(classB,classB);
  assertShouldSucceedTrivially(classBSub,classB);
  assertShouldNotSucceedTrivially(classB,classBSub);
  assertShouldNotSucceedTrivially(classC,classA);
  assertShouldNotSucceedTrivially(classA,classC);
  assertShouldSucceedTrivially(classB,intfI);
  assertShouldNotSucceedTrivially(intfI,classB);
  assertShouldSucceedTrivially(classB,classObject);
  assertShouldNotSucceedTrivially(classObject,classB);
  assertShouldSucceedTrivially(classB,intfI);
  assertShouldNotSucceedTrivially(intfI,classB);
  assertShouldSucceedTrivially(classBnn,classB);
  assertShouldNotSucceedTrivially(classB,classBnn);
  assertShouldSucceedTrivially(typeNull,classB);
  assertShouldNotSucceedTrivially(classB,typeNull);
  assertShouldSucceedTrivially(arrayOfA,classObject);
  assertShouldSucceedTrivially(arrayOfBSub,arrayOfB);
  assertShouldNotSucceedTrivially(arrayOfB,arrayOfBSub);
  assertShouldNotSucceedTrivially(arrayOfA,arrayOfB);
  assertShouldNotSucceedTrivially(arrayOfB,arrayOfA);
  assertShouldNotSucceedTrivially(arrayOfArrayOfB,arrayOfB);
  assertShouldNotSucceedTrivially(arrayOfB,arrayOfArrayOfB);
  assertShouldSucceedTrivially(arrayOfArrayOfB,arrayOfObject);
  assertShouldNotSucceedTrivially(arrayOfObject,arrayOfArrayOfB);
  assertShouldSucceedTrivially(classJso1,classJso);
  assertShouldSucceedTrivially(arrayOfA,intfSerializable);
  assertShouldNotSucceedTrivially(intfSerializable,arrayOfA);
  assertShouldSucceedTrivially(arrayOfA,intfCloneable);
  assertShouldNotSucceedTrivially(intfCloneable,arrayOfA);
  for (  JReferenceType type1 : severalTypes()) {
    for (    JReferenceType type2 : severalTypes()) {
      if (type1 != type2) {
        assertFalse(type1.toString() + " and " + type2+ " should not be castable to each other",typeOracle.castSucceedsTrivially(type1,type2) && typeOracle.castSucceedsTrivially(type2,type1));
      }
    }
  }
}
