{
  assertTrue(typeOracle.castFailsTrivially(classBnn,typeNull));
  assertFalse(typeOracle.castFailsTrivially(classBSub,classB));
  assertFalse(typeOracle.castFailsTrivially(classB,classBSub));
  assertFalse(typeOracle.castFailsTrivially(classB,classBnn));
  assertFalse(typeOracle.castFailsTrivially(classBnn,classB));
  assertFalse(typeOracle.castFailsTrivially(classB,classB));
  assertFalse(typeOracle.castFailsTrivially(classObject,arrayOfB));
  assertTrue(typeOracle.castFailsTrivially(arrayOfA,arrayOfArrayOfB));
  assertFalse(typeOracle.castFailsTrivially(arrayOfObject,arrayOfArrayOfB));
  assertFalse(typeOracle.castFailsTrivially(arrayOfB,arrayOfBSub));
  assertFalse(typeOracle.castFailsTrivially(classBase,intfI));
  assertTrue(typeOracle.castFailsTrivially(classA,intfJ));
  assertFalse(typeOracle.castFailsTrivially(intfIBase,intfI));
  assertFalse(typeOracle.castFailsTrivially(intfIBase,classBase));
  assertTrue(typeOracle.castFailsTrivially(intfJ,classA));
  assertFalse(typeOracle.castFailsTrivially(arrayOfA,intfSerializable));
  assertFalse(typeOracle.castFailsTrivially(intfSerializable,arrayOfA));
  assertFalse(typeOracle.castFailsTrivially(arrayOfA,intfCloneable));
  assertFalse(typeOracle.castFailsTrivially(intfCloneable,arrayOfA));
  assertFalse(typeOracle.castFailsTrivially(intfList,intfIterable));
  assertFalse(typeOracle.castFailsTrivially(classArrayList,intfIterable));
  assertFalse(typeOracle.castFailsTrivially(classJso1,classJso2));
  assertFalse(typeOracle.castFailsTrivially(classJso2,classJso1));
  assertFalse(typeOracle.castFailsTrivially(classJso1,intfK));
  assertFalse(typeOracle.castFailsTrivially(intfK,classJso1));
  assertFalse(typeOracle.castFailsTrivially(intfJ,intfK));
  assertFalse(typeOracle.castFailsTrivially(intfK,intfJ));
}
