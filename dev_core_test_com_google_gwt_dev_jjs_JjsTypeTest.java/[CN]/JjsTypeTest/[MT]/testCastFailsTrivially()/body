{
  assertShouldFailTrivially(classBnn,typeNull);
  assertShouldNotFailTrivially(classBSub,classB);
  assertShouldNotFailTrivially(classB,classBSub);
  assertShouldNotFailTrivially(classB,classBnn);
  assertShouldNotFailTrivially(classBnn,classB);
  assertShouldNotFailTrivially(classB,classB);
  assertShouldNotFailTrivially(classObject,arrayOfB);
  assertShouldFailTrivially(arrayOfA,arrayOfArrayOfB);
  assertShouldNotFailTrivially(arrayOfObject,arrayOfArrayOfB);
  assertShouldNotFailTrivially(arrayOfB,arrayOfBSub);
  assertShouldNotFailTrivially(classBase,intfI);
  assertShouldFailTrivially(classA,intfJ);
  assertShouldNotFailTrivially(intfIBase,intfI);
  assertShouldNotFailTrivially(intfIBase,classBase);
  assertShouldFailTrivially(intfJ,classA);
  assertShouldNotFailTrivially(arrayOfA,intfSerializable);
  assertShouldNotFailTrivially(intfSerializable,arrayOfA);
  assertShouldNotFailTrivially(arrayOfA,intfCloneable);
  assertShouldNotFailTrivially(intfCloneable,arrayOfA);
  assertShouldNotFailTrivially(intfList,intfIterable);
  assertShouldNotFailTrivially(classArrayList,intfIterable);
  assertShouldNotFailTrivially(classJso1,classJso2);
  assertShouldNotFailTrivially(classJso2,classJso1);
  assertShouldNotFailTrivially(classJso1,intfK);
  assertShouldNotFailTrivially(intfK,classJso1);
  assertShouldNotFailTrivially(intfJ,intfK);
  assertShouldNotFailTrivially(intfK,intfJ);
  assertShouldNotFailTrivially(classB,intfL);
  assertShouldFailTrivially(classB.strengthenToExact(),intfL);
}
