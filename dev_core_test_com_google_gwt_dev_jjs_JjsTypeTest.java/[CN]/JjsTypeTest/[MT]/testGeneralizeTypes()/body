{
  assertSame(classA,generalizeTypes(classA,classA));
  assertSame(classB,generalizeTypes(classB,classBnn));
  assertSame(classB,generalizeTypes(classBnn,classB));
  assertSame(classBaseNn,generalizeTypes(classBnn,classBaseNn));
  assertSame(classB,generalizeTypes(classB,typeNull));
  assertSame(classB,generalizeTypes(typeNull,classB));
  assertSame(intfIBase,generalizeTypes(intfI,intfIBase));
  assertSame(intfIBase,generalizeTypes(intfIBase,intfI));
  assertSame(classObject,generalizeTypes(intfJ,intfI));
  assertSame(classObject,generalizeTypes(arrayOfB,arrayOfInt));
  assertSame(classObject,generalizeTypes(arrayOfC,arrayOfArrayOfB));
  assertSame(arrayOfObject,generalizeTypes(arrayOfC,arrayOfB));
  assertSame(arrayOfObject,generalizeTypes(arrayOfObject,arrayOfArrayOfInt));
  assertSame(intfI,generalizeTypes(classB,intfI));
  assertSame(classObject,generalizeTypes(classB,intfJ));
  assertSame(classObject,generalizeTypes(intfI,arrayOfInt));
  assertSame(intfSerializable,generalizeTypes(intfSerializable,arrayOfA));
  assertSame(intfCloneable,generalizeTypes(intfCloneable,arrayOfA));
  for (  JReferenceType type1 : severalTypes()) {
    for (    JReferenceType type2 : severalTypes()) {
      JReferenceType generalized=generalizeTypes(type1,type2);
      assertTrue(typeOracle.canTriviallyCast(type1,generalized));
      assertTrue(typeOracle.canTriviallyCast(type2,generalized));
    }
  }
}
