{
  final AutoBean<OtherIntf> other=factory.otherIntf();
  final AutoBean<Intf> intf=factory.intf();
  other.as().setIntf(intf.as());
  intf.as().setInt(42);
class Checker extends AutoBeanVisitor {
    boolean seenOther;
    boolean seenIntf;
    @Override public void endVisitReferenceProperty(    String propertyName,    AutoBean<?> value,    PropertyContext ctx){
      if ("intf".equals(propertyName)) {
        assertSame(intf,value);
      }
 else       if ("unreferenced".equals(propertyName)) {
        assertNull(value);
      }
 else {
        fail("Unexpecetd property " + propertyName);
      }
    }
    @Override public void endVisitValueProperty(    String propertyName,    Object value,    PropertyContext ctx){
      if ("int".equals(propertyName)) {
        assertEquals(42,value);
      }
 else       if ("string".equals(propertyName)) {
        assertNull(value);
      }
 else {
        fail("Unknown value property " + propertyName);
      }
    }
    @Override public boolean visit(    AutoBean<?> bean,    Context ctx){
      if (bean == other) {
        seenOther=true;
      }
 else       if (bean == intf) {
        seenIntf=true;
      }
 else {
        fail("Unknown AutoBean");
      }
      return true;
    }
    void check(){
      assertTrue(seenOther);
      assertTrue(seenIntf);
    }
  }
  Checker c=new Checker();
  other.accept(c);
  c.check();
}
