{
  String className=ref.className();
  JType type=null;
  if (!className.equals("null")) {
    type=program.getTypeFromJsniRef(className);
    if (type == null) {
      errorReporter.reportError("Unresolvable native reference to type '" + className + "'");
      return null;
    }
  }
  if (!ref.isMethod()) {
    String fieldName=ref.memberName();
    if (type == null) {
      if (fieldName.equals("nullField")) {
        return program.getNullField();
      }
    }
 else     if (fieldName.equals(JsniRef.CLASS)) {
      return type;
    }
 else     if (type instanceof JPrimitiveType) {
      errorReporter.reportError("May not refer to fields on primitive types");
      return null;
    }
 else     if (type instanceof JArrayType) {
      errorReporter.reportError("May not refer to fields on array types");
      return null;
    }
 else {
      for (      JField field : ((JDeclaredType)type).getFields()) {
        if (field.getName().equals(fieldName)) {
          return field;
        }
      }
    }
    errorReporter.reportError("Unresolvable native reference to field '" + fieldName + "' in type '"+ className+ "'");
    return null;
  }
 else   if (type instanceof JPrimitiveType) {
    errorReporter.reportError("May not refer to methods on primitive types");
    return null;
  }
 else {
    LinkedHashMap<String,LinkedHashMap<String,JMethod>> matchesBySig=new LinkedHashMap<String,LinkedHashMap<String,JMethod>>();
    String methodName=ref.memberName();
    String jsniSig=ref.memberSignature();
    if (type == null) {
      if (jsniSig.equals("nullMethod()")) {
        return program.getNullMethod();
      }
    }
 else {
      findMostDerivedMembers(matchesBySig,(JDeclaredType)type,methodName,true);
      LinkedHashMap<String,JMethod> matches=matchesBySig.get(jsniSig);
      if (matches != null && matches.size() == 1) {
        return matches.values().iterator().next();
      }
      removeSyntheticMembers(matchesBySig);
      matches=matchesBySig.get(jsniSig);
      if (matches != null && matches.size() == 1) {
        return matches.values().iterator().next();
      }
    }
    if (matchesBySig.isEmpty()) {
      errorReporter.reportError("Unresolvable native reference to method '" + methodName + "' in type '"+ className+ "'");
      return null;
    }
 else {
      StringBuilder suggestList=new StringBuilder();
      String comma="";
      TreeSet<String> almostMatchSigs=new TreeSet<String>();
      for (      String sig : matchesBySig.keySet()) {
        if (matchesBySig.get(sig).size() == 1) {
          almostMatchSigs.add(sig);
        }
      }
      for (      String almost : almostMatchSigs) {
        suggestList.append(comma + "'" + almost+ "'");
        comma=", ";
      }
      errorReporter.reportError("Unresolvable native reference to method '" + methodName + "' in type '"+ className+ "' (did you mean "+ suggestList.toString()+ "?)");
      return null;
    }
  }
}
