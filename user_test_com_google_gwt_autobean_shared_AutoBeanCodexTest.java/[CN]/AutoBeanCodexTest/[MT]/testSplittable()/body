{
  AutoBean<Simple> simple=f.simple();
  simple.as().setString("Simple");
  AutoBean<HasAutoBean> bean=f.hasAutoBean();
  bean.as().setSimple(AutoBeanCodex.encode(simple));
  bean.as().setString(ValueCodex.encode("Hello ['\"] world"));
  List<Splittable> testList=Arrays.asList(AutoBeanCodex.encode(simple),null,AutoBeanCodex.encode(simple));
  bean.as().setSimpleList(testList);
  Splittable split=AutoBeanCodex.encode(bean);
  AutoBean<HasAutoBean> decoded=AutoBeanCodex.decode(f,HasAutoBean.class,split);
  Splittable toDecode=decoded.as().getSimple();
  AutoBean<Simple> decodedSimple=AutoBeanCodex.decode(f,Simple.class,toDecode);
  assertEquals("Simple",decodedSimple.as().getString());
  assertEquals("Hello ['\"] world",ValueCodex.decode(String.class,decoded.as().getString()));
  List<Splittable> list=decoded.as().getSimpleList();
  assertEquals(3,list.size());
  assertNull(list.get(1));
  assertEquals("Simple",AutoBeanCodex.decode(f,Simple.class,list.get(2)).as().getString());
}
