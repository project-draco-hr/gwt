{
  AutoBean<Simple> bean=f.simple();
  Simple simple=bean.as();
  simple.setBoolean(true);
  simple.setInt(42);
  simple.setOtherBoolean(true);
  simple.setString("Hello World!");
  AutoBean<Simple> decodedBean=checkEncode(bean);
  assertTrue(AutoBeanUtils.diff(bean,decodedBean).isEmpty());
  assertTrue(decodedBean.as().isBoolean());
  assertTrue(decodedBean.as().hasOtherBoolean());
  AutoBean<HasSimple> bean2=f.hasSimple();
  bean2.as().setSimple(simple);
  AutoBean<HasSimple> decodedBean2=checkEncode(bean2);
  assertNotNull(decodedBean2.as().getSimple());
  assertTrue(AutoBeanUtils.diff(bean,AutoBeanUtils.getAutoBean(decodedBean2.as().getSimple())).isEmpty());
  AutoBean<HasList> bean3=f.hasList();
  bean3.as().setIntList(Arrays.asList(1,2,3,null,4,5));
  bean3.as().setList(Arrays.asList(simple));
  AutoBean<HasList> decodedBean3=checkEncode(bean3);
  assertNotNull(decodedBean3.as().getIntList());
  assertEquals(Arrays.asList(1,2,3,null,4,5),decodedBean3.as().getIntList());
  assertNotNull(decodedBean3.as().getList());
  assertEquals(1,decodedBean3.as().getList().size());
  assertTrue(AutoBeanUtils.diff(bean,AutoBeanUtils.getAutoBean(decodedBean3.as().getList().get(0))).isEmpty());
}
