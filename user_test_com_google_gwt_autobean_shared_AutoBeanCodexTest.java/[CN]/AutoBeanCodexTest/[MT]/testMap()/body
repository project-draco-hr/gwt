{
  AutoBean<HasMap> bean=f.hasMap();
  Map<String,Simple> map=new HashMap<String,Simple>();
  Map<Simple,Simple> complex=new HashMap<Simple,Simple>();
  bean.as().setSimpleMap(map);
  bean.as().setComplexMap(complex);
  for (int i=0, j=5; i < j; i++) {
    Simple s=f.simple().as();
    s.setInt(i);
    map.put(String.valueOf(i),s);
    Simple key=f.simple().as();
    key.setString(String.valueOf(i));
    complex.put(key,s);
  }
  Splittable split=AutoBeanCodex.encode(bean);
  AutoBean<HasMap> decoded=AutoBeanCodex.decode(f,HasMap.class,split);
  map=decoded.as().getSimpleMap();
  complex=decoded.as().getComplexMap();
  assertEquals(5,map.size());
  for (int i=0, j=5; i < j; i++) {
    Simple s=map.get(String.valueOf(i));
    assertNotNull(s);
    assertEquals(i,s.getInt());
  }
  assertEquals(5,complex.size());
  for (  Map.Entry<Simple,Simple> entry : complex.entrySet()) {
    assertEquals(entry.getKey().getString(),String.valueOf(entry.getValue().getInt()));
  }
}
