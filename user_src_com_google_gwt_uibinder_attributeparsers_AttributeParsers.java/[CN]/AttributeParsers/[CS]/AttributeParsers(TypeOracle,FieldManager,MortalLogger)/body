{
  this.logger=logger;
  converter=new FieldReferenceConverter(fieldManager);
  try {
    BooleanAttributeParser boolParser=new BooleanAttributeParser(converter,types.parse(BOOLEAN),logger);
    addAttributeParser(BOOLEAN,boolParser);
    addAttributeParser(Boolean.class.getCanonicalName(),boolParser);
    IntAttributeParser intParser=new IntAttributeParser(converter,types.parse(INT),logger);
    addAttributeParser(INT,intParser);
    addAttributeParser(Integer.class.getCanonicalName(),intParser);
    DoubleAttributeParser doubleParser=new DoubleAttributeParser(converter,types.parse(DOUBLE),logger);
    addAttributeParser(DOUBLE,doubleParser);
    addAttributeParser(Double.class.getCanonicalName(),doubleParser);
    addAttributeParser("int,int",new IntPairAttributeParser(intParser,logger));
    addAttributeParser(HORIZ_CONSTANT,new HorizontalAlignmentConstantParser(converter,types.parse(HORIZ_CONSTANT),logger));
    addAttributeParser(VERT_CONSTANT,new VerticalAlignmentConstantParser(converter,types.parse(VERT_CONSTANT),logger));
    addAttributeParser(TEXT_ALIGN_CONSTANT,new TextAlignConstantParser(converter,types.parse(TEXT_ALIGN_CONSTANT),logger));
    StringAttributeParser stringParser=new StringAttributeParser(converter,types.parse(STRING));
    addAttributeParser(STRING,stringParser);
    EnumAttributeParser unitParser=new EnumAttributeParser(converter,(JEnumType)types.parse(UNIT),logger);
    addAttributeParser(DOUBLE + "," + UNIT,new LengthAttributeParser(doubleParser,unitParser,logger));
    SafeUriAttributeParser uriParser=new SafeUriAttributeParser(stringParser,converter,types.parse(SAFE_URI),logger);
    addAttributeParser(SAFE_URI,uriParser);
    safeUriInHtmlParser=new SafeUriAttributeParser(stringParser,converter,types.parse(SAFE_URI),types.parse(STRING),logger);
  }
 catch (  TypeOracleException e) {
    throw new RuntimeException(e);
  }
}
