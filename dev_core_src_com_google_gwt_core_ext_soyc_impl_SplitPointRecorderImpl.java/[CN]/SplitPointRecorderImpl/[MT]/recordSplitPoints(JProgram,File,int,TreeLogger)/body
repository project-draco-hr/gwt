{
  logger=logger.branch(TreeLogger.INFO,"Creating Split Point Map file for SOYC");
  File splitPointsFile=new File(workDir,"splitPoints" + Integer.toString(permutationId) + ".xml.gz");
  try {
    splitPointsFile.getParentFile().mkdirs();
    stream=new FileOutputStream(splitPointsFile,true);
    writer=new OutputStreamWriter(new GZIPOutputStream(stream),"UTF-8");
    pw=new PrintWriter(writer);
    htmlOut=new HtmlTextOutput(pw,false);
    String curLine="<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
    htmlOut.printRaw(curLine);
    htmlOut.newline();
    curLine="<soyc>";
    htmlOut.printRaw(curLine);
    htmlOut.newline();
    htmlOut.indentIn();
    htmlOut.indentIn();
    Map<Integer,String> splitPointMap=jprogram.getSplitPointMap();
    if (splitPointMap.size() > 0) {
      curLine="<splitpoints>";
      htmlOut.printRaw(curLine);
      htmlOut.newline();
      htmlOut.indentIn();
      htmlOut.indentIn();
      for (      Map.Entry<Integer,String> entry : splitPointMap.entrySet()) {
        Integer splitPointCount=entry.getKey();
        curLine="<splitpoint id=\"" + splitPointCount + "\" location=\""+ entry.getValue()+ "\"/>";
        htmlOut.printRaw(curLine);
        htmlOut.newline();
      }
      htmlOut.indentOut();
      htmlOut.indentOut();
      curLine="</splitpoints>";
      htmlOut.printRaw(curLine);
      htmlOut.newline();
    }
    htmlOut.indentOut();
    htmlOut.indentOut();
    curLine="</soyc>";
    htmlOut.printRaw(curLine);
    htmlOut.newline();
    Utility.close(writer);
    pw.close();
    logger.log(TreeLogger.INFO,"Done");
  }
 catch (  Throwable e) {
    logger.log(TreeLogger.ERROR,"Could not open dependency file.",e);
  }
  return splitPointsFile;
}
