{
  sourceOracle.addOrReplace(new MockJavaResource("test.JsoIntf"){
    @Override public CharSequence getContent(){
      StringBuffer code=new StringBuffer();
      code.append("package test;");
      code.append("import com.google.gwt.core.client.JavaScriptObject;\n");
      code.append("public interface JsoIntf {");
      code.append("  public int getAny();");
      code.append("}");
      return code;
    }
  }
);
  sourceOracle.addOrReplace(new MockJavaResource("test.UpRefIntf"){
    @Override public CharSequence getContent(){
      StringBuffer code=new StringBuffer();
      code.append("package test;");
      code.append("import com.google.gwt.core.client.JavaScriptObject;\n");
      code.append("public interface UpRefIntf {");
      code.append("  public int getFoo();");
      code.append("}");
      return code;
    }
  }
);
  sourceOracle.addOrReplace(new MockJavaResource("test.NonImplementor"){
    @Override public CharSequence getContent(){
      StringBuffer code=new StringBuffer();
      code.append("package test;");
      code.append("import com.google.gwt.core.client.JavaScriptObject;\n");
      code.append("public class NonImplementor extends JavaScriptObject {");
      code.append("  protected NonImplementor() {}");
      code.append("  final public native int getFoo() /*-{ return 0; }-*/;");
      code.append("}");
      return code;
    }
  }
);
  sourceOracle.addOrReplace(new MockJavaResource("test.VirtualUpRef"){
    @Override public CharSequence getContent(){
      StringBuffer code=new StringBuffer();
      code.append("package test;");
      code.append("import com.google.gwt.core.client.JavaScriptObject;\n");
      code.append("final public class VirtualUpRef extends NonImplementor implements UpRefIntf {");
      code.append("  protected VirtualUpRef() {}");
      code.append("  public static native VirtualUpRef create() /*-{ return  {}; }-*/;");
      code.append("}");
      return code;
    }
  }
);
  sourceOracle.addOrReplace(new MockJavaResource("test.SingleJso"){
    @Override public CharSequence getContent(){
      StringBuffer code=new StringBuffer();
      code.append("package test;");
      code.append("import com.google.gwt.core.client.JavaScriptObject;\n");
      code.append("final public class SingleJso extends JavaScriptObject implements JsoIntf {");
      code.append("  protected SingleJso() {}");
      code.append("  public native int getAny() /*-{ return 1; }-*/;");
      code.append("  public static native JsoIntf returnsJsoIntf() /*-{ return {}; }-*/;");
      code.append("  public static native SingleJso returnsJso() /*-{ return {}; }-*/;");
      code.append("}");
      return code;
    }
  }
);
  sourceOracle.addOrReplace(new MockJavaResource("test.Foo"){
    @Override public CharSequence getContent(){
      StringBuffer code=new StringBuffer();
      code.append("package test;\n");
      code.append("import com.google.gwt.core.client.JavaScriptObject;\n");
      code.append("public class Foo {\n");
      code.append("  public static native JavaScriptObject returnsJso() /*-{ return {}; }-*/;\n");
      code.append("  public static native void assignsJsoField() /*-{ @test.Foo::jsoField = {}; }-*/;\n");
      code.append("  public static native void readsJsoField() /*-{ var x = @test.Foo::jsoField; }-*/;\n");
      code.append("  public static native void passesJsoParam() /*-{ @test.Foo::calledFromJsni(Lcom/google/gwt/core/client/JavaScriptObject;)({}); }-*/;\n");
      code.append("  private static JavaScriptObject jsoField = null;\n");
      code.append("  private static void calledFromJsni(JavaScriptObject arg) { }\n");
      code.append("}\n");
      return code;
    }
  }
);
  addSnippetImport("test.Foo");
  analyzeSnippet("").assertOnlyInstantiatedTypes(Empty.STRINGS);
  analyzeSnippet("Foo.returnsJso();").assertOnlyInstantiatedTypes("JavaScriptObject","Object");
  analyzeSnippet("Foo.assignsJsoField();").assertOnlyInstantiatedTypes("JavaScriptObject","Object");
  analyzeSnippet("Foo.readsJsoField();").assertOnlyInstantiatedTypes(Empty.STRINGS);
  analyzeSnippet("Foo.passesJsoParam();").assertOnlyInstantiatedTypes("JavaScriptObject","Object");
  analyzeSnippet("SingleJso.returnsJso();").assertOnlyInstantiatedTypes("SingleJso","JavaScriptObject","Object","JsoIntf");
  analyzeSnippet("SingleJso.returnsJsoIntf();").assertOnlyInstantiatedTypes("SingleJso","JavaScriptObject","Object","JsoIntf");
  analyzeSnippet("VirtualUpRef.create().getFoo();").assertOnlyInstantiatedTypes("VirtualUpRef","NonImplementor","JavaScriptObject","Object","UpRefIntf");
  analyzeSnippet("VirtualUpRef.create().getFoo();").assertOnlyLiveFieldsAndMethods("VirtualUpRef.$clinit","VirtualUpRef.create","NonImplementor.$clinit","NonImplementor.getFoo","UpRefIntf.$clinit","JavaScriptObject.$clinit","EntryPoint.$clinit","EntryPoint.onModuleLoad","Object.$clinit");
}
