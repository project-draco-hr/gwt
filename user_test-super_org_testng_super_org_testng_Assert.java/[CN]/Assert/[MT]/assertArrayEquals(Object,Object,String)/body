{
  if (actual.getClass().isArray()) {
    if (actual instanceof Object[] && expected instanceof Object[]) {
      Object[] actualArray=(Object[])actual;
      Object[] expectedArray=(Object[])expected;
      int expectedLength=expectedArray.length;
      if (expectedLength == actualArray.length) {
        for (int i=0; i < expectedLength; i++) {
          Object _actual=actualArray[i];
          Object _expected=expectedArray[i];
          try {
            assertEquals(_actual,_expected);
          }
 catch (          AssertionError ae) {
            failArrayValuesAtIndexNotEqual(_actual,_expected,i,message);
          }
        }
        return;
      }
 else {
        failArrayLengthsNotEqual(actualArray.length,expectedLength,message);
      }
    }
 else     if (actual instanceof int[] && expected instanceof int[]) {
      int[] actualArray=(int[])actual;
      int[] expectedArray=(int[])expected;
      int expectedLength=expectedArray.length;
      if (expectedLength == actualArray.length) {
        for (int i=0; i < expectedLength; i++) {
          int _actual=actualArray[i];
          int _expected=expectedArray[i];
          try {
            assertEquals(_actual,_expected);
          }
 catch (          AssertionError ae) {
            failArrayValuesAtIndexNotEqual(_actual,_expected,i,message);
          }
        }
        return;
      }
 else {
        failArrayLengthsNotEqual(actualArray.length,expectedLength,message);
      }
    }
 else     if (actual instanceof float[] && expected instanceof float[]) {
      float[] actualArray=(float[])actual;
      float[] expectedArray=(float[])expected;
      int expectedLength=expectedArray.length;
      if (expectedLength == actualArray.length) {
        for (int i=0; i < expectedLength; i++) {
          float _actual=actualArray[i];
          float _expected=expectedArray[i];
          try {
            assertEquals(_actual,_expected);
          }
 catch (          AssertionError ae) {
            failArrayValuesAtIndexNotEqual(_actual,_expected,i,message);
          }
        }
        return;
      }
 else {
        failArrayLengthsNotEqual(actualArray.length,expectedLength,message);
      }
    }
 else     if (actual instanceof long[] && expected instanceof long[]) {
      long[] actualArray=(long[])actual;
      long[] expectedArray=(long[])expected;
      int expectedLength=expectedArray.length;
      if (expectedLength == actualArray.length) {
        for (int i=0; i < expectedLength; i++) {
          long _actual=actualArray[i];
          long _expected=expectedArray[i];
          try {
            assertEquals(_actual,_expected);
          }
 catch (          AssertionError ae) {
            failArrayValuesAtIndexNotEqual(_actual,_expected,i,message);
          }
        }
        return;
      }
 else {
        failArrayLengthsNotEqual(actualArray.length,expectedLength,message);
      }
    }
 else     if (actual instanceof double[] && expected instanceof double[]) {
      double[] actualArray=(double[])actual;
      double[] expectedArray=(double[])expected;
      int expectedLength=expectedArray.length;
      if (expectedLength == actualArray.length) {
        for (int i=0; i < expectedLength; i++) {
          double _actual=actualArray[i];
          double _expected=expectedArray[i];
          try {
            assertEquals(_actual,_expected);
          }
 catch (          AssertionError ae) {
            failArrayValuesAtIndexNotEqual(_actual,_expected,i,message);
          }
        }
        return;
      }
 else {
        failArrayLengthsNotEqual(actualArray.length,expectedLength,message);
      }
    }
 else     if (actual instanceof boolean[] && expected instanceof boolean[]) {
      boolean[] actualArray=(boolean[])actual;
      boolean[] expectedArray=(boolean[])expected;
      int expectedLength=expectedArray.length;
      if (expectedLength == actualArray.length) {
        for (int i=0; i < expectedLength; i++) {
          boolean _actual=actualArray[i];
          boolean _expected=expectedArray[i];
          try {
            assertEquals(_actual,_expected);
          }
 catch (          AssertionError ae) {
            failArrayValuesAtIndexNotEqual(_actual,_expected,i,message);
          }
        }
        return;
      }
 else {
        failArrayLengthsNotEqual(actualArray.length,expectedLength,message);
      }
    }
 else     if (actual instanceof byte[] && expected instanceof byte[]) {
      byte[] actualArray=(byte[])actual;
      byte[] expectedArray=(byte[])expected;
      int expectedLength=expectedArray.length;
      if (expectedLength == actualArray.length) {
        for (int i=0; i < expectedLength; i++) {
          byte _actual=actualArray[i];
          byte _expected=expectedArray[i];
          try {
            assertEquals(_actual,_expected);
          }
 catch (          AssertionError ae) {
            failArrayValuesAtIndexNotEqual(_actual,_expected,i,message);
          }
        }
        return;
      }
 else {
        failArrayLengthsNotEqual(actualArray.length,expectedLength,message);
      }
    }
 else     if (actual instanceof short[] && expected instanceof short[]) {
      short[] actualArray=(short[])actual;
      short[] expectedArray=(short[])expected;
      int expectedLength=expectedArray.length;
      if (expectedLength == actualArray.length) {
        for (int i=0; i < expectedLength; i++) {
          short _actual=actualArray[i];
          short _expected=expectedArray[i];
          try {
            assertEquals(_actual,_expected);
          }
 catch (          AssertionError ae) {
            failArrayValuesAtIndexNotEqual(_actual,_expected,i,message);
          }
        }
        return;
      }
 else {
        failArrayLengthsNotEqual(actualArray.length,expectedLength,message);
      }
    }
 else     if (actual instanceof char[] && expected instanceof char[]) {
      char[] actualArray=(char[])actual;
      char[] expectedArray=(char[])expected;
      int expectedLength=expectedArray.length;
      if (expectedLength == actualArray.length) {
        for (int i=0; i < expectedLength; i++) {
          char _actual=actualArray[i];
          char _expected=expectedArray[i];
          try {
            assertEquals(_actual,_expected);
          }
 catch (          AssertionError ae) {
            failArrayValuesAtIndexNotEqual(_actual,_expected,i,message);
          }
        }
        return;
      }
 else {
        failArrayLengthsNotEqual(actualArray.length,expectedLength,message);
      }
    }
  }
  failNotEquals(actual,expected,message);
}
