{
  Map<String,Integer> map=Collections.singletonMap("two",2);
  assertEquals(1,map.size());
  assertFalse(map.isEmpty());
  assertEquals(Integer.valueOf(2),map.get("two"));
  assertTrue(map.containsKey("two"));
  assertFalse(map.containsKey("three"));
  assertTrue(map.containsValue(2));
  assertFalse(map.containsValue(3));
  try {
    map.clear();
    fail();
  }
 catch (  UnsupportedOperationException e) {
  }
  try {
    map.put("three",3);
    fail();
  }
 catch (  UnsupportedOperationException e) {
  }
  try {
    HashMap<String,Integer> m=new HashMap<String,Integer>();
    map.putAll(m);
  }
 catch (  UnsupportedOperationException e) {
    fail();
  }
  try {
    HashMap<String,Integer> m=new HashMap<String,Integer>();
    m.put("three",3);
    map.putAll(m);
    fail();
  }
 catch (  UnsupportedOperationException e) {
  }
  try {
    map.remove("three");
  }
 catch (  UnsupportedOperationException e) {
    fail();
  }
  try {
    map.remove("two");
    fail();
  }
 catch (  UnsupportedOperationException e) {
  }
  HashMap<String,Integer> hashMap=new HashMap<String,Integer>();
  hashMap.put("two",2);
  assertEquals(hashMap,map);
  assertEquals(hashMap.hashCode(),map.hashCode());
  assertEquals(hashMap.keySet(),map.keySet());
  assertEquals(hashMap.entrySet(),map.entrySet());
  Collection<Integer> values=map.values();
  assertNotNull(values);
  assertEquals(1,values.size());
  assertEquals(Integer.valueOf(2),values.iterator().next());
  try {
    values.add(3);
    fail();
  }
 catch (  UnsupportedOperationException e) {
  }
  map=Collections.singletonMap(null,2);
  assertEquals(1,map.size());
  assertFalse(map.isEmpty());
  assertEquals(Integer.valueOf(2),map.get(null));
  assertTrue(map.containsKey(null));
  assertFalse(map.containsKey("three"));
  assertTrue(map.containsValue(2));
  assertFalse(map.containsValue(3));
  map=Collections.singletonMap("null",null);
  assertEquals(1,map.size());
  assertFalse(map.isEmpty());
  assertNull(map.get("null"));
  assertTrue(map.containsKey("null"));
  assertFalse(map.containsKey("three"));
  assertTrue(map.containsValue(null));
  assertFalse(map.containsValue(3));
  map=Collections.singletonMap(null,null);
  assertEquals(1,map.size());
  assertFalse(map.isEmpty());
  assertNull(map.get(null));
  assertTrue(map.containsKey(null));
  assertFalse(map.containsKey("three"));
  assertTrue(map.containsValue(null));
  assertFalse(map.containsValue(3));
  Map<Integer,String> map2=Collections.singletonMap(Integer.valueOf(2),null);
  HashMap<Integer,String> hashMap2=new HashMap<Integer,String>();
  assertFalse(map2.equals(hashMap2));
  hashMap2.put(Integer.valueOf(1),null);
  assertFalse(map2.equals(hashMap2));
  hashMap2.put(Integer.valueOf(2),null);
  assertFalse(map2.equals(hashMap2));
  hashMap2.remove(Integer.valueOf(1));
  assertTrue(map2.equals(hashMap2));
}
