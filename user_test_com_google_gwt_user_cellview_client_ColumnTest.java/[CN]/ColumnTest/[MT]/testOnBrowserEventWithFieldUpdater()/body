{
  final Element theElem=Document.get().createDivElement();
  final NativeEvent theEvent=Document.get().createClickEvent(0,0,0,0,0,false,false,false,false);
  final TextInputCell cell=new TextInputCell(){
    @Override public void onBrowserEvent(    Element parent,    String value,    Object key,    NativeEvent event,    ValueUpdater<String> valueUpdater){
      assertEquals(theElem,parent);
      assertEquals("test",value);
      assertEquals("oldViewData",getViewData("test"));
      assertEquals(theEvent,event);
      assertNotNull(valueUpdater);
      setViewData("test","newViewData");
      valueUpdater.update("newValue");
    }
  }
;
  final Column<String,String> column=new IdentityColumn<String>(cell);
  final MockFieldUpdater<String,String> fieldUpdater=new MockFieldUpdater<String,String>(){
    @Override public void update(    int index,    String object,    String value){
      assertEquals("newViewData",cell.getViewData("test"));
      super.update(index,object,value);
    }
  }
;
  column.setFieldUpdater(fieldUpdater);
  cell.setViewData("test","oldViewData");
  column.onBrowserEvent(theElem,3,"test",theEvent,null);
  fieldUpdater.assertUpdateCalled(true);
  fieldUpdater.assertIndex(3);
  fieldUpdater.assertObject("test");
  fieldUpdater.assertValue("newValue");
}
