{
  super(parent,style);
  if (OS.VERSION < 0x1030) {
    dispose();
    SWT.error(SWT.ERROR_NO_HANDLES);
  }
  int outControl[]=new int[1];
  try {
    WebKit.HIWebViewCreate(outControl);
  }
 catch (  UnsatisfiedLinkError e) {
    dispose();
    SWT.error(SWT.ERROR_NO_HANDLES);
  }
  webViewHandle=outControl[0];
  if (webViewHandle == 0) {
    dispose();
    SWT.error(SWT.ERROR_NO_HANDLES);
  }
  Display display=getDisplay();
  display.setData(ADD_WIDGET_KEY,new Object[]{new Integer(webViewHandle),this});
  setData(CLEAR_GRAB_BIT,null);
  if (display.getData(BROWSER_WINDOW) == null) {
    Rect bounds=new Rect();
    OS.SetRect(bounds,(short)0,(short)0,(short)1,(short)1);
    final int[] outWindow=new int[1];
    OS.CreateNewWindow(OS.kOverlayWindowClass,0,bounds,outWindow);
    OS.ShowWindow(outWindow[0]);
    display.disposeExec(new Runnable(){
      public void run(){
        if (outWindow[0] != 0) {
          OS.DisposeWindow(outWindow[0]);
        }
        outWindow[0]=0;
      }
    }
);
    display.setData(BROWSER_WINDOW,outWindow);
  }
  int window=OS.GetControlOwner(handle);
  if (OS.HIVIEW) {
    int[] contentView=new int[1];
    OS.HIViewFindByID(OS.HIViewGetRoot(window),OS.kHIViewWindowContentID(),contentView);
    OS.HIViewAddSubview(contentView[0],webViewHandle);
    OS.HIViewChangeFeatures(webViewHandle,OS.kHIViewFeatureIsOpaque,0);
  }
 else {
    OS.HIViewAddSubview(handle,webViewHandle);
  }
  OS.HIViewSetVisible(webViewHandle,true);
  if (getShell().isVisible()) {
    int[] showEvent=new int[1];
    OS.CreateEvent(0,OS.kEventClassWindow,OS.kEventWindowShown,0.0,OS.kEventAttributeUserEvent,showEvent);
    OS.SetEventParameter(showEvent[0],OS.kEventParamDirectObject,OS.typeWindowRef,4,new int[]{OS.GetControlOwner(handle)});
    OS.SendEventToEventTarget(showEvent[0],OS.GetWindowEventTarget(window));
    if (showEvent[0] != 0)     OS.ReleaseEvent(showEvent[0]);
  }
  final int webView=WebKit.HIWebViewGetWebView(webViewHandle);
  final int notificationCenter=WebKit.objc_msgSend(WebKit.C_NSNotificationCenter,WebKit.S_defaultCenter);
  Listener listener=new Listener(){
    public void handleEvent(    Event e){
switch (e.type) {
case SWT.Dispose:
{
          if (ignoreDispose) {
            ignoreDispose=false;
            break;
          }
          ignoreDispose=true;
          notifyListeners(e.type,e);
          e.type=SWT.NONE;
          Shell shell=getShell();
          shell.removeListener(SWT.Resize,this);
          shell.removeListener(SWT.Show,this);
          shell.removeListener(SWT.Hide,this);
          Control c=Browser.this;
          do {
            c.removeListener(SWT.Show,this);
            c.removeListener(SWT.Hide,this);
            c=c.getParent();
          }
 while (c != shell);
          e.display.setData(ADD_WIDGET_KEY,new Object[]{new Integer(webViewHandle),null});
          WebKit.objc_msgSend(webView,WebKit.S_setFrameLoadDelegate,0);
          WebKit.objc_msgSend(webView,WebKit.S_setResourceLoadDelegate,0);
          WebKit.objc_msgSend(webView,WebKit.S_setUIDelegate,0);
          WebKit.objc_msgSend(webView,WebKit.S_setPolicyDelegate,0);
          WebKit.objc_msgSend(notificationCenter,WebKit.S_removeObserver,delegate);
          WebKit.objc_msgSend(delegate,WebKit.S_release);
          if (OS.HIVIEW)           OS.DisposeControl(webViewHandle);
          html=null;
          break;
        }
case SWT.Hide:
{
        CGRect bounds=new CGRect();
        bounds.x=bounds.y=-MIN_SIZE;
        bounds.width=bounds.height=MIN_SIZE;
        OS.HIViewSetFrame(webViewHandle,bounds);
        break;
      }
case SWT.Show:
{
      Shell shell=getShell();
      Composite parent=Browser.this;
      while (parent != shell && (parent.getVisible() || parent == e.widget)) {
        parent=parent.getParent();
      }
      if (!(parent.getVisible() || parent == e.widget))       return;
      CGRect bounds=new CGRect();
      if (OS.HIVIEW) {
        OS.HIViewGetBounds(handle,bounds);
        int[] contentView=new int[1];
        OS.HIViewFindByID(OS.HIViewGetRoot(OS.GetControlOwner(handle)),OS.kHIViewWindowContentID(),contentView);
        OS.HIViewConvertRect(bounds,handle,contentView[0]);
      }
 else {
        OS.HIViewGetFrame(handle,bounds);
      }
      if (bounds.width <= MIN_SIZE)       bounds.width=MIN_SIZE;
      if (bounds.height <= MIN_SIZE)       bounds.height=MIN_SIZE;
      OS.HIViewSetFrame(webViewHandle,bounds);
      break;
    }
case SWT.Resize:
{
    if (!isVisible())     return;
    CGRect bounds=new CGRect();
    if (OS.HIVIEW) {
      OS.HIViewGetBounds(handle,bounds);
      int[] contentView=new int[1];
      OS.HIViewFindByID(OS.HIViewGetRoot(OS.GetControlOwner(handle)),OS.kHIViewWindowContentID(),contentView);
      OS.HIViewConvertRect(bounds,handle,contentView[0]);
    }
 else {
      OS.HIViewGetFrame(handle,bounds);
    }
    if (bounds.width <= MIN_SIZE)     bounds.width=MIN_SIZE;
    if (bounds.height <= MIN_SIZE)     bounds.height=MIN_SIZE;
    if (e.widget == getShell()) {
      bounds.x++;
      OS.HIViewSetFrame(webViewHandle,bounds);
      bounds.x--;
    }
    OS.HIViewSetFrame(webViewHandle,bounds);
    break;
  }
}
}
}
;
addListener(SWT.Dispose,listener);
addListener(SWT.Resize,listener);
Shell shell=getShell();
shell.addListener(SWT.Resize,listener);
shell.addListener(SWT.Show,listener);
shell.addListener(SWT.Hide,listener);
Control c=this;
do {
c.addListener(SWT.Show,listener);
c.addListener(SWT.Hide,listener);
c=c.getParent();
}
 while (c != shell);
if (Callback3 == null) Callback3=new Callback(this.getClass(),"eventProc3",3);
int callback3Address=Callback3.getAddress();
if (callback3Address == 0) SWT.error(SWT.ERROR_NO_MORE_CALLBACKS);
int[] mask=new int[]{OS.kEventClassKeyboard,OS.kEventRawKeyDown,OS.kEventClassControl,OS.kEventControlDraw,OS.kEventClassTextInput,OS.kEventTextInputUnicodeForKeyEvent};
int controlTarget=OS.GetControlEventTarget(webViewHandle);
OS.InstallEventHandler(controlTarget,callback3Address,mask.length / 2,mask,webViewHandle,null);
if (Callback7 == null) Callback7=new Callback(this.getClass(),"eventProc7",7);
int callback7Address=Callback7.getAddress();
if (callback7Address == 0) SWT.error(SWT.ERROR_NO_MORE_CALLBACKS);
delegate=WebKit.objc_msgSend(WebKit.C_WebKitDelegate,WebKit.S_alloc);
delegate=WebKit.objc_msgSend(delegate,WebKit.S_initWithProc,callback7Address,webViewHandle);
WebKit.objc_msgSend(webView,WebKit.S_setFrameLoadDelegate,delegate);
WebKit.objc_msgSend(webView,WebKit.S_setResourceLoadDelegate,delegate);
WebKit.objc_msgSend(webView,WebKit.S_setUIDelegate,delegate);
WebKit.objc_msgSend(notificationCenter,WebKit.S_addObserver_selector_name_object,delegate,WebKit.S_handleNotification,0,webView);
WebKit.objc_msgSend(webView,WebKit.S_setPolicyDelegate,delegate);
WebKit.objc_msgSend(webView,WebKit.S_setDownloadDelegate,delegate);
}
