{
  assert(logger != null);
  assert(serializers != null);
  assert(typeOracle != null);
  boolean failed=false;
  Map customSerializerMap=new HashMap();
  for (int i=0; i < serializers.length; ++i) {
    JClassType serializer=serializers[i];
    JMethod[] methods=serializer.getMethods();
    for (int j=0; j < methods.length; ++j) {
      JMethod method=methods[j];
      JType serializee;
      if ((serializee=isSerializeMethod(method)) != null) {
        CustomSerializerInfo csi=getCustomSerializerEntry(customSerializerMap,serializee);
        failed=csi.setSerializerClass(logger,serializer) ? failed : true;
        failed=csi.setSerializeMethod(logger,method) ? failed : true;
      }
 else       if ((serializee=isDeserializeMethod(method)) != null) {
        CustomSerializerInfo csi=getCustomSerializerEntry(customSerializerMap,serializee);
        failed=csi.setSerializerClass(logger,serializer) ? failed : true;
        failed=csi.setDeserializeMethod(logger,method) ? failed : true;
      }
 else       if ((serializee=isInstantiateMethod(method)) != null) {
        CustomSerializerInfo csi=getCustomSerializerEntry(customSerializerMap,serializee);
        failed=csi.setSerializerClass(logger,serializer) ? failed : true;
        failed=csi.setInstantiateMethod(logger,method) ? failed : true;
      }
 else {
        logger.branch(TreeLogger.SPAM,"Method '" + method.getReadableDeclaration() + "' is not a serialization related method",null);
      }
    }
  }
  if (failed) {
    return null;
  }
  return customSerializerMap;
}
