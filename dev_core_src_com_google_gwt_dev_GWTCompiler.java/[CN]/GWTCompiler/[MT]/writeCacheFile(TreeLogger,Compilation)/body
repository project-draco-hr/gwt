{
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  DocumentBuilder db;
  try {
    db=dbf.newDocumentBuilder();
  }
 catch (  ParserConfigurationException e) {
    logger.log(TreeLogger.ERROR,"Unable to construct cache entry XML",e);
    throw new UnableToCompleteException();
  }
  Document doc=db.newDocument();
  Element docElem=doc.createElement("cache-entry");
  doc.appendChild(docElem);
  String[] genTypeNames=compilation.getGeneratedTypeNames();
  for (int i=0; i < genTypeNames.length; i++) {
    String genTypeName=genTypeNames[i];
    String hash=compilation.getTypeHash(genTypeName);
    Element childElem=doc.createElement("generated-type-hash");
    docElem.appendChild(childElem);
    childElem.setAttribute("class",genTypeName);
    childElem.setAttribute("hash",hash);
  }
  String[] inputs=compilation.getRebindInputs();
  for (int i=0, n=inputs.length; i < n; ++i) {
    String in=inputs[i];
    String out=compilation.getRebindOutput(in);
    Element childElem=doc.createElement("rebind-decision");
    docElem.appendChild(childElem);
    childElem.setAttribute("in",in);
    childElem.setAttribute("out",out);
  }
  String strongName=compilation.getStrongName();
  File cacheFile=new File(outDir,strongName + EXT_CACHE_XML);
  byte[] bytes=Util.toXmlUtf8(doc);
  Util.writeBytesToFile(logger,cacheFile,bytes);
  String msg="Compilation metadata written to " + cacheFile.getAbsolutePath();
  logger.log(TreeLogger.TRACE,msg,null);
}
