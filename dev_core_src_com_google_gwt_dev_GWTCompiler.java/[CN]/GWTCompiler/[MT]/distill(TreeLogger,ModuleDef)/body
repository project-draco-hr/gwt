{
  this.module=moduleDef;
  this.compilationState=moduleDef.getCompilationState();
  checkModule(logger);
  generatorResourcesDir=new File(outDir,GWT_COMPILER_DIR + File.separator + moduleDef.getName()+ File.separator+ "generated");
  outDir=new File(outDir,module.getName());
  Util.recursiveDelete(outDir,true);
  Util.recursiveDelete(generatorResourcesDir,true);
  generatorResourcesDir.mkdirs();
  compilationState.compile(logger);
  rules=module.getRules();
  String[] declEntryPts;
  if (jjsOptions.isValidateOnly()) {
    logger.log(TreeLogger.INFO,"Validating compilation " + module.getName(),null);
    Set<CompilationUnit> compilationUnits=compilationState.getCompilationUnits();
    declEntryPts=new String[compilationUnits.size()];
    int i=0;
    for (    CompilationUnit unit : compilationUnits) {
      declEntryPts[i++]=unit.getTypeName();
    }
  }
 else {
    logger.log(TreeLogger.INFO,"Compiling module " + module.getName(),null);
    declEntryPts=module.getEntryPointTypeNames();
  }
  ArtifactSet generatorArtifacts=new ArtifactSet();
  DistillerRebindPermutationOracle rpo=new DistillerRebindPermutationOracle(generatorArtifacts,new PropertyPermutations(module.getProperties()));
  WebModeCompilerFrontEnd frontEnd=new WebModeCompilerFrontEnd(compilationState,rpo);
  JavaToJavaScriptCompiler jjs=new JavaToJavaScriptCompiler(logger,frontEnd,declEntryPts,jjsOptions);
  if (jjsOptions.isValidateOnly()) {
    logger.log(TreeLogger.INFO,"Validation succeeded",null);
    return;
  }
  StandardLinkerContext linkerContext=new StandardLinkerContext(logger,module,outDir,generatorResourcesDir,jjsOptions);
  compilePermutations(logger,jjs,rpo,linkerContext);
  logger.log(TreeLogger.INFO,"Compilation succeeded",null);
  linkerContext.addOrReplaceArtifacts(generatorArtifacts);
  linkerContext.link(logger,linkerContext,null);
}
